
rx5808-pro-diversity.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000d2  00800100  00006336  000063ca  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00006336  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001d7  008001d2  008001d2  0000649c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000649c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000064cc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000e40  00000000  00000000  00006510  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000200fa  00000000  00000000  00007350  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00006b39  00000000  00000000  0002744a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000a000  00000000  00000000  0002df83  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000032d4  00000000  00000000  00037f84  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00006b1b  00000000  00000000  0003b258  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00017071  00000000  00000000  00041d73  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000fc0  00000000  00000000  00058de4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 67 09 	jmp	0x12ce	; 0x12ce <__dtors_end>
       4:	0c 94 8f 09 	jmp	0x131e	; 0x131e <__bad_interrupt>
       8:	0c 94 8f 09 	jmp	0x131e	; 0x131e <__bad_interrupt>
       c:	0c 94 8f 09 	jmp	0x131e	; 0x131e <__bad_interrupt>
      10:	0c 94 8f 09 	jmp	0x131e	; 0x131e <__bad_interrupt>
      14:	0c 94 8f 09 	jmp	0x131e	; 0x131e <__bad_interrupt>
      18:	0c 94 8f 09 	jmp	0x131e	; 0x131e <__bad_interrupt>
      1c:	0c 94 8f 09 	jmp	0x131e	; 0x131e <__bad_interrupt>
      20:	0c 94 8f 09 	jmp	0x131e	; 0x131e <__bad_interrupt>
      24:	0c 94 8f 09 	jmp	0x131e	; 0x131e <__bad_interrupt>
      28:	0c 94 8f 09 	jmp	0x131e	; 0x131e <__bad_interrupt>
      2c:	0c 94 8f 09 	jmp	0x131e	; 0x131e <__bad_interrupt>
      30:	0c 94 8f 09 	jmp	0x131e	; 0x131e <__bad_interrupt>
      34:	0c 94 8f 09 	jmp	0x131e	; 0x131e <__bad_interrupt>
      38:	0c 94 8f 09 	jmp	0x131e	; 0x131e <__bad_interrupt>
      3c:	0c 94 8f 09 	jmp	0x131e	; 0x131e <__bad_interrupt>
      40:	0c 94 27 18 	jmp	0x304e	; 0x304e <__vector_16>
      44:	0c 94 8f 09 	jmp	0x131e	; 0x131e <__bad_interrupt>
      48:	0c 94 8f 09 	jmp	0x131e	; 0x131e <__bad_interrupt>
      4c:	0c 94 8f 09 	jmp	0x131e	; 0x131e <__bad_interrupt>
      50:	0c 94 8f 09 	jmp	0x131e	; 0x131e <__bad_interrupt>
      54:	0c 94 8f 09 	jmp	0x131e	; 0x131e <__bad_interrupt>
      58:	0c 94 8f 09 	jmp	0x131e	; 0x131e <__bad_interrupt>
      5c:	0c 94 8f 09 	jmp	0x131e	; 0x131e <__bad_interrupt>
      60:	0c 94 6d 2e 	jmp	0x5cda	; 0x5cda <__vector_24>
      64:	0c 94 8f 09 	jmp	0x131e	; 0x131e <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	1f 1c       	adc	r1, r15
      6a:	18 14       	cp	r1, r8
      6c:	11 0d       	add	r17, r1
      6e:	0a 06       	cpc	r0, r26
      70:	08 0b       	sbc	r16, r24
      72:	0f 12       	cpse	r0, r31
      74:	16 19       	sub	r17, r6
      76:	1d 20       	and	r1, r13
      78:	05 03       	mulsu	r16, r21
      7a:	02 00       	.word	0x0002	; ????
      7c:	23 24       	eor	r2, r3
      7e:	26 27       	eor	r18, r22
      80:	09 0c       	add	r0, r9
      82:	10 13       	cpse	r17, r16
      84:	17 1a       	sub	r1, r23
      86:	1e 21       	and	r17, r14
      88:	01 04       	cpc	r0, r1
      8a:	07 0e       	add	r0, r23
      8c:	15 1b       	sub	r17, r21
      8e:	22 25       	eor	r18, r2

00000090 <_ZL23channelFreqOrderedIndex>:
      90:	13 20 12 11 21 10 07 22 08 18 06 09 19 05 23 0a     . ..!.."......#.
      a0:	1a 04 0b 1b 03 24 0c 1c 02 0d 1d 25 01 0e 1e 00     .....$.....%....
      b0:	0f 1f 26 14 15 27 16 17                             ..&..'..

000000b8 <_ZL12channelNames>:
      b8:	00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f     ................
      c8:	20 21 22 23 24 25 26 27 28 29 2a 2b 2c 2d 2e 2f      !"#$%&'()*+,-./
      d8:	88 89 8a 8b 8c 8d 8e 8f                             ........

000000e0 <_ZL16channelFreqTable>:
      e0:	e9 16 d5 16 c1 16 ad 16 99 16 85 16 71 16 5d 16     ............q.].
      f0:	65 16 78 16 8b 16 9e 16 b1 16 c4 16 d7 16 ea 16     e.x.............
     100:	49 16 35 16 21 16 0d 16 fd 16 11 17 25 17 39 17     I.5.!.......%.9.
     110:	6c 16 80 16 94 16 a8 16 bc 16 d0 16 e4 16 f8 16     l...............
     120:	1a 16 3f 16 64 16 89 16 ae 16 d3 16 f8 16 1d 17     ..?.d...........

00000130 <_ZL12channelTable>:
     130:	05 2a 9b 29 91 29 87 29 1d 29 13 29 09 29 9f 28     .*.).).).).).).(
     140:	03 29 0c 29 16 29 1f 29 89 29 92 29 9c 29 05 2a     .).).).).).).).*
     150:	95 28 8b 28 81 28 17 28 0f 2a 19 2a 83 2a 8d 2a     .(.(.(.(.*.*.*.*
     160:	06 29 10 29 1a 29 84 29 8e 29 98 29 02 2a 0c 2a     .).).).).).).*.*
     170:	1d 28 90 28 02 29 15 29 87 29 9a 29 0c 2a 1f 2a     .(.(.).).).).*.*

00000180 <_ZL14EepromDefaults>:
     180:	09 00 00 00 00 01 00 00 5a 00 dc 00                 ........Z...

0000018c <_ZZN12StateMachine16MenuStateHandler7onEnterEvE3__c_1>:
     18c:	53 65 74 74 69 6e 67 73 00                          Settings.

00000195 <_ZZN12StateMachine16MenuStateHandler7onEnterEvE3__c_0>:
     195:	42 61 6e 64 20 53 63 61 6e 00                       Band Scan.

0000019f <_ZZN12StateMachine16MenuStateHandler7onEnterEvE3__c>:
     19f:	53 65 61 72 63 68 00                                Search.

000001a6 <_ZL12settingsIcon>:
	...
     1ae:	00 0f f0 00 00 0f f0 00 00 0f f0 00 00 0f f0 00     ................
     1be:	07 1f f8 e0 07 ff ff e0 0f ff ff f0 0f ff ff f0     ................
     1ce:	1f ff ff f8 1f ff ff f8 1f fc 3f f8 1f f8 1f f8     ..........?.....
     1de:	07 f0 0f e0 03 f0 0f c0 03 f0 0f c0 07 f0 0f e0     ................
     1ee:	1f f8 1f f8 1f fc 3f f8 1f ff ff f8 1f ff ff f8     ......?.........
     1fe:	0f ff ff f0 0f ff ff f0 07 ff ff e0 07 1f f8 e0     ................
     20e:	00 0f f0 00 00 0f f0 00 00 0f f0 00 00 0f f0 00     ................
	...

00000226 <_ZL12bandScanIcon>:
	...
     236:	00 3f fc 00 03 ff ff c0 07 ff ff e0 3f ff ff fc     .?..........?...
     246:	7f fe 7f fe ff fe 7f ff ff fe 7f ff 7f ff ff fe     ................
     256:	7f ff ff fe 1f fe 7f f8 1f fe 7f f8 0f fe 7f f0     ................
     266:	07 fe 7f e0 03 fe 7f c0 01 fe 7f 80 01 fe 7f 80     ................
     276:	00 fe 7f 00 00 7f fe 00 00 3f fc 00 00 1f f8 00     .........?......
     286:	00 1f f8 00 00 07 e0 00 00 07 e0 00 00 03 c0 00     ................
     296:	00 01 80 00 00 00 00 00 00 00 00 00 00 00 00 00     ................

000002a6 <_ZL10searchIcon>:
	...
     2b6:	00 ff 80 00 01 ff e0 00 03 ff f0 00 07 e3 f0 00     ................
     2c6:	0f 80 f8 00 0f 00 78 00 0f 00 3c 00 0e 00 3c 00     ......x...<...<.
     2d6:	0e 00 3c 00 0e 00 3c 00 0f 00 3c 00 0f 00 78 00     ..<...<...<...x.
     2e6:	0f 80 f8 00 07 c1 f8 00 07 ff f8 00 03 ff fc 00     ................
     2f6:	00 ff fe 00 00 3f 1f 00 00 00 0f 80 00 00 07 c0     .....?..........
     306:	00 00 03 e0 00 00 01 f0 00 00 00 e0 00 00 00 40     ...............@
	...

00000326 <_ZL4logo>:
	...
     37e:	fc 00 00 00 00 3f 00 00 00 00 00 00 00 00 00 00     .....?..........
     38e:	fc 00 00 00 00 3f 00 00 00 00 00 00 00 00 00 00     .....?..........
     39e:	fc 00 00 00 00 3f 00 00 00 00 00 00 00 00 00 00     .....?..........
     3ae:	fc 00 00 00 00 3f 00 00 00 00 00 00 00 00 00 00     .....?..........
     3be:	fc 00 00 00 00 3f 00 00 00 00 00 00 00 00 00 00     .....?..........
     3ce:	78 00 00 00 00 1e 00 00 00 00 00 00 00 00 00 00     x...............
     3de:	78 00 00 00 00 1e 00 00 00 00 00 00 00 00 00 00     x...............
     3ee:	78 00 00 00 00 1e 00 00 00 00 00 00 00 00 00 00     x...............
     3fe:	78 00 00 00 00 1e 00 00 00 00 00 00 00 00 00 00     x...............
     40e:	78 00 00 00 00 1e 00 00 00 00 00 00 00 00 00 00     x...............
     41e:	78 00 00 00 00 1e 00 00 00 00 00 00 00 00 00 00     x...............
     42e:	78 00 00 00 00 1e 00 00 ff ff fb f8 0f df ff ff     x...............
     43e:	7f ff fb ff ff df ff ff ff ff fb fc 1f df ff ff     ................
     44e:	7f ff fb ff ff df ff ff ff ff f9 fc 1f df ff ff     ................
     45e:	7f ff fb ff ff df ff ff ff ff f9 fe 3f 9f ff ff     ............?...
     46e:	7f ff fb ff ff df ff ff ff ff f8 fe 3f 9f ff ff     ............?...
     47e:	7f ff fb ff ff df ff ff ff ff f8 ff 7f 1f ff ff     ................
     48e:	7f ff fb ff ff df ff ff fc 03 f8 7f 7f 1f 80 00     ................
     49e:	7f 01 fb f0 0f df c0 3f fc 03 f8 7f fe 1f 80 00     .......?........
     4ae:	7f 01 fb f0 0f df c0 3f fc 03 f8 3f fe 1f 80 00     .......?...?....
     4be:	7f 01 fb f0 0f df c0 3f fc 03 f8 3f fc 1f 80 00     .......?...?....
     4ce:	7f 01 fb f0 0f df c0 3f fc 03 f8 1f fc 1f 80 00     .......?........
     4de:	7f 01 fb f0 0f df c0 3f fc 03 f8 1f f8 1f 80 00     .......?........
     4ee:	7f 01 fb f0 0f df c0 3f ff ff f8 0f f8 1f ff ff     .......?........
     4fe:	7f ff fb f0 0f df ff ff ff ff f8 0f f0 1f ff ff     ................
     50e:	7f ff fb f0 0f df ff ff ff ff f8 07 f0 1f ff ff     ................
     51e:	7f ff fb f0 0f df ff ff ff ff f8 07 f0 1f ff ff     ................
     52e:	7f ff fb f0 0f df ff ff ff ff f8 0f f0 1f ff ff     ................
     53e:	7f ff fb f0 0f df ff ff ff ff f8 0f f8 1f ff ff     ................
     54e:	7f ff fb f0 0f df ff ff fd fe 00 1f f8 00 00 3f     ...............?
     55e:	7f 01 fb f0 0f df c0 3f fc fe 00 1f fc 00 00 3f     .......?.......?
     56e:	7f 01 fb f0 0f df c0 3f fc 7f 00 3f fc 00 00 3f     .......?...?...?
     57e:	7f 01 fb f0 0f df c0 3f fc 7f 00 3f fe 00 00 3f     .......?...?...?
     58e:	7f 01 fb f0 0f df c0 3f fc 3f 80 7e 7e 00 00 3f     .......?.?.~~..?
     59e:	7f 01 fb f0 0f df c0 3f fc 3f c0 7e 7e 00 00 3f     .......?.?.~~..?
     5ae:	7f 01 fb f0 0f df c0 3f fc 1f c0 fe 7f 1f ff ff     .......?........
     5be:	7f ff fb ff ff df ff ff fc 0f e0 fe 7f 1f ff ff     ................
     5ce:	7f ff fb ff ff df ff ff fc 0f e1 fc 3f 9f ff ff     ............?...
     5de:	7f ff fb ff ff df ff ff fc 07 f1 fc 3f 9f ff ff     ............?...
     5ee:	7f ff fb ff ff df ff ff fc 07 f3 f8 1f df ff ff     ................
     5fe:	7f ff fb ff ff df ff ff fc 03 fb f8 1f df ff ff     ................
     60e:	7f ff fb ff ff df ff ff 00 00 00 00 00 00 00 00     ................
	...

00000726 <_ZL13freqOrderIcon>:
     726:	00 00 19 80 19 80 19 80 1f b8 1f 88 19 90 19 a0     ................
     736:	19 b8 00 00 10 08 30 0c 7e 7e 30 0c 10 08 00 00     ......0.~~0.....

00000746 <_ZL16channelOrderIcon>:
     746:	00 00 00 00 33 9c 4a 52 7b 9c 4a 52 4b 92 00 00     ....3.JR{.JRK...
     756:	00 00 00 00 10 08 30 0c 7e 7e 30 0c 10 08 00 00     ......0.~~0.....

00000766 <_ZL10manualIcon>:
     766:	00 00 60 c0 71 c0 7b c0 7f d8 7f c4 6e c2 64 c2     ..`.q.{.....n.d.
     776:	60 c0 60 c0 60 c0 08 0c 08 12 04 1e 03 12 00 00     `.`.`...........

00000786 <_ZL8autoIcon>:
     786:	00 00 1e 00 3f 00 73 80 61 98 7f 84 7f 82 61 82     ....?.s.a.....a.
     796:	61 80 61 80 61 a2 08 36 08 2a 04 22 03 22 00 00     a.a.a..6.*."."..

000007a6 <_ZZN12StateMachine20SettingsStateHandler13onInitialDrawEvE3__c>:
     7a6:	50 72 65 73 73 20 6d 6f 64 65 20 66 6f 72 0a 52     Press mode for.R
     7b6:	53 53 49 20 63 61 6c 69 62 72 61 74 69 6f 6e 00     SSI calibration.

000007c6 <_ZZN12StateMachine24SettingsRssiStateHandler12onUpdateDrawEvE3__c_9>:
     7c6:	50 72 65 73 73 20 4d 4f 44 45 20 74 6f 20 73 61     Press MODE to sa
     7d6:	76 65 2e 00                                         ve..

000007da <_ZZN12StateMachine24SettingsRssiStateHandler12onUpdateDrawEvE3__c_8>:
     7da:	4d 61 78 3a 20 00                                   Max: .

000007e0 <_ZZN12StateMachine24SettingsRssiStateHandler12onUpdateDrawEvE3__c_7>:
     7e0:	4d 69 6e 3a 20 00                                   Min: .

000007e6 <_ZZN12StateMachine24SettingsRssiStateHandler12onUpdateDrawEvE3__c_6>:
     7e6:	41 6c 6c 20 64 6f 6e 65 21 00                       All done!.

000007f0 <_ZZN12StateMachine24SettingsRssiStateHandler12onUpdateDrawEvE3__c_5>:
     7f0:	34 2f 34 0a 53 63 61 6e 6e 69 6e 67 20 66 6f 72     4/4.Scanning for
     800:	20 68 69 67 68 65 73 74 0a 52 53 53 49 2e 2e 2e      highest.RSSI...
	...

00000811 <_ZZN12StateMachine24SettingsRssiStateHandler12onUpdateDrawEvE3__c_4>:
     811:	50 72 65 73 73 20 4d 4f 44 45 20 77 68 65 6e 20     Press MODE when 
     821:	72 65 61 64 79 2e 00                                ready..

00000828 <_ZZN12StateMachine24SettingsRssiStateHandler12onUpdateDrawEvE3__c_3>:
     828:	33 2f 34 0a 54 75 72 6e 20 6f 6e 20 79 6f 75 72     3/4.Turn on your
     838:	20 56 54 58 2e 00                                    VTX..

0000083e <_ZZN12StateMachine24SettingsRssiStateHandler12onUpdateDrawEvE3__c_2>:
     83e:	32 2f 34 0a 53 63 61 6e 6e 69 6e 67 20 66 6f 72     2/4.Scanning for
     84e:	20 6c 6f 77 65 73 74 0a 52 53 53 49 2e 2e 2e 00      lowest.RSSI....

0000085e <_ZZN12StateMachine24SettingsRssiStateHandler12onUpdateDrawEvE3__c_1>:
     85e:	50 72 65 73 73 20 4d 4f 44 45 20 77 68 65 6e 20     Press MODE when 
     86e:	72 65 61 64 79 2e 00                                ready..

00000875 <_ZZN12StateMachine24SettingsRssiStateHandler12onUpdateDrawEvE3__c_0>:
     875:	52 65 6d 6f 76 65 20 52 58 20 61 6e 74 65 6e 6e     Remove RX antenn
     885:	61 73 2e 00                                         as..

00000889 <_ZZN12StateMachine24SettingsRssiStateHandler12onUpdateDrawEvE3__c>:
     889:	31 2f 34 0a 54 75 72 6e 20 6f 66 66 20 61 6c 6c     1/4.Turn off all
     899:	20 56 54 58 73 2e 00                                 VTXs..

000008a0 <digital_pin_to_timer_PGM>:
     8a0:	00 00 00 08 00 02 01 00 00 03 04 07 00 00 00 00     ................
     8b0:	00 00 00 00                                         ....

000008b4 <digital_pin_to_bit_mask_PGM>:
     8b4:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     8c4:	04 08 10 20                                         ... 

000008c8 <digital_pin_to_port_PGM>:
     8c8:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     8d8:	03 03 03 03                                         ....

000008dc <port_to_input_PGM>:
     8dc:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000008e6 <port_to_output_PGM>:
     8e6:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000008f0 <port_to_mode_PGM>:
     8f0:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

000008fa <_ZL4font>:
     8fa:	00 00 00 00 00 3e 5b 4f 5b 3e 3e 6b 4f 6b 3e 1c     .....>[O[>>kOk>.
     90a:	3e 7c 3e 1c 18 3c 7e 3c 18 1c 57 7d 57 1c 1c 5e     >|>..<~<..W}W..^
     91a:	7f 5e 1c 00 18 3c 18 00 ff e7 c3 e7 ff 00 18 24     .^...<.........$
     92a:	18 00 ff e7 db e7 ff 30 48 3a 06 0e 26 29 79 29     .......0H:..&)y)
     93a:	26 40 7f 05 05 07 40 7f 05 25 3f 5a 3c e7 3c 5a     &@....@..%?Z<.<Z
     94a:	7f 3e 1c 1c 08 08 1c 1c 3e 7f 14 22 7f 22 14 5f     .>......>.."."._
     95a:	5f 00 5f 5f 06 09 7f 01 7f 00 66 89 95 6a 60 60     _.__......f..j``
     96a:	60 60 60 94 a2 ff a2 94 08 04 7e 04 08 10 20 7e     ```.......~... ~
     97a:	20 10 08 08 2a 1c 08 08 1c 2a 08 08 1e 10 10 10      ...*....*......
     98a:	10 0c 1e 0c 1e 0c 30 38 3e 38 30 06 0e 3e 0e 06     ......08>80..>..
     99a:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
     9aa:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
     9ba:	56 20 50 00 08 07 03 00 00 1c 22 41 00 00 41 22     V P......."A..A"
     9ca:	1c 00 2a 1c 7f 1c 2a 08 08 3e 08 08 00 80 70 30     ..*...*..>....p0
     9da:	00 08 08 08 08 08 00 00 60 60 00 20 10 08 04 02     ........``. ....
     9ea:	3e 51 49 45 3e 00 42 7f 40 00 72 49 49 49 46 21     >QIE>.B.@.rIIIF!
     9fa:	41 49 4d 33 18 14 12 7f 10 27 45 45 45 39 3c 4a     AIM3.....'EEE9<J
     a0a:	49 49 31 41 21 11 09 07 36 49 49 49 36 46 49 49     II1A!...6III6FII
     a1a:	29 1e 00 00 14 00 00 00 40 34 00 00 00 08 14 22     ).......@4....."
     a2a:	41 14 14 14 14 14 00 41 22 14 08 02 01 59 09 06     A......A"....Y..
     a3a:	3e 41 5d 59 4e 7c 12 11 12 7c 7f 49 49 49 36 3e     >A]YN|...|.III6>
     a4a:	41 41 41 22 7f 41 41 41 3e 7f 49 49 49 41 7f 09     AAA".AAA>.IIIA..
     a5a:	09 09 01 3e 41 41 51 73 7f 08 08 08 7f 00 41 7f     ...>AAQs......A.
     a6a:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
     a7a:	40 7f 02 1c 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
     a8a:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 26     .....>AQ!^...)F&
     a9a:	49 49 49 32 03 01 7f 01 03 3f 40 40 40 3f 1f 20     III2.....?@@@?. 
     aaa:	40 20 1f 3f 40 38 40 3f 63 14 08 14 63 03 04 78     @ .?@8@?c...c..x
     aba:	04 03 61 59 49 4d 43 00 7f 41 41 41 02 04 08 10     ..aYIMC..AAA....
     aca:	20 00 41 41 41 7f 04 02 01 02 04 40 40 40 40 40      .AAA......@@@@@
     ada:	00 03 07 08 00 20 54 54 78 40 7f 28 44 44 38 38     ..... TTx@.(DD88
     aea:	44 44 44 28 38 44 44 28 7f 38 54 54 54 18 00 08     DDD(8DD(.8TTT...
     afa:	7e 09 02 18 a4 a4 9c 78 7f 08 04 04 78 00 44 7d     ~......x....x.D}
     b0a:	40 00 20 40 40 3d 00 7f 10 28 44 00 00 41 7f 40     @. @@=...(D..A.@
     b1a:	00 7c 04 78 04 78 7c 08 04 04 78 38 44 44 44 38     .|.x.x|...x8DDD8
     b2a:	fc 18 24 24 18 18 24 24 18 fc 7c 08 04 04 08 48     ..$$..$$..|....H
     b3a:	54 54 54 24 04 04 3f 44 24 3c 40 40 20 7c 1c 20     TTT$..?D$<@@ |. 
     b4a:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 4c 90 90     @ .<@0@<D(.(DL..
     b5a:	90 7c 44 64 54 4c 44 00 08 36 41 00 00 00 77 00     .|DdTLD..6A...w.
     b6a:	00 00 41 36 08 00 02 01 02 04 02 3c 26 23 26 3c     ..A6.......<&#&<
     b7a:	1e a1 a1 61 12 3a 40 40 20 7a 38 54 54 55 59 21     ...a.:@@ z8TTUY!
     b8a:	55 55 79 41 22 54 54 78 42 21 55 54 78 40 20 54     UUyA"TTxB!UTx@ T
     b9a:	55 79 40 0c 1e 52 72 12 39 55 55 55 59 39 54 54     Uy@..Rr.9UUUY9TT
     baa:	54 59 39 55 54 54 58 00 00 45 7c 41 00 02 45 7d     TY9UTTX..E|A..E}
     bba:	42 00 01 45 7c 40 7d 12 11 12 7d f0 28 25 28 f0     B..E|@}...}.(%(.
     bca:	7c 54 55 45 00 20 54 54 7c 54 7c 0a 09 7f 49 32     |TUE. TT|T|...I2
     bda:	49 49 49 32 3a 44 44 44 3a 32 4a 48 48 30 3a 41     III2:DDD:2JHH0:A
     bea:	41 21 7a 3a 42 40 20 78 00 9d a0 a0 7d 3d 42 42     A!z:B@ x....}=BB
     bfa:	42 3d 3d 40 40 40 3d 3c 24 ff 24 24 48 7e 49 43     B==@@@=<$.$$H~IC
     c0a:	66 2b 2f fc 2f 2b ff 09 29 f6 20 c0 88 7e 09 03     f+/./+..). ..~..
     c1a:	20 54 54 79 41 00 00 44 7d 41 30 48 48 4a 32 38      TTyA..D}A0HHJ28
     c2a:	40 40 22 7a 00 7a 0a 0a 72 7d 0d 19 31 7d 26 29     @@"z.z..r}..1}&)
     c3a:	29 2f 28 26 29 29 29 26 30 48 4d 40 20 38 08 08     )/(&)))&0HM@ 8..
     c4a:	08 08 08 08 08 08 38 2f 10 c8 ac ba 2f 10 28 34     ......8/..../.(4
     c5a:	fa 00 00 7b 00 00 08 14 2a 14 22 22 14 2a 14 08     ...{....*."".*..
     c6a:	55 00 55 00 55 aa 55 aa 55 aa ff 55 ff 55 ff 00     U.U.U.U.U..U.U..
     c7a:	00 00 ff 00 10 10 10 ff 00 14 14 14 ff 00 10 10     ................
     c8a:	ff 00 ff 10 10 f0 10 f0 14 14 14 fc 00 14 14 f7     ................
     c9a:	00 ff 00 00 ff 00 ff 14 14 f4 04 fc 14 14 17 10     ................
     caa:	1f 10 10 1f 10 1f 14 14 14 1f 00 10 10 10 f0 00     ................
     cba:	00 00 00 1f 10 10 10 10 1f 10 10 10 10 f0 10 00     ................
     cca:	00 00 ff 10 10 10 10 10 10 10 10 10 ff 10 00 00     ................
     cda:	00 ff 14 00 00 ff 00 ff 00 00 1f 10 17 00 00 fc     ................
     cea:	04 f4 14 14 17 10 17 14 14 f4 04 f4 00 00 ff 00     ................
     cfa:	f7 14 14 14 14 14 14 14 f7 00 f7 14 14 14 17 14     ................
     d0a:	10 10 1f 10 1f 14 14 14 f4 14 10 10 f0 10 f0 00     ................
     d1a:	00 1f 10 1f 00 00 00 1f 14 00 00 00 fc 14 00 00     ................
     d2a:	f0 10 f0 10 10 ff 10 ff 14 14 14 ff 14 10 10 10     ................
     d3a:	1f 00 00 00 00 f0 10 ff ff ff ff ff f0 f0 f0 f0     ................
     d4a:	f0 ff ff ff 00 00 00 00 00 ff ff 0f 0f 0f 0f 0f     ................
     d5a:	38 44 44 38 44 fc 4a 4a 4a 34 7e 02 02 06 06 02     8DD8D.JJJ4~.....
     d6a:	7e 02 7e 02 63 55 49 41 63 38 44 44 3c 04 40 7e     ~.~.cUIAc8DD<.@~
     d7a:	20 1e 20 06 02 7e 02 02 99 a5 e7 a5 99 1c 2a 49      . ..~........*I
     d8a:	2a 1c 4c 72 01 72 4c 30 4a 4d 4d 30 30 48 78 48     *.Lr.rL0JMM00HxH
     d9a:	30 bc 62 5a 46 3d 3e 49 49 49 00 7e 01 01 01 7e     0.bZF=>III.~...~
     daa:	2a 2a 2a 2a 2a 44 44 5f 44 44 40 51 4a 44 40 40     *****DD_DD@QJD@@
     dba:	44 4a 51 40 00 00 ff 01 03 e0 80 ff 00 00 08 08     DJQ@............
     dca:	6b 6b 08 36 12 36 24 36 06 0f 09 0f 06 00 00 18     kk.6.6$6........
     dda:	18 00 00 00 10 10 00 30 40 ff 01 01 00 1f 01 01     .......0@.......
     dea:	1e 00 19 1d 17 12 00 3c 3c 3c 3c 00 00 00 00 00     .......<<<<.....

00000dfa <_ZZN16Adafruit_SSD13067displayEvE6dlist1>:
     dfa:	22 00 ff 21 00                                      "..!.

00000dff <_ZZN16Adafruit_SSD130621drawFastVLineInternalEiiijE8postmask>:
     dff:	00 01 03 07 0f 1f 3f 7f                             ......?.

00000e07 <_ZZN16Adafruit_SSD130621drawFastVLineInternalEiiijE7premask>:
     e07:	00 80 c0 e0 f0 f8 fc fe                             ........

00000e0f <_ZZN16Adafruit_SSD13065beginEhhbbE5init5>:
     e0f:	db 40 a4 a6 2e af                                   .@....

00000e15 <_ZZN16Adafruit_SSD13065beginEhhbbE5init3>:
     e15:	20 00 a1 c8                                          ...

00000e19 <_ZZN16Adafruit_SSD13065beginEhhbbE5init2>:
     e19:	d3 00 40 8d                                         ..@.

00000e1d <_ZZN16Adafruit_SSD13065beginEhhbbE5init1>:
     e1d:	ae d5 80 a8                                         ....

00000e21 <_ZL12splash2_data>:
     e21:	00 00 60 00 00 00 00 00 00 00 00 00 00 00 00 00     ..`.............
     e31:	00 e0 00 00 00 00 00 00 00 00 00 00 00 00 00 01     ................
     e41:	e0 00 00 00 00 00 00 00 00 00 00 00 00 00 01 f0     ................
	...
     e5d:	00 03 f0 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     e6d:	07 f0 00 00 00 00 00 00 00 00 00 00 00 00 00 07     ................
     e7d:	f8 00 00 00 00 00 00 00 00 00 00 00 00 00 0f f8     ................
     e8d:	00 00 00 03 c0 00 7e 00 00 01 e0 00 7f 0f f8 00     ......~.........
     e9d:	00 00 03 c0 00 fe 00 00 01 e0 00 ff ef f8 00 00     ................
     ead:	00 03 c0 00 fe 00 00 01 e0 00 ff ff f8 00 00 00     ................
     ebd:	03 c0 00 f0 00 00 00 0f 00 7f fe 7f c0 00 00 03     ................
     ecd:	c0 00 f0 00 00 00 0f 00 3f fe 7f f8 3f f1 fb cf     ........?...?...
     edd:	fc fe f3 bc 3d ef e0 1f fe 7f ff 7f fb ff df fe     ....=...........
     eed:	fe ff bc 3d ef e0 1f c6 ff ff 7f fb ff df fe fe     ...=............
     efd:	ff bc 3d ef e0 0f e3 c7 fe 78 7b c3 de 1e f0 ff     ..=......x{.....
     f0d:	bc 3d ef 00 07 ff 87 fc 78 7b c3 de 1e f0 f8 3c     .=......x{.....<
     f1d:	3d ef 00 01 ff ff f0 00 7b c3 c0 1e f0 f0 3c 3d     =.......{.....<=
     f2d:	ef 00 01 f3 7f e0 3f fb c3 cf fe f0 f0 3c 3d ef     ......?......<=.
     f3d:	00 03 e3 3f 80 7f fb c3 df fe f0 f0 3c 3d ef 00     ...?........<=..
     f4d:	07 e7 3c 00 78 7b c3 de 1e f0 f0 3c 3d ef 00 07     ..<.x{.....<=...
     f5d:	ff be 00 78 7b c3 de 1e f0 f0 3c 3d ef 00 07 ff     ...x{.....<=....
     f6d:	fe 00 78 7b c3 de 1e f0 f0 3c 3d ef 00 0f ff fe     ..x{.....<=.....
     f7d:	00 7f fb ff df fe f0 f0 3f fd ef e0 0f ff ff 00     ........?.......
     f8d:	7f fb ff df fe f0 f0 3f fd ef e0 0f f9 ff 00 3e     .......?.......>
     f9d:	79 f9 cf 9e f0 f0 1f 3d e7 e0 1f f1 ff 00 00 00     y......=........
	...
     fb5:	00 1f 80 ff 00 7f ff ff ff ff ff ff ff ff ff e0     ................
     fc5:	1c 00 7f 00 7f ff ff ff fe b4 6d 88 8d 18 e0 00     ..........m.....
     fd5:	00 1f 00 7f ff ff ff fe 95 ad 7d b5 77 e0 00 00     ..........}.w...
     fe5:	0f 00 7f ff ff ff fe a5 ad 9d 8d 19 e0 00 00 06     ................
     ff5:	00 7f ff ff ff fe b5 ad ed b5 7e e0                 ..........~.

00001001 <_ZL12splash1_data>:
    1001:	00 00 00 00 00 01 80 00 00 00 00 00 00 00 00 00     ................
    1011:	03 80 00 00 00 00 00 00 00 00 00 07 c0 00 00 00     ................
    1021:	00 00 00 00 00 00 07 c0 00 00 00 00 00 00 00 00     ................
    1031:	00 0f c0 00 00 00 00 00 00 00 00 00 1f e0 00 00     ................
    1041:	00 00 00 00 00 00 00 1f e0 00 00 00 00 00 00 00     ................
    1051:	00 00 3f e0 00 00 00 00 00 00 00 00 00 3f f0 00     ..?..........?..
	...
    1069:	7f f0 00 00 00 00 00 00 00 1f f8 7f f0 00 00 00     ................
    1079:	00 00 00 00 3f fe 7f f0 00 00 00 00 00 00 00 3f     ....?..........?
    1089:	ff 7f f0 00 00 00 00 00 00 00 1f ff fb e0 00 00     ................
    1099:	00 00 00 00 00 0f ff f9 ff c0 00 00 00 00 00 00     ................
    10a9:	0f ff f9 ff f8 00 00 00 00 00 00 07 ff f1 ff ff     ................
    10b9:	00 00 00 00 00 00 03 fc 73 ff ff 80 00 00 00 00     ........s.......
    10c9:	00 01 fe 3f ff ff 80 00 00 00 00 00 00 ff 1e 0f     ...?............
    10d9:	ff 00 00 00 00 00 00 00 7f fe 1f fc 00 00 00 00     ................
    10e9:	00 00 00 3f ff ff f8 00 00 00 00 00 00 00 0f df     ...?............
    10f9:	ff e0 00 00 00 00 00 00 00 1f 19 ff c0 00 00 00     ................
    1109:	00 00 00 00 3f 3c ff 00 00 00 00 00 00 00 00 7e     ....?<.........~
    1119:	7c f8 00 00 00 00 00 00 00 00 7f fe 7c 00 00 00     |...........|...
    1129:	00 00 00 00 00 ff ff fc 00 00 00 00 00 00 00 00     ................
    1139:	ff ff fe 00 00 00 00 00 00 00 00 ff ff fe 00 00     ................
    1149:	00 00 00 00 00 01 ff ef fe 00 00 00 00 00 00 00     ................
    1159:	01 ff cf fe 00 00 00 00 00 00 00 03 ff 07 fe 00     ................
    1169:	00 00 00 00 00 00 03 fc 07 fe 00 00 00 00 00 00     ................
    1179:	00 03 f0 03 fe 00 00 00 00 00 00 00 01 80 00 fe     ................
	...
    1191:	00 00 7e 00 00 00 00 00 00 00 00 00 00 3e 00 00     ..~..........>..
	...
    11a9:	0c 00 00 00 00 00 00 07 80 00 fc 00 00 03 c0 00     ................
    11b9:	00 00 07 80 01 fc 00 00 03 c0 00 00 00 07 80 01     ................
    11c9:	fc 00 00 03 c0 00 00 00 07 80 01 e0 00 00 00 1e     ................
    11d9:	00 00 00 07 80 01 e0 00 00 00 1e 00 7f e3 f7 9f     ................
    11e9:	f9 fd e7 78 7b df c0 ff f7 ff bf fd fd ff 78 7b     ...x{.........x{
    11f9:	df c0 ff f7 ff bf fd fd ff 78 7b df c0 f0 f7 87     .........x{.....
    1209:	bc 3d e1 ff 78 7b de 00 f0 f7 87 bc 3d e1 f0 78     .=..x{......=..x
    1219:	7b de 00 00 f7 87 80 3d e1 e0 78 7b de 00 7f f7     {......=..x{....
    1229:	87 9f fd e1 e0 78 7b de 00 ff f7 87 bf fd e1 e0     .....x{.........
    1239:	78 7b de 00 f0 f7 87 bc 3d e1 e0 78 7b de 00 f0     x{......=..x{...
    1249:	f7 87 bc 3d e1 e0 78 7b de 00 f0 f7 87 bc 3d e1     ...=..x{......=.
    1259:	e0 78 7b de 00 ff f7 ff bf fd e1 e0 7f fb df c0     .x{.............
    1269:	ff f7 ff bf fd e1 e0 7f fb df c0 7c f3 f3 9f 3d     ...........|...=
    1279:	e1 e0 3e 7b cf c0 00 00 00 00 00 00 00 00 00 00     ..>{............
    1289:	00 ff ff ff ff ff ff ff ff ff ff c0 ff ff ff ff     ................
    1299:	fd 68 db 11 1a 31 c0 ff ff ff ff fd 2b 5a fb 6a     .h...1......+Z.j
    12a9:	ef c0 ff ff ff ff fd 4b 5b 3b 1a 33 c0 ff ff ff     .......K[;.3....
    12b9:	ff fd 6b 5b db 6a fd c0 00                          ..k[.j...

000012c2 <__ctors_start>:
    12c2:	64 0b       	sbc	r22, r20
    12c4:	5a 0c       	add	r5, r10
    12c6:	39 0e       	add	r3, r25
    12c8:	16 15       	cp	r17, r6
    12ca:	b1 2c       	mov	r11, r1

000012cc <__ctors_end>:
    12cc:	1b 15       	cp	r17, r11

000012ce <__dtors_end>:
    12ce:	11 24       	eor	r1, r1
    12d0:	1f be       	out	0x3f, r1	; 63
    12d2:	cf ef       	ldi	r28, 0xFF	; 255
    12d4:	d8 e0       	ldi	r29, 0x08	; 8
    12d6:	de bf       	out	0x3e, r29	; 62
    12d8:	cd bf       	out	0x3d, r28	; 61

000012da <__do_copy_data>:
    12da:	11 e0       	ldi	r17, 0x01	; 1
    12dc:	a0 e0       	ldi	r26, 0x00	; 0
    12de:	b1 e0       	ldi	r27, 0x01	; 1
    12e0:	e6 e3       	ldi	r30, 0x36	; 54
    12e2:	f3 e6       	ldi	r31, 0x63	; 99
    12e4:	02 c0       	rjmp	.+4      	; 0x12ea <__do_copy_data+0x10>
    12e6:	05 90       	lpm	r0, Z+
    12e8:	0d 92       	st	X+, r0
    12ea:	a2 3d       	cpi	r26, 0xD2	; 210
    12ec:	b1 07       	cpc	r27, r17
    12ee:	d9 f7       	brne	.-10     	; 0x12e6 <__do_copy_data+0xc>

000012f0 <__do_clear_bss>:
    12f0:	23 e0       	ldi	r18, 0x03	; 3
    12f2:	a2 ed       	ldi	r26, 0xD2	; 210
    12f4:	b1 e0       	ldi	r27, 0x01	; 1
    12f6:	01 c0       	rjmp	.+2      	; 0x12fa <.do_clear_bss_start>

000012f8 <.do_clear_bss_loop>:
    12f8:	1d 92       	st	X+, r1

000012fa <.do_clear_bss_start>:
    12fa:	a9 3a       	cpi	r26, 0xA9	; 169
    12fc:	b2 07       	cpc	r27, r18
    12fe:	e1 f7       	brne	.-8      	; 0x12f8 <.do_clear_bss_loop>

00001300 <__do_global_ctors>:
    1300:	19 e0       	ldi	r17, 0x09	; 9
    1302:	c6 e6       	ldi	r28, 0x66	; 102
    1304:	d9 e0       	ldi	r29, 0x09	; 9
    1306:	04 c0       	rjmp	.+8      	; 0x1310 <__do_global_ctors+0x10>
    1308:	21 97       	sbiw	r28, 0x01	; 1
    130a:	fe 01       	movw	r30, r28
    130c:	0e 94 3c 30 	call	0x6078	; 0x6078 <__tablejump2__>
    1310:	c1 36       	cpi	r28, 0x61	; 97
    1312:	d1 07       	cpc	r29, r17
    1314:	c9 f7       	brne	.-14     	; 0x1308 <__do_global_ctors+0x8>
    1316:	0e 94 75 17 	call	0x2eea	; 0x2eea <main>
    131a:	0c 94 8e 31 	jmp	0x631c	; 0x631c <__do_global_dtors>

0000131e <__bad_interrupt>:
    131e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00001322 <_ZN7ButtonsL14runChangeFuncsE6ButtonNS_9PressTypeE>:
            if (states[i].pressed)
                return true;
        }

        return false;
    }
    1322:	0f 93       	push	r16
    1324:	1f 93       	push	r17
    1326:	cf 93       	push	r28
    1328:	df 93       	push	r29
    132a:	18 2f       	mov	r17, r24
    132c:	06 2f       	mov	r16, r22
    132e:	c6 ed       	ldi	r28, 0xD6	; 214
    1330:	d1 e0       	ldi	r29, 0x01	; 1
    1332:	e9 91       	ld	r30, Y+
    1334:	f9 91       	ld	r31, Y+
    1336:	30 97       	sbiw	r30, 0x00	; 0
    1338:	19 f0       	breq	.+6      	; 0x1340 <_ZN7ButtonsL14runChangeFuncsE6ButtonNS_9PressTypeE+0x1e>
    133a:	60 2f       	mov	r22, r16
    133c:	81 2f       	mov	r24, r17
    133e:	09 95       	icall
    1340:	81 e0       	ldi	r24, 0x01	; 1
    1342:	ce 3d       	cpi	r28, 0xDE	; 222
    1344:	d8 07       	cpc	r29, r24
    1346:	a9 f7       	brne	.-22     	; 0x1332 <_ZN7ButtonsL14runChangeFuncsE6ButtonNS_9PressTypeE+0x10>
    1348:	df 91       	pop	r29
    134a:	cf 91       	pop	r28
    134c:	1f 91       	pop	r17
    134e:	0f 91       	pop	r16
    1350:	08 95       	ret

00001352 <_ZN7ButtonsL12updateButtonE6ButtonRNS_11ButtonStateEh>:
    1352:	cf 92       	push	r12
    1354:	df 92       	push	r13
    1356:	ef 92       	push	r14
    1358:	ff 92       	push	r15
    135a:	0f 93       	push	r16
    135c:	1f 93       	push	r17
    135e:	cf 93       	push	r28
    1360:	df 93       	push	r29
    1362:	08 2f       	mov	r16, r24
    1364:	eb 01       	movw	r28, r22
    1366:	84 2f       	mov	r24, r20
    1368:	0e 94 d5 19 	call	0x33aa	; 0x33aa <digitalRead>
    136c:	11 e0       	ldi	r17, 0x01	; 1
    136e:	89 2b       	or	r24, r25
    1370:	09 f0       	breq	.+2      	; 0x1374 <_ZN7ButtonsL12updateButtonE6ButtonRNS_11ButtonStateEh+0x22>
    1372:	10 e0       	ldi	r17, 0x00	; 0
    1374:	8c 81       	ldd	r24, Y+4	; 0x04
    1376:	18 17       	cp	r17, r24
    1378:	31 f0       	breq	.+12     	; 0x1386 <_ZN7ButtonsL12updateButtonE6ButtonRNS_11ButtonStateEh+0x34>
    137a:	0e 94 71 18 	call	0x30e2	; 0x30e2 <millis>
    137e:	68 83       	st	Y, r22
    1380:	79 83       	std	Y+1, r23	; 0x01
    1382:	8a 83       	std	Y+2, r24	; 0x02
    1384:	9b 83       	std	Y+3, r25	; 0x03
    1386:	1c 83       	std	Y+4, r17	; 0x04
    1388:	8d 81       	ldd	r24, Y+5	; 0x05
    138a:	18 17       	cp	r17, r24
    138c:	b9 f1       	breq	.+110    	; 0x13fc <_ZN7ButtonsL12updateButtonE6ButtonRNS_11ButtonStateEh+0xaa>
    138e:	0e 94 71 18 	call	0x30e2	; 0x30e2 <millis>
    1392:	c8 80       	ld	r12, Y
    1394:	d9 80       	ldd	r13, Y+1	; 0x01
    1396:	ea 80       	ldd	r14, Y+2	; 0x02
    1398:	fb 80       	ldd	r15, Y+3	; 0x03
    139a:	dc 01       	movw	r26, r24
    139c:	cb 01       	movw	r24, r22
    139e:	8c 19       	sub	r24, r12
    13a0:	9d 09       	sbc	r25, r13
    13a2:	ae 09       	sbc	r26, r14
    13a4:	bf 09       	sbc	r27, r15
    13a6:	84 36       	cpi	r24, 0x64	; 100
    13a8:	91 05       	cpc	r25, r1
    13aa:	a1 05       	cpc	r26, r1
    13ac:	b1 05       	cpc	r27, r1
    13ae:	30 f1       	brcs	.+76     	; 0x13fc <_ZN7ButtonsL12updateButtonE6ButtonRNS_11ButtonStateEh+0xaa>
    13b0:	1d 83       	std	Y+5, r17	; 0x05
    13b2:	ce 80       	ldd	r12, Y+6	; 0x06
    13b4:	df 80       	ldd	r13, Y+7	; 0x07
    13b6:	e8 84       	ldd	r14, Y+8	; 0x08
    13b8:	f9 84       	ldd	r15, Y+9	; 0x09
    13ba:	0e 94 71 18 	call	0x30e2	; 0x30e2 <millis>
    13be:	6e 83       	std	Y+6, r22	; 0x06
    13c0:	7f 83       	std	Y+7, r23	; 0x07
    13c2:	88 87       	std	Y+8, r24	; 0x08
    13c4:	99 87       	std	Y+9, r25	; 0x09
    13c6:	60 93 d2 01 	sts	0x01D2, r22	; 0x8001d2 <__data_end>
    13ca:	70 93 d3 01 	sts	0x01D3, r23	; 0x8001d3 <__data_end+0x1>
    13ce:	80 93 d4 01 	sts	0x01D4, r24	; 0x8001d4 <__data_end+0x2>
    13d2:	90 93 d5 01 	sts	0x01D5, r25	; 0x8001d5 <__data_end+0x3>
    13d6:	2d 81       	ldd	r18, Y+5	; 0x05
    13d8:	21 11       	cpse	r18, r1
    13da:	13 c0       	rjmp	.+38     	; 0x1402 <_ZN7ButtonsL12updateButtonE6ButtonRNS_11ButtonStateEh+0xb0>
    13dc:	dc 01       	movw	r26, r24
    13de:	cb 01       	movw	r24, r22
    13e0:	8c 19       	sub	r24, r12
    13e2:	9d 09       	sbc	r25, r13
    13e4:	ae 09       	sbc	r26, r14
    13e6:	bf 09       	sbc	r27, r15
    13e8:	84 3f       	cpi	r24, 0xF4	; 244
    13ea:	21 e0       	ldi	r18, 0x01	; 1
    13ec:	92 07       	cpc	r25, r18
    13ee:	a1 05       	cpc	r26, r1
    13f0:	b1 05       	cpc	r27, r1
    13f2:	20 f5       	brcc	.+72     	; 0x143c <_ZN7ButtonsL12updateButtonE6ButtonRNS_11ButtonStateEh+0xea>
    13f4:	60 e0       	ldi	r22, 0x00	; 0
    13f6:	80 2f       	mov	r24, r16
    13f8:	0e 94 91 09 	call	0x1322	; 0x1322 <_ZN7ButtonsL14runChangeFuncsE6ButtonNS_9PressTypeE>
    13fc:	8d 81       	ldd	r24, Y+5	; 0x05
    13fe:	88 23       	and	r24, r24
    1400:	21 f1       	breq	.+72     	; 0x144a <_ZN7ButtonsL12updateButtonE6ButtonRNS_11ButtonStateEh+0xf8>
    1402:	0e 94 71 18 	call	0x30e2	; 0x30e2 <millis>
    1406:	ce 80       	ldd	r12, Y+6	; 0x06
    1408:	df 80       	ldd	r13, Y+7	; 0x07
    140a:	e8 84       	ldd	r14, Y+8	; 0x08
    140c:	f9 84       	ldd	r15, Y+9	; 0x09
    140e:	dc 01       	movw	r26, r24
    1410:	cb 01       	movw	r24, r22
    1412:	8c 19       	sub	r24, r12
    1414:	9d 09       	sbc	r25, r13
    1416:	ae 09       	sbc	r26, r14
    1418:	bf 09       	sbc	r27, r15
    141a:	80 3d       	cpi	r24, 0xD0	; 208
    141c:	97 40       	sbci	r25, 0x07	; 7
    141e:	a1 05       	cpc	r26, r1
    1420:	b1 05       	cpc	r27, r1
    1422:	98 f0       	brcs	.+38     	; 0x144a <_ZN7ButtonsL12updateButtonE6ButtonRNS_11ButtonStateEh+0xf8>
    1424:	62 e0       	ldi	r22, 0x02	; 2
    1426:	80 2f       	mov	r24, r16
    1428:	df 91       	pop	r29
    142a:	cf 91       	pop	r28
    142c:	1f 91       	pop	r17
    142e:	0f 91       	pop	r16
    1430:	ff 90       	pop	r15
    1432:	ef 90       	pop	r14
    1434:	df 90       	pop	r13
    1436:	cf 90       	pop	r12
    1438:	0c 94 91 09 	jmp	0x1322	; 0x1322 <_ZN7ButtonsL14runChangeFuncsE6ButtonNS_9PressTypeE>
    143c:	80 3d       	cpi	r24, 0xD0	; 208
    143e:	97 40       	sbci	r25, 0x07	; 7
    1440:	a1 05       	cpc	r26, r1
    1442:	b1 05       	cpc	r27, r1
    1444:	10 f4       	brcc	.+4      	; 0x144a <_ZN7ButtonsL12updateButtonE6ButtonRNS_11ButtonStateEh+0xf8>
    1446:	61 e0       	ldi	r22, 0x01	; 1
    1448:	d6 cf       	rjmp	.-84     	; 0x13f6 <_ZN7ButtonsL12updateButtonE6ButtonRNS_11ButtonStateEh+0xa4>
    144a:	df 91       	pop	r29
    144c:	cf 91       	pop	r28
    144e:	1f 91       	pop	r17
    1450:	0f 91       	pop	r16
    1452:	ff 90       	pop	r15
    1454:	ef 90       	pop	r14
    1456:	df 90       	pop	r13
    1458:	cf 90       	pop	r12
    145a:	08 95       	ret

0000145c <_ZN7Buttons6updateEv>:
    145c:	42 e0       	ldi	r20, 0x02	; 2
    145e:	6e ed       	ldi	r22, 0xDE	; 222
    1460:	71 e0       	ldi	r23, 0x01	; 1
    1462:	80 e0       	ldi	r24, 0x00	; 0
    1464:	0e 94 a9 09 	call	0x1352	; 0x1352 <_ZN7ButtonsL12updateButtonE6ButtonRNS_11ButtonStateEh>
    1468:	44 e0       	ldi	r20, 0x04	; 4
    146a:	68 ee       	ldi	r22, 0xE8	; 232
    146c:	71 e0       	ldi	r23, 0x01	; 1
    146e:	81 e0       	ldi	r24, 0x01	; 1
    1470:	0e 94 a9 09 	call	0x1352	; 0x1352 <_ZN7ButtonsL12updateButtonE6ButtonRNS_11ButtonStateEh>
    1474:	43 e0       	ldi	r20, 0x03	; 3
    1476:	62 ef       	ldi	r22, 0xF2	; 242
    1478:	71 e0       	ldi	r23, 0x01	; 1
    147a:	82 e0       	ldi	r24, 0x02	; 2
    147c:	0e 94 a9 09 	call	0x1352	; 0x1352 <_ZN7ButtonsL12updateButtonE6ButtonRNS_11ButtonStateEh>
    1480:	45 e0       	ldi	r20, 0x05	; 5
    1482:	6c ef       	ldi	r22, 0xFC	; 252
    1484:	71 e0       	ldi	r23, 0x01	; 1
    1486:	83 e0       	ldi	r24, 0x03	; 3
    1488:	0c 94 a9 09 	jmp	0x1352	; 0x1352 <_ZN7ButtonsL12updateButtonE6ButtonRNS_11ButtonStateEh>

0000148c <_ZN7Buttons18registerChangeFuncEPFv6ButtonNS_9PressTypeEE>:

    void registerChangeFunc(ChangeFunc func) {
    148c:	e6 ed       	ldi	r30, 0xD6	; 214
    148e:	f1 e0       	ldi	r31, 0x01	; 1
    1490:	20 e0       	ldi	r18, 0x00	; 0
    1492:	30 e0       	ldi	r19, 0x00	; 0
        for (uint8_t i = 0; i < BUTTON_HOOKS_MAX; i++) {
            if (changeFuncs[i] == nullptr) {
    1494:	41 91       	ld	r20, Z+
    1496:	51 91       	ld	r21, Z+
    1498:	45 2b       	or	r20, r21
    149a:	41 f4       	brne	.+16     	; 0x14ac <_ZN7Buttons18registerChangeFuncEPFv6ButtonNS_9PressTypeEE+0x20>
                changeFuncs[i] = func;
    149c:	22 0f       	add	r18, r18
    149e:	33 1f       	adc	r19, r19
    14a0:	f9 01       	movw	r30, r18
    14a2:	ea 52       	subi	r30, 0x2A	; 42
    14a4:	fe 4f       	sbci	r31, 0xFE	; 254
    14a6:	91 83       	std	Z+1, r25	; 0x01
    14a8:	80 83       	st	Z, r24
                return;
    14aa:	08 95       	ret
    14ac:	2f 5f       	subi	r18, 0xFF	; 255
    14ae:	3f 4f       	sbci	r19, 0xFF	; 255

        return false;
    }

    void registerChangeFunc(ChangeFunc func) {
        for (uint8_t i = 0; i < BUTTON_HOOKS_MAX; i++) {
    14b0:	24 30       	cpi	r18, 0x04	; 4
    14b2:	31 05       	cpc	r19, r1
    14b4:	79 f7       	brne	.-34     	; 0x1494 <_ZN7Buttons18registerChangeFuncEPFv6ButtonNS_9PressTypeEE+0x8>
    14b6:	08 95       	ret

000014b8 <_ZN8Channels17getSynthRegisterBEh>:
};


namespace Channels {
    const uint16_t getSynthRegisterB(uint8_t index) {
        return pgm_read_word_near(channelTable + index);
    14b8:	e8 2f       	mov	r30, r24
    14ba:	f0 e0       	ldi	r31, 0x00	; 0
    14bc:	ee 0f       	add	r30, r30
    14be:	ff 1f       	adc	r31, r31
    14c0:	e0 5d       	subi	r30, 0xD0	; 208
    14c2:	fe 4f       	sbci	r31, 0xFE	; 254
    14c4:	85 91       	lpm	r24, Z+
    14c6:	94 91       	lpm	r25, Z
    }
    14c8:	08 95       	ret

000014ca <_ZN8Channels12getFrequencyEh>:

    const uint16_t getFrequency(uint8_t index) {
        return pgm_read_word_near(channelFreqTable + index);
    14ca:	e8 2f       	mov	r30, r24
    14cc:	f0 e0       	ldi	r31, 0x00	; 0
    14ce:	ee 0f       	add	r30, r30
    14d0:	ff 1f       	adc	r31, r31
    14d2:	e0 52       	subi	r30, 0x20	; 32
    14d4:	ff 4f       	sbci	r31, 0xFF	; 255
    14d6:	85 91       	lpm	r24, Z+
    14d8:	94 91       	lpm	r25, Z
    }
    14da:	08 95       	ret

000014dc <_ZN8Channels7getNameEh>:

    // Returns channel name as a string.
    //      dest[] must be at least 3-bytes.
    char nameBuffer[3];
    const char *getName(uint8_t index) {
        uint8_t encodedName = pgm_read_byte_near(channelNames + index);
    14dc:	e8 2f       	mov	r30, r24
    14de:	f0 e0       	ldi	r31, 0x00	; 0
    14e0:	e8 54       	subi	r30, 0x48	; 72
    14e2:	ff 4f       	sbci	r31, 0xFF	; 255
    14e4:	e4 91       	lpm	r30, Z

        nameBuffer[0] = 65 + (encodedName >> 3);
    14e6:	a6 e0       	ldi	r26, 0x06	; 6
    14e8:	b2 e0       	ldi	r27, 0x02	; 2
    14ea:	8e 2f       	mov	r24, r30
    14ec:	86 95       	lsr	r24
    14ee:	86 95       	lsr	r24
    14f0:	86 95       	lsr	r24
    14f2:	8f 5b       	subi	r24, 0xBF	; 191
    14f4:	8c 93       	st	X, r24
        nameBuffer[1] = 48 + (encodedName & (255 >> (8 - 3))) + 1;
    14f6:	e7 70       	andi	r30, 0x07	; 7
    14f8:	ef 5c       	subi	r30, 0xCF	; 207
    14fa:	11 96       	adiw	r26, 0x01	; 1
    14fc:	ec 93       	st	X, r30
    14fe:	11 97       	sbiw	r26, 0x01	; 1
        nameBuffer[2] = '\0';
    1500:	12 96       	adiw	r26, 0x02	; 2
    1502:	1c 92       	st	X, r1
    1504:	12 97       	sbiw	r26, 0x02	; 2

        return nameBuffer;
    }
    1506:	cd 01       	movw	r24, r26
    1508:	08 95       	ret

0000150a <_ZN8Channels15getOrderedIndexEh>:

    const uint8_t getOrderedIndex(uint8_t index) {
        return pgm_read_byte_near(channelFreqOrderedIndex + index);
    150a:	e8 2f       	mov	r30, r24
    150c:	f0 e0       	ldi	r31, 0x00	; 0
    150e:	e0 57       	subi	r30, 0x70	; 112
    1510:	ff 4f       	sbci	r31, 0xFF	; 255
    1512:	84 91       	lpm	r24, Z
    }
    1514:	08 95       	ret

00001516 <_ZN8Channels24getOrderedIndexFromIndexEh>:

    const uint8_t getOrderedIndexFromIndex(uint8_t index) {
        return pgm_read_byte_near(channelIndexToOrderedIndex + index);
    1516:	e8 2f       	mov	r30, r24
    1518:	f0 e0       	ldi	r31, 0x00	; 0
    151a:	e8 59       	subi	r30, 0x98	; 152
    151c:	ff 4f       	sbci	r31, 0xFF	; 255
    151e:	84 91       	lpm	r24, Z
    }
    1520:	08 95       	ret

00001522 <_Z14PSTRtoBuffer_PPKc>:
#include "pstr_helper.h"
#include <avr/pgmspace.h>

char PSTR2_BUFFER[PSTR2_BUFFER_SIZE];

char *PSTRtoBuffer_P(PGM_P str) { 
    1522:	fc 01       	movw	r30, r24
    1524:	a9 e0       	ldi	r26, 0x09	; 9
    1526:	b2 e0       	ldi	r27, 0x02	; 2
    uint8_t i = 0;
    1528:	90 e0       	ldi	r25, 0x00	; 0
    
    for (
        uint8_t c = '\0';
        c = pgm_read_byte(str + i) && i < sizeof(PSTR2_BUFFER); 
    152a:	84 91       	lpm	r24, Z
    152c:	88 23       	and	r24, r24
    152e:	51 f0       	breq	.+20     	; 0x1544 <_Z14PSTRtoBuffer_PPKc+0x22>
    1530:	9f 01       	movw	r18, r30
    1532:	2f 5f       	subi	r18, 0xFF	; 255
    1534:	3f 4f       	sbci	r19, 0xFF	; 255
    1536:	90 33       	cpi	r25, 0x30	; 48
    1538:	29 f0       	breq	.+10     	; 0x1544 <_Z14PSTRtoBuffer_PPKc+0x22>
        i++
    ) {
        PSTR2_BUFFER[i] = pgm_read_byte(str + i);
    153a:	e4 91       	lpm	r30, Z
    153c:	ed 93       	st	X+, r30
char PSTR2_BUFFER[PSTR2_BUFFER_SIZE];

char *PSTRtoBuffer_P(PGM_P str) { 
    uint8_t i = 0;
    
    for (
    153e:	9f 5f       	subi	r25, 0xFF	; 255
    1540:	f9 01       	movw	r30, r18
    1542:	f3 cf       	rjmp	.-26     	; 0x152a <_Z14PSTRtoBuffer_PPKc+0x8>
        i++
    ) {
        PSTR2_BUFFER[i] = pgm_read_byte(str + i);
    }
    
    PSTR2_BUFFER[i] = '\0'; // Loop drops early so add in finishing terminator.
    1544:	e9 2f       	mov	r30, r25
    1546:	f0 e0       	ldi	r31, 0x00	; 0
    1548:	e7 5f       	subi	r30, 0xF7	; 247
    154a:	fd 4f       	sbci	r31, 0xFD	; 253
    154c:	10 82       	st	Z, r1
    return PSTR2_BUFFER;
    154e:	89 e0       	ldi	r24, 0x09	; 9
    1550:	92 e0       	ldi	r25, 0x02	; 2
    1552:	08 95       	ret

00001554 <_ZN8Receiver10setChannelEh>:
        static Timer serialLogTimer = Timer(25);
    #endif


    void setChannel(uint8_t channel)
    {
    1554:	cf 93       	push	r28
    1556:	c8 2f       	mov	r28, r24
        ReceiverSpi::setSynthRegisterB(Channels::getSynthRegisterB(channel));
    1558:	0e 94 5c 0a 	call	0x14b8	; 0x14b8 <_ZN8Channels17getSynthRegisterBEh>
    155c:	0e 94 dc 0b 	call	0x17b8	; 0x17b8 <_ZN11ReceiverSpi17setSynthRegisterBEj>

        rssiStableTimer.reset();
    1560:	80 e4       	ldi	r24, 0x40	; 64
    1562:	92 e0       	ldi	r25, 0x02	; 2
    1564:	0e 94 c1 14 	call	0x2982	; 0x2982 <_ZN5Timer5resetEv>
        activeChannel = channel;
    1568:	c0 93 62 02 	sts	0x0262, r28	; 0x800262 <_ZN8Receiver13activeChannelE>
    }
    156c:	cf 91       	pop	r28
    156e:	08 95       	ret

00001570 <_ZN8Receiver17setActiveReceiverENS_10ReceiverIdE>:

    void setActiveReceiver(ReceiverId receiver) {
    1570:	cf 93       	push	r28
    1572:	c8 2f       	mov	r28, r24
            #else
                digitalWrite(PIN_LED_A, receiver == ReceiverId::A);
                digitalWrite(PIN_LED_B, receiver == ReceiverId::B);
            #endif
        #else
            digitalWrite(PIN_LED_A, HIGH);
    1574:	61 e0       	ldi	r22, 0x01	; 1
    1576:	8e e0       	ldi	r24, 0x0E	; 14
    1578:	0e 94 a6 19 	call	0x334c	; 0x334c <digitalWrite>
        #endif

        activeReceiver = receiver;
    157c:	c0 93 63 02 	sts	0x0263, r28	; 0x800263 <_ZN8Receiver14activeReceiverE>
    }
    1580:	cf 91       	pop	r28
    1582:	08 95       	ret

00001584 <_ZN8Receiver12isRssiStableEv>:

    bool isRssiStable() {
        return rssiStableTimer.hasTicked();
    1584:	80 e4       	ldi	r24, 0x40	; 64
    1586:	92 e0       	ldi	r25, 0x02	; 2
    1588:	0c 94 a2 14 	jmp	0x2944	; 0x2944 <_ZN5Timer9hasTickedEv>

0000158c <_ZN8Receiver10updateRssiEv>:
    }

    uint16_t updateRssi() {
    158c:	af 92       	push	r10
    158e:	bf 92       	push	r11
    1590:	cf 92       	push	r12
    1592:	df 92       	push	r13
    1594:	ef 92       	push	r14
    1596:	ff 92       	push	r15
    1598:	0f 93       	push	r16
    159a:	1f 93       	push	r17
    159c:	cf 93       	push	r28
        analogRead(PIN_RSSI_A); // Fake read to let ADC settle.
    159e:	84 e1       	ldi	r24, 0x14	; 20
    15a0:	0e 94 24 19 	call	0x3248	; 0x3248 <analogRead>
        rssiARaw = analogRead(PIN_RSSI_A);
    15a4:	84 e1       	ldi	r24, 0x14	; 20
    15a6:	0e 94 24 19 	call	0x3248	; 0x3248 <analogRead>
    15aa:	90 93 60 02 	sts	0x0260, r25	; 0x800260 <_ZN8Receiver8rssiARawE+0x1>
    15ae:	80 93 5f 02 	sts	0x025F, r24	; 0x80025f <_ZN8Receiver8rssiARawE>
        #ifdef USE_DIVERSITY
            analogRead(PIN_RSSI_B);
            rssiBRaw = analogRead(PIN_RSSI_B);
        #endif

        rssiA = constrain(
    15b2:	e0 90 6e 02 	lds	r14, 0x026E	; 0x80026e <EepromSettings+0xa>
    15b6:	f0 90 6f 02 	lds	r15, 0x026F	; 0x80026f <EepromSettings+0xb>
    15ba:	00 e0       	ldi	r16, 0x00	; 0
    15bc:	10 e0       	ldi	r17, 0x00	; 0
    15be:	20 91 6c 02 	lds	r18, 0x026C	; 0x80026c <EepromSettings+0x8>
    15c2:	30 91 6d 02 	lds	r19, 0x026D	; 0x80026d <EepromSettings+0x9>
    15c6:	40 e0       	ldi	r20, 0x00	; 0
    15c8:	50 e0       	ldi	r21, 0x00	; 0
    15ca:	bc 01       	movw	r22, r24
    15cc:	80 e0       	ldi	r24, 0x00	; 0
    15ce:	90 e0       	ldi	r25, 0x00	; 0
    15d0:	1f 92       	push	r1
    15d2:	1f 92       	push	r1
    15d4:	1f 92       	push	r1
    15d6:	c4 e6       	ldi	r28, 0x64	; 100
    15d8:	cf 93       	push	r28
    15da:	a1 2c       	mov	r10, r1
    15dc:	b1 2c       	mov	r11, r1
    15de:	65 01       	movw	r12, r10
    15e0:	0e 94 fe 19 	call	0x33fc	; 0x33fc <_Z3maplllll>
                0,
                100
            ),
            0,
            100
        );
    15e4:	0f 90       	pop	r0
    15e6:	0f 90       	pop	r0
    15e8:	0f 90       	pop	r0
    15ea:	0f 90       	pop	r0
    15ec:	97 fd       	sbrc	r25, 7
    15ee:	3e c0       	rjmp	.+124    	; 0x166c <_ZN8Receiver10updateRssiEv+0xe0>
        #ifdef USE_DIVERSITY
            analogRead(PIN_RSSI_B);
            rssiBRaw = analogRead(PIN_RSSI_B);
        #endif

        rssiA = constrain(
    15f0:	e0 90 6e 02 	lds	r14, 0x026E	; 0x80026e <EepromSettings+0xa>
    15f4:	f0 90 6f 02 	lds	r15, 0x026F	; 0x80026f <EepromSettings+0xb>
    15f8:	00 e0       	ldi	r16, 0x00	; 0
    15fa:	10 e0       	ldi	r17, 0x00	; 0
    15fc:	20 91 6c 02 	lds	r18, 0x026C	; 0x80026c <EepromSettings+0x8>
    1600:	30 91 6d 02 	lds	r19, 0x026D	; 0x80026d <EepromSettings+0x9>
    1604:	40 e0       	ldi	r20, 0x00	; 0
    1606:	50 e0       	ldi	r21, 0x00	; 0
    1608:	60 91 5f 02 	lds	r22, 0x025F	; 0x80025f <_ZN8Receiver8rssiARawE>
    160c:	70 91 60 02 	lds	r23, 0x0260	; 0x800260 <_ZN8Receiver8rssiARawE+0x1>
    1610:	80 e0       	ldi	r24, 0x00	; 0
    1612:	90 e0       	ldi	r25, 0x00	; 0
    1614:	1f 92       	push	r1
    1616:	1f 92       	push	r1
    1618:	1f 92       	push	r1
    161a:	cf 93       	push	r28
    161c:	0e 94 fe 19 	call	0x33fc	; 0x33fc <_Z3maplllll>
                0,
                100
            ),
            0,
            100
        );
    1620:	0f 90       	pop	r0
    1622:	0f 90       	pop	r0
    1624:	0f 90       	pop	r0
    1626:	0f 90       	pop	r0
    1628:	65 36       	cpi	r22, 0x65	; 101
    162a:	71 05       	cpc	r23, r1
    162c:	81 05       	cpc	r24, r1
    162e:	91 05       	cpc	r25, r1
    1630:	fc f4       	brge	.+62     	; 0x1670 <_ZN8Receiver10updateRssiEv+0xe4>
        #ifdef USE_DIVERSITY
            analogRead(PIN_RSSI_B);
            rssiBRaw = analogRead(PIN_RSSI_B);
        #endif

        rssiA = constrain(
    1632:	e0 90 6e 02 	lds	r14, 0x026E	; 0x80026e <EepromSettings+0xa>
    1636:	f0 90 6f 02 	lds	r15, 0x026F	; 0x80026f <EepromSettings+0xb>
    163a:	00 e0       	ldi	r16, 0x00	; 0
    163c:	10 e0       	ldi	r17, 0x00	; 0
    163e:	20 91 6c 02 	lds	r18, 0x026C	; 0x80026c <EepromSettings+0x8>
    1642:	30 91 6d 02 	lds	r19, 0x026D	; 0x80026d <EepromSettings+0x9>
    1646:	40 e0       	ldi	r20, 0x00	; 0
    1648:	50 e0       	ldi	r21, 0x00	; 0
    164a:	60 91 5f 02 	lds	r22, 0x025F	; 0x80025f <_ZN8Receiver8rssiARawE>
    164e:	70 91 60 02 	lds	r23, 0x0260	; 0x800260 <_ZN8Receiver8rssiARawE+0x1>
    1652:	80 e0       	ldi	r24, 0x00	; 0
    1654:	90 e0       	ldi	r25, 0x00	; 0
    1656:	1f 92       	push	r1
    1658:	1f 92       	push	r1
    165a:	1f 92       	push	r1
    165c:	cf 93       	push	r28
    165e:	0e 94 fe 19 	call	0x33fc	; 0x33fc <_Z3maplllll>
    1662:	0f 90       	pop	r0
    1664:	0f 90       	pop	r0
    1666:	0f 90       	pop	r0
    1668:	0f 90       	pop	r0
    166a:	03 c0       	rjmp	.+6      	; 0x1672 <_ZN8Receiver10updateRssiEv+0xe6>
                0,
                100
            ),
            0,
            100
        );
    166c:	60 e0       	ldi	r22, 0x00	; 0
    166e:	01 c0       	rjmp	.+2      	; 0x1672 <_ZN8Receiver10updateRssiEv+0xe6>
    1670:	64 e6       	ldi	r22, 0x64	; 100
    1672:	60 93 61 02 	sts	0x0261, r22	; 0x800261 <_ZN8Receiver5rssiAE>
                0,
                100
            );
        #endif

        if (rssiLogTimer.hasTicked()) {
    1676:	89 e3       	ldi	r24, 0x39	; 57
    1678:	92 e0       	ldi	r25, 0x02	; 2
    167a:	0e 94 a2 14 	call	0x2944	; 0x2944 <_ZN5Timer9hasTickedEv>
    167e:	88 23       	and	r24, r24
    1680:	81 f0       	breq	.+32     	; 0x16a2 <_ZN8Receiver10updateRssiEv+0x116>
    1682:	e7 e4       	ldi	r30, 0x47	; 71
    1684:	f2 e0       	ldi	r31, 0x02	; 2
            for (uint8_t i = 0; i < RECEIVER_LAST_DATA_SIZE - 1; i++) {
                rssiALast[i] = rssiALast[i + 1];
    1686:	81 81       	ldd	r24, Z+1	; 0x01
    1688:	81 93       	st	Z+, r24
                100
            );
        #endif

        if (rssiLogTimer.hasTicked()) {
            for (uint8_t i = 0; i < RECEIVER_LAST_DATA_SIZE - 1; i++) {
    168a:	82 e0       	ldi	r24, 0x02	; 2
    168c:	ee 35       	cpi	r30, 0x5E	; 94
    168e:	f8 07       	cpc	r31, r24
    1690:	d1 f7       	brne	.-12     	; 0x1686 <_ZN8Receiver10updateRssiEv+0xfa>
                #ifdef USE_DIVERSITY
                    rssiBLast[i] = rssiBLast[i + 1];
                #endif
            }

            rssiALast[RECEIVER_LAST_DATA_SIZE - 1] = rssiA;
    1692:	80 91 61 02 	lds	r24, 0x0261	; 0x800261 <_ZN8Receiver5rssiAE>
    1696:	80 93 5e 02 	sts	0x025E, r24	; 0x80025e <_ZN8Receiver9rssiALastE+0x17>
            #ifdef USE_DIVERSITY
                rssiBLast[RECEIVER_LAST_DATA_SIZE - 1] = rssiB;
            #endif

            rssiLogTimer.reset();
    169a:	89 e3       	ldi	r24, 0x39	; 57
    169c:	92 e0       	ldi	r25, 0x02	; 2
    169e:	0e 94 c1 14 	call	0x2982	; 0x2982 <_ZN5Timer5resetEv>
        }
    }
    16a2:	cf 91       	pop	r28
    16a4:	1f 91       	pop	r17
    16a6:	0f 91       	pop	r16
    16a8:	ff 90       	pop	r15
    16aa:	ef 90       	pop	r14
    16ac:	df 90       	pop	r13
    16ae:	cf 90       	pop	r12
    16b0:	bf 90       	pop	r11
    16b2:	af 90       	pop	r10
    16b4:	08 95       	ret

000016b6 <_ZN8Receiver5setupEv>:

        setActiveReceiver(nextReceiver);
    }
#endif

    void setup() {
    16b6:	08 95       	ret

000016b8 <_ZN8Receiver6updateEv>:
            ReceiverSpi::setPowerDownRegister(0b00010000110111110011);
        #endif
    }

    void update() {
        if (rssiStableTimer.hasTicked()) {
    16b8:	80 e4       	ldi	r24, 0x40	; 64
    16ba:	92 e0       	ldi	r25, 0x02	; 2
    16bc:	0e 94 a2 14 	call	0x2944	; 0x2944 <_ZN5Timer9hasTickedEv>
    16c0:	81 11       	cpse	r24, r1
            updateRssi();
    16c2:	0c 94 c6 0a 	jmp	0x158c	; 0x158c <_ZN8Receiver10updateRssiEv>
    16c6:	08 95       	ret

000016c8 <_GLOBAL__sub_I__ZN8Receiver14activeReceiverE>:

        ReceiverId diversityTargetReceiver = activeReceiver;
        Timer diversityHysteresisTimer = Timer(DIVERSITY_HYSTERESIS_PERIOD);
    #endif

    static Timer rssiStableTimer = Timer(MIN_TUNE_TIME);
    16c8:	69 e1       	ldi	r22, 0x19	; 25
    16ca:	70 e0       	ldi	r23, 0x00	; 0
    16cc:	80 e4       	ldi	r24, 0x40	; 64
    16ce:	92 e0       	ldi	r25, 0x02	; 2
    16d0:	0e 94 8b 14 	call	0x2916	; 0x2916 <_ZN5TimerC1Ej>
    static Timer rssiLogTimer = Timer(RECEIVER_LAST_DELAY);
    16d4:	62 e3       	ldi	r22, 0x32	; 50
    16d6:	70 e0       	ldi	r23, 0x00	; 0
    16d8:	89 e3       	ldi	r24, 0x39	; 57
    16da:	92 e0       	ldi	r25, 0x02	; 2
    16dc:	0c 94 8b 14 	jmp	0x2916	; 0x2916 <_ZN5TimerC1Ej>

000016e0 <_ZL7sendBith>:
        sendBit(bits & 0x1);
        bits >>= 1;
    }
}

static inline void sendBit(uint8_t value) {
    16e0:	cf 93       	push	r28
    16e2:	c8 2f       	mov	r28, r24
    digitalWrite(PIN_SPI_CLOCK, LOW);
    16e4:	60 e0       	ldi	r22, 0x00	; 0
    16e6:	8d e0       	ldi	r24, 0x0D	; 13
    16e8:	0e 94 a6 19 	call	0x334c	; 0x334c <digitalWrite>
    delayMicroseconds(1);
    16ec:	81 e0       	ldi	r24, 0x01	; 1
    16ee:	90 e0       	ldi	r25, 0x00	; 0
    16f0:	0e 94 de 18 	call	0x31bc	; 0x31bc <delayMicroseconds>

    digitalWrite(PIN_SPI_DATA, value);
    16f4:	6c 2f       	mov	r22, r28
    16f6:	8b e0       	ldi	r24, 0x0B	; 11
    16f8:	0e 94 a6 19 	call	0x334c	; 0x334c <digitalWrite>
    delayMicroseconds(1);
    16fc:	81 e0       	ldi	r24, 0x01	; 1
    16fe:	90 e0       	ldi	r25, 0x00	; 0
    1700:	0e 94 de 18 	call	0x31bc	; 0x31bc <delayMicroseconds>
    digitalWrite(PIN_SPI_CLOCK, HIGH);
    1704:	61 e0       	ldi	r22, 0x01	; 1
    1706:	8d e0       	ldi	r24, 0x0D	; 13
    1708:	0e 94 a6 19 	call	0x334c	; 0x334c <digitalWrite>
    delayMicroseconds(1);
    170c:	81 e0       	ldi	r24, 0x01	; 1
    170e:	90 e0       	ldi	r25, 0x00	; 0
    1710:	0e 94 de 18 	call	0x31bc	; 0x31bc <delayMicroseconds>

    digitalWrite(PIN_SPI_CLOCK, LOW);
    1714:	60 e0       	ldi	r22, 0x00	; 0
    1716:	8d e0       	ldi	r24, 0x0D	; 13
    1718:	0e 94 a6 19 	call	0x334c	; 0x334c <digitalWrite>
    delayMicroseconds(1);
    171c:	81 e0       	ldi	r24, 0x01	; 1
    171e:	90 e0       	ldi	r25, 0x00	; 0
}
    1720:	cf 91       	pop	r28
    delayMicroseconds(1);
    digitalWrite(PIN_SPI_CLOCK, HIGH);
    delayMicroseconds(1);

    digitalWrite(PIN_SPI_CLOCK, LOW);
    delayMicroseconds(1);
    1722:	0c 94 de 18 	jmp	0x31bc	; 0x31bc <delayMicroseconds>

00001726 <_ZL12sendRegisterhm>:
        sendRegister(SPI_ADDRESS_POWER, value);
    }
}


static inline void sendRegister(uint8_t address, uint32_t data) {
    1726:	8f 92       	push	r8
    1728:	9f 92       	push	r9
    172a:	af 92       	push	r10
    172c:	bf 92       	push	r11
    172e:	cf 92       	push	r12
    1730:	df 92       	push	r13
    1732:	ef 92       	push	r14
    1734:	ff 92       	push	r15
    1736:	cf 93       	push	r28
    1738:	c8 2e       	mov	r12, r24
    173a:	4a 01       	movw	r8, r20
    173c:	5b 01       	movw	r10, r22
    digitalWrite(PIN_SPI_CLOCK, LOW);
    delayMicroseconds(1);
}

static inline void sendSlaveSelect(uint8_t value) {
    digitalWrite(PIN_SPI_SLAVE_SELECT, value);
    173e:	60 e0       	ldi	r22, 0x00	; 0
    1740:	8c e0       	ldi	r24, 0x0C	; 12
    1742:	0e 94 a6 19 	call	0x334c	; 0x334c <digitalWrite>
    delayMicroseconds(1);
    1746:	81 e0       	ldi	r24, 0x01	; 1
    1748:	90 e0       	ldi	r25, 0x00	; 0
    174a:	0e 94 de 18 	call	0x31bc	; 0x31bc <delayMicroseconds>


static inline void sendRegister(uint8_t address, uint32_t data) {
    sendSlaveSelect(LOW);

    sendBits(address, 4);
    174e:	d1 2c       	mov	r13, r1
    1750:	e1 2c       	mov	r14, r1
    1752:	f1 2c       	mov	r15, r1
    1754:	c4 e0       	ldi	r28, 0x04	; 4
}


static inline void sendBits(uint32_t bits, uint8_t count) {
    for (uint8_t i = 0; i < count; i++) {
        sendBit(bits & 0x1);
    1756:	8c 2d       	mov	r24, r12
    1758:	81 70       	andi	r24, 0x01	; 1
    175a:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <_ZL7sendBith>
        bits >>= 1;
    175e:	f6 94       	lsr	r15
    1760:	e7 94       	ror	r14
    1762:	d7 94       	ror	r13
    1764:	c7 94       	ror	r12
    1766:	c1 50       	subi	r28, 0x01	; 1
    digitalWrite(PIN_SPI_DATA, LOW);
}


static inline void sendBits(uint32_t bits, uint8_t count) {
    for (uint8_t i = 0; i < count; i++) {
    1768:	b1 f7       	brne	.-20     	; 0x1756 <_ZL12sendRegisterhm+0x30>

static inline void sendRegister(uint8_t address, uint32_t data) {
    sendSlaveSelect(LOW);

    sendBits(address, 4);
    sendBit(HIGH); // Enable write.
    176a:	81 e0       	ldi	r24, 0x01	; 1
    176c:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <_ZL7sendBith>
    1770:	c4 e1       	ldi	r28, 0x14	; 20
}


static inline void sendBits(uint32_t bits, uint8_t count) {
    for (uint8_t i = 0; i < count; i++) {
        sendBit(bits & 0x1);
    1772:	88 2d       	mov	r24, r8
    1774:	81 70       	andi	r24, 0x01	; 1
    1776:	0e 94 70 0b 	call	0x16e0	; 0x16e0 <_ZL7sendBith>
        bits >>= 1;
    177a:	b6 94       	lsr	r11
    177c:	a7 94       	ror	r10
    177e:	97 94       	ror	r9
    1780:	87 94       	ror	r8
    1782:	c1 50       	subi	r28, 0x01	; 1
    digitalWrite(PIN_SPI_DATA, LOW);
}


static inline void sendBits(uint32_t bits, uint8_t count) {
    for (uint8_t i = 0; i < count; i++) {
    1784:	b1 f7       	brne	.-20     	; 0x1772 <_ZL12sendRegisterhm+0x4c>
    digitalWrite(PIN_SPI_CLOCK, LOW);
    delayMicroseconds(1);
}

static inline void sendSlaveSelect(uint8_t value) {
    digitalWrite(PIN_SPI_SLAVE_SELECT, value);
    1786:	61 e0       	ldi	r22, 0x01	; 1
    1788:	8c e0       	ldi	r24, 0x0C	; 12
    178a:	0e 94 a6 19 	call	0x334c	; 0x334c <digitalWrite>
    delayMicroseconds(1);
    178e:	81 e0       	ldi	r24, 0x01	; 1
    1790:	90 e0       	ldi	r25, 0x00	; 0
    1792:	0e 94 de 18 	call	0x31bc	; 0x31bc <delayMicroseconds>

    sendBits(data, 20);

    // Finished clocking data in
    sendSlaveSelect(HIGH);
    digitalWrite(PIN_SPI_CLOCK, LOW);
    1796:	60 e0       	ldi	r22, 0x00	; 0
    1798:	8d e0       	ldi	r24, 0x0D	; 13
    179a:	0e 94 a6 19 	call	0x334c	; 0x334c <digitalWrite>
    digitalWrite(PIN_SPI_DATA, LOW);
    179e:	60 e0       	ldi	r22, 0x00	; 0
    17a0:	8b e0       	ldi	r24, 0x0B	; 11
}
    17a2:	cf 91       	pop	r28
    17a4:	ff 90       	pop	r15
    17a6:	ef 90       	pop	r14
    17a8:	df 90       	pop	r13
    17aa:	cf 90       	pop	r12
    17ac:	bf 90       	pop	r11
    17ae:	af 90       	pop	r10
    17b0:	9f 90       	pop	r9
    17b2:	8f 90       	pop	r8
    sendBits(data, 20);

    // Finished clocking data in
    sendSlaveSelect(HIGH);
    digitalWrite(PIN_SPI_CLOCK, LOW);
    digitalWrite(PIN_SPI_DATA, LOW);
    17b4:	0c 94 a6 19 	jmp	0x334c	; 0x334c <digitalWrite>

000017b8 <_ZN11ReceiverSpi17setSynthRegisterBEj>:
    //        R = 8
    //
    // Refer to RTC6715 datasheet for further details.
    //
    void setSynthRegisterB(uint16_t value) {
        sendRegister(SPI_ADDRESS_SYNTH_A, value);
    17b8:	ac 01       	movw	r20, r24
    17ba:	60 e0       	ldi	r22, 0x00	; 0
    17bc:	70 e0       	ldi	r23, 0x00	; 0
    17be:	81 e0       	ldi	r24, 0x01	; 1
    17c0:	0c 94 93 0b 	jmp	0x1726	; 0x1726 <_ZL12sendRegisterhm>

000017c4 <_ZN14EepromSettings4saveEv>:

    if (this->magic != EEPROM_MAGIC)
        this->initDefaults();
}

void EepromSettings::save() {
    17c4:	ff 92       	push	r15
    17c6:	0f 93       	push	r16
    17c8:	1f 93       	push	r17
    17ca:	cf 93       	push	r28
    17cc:	df 93       	push	r29
    17ce:	8c 01       	movw	r16, r24
***/

struct EEPtr{

    EEPtr( const int index )
        : index( index )                {}
    17d0:	c0 e0       	ldi	r28, 0x00	; 0
    17d2:	d0 e0       	ldi	r29, 0x00	; 0
    }
    
    template< typename T > const T &put( int idx, const T &t ){
        EEPtr e = idx;
        const uint8_t *ptr = (const uint8_t*) &t;
        for( int count = sizeof(T) ; count ; --count, ++e )  (*e).update( *ptr++ );
    17d4:	f8 01       	movw	r30, r16
    17d6:	f1 90       	ld	r15, Z+
    17d8:	8f 01       	movw	r16, r30

    EERef( const int index )
        : index( index )                 {}
    
    //Access/read members.
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    17da:	ce 01       	movw	r24, r28
    17dc:	0e 94 78 31 	call	0x62f0	; 0x62f0 <eeprom_read_byte>
    EERef &operator &=( uint8_t in )     { return *this = **this & in; }
    EERef &operator |=( uint8_t in )     { return *this = **this | in; }
    EERef &operator <<=( uint8_t in )    { return *this = **this << in; }
    EERef &operator >>=( uint8_t in )    { return *this = **this >> in; }
    
    EERef &update( uint8_t in )          { return  in != *this ? *this = in : *this; }
    17e0:	f8 16       	cp	r15, r24
    17e2:	21 f0       	breq	.+8      	; 0x17ec <_ZN14EepromSettings4saveEv+0x28>
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    operator uint8_t() const             { return **this; }
    
    //Assignment/write members.
    EERef &operator=( const EERef &ref ) { return *this = *ref; }
    EERef &operator=( uint8_t in )       { return eeprom_write_byte( (uint8_t*) index, in ), *this;  }
    17e4:	6f 2d       	mov	r22, r15
    17e6:	ce 01       	movw	r24, r28
    17e8:	0e 94 80 31 	call	0x6300	; 0x6300 <eeprom_write_byte>
    //Iterator functionality.
    bool operator!=( const EEPtr &ptr ) { return index != ptr.index; }
    EERef operator*()                   { return index; }
    
    /** Prefix & Postfix increment/decrement **/
    EEPtr& operator++()                 { return ++index, *this; }
    17ec:	21 96       	adiw	r28, 0x01	; 1
    }
    
    template< typename T > const T &put( int idx, const T &t ){
        EEPtr e = idx;
        const uint8_t *ptr = (const uint8_t*) &t;
        for( int count = sizeof(T) ; count ; --count, ++e )  (*e).update( *ptr++ );
    17ee:	cc 30       	cpi	r28, 0x0C	; 12
    17f0:	d1 05       	cpc	r29, r1
    17f2:	81 f7       	brne	.-32     	; 0x17d4 <_ZN14EepromSettings4saveEv+0x10>
    EEPROM.put(0, *this);
}
    17f4:	df 91       	pop	r29
    17f6:	cf 91       	pop	r28
    17f8:	1f 91       	pop	r17
    17fa:	0f 91       	pop	r16
    17fc:	ff 90       	pop	r15
    17fe:	08 95       	ret

00001800 <_ZN14EepromSettings6updateEv>:


struct EepromSettings EepromSettings;


void EepromSettings::update() {
    1800:	cf 93       	push	r28
    1802:	df 93       	push	r29
    if (isDirty) {
    1804:	20 91 70 02 	lds	r18, 0x0270	; 0x800270 <_ZL7isDirty>
    1808:	22 23       	and	r18, r18
    180a:	91 f0       	breq	.+36     	; 0x1830 <_ZN14EepromSettings6updateEv+0x30>
    180c:	ec 01       	movw	r28, r24
        if (saveTimer.hasTicked()) {
    180e:	81 e7       	ldi	r24, 0x71	; 113
    1810:	92 e0       	ldi	r25, 0x02	; 2
    1812:	0e 94 a2 14 	call	0x2944	; 0x2944 <_ZN5Timer9hasTickedEv>
    1816:	88 23       	and	r24, r24
    1818:	59 f0       	breq	.+22     	; 0x1830 <_ZN14EepromSettings6updateEv+0x30>
            isDirty = false;
    181a:	10 92 70 02 	sts	0x0270, r1	; 0x800270 <_ZL7isDirty>
            saveTimer.reset();
    181e:	81 e7       	ldi	r24, 0x71	; 113
    1820:	92 e0       	ldi	r25, 0x02	; 2
    1822:	0e 94 c1 14 	call	0x2982	; 0x2982 <_ZN5Timer5resetEv>

            this->save();
    1826:	ce 01       	movw	r24, r28
        }
    }
}
    1828:	df 91       	pop	r29
    182a:	cf 91       	pop	r28
    if (isDirty) {
        if (saveTimer.hasTicked()) {
            isDirty = false;
            saveTimer.reset();

            this->save();
    182c:	0c 94 e2 0b 	jmp	0x17c4	; 0x17c4 <_ZN14EepromSettings4saveEv>
        }
    }
}
    1830:	df 91       	pop	r29
    1832:	cf 91       	pop	r28
    1834:	08 95       	ret

00001836 <_ZN14EepromSettings9markDirtyEv>:
void EepromSettings::save() {
    EEPROM.put(0, *this);
}

void EepromSettings::markDirty() {
    isDirty = true;
    1836:	81 e0       	ldi	r24, 0x01	; 1
    1838:	80 93 70 02 	sts	0x0270, r24	; 0x800270 <_ZL7isDirty>
    183c:	08 95       	ret

0000183e <_ZN14EepromSettings12initDefaultsEv>:
}


void EepromSettings::initDefaults() {
    183e:	cf 93       	push	r28
    1840:	df 93       	push	r29
    1842:	ec 01       	movw	r28, r24
    memcpy_P(this, &EepromDefaults, sizeof(EepromDefaults));
    1844:	4c e0       	ldi	r20, 0x0C	; 12
    1846:	50 e0       	ldi	r21, 0x00	; 0
    1848:	60 e8       	ldi	r22, 0x80	; 128
    184a:	71 e0       	ldi	r23, 0x01	; 1
    184c:	0e 94 68 31 	call	0x62d0	; 0x62d0 <memcpy_P>
    this->save();
    1850:	ce 01       	movw	r24, r28
}
    1852:	df 91       	pop	r29
    1854:	cf 91       	pop	r28
}


void EepromSettings::initDefaults() {
    memcpy_P(this, &EepromDefaults, sizeof(EepromDefaults));
    this->save();
    1856:	0c 94 e2 0b 	jmp	0x17c4	; 0x17c4 <_ZN14EepromSettings4saveEv>

0000185a <_ZN14EepromSettings4loadEv>:
            this->save();
        }
    }
}

void EepromSettings::load() {
    185a:	ef 92       	push	r14
    185c:	ff 92       	push	r15
    185e:	0f 93       	push	r16
    1860:	1f 93       	push	r17
    1862:	cf 93       	push	r28
    1864:	df 93       	push	r29
    1866:	8c 01       	movw	r16, r24
    1868:	7c 01       	movw	r14, r24
    186a:	c0 e0       	ldi	r28, 0x00	; 0
    186c:	d0 e0       	ldi	r29, 0x00	; 0

    EERef( const int index )
        : index( index )                 {}
    
    //Access/read members.
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    186e:	ce 01       	movw	r24, r28
    1870:	0e 94 78 31 	call	0x62f0	; 0x62f0 <eeprom_read_byte>
    
    //Functionality to 'get' and 'put' objects to and from EEPROM.
    template< typename T > T &get( int idx, T &t ){
        EEPtr e = idx;
        uint8_t *ptr = (uint8_t*) &t;
        for( int count = sizeof(T) ; count ; --count, ++e )  *ptr++ = *e;
    1874:	f7 01       	movw	r30, r14
    1876:	81 93       	st	Z+, r24
    1878:	7f 01       	movw	r14, r30
    187a:	21 96       	adiw	r28, 0x01	; 1
    187c:	cc 30       	cpi	r28, 0x0C	; 12
    187e:	d1 05       	cpc	r29, r1
    1880:	b1 f7       	brne	.-20     	; 0x186e <_ZN14EepromSettings4loadEv+0x14>
    EEPROM.get(0, *this);

    if (this->magic != EEPROM_MAGIC)
    1882:	f8 01       	movw	r30, r16
    1884:	80 81       	ld	r24, Z
    1886:	91 81       	ldd	r25, Z+1	; 0x01
    1888:	a2 81       	ldd	r26, Z+2	; 0x02
    188a:	b3 81       	ldd	r27, Z+3	; 0x03
    188c:	09 97       	sbiw	r24, 0x09	; 9
    188e:	a1 05       	cpc	r26, r1
    1890:	b1 05       	cpc	r27, r1
    1892:	49 f0       	breq	.+18     	; 0x18a6 <_ZN14EepromSettings4loadEv+0x4c>
        this->initDefaults();
    1894:	c8 01       	movw	r24, r16
}
    1896:	df 91       	pop	r29
    1898:	cf 91       	pop	r28
    189a:	1f 91       	pop	r17
    189c:	0f 91       	pop	r16
    189e:	ff 90       	pop	r15
    18a0:	ef 90       	pop	r14

void EepromSettings::load() {
    EEPROM.get(0, *this);

    if (this->magic != EEPROM_MAGIC)
        this->initDefaults();
    18a2:	0c 94 1f 0c 	jmp	0x183e	; 0x183e <_ZN14EepromSettings12initDefaultsEv>
}
    18a6:	df 91       	pop	r29
    18a8:	cf 91       	pop	r28
    18aa:	1f 91       	pop	r17
    18ac:	0f 91       	pop	r16
    18ae:	ff 90       	pop	r15
    18b0:	ef 90       	pop	r14
    18b2:	08 95       	ret

000018b4 <_GLOBAL__sub_I_EepromSettings>:
#include "settings_eeprom.h"

#include "timer.h"


static Timer saveTimer = Timer(EEPROM_SAVE_TIME);
    18b4:	68 e8       	ldi	r22, 0x88	; 136
    18b6:	73 e1       	ldi	r23, 0x13	; 19
    18b8:	81 e7       	ldi	r24, 0x71	; 113
    18ba:	92 e0       	ldi	r25, 0x02	; 2
    18bc:	0c 94 8b 14 	jmp	0x2916	; 0x2916 <_ZN5TimerC1Ej>

000018c0 <_ZL23globalMenuButtonHandler6ButtonN7Buttons9PressTypeE>:
static void globalMenuButtonHandler(
    Button button,
    Buttons::PressType pressType
) {
	localButton = button;
    if (
    18c0:	90 91 88 02 	lds	r25, 0x0288	; 0x800288 <_ZN12StateMachine12currentStateE>
    18c4:	94 30       	cpi	r25, 0x04	; 4
    18c6:	39 f0       	breq	.+14     	; 0x18d6 <_ZL23globalMenuButtonHandler6ButtonN7Buttons9PressTypeE+0x16>
        StateMachine::currentState != StateMachine::State::MENU &&
    18c8:	82 30       	cpi	r24, 0x02	; 2
    18ca:	29 f4       	brne	.+10     	; 0x18d6 <_ZL23globalMenuButtonHandler6ButtonN7Buttons9PressTypeE+0x16>
        button == Button::MODE &&
    18cc:	62 30       	cpi	r22, 0x02	; 2
    18ce:	19 f4       	brne	.+6      	; 0x18d6 <_ZL23globalMenuButtonHandler6ButtonN7Buttons9PressTypeE+0x16>
        pressType == Buttons::PressType::HOLDING
    ) {
        StateMachine::switchState(StateMachine::State::MENU);
    18d0:	84 e0       	ldi	r24, 0x04	; 4
    18d2:	0c 94 67 0d 	jmp	0x1ace	; 0x1ace <_ZN12StateMachine11switchStateENS_5StateE>
    18d6:	08 95       	ret

000018d8 <_Z9setupPinsv>:
    // Switch to initial state.
    StateMachine::switchState(StateMachine::State::SEARCH);
}

void setupPins() {
    pinMode(PIN_LED, OUTPUT);
    18d8:	61 e0       	ldi	r22, 0x01	; 1
    18da:	8d e0       	ldi	r24, 0x0D	; 13
    18dc:	0e 94 6a 19 	call	0x32d4	; 0x32d4 <pinMode>
    pinMode(PIN_BUZZER, OUTPUT);
    18e0:	61 e0       	ldi	r22, 0x01	; 1
    18e2:	86 e0       	ldi	r24, 0x06	; 6
    18e4:	0e 94 6a 19 	call	0x32d4	; 0x32d4 <pinMode>
    pinMode(PIN_BUTTON_UP, INPUT_PULLUP);
    18e8:	62 e0       	ldi	r22, 0x02	; 2
    18ea:	82 e0       	ldi	r24, 0x02	; 2
    18ec:	0e 94 6a 19 	call	0x32d4	; 0x32d4 <pinMode>
    pinMode(PIN_BUTTON_MODE, INPUT_PULLUP);
    18f0:	62 e0       	ldi	r22, 0x02	; 2
    18f2:	83 e0       	ldi	r24, 0x03	; 3
    18f4:	0e 94 6a 19 	call	0x32d4	; 0x32d4 <pinMode>
    pinMode(PIN_BUTTON_DOWN, INPUT_PULLUP);
    18f8:	62 e0       	ldi	r22, 0x02	; 2
    18fa:	84 e0       	ldi	r24, 0x04	; 4
    18fc:	0e 94 6a 19 	call	0x32d4	; 0x32d4 <pinMode>
    pinMode(PIN_BUTTON_SAVE, INPUT_PULLUP);
    1900:	62 e0       	ldi	r22, 0x02	; 2
    1902:	85 e0       	ldi	r24, 0x05	; 5
    1904:	0e 94 6a 19 	call	0x32d4	; 0x32d4 <pinMode>

    pinMode(PIN_LED_A,OUTPUT);
    1908:	61 e0       	ldi	r22, 0x01	; 1
    190a:	8e e0       	ldi	r24, 0x0E	; 14
    190c:	0e 94 6a 19 	call	0x32d4	; 0x32d4 <pinMode>
    #ifdef USE_DIVERSITY
        pinMode(PIN_LED_B,OUTPUT);
    #endif

    pinMode(PIN_RSSI_A, INPUT_PULLUP);
    1910:	62 e0       	ldi	r22, 0x02	; 2
    1912:	84 e1       	ldi	r24, 0x14	; 20
    1914:	0e 94 6a 19 	call	0x32d4	; 0x32d4 <pinMode>
    #ifdef USE_DIVERSITY
        pinMode(PIN_RSSI_B, INPUT_PULLUP);
    #endif

    pinMode(PIN_SPI_SLAVE_SELECT, OUTPUT);
    1918:	61 e0       	ldi	r22, 0x01	; 1
    191a:	8c e0       	ldi	r24, 0x0C	; 12
    191c:	0e 94 6a 19 	call	0x32d4	; 0x32d4 <pinMode>
    pinMode(PIN_SPI_DATA, OUTPUT);
    1920:	61 e0       	ldi	r22, 0x01	; 1
    1922:	8b e0       	ldi	r24, 0x0B	; 11
    1924:	0e 94 6a 19 	call	0x32d4	; 0x32d4 <pinMode>
	pinMode(PIN_SPI_CLOCK, OUTPUT);
    1928:	61 e0       	ldi	r22, 0x01	; 1
    192a:	8d e0       	ldi	r24, 0x0D	; 13
    192c:	0e 94 6a 19 	call	0x32d4	; 0x32d4 <pinMode>

    digitalWrite(PIN_SPI_SLAVE_SELECT, HIGH);
    1930:	61 e0       	ldi	r22, 0x01	; 1
    1932:	8c e0       	ldi	r24, 0x0C	; 12
    1934:	0e 94 a6 19 	call	0x334c	; 0x334c <digitalWrite>
    digitalWrite(PIN_SPI_CLOCK, LOW);
    1938:	60 e0       	ldi	r22, 0x00	; 0
    193a:	8d e0       	ldi	r24, 0x0D	; 13
    193c:	0e 94 a6 19 	call	0x334c	; 0x334c <digitalWrite>
    digitalWrite(PIN_SPI_DATA, LOW);
    1940:	60 e0       	ldi	r22, 0x00	; 0
    1942:	8b e0       	ldi	r24, 0x0B	; 11
    1944:	0c 94 a6 19 	jmp	0x334c	; 0x334c <digitalWrite>

00001948 <_Z13setupSettingsv>:
}

void setupSettings() {
    EepromSettings.load();
    1948:	84 e6       	ldi	r24, 0x64	; 100
    194a:	92 e0       	ldi	r25, 0x02	; 2
    194c:	0e 94 2d 0c 	call	0x185a	; 0x185a <_ZN14EepromSettings4loadEv>
    Receiver::setChannel(EepromSettings.startChannel);
    1950:	80 91 68 02 	lds	r24, 0x0268	; 0x800268 <EepromSettings+0x4>
    1954:	0c 94 aa 0a 	jmp	0x1554	; 0x1554 <_ZN8Receiver10setChannelEh>

00001958 <setup>:


void setup()
{
	
    setupPins();
    1958:	0e 94 6c 0c 	call	0x18d8	; 0x18d8 <_Z9setupPinsv>

    // Enable buzzer and LED for duration of setup process.
    digitalWrite(PIN_LED, HIGH);
    195c:	61 e0       	ldi	r22, 0x01	; 1
    195e:	8d e0       	ldi	r24, 0x0D	; 13
    1960:	0e 94 a6 19 	call	0x334c	; 0x334c <digitalWrite>
    digitalWrite(PIN_BUZZER, LOW);
    1964:	60 e0       	ldi	r22, 0x00	; 0
    1966:	86 e0       	ldi	r24, 0x06	; 6
    1968:	0e 94 a6 19 	call	0x334c	; 0x334c <digitalWrite>

    setupSettings();
    196c:	0e 94 a4 0c 	call	0x1948	; 0x1948 <_Z13setupSettingsv>

    StateMachine::setup();
    1970:	0e 94 14 0d 	call	0x1a28	; 0x1a28 <_ZN12StateMachine5setupEv>
    Receiver::setup();
    1974:	0e 94 5b 0b 	call	0x16b6	; 0x16b6 <_ZN8Receiver5setupEv>
    Ui::setup();
    1978:	0e 94 d6 14 	call	0x29ac	; 0x29ac <_ZN2Ui5setupEv>

    Receiver::setActiveReceiver(Receiver::ReceiverId::A);
    197c:	80 e0       	ldi	r24, 0x00	; 0
    197e:	0e 94 b8 0a 	call	0x1570	; 0x1570 <_ZN8Receiver17setActiveReceiverENS_10ReceiverIdE>
	
	//Serial.begin(250000);
	
	
    // Setup complete.
    digitalWrite(PIN_LED, LOW);
    1982:	60 e0       	ldi	r22, 0x00	; 0
    1984:	8d e0       	ldi	r24, 0x0D	; 13
    1986:	0e 94 a6 19 	call	0x334c	; 0x334c <digitalWrite>
    digitalWrite(PIN_BUZZER, HIGH);
    198a:	61 e0       	ldi	r22, 0x01	; 1
    198c:	86 e0       	ldi	r24, 0x06	; 6
    198e:	0e 94 a6 19 	call	0x334c	; 0x334c <digitalWrite>

    Buttons::registerChangeFunc(globalMenuButtonHandler);
    1992:	80 e6       	ldi	r24, 0x60	; 96
    1994:	9c e0       	ldi	r25, 0x0C	; 12
    1996:	0e 94 46 0a 	call	0x148c	; 0x148c <_ZN7Buttons18registerChangeFuncEPFv6ButtonNS_9PressTypeEE>

    // Switch to initial state.
    StateMachine::switchState(StateMachine::State::SEARCH);
    199a:	81 e0       	ldi	r24, 0x01	; 1
    199c:	0c 94 67 0d 	jmp	0x1ace	; 0x1ace <_ZN12StateMachine11switchStateENS_5StateE>

000019a0 <loop>:
    Receiver::setChannel(EepromSettings.startChannel);
}

static Button localButton = Button::COUNT;
static Button localButtonOld = Button::COUNT;
void loop() {
    19a0:	0f 93       	push	r16
    19a2:	1f 93       	push	r17
		//Serial.print(int(localButton));
		//Serial.print("\r\n");
		//
		//localButtonOld = localButton;
	//}
    Receiver::update();
    19a4:	0e 94 5c 0b 	call	0x16b8	; 0x16b8 <_ZN8Receiver6updateEv>
    Buttons::update();
    19a8:	0e 94 2e 0a 	call	0x145c	; 0x145c <_ZN7Buttons6updateEv>

    StateMachine::update();
    19ac:	0e 94 18 0d 	call	0x1a30	; 0x1a30 <_ZN12StateMachine6updateEv>
    Ui::update();
    19b0:	0e 94 fb 14 	call	0x29f6	; 0x29f6 <_ZN2Ui6updateEv>
    EepromSettings.update();
    19b4:	84 e6       	ldi	r24, 0x64	; 100
    19b6:	92 e0       	ldi	r25, 0x02	; 2
    19b8:	0e 94 00 0c 	call	0x1800	; 0x1800 <_ZN14EepromSettings6updateEv>


    if (
        StateMachine::currentState != StateMachine::State::SCREENSAVER
        && StateMachine::currentState != StateMachine::State::BANDSCAN
        && (millis() - Buttons::lastChangeTime) >
    19bc:	80 91 88 02 	lds	r24, 0x0288	; 0x800288 <_ZN12StateMachine12currentStateE>
    19c0:	82 50       	subi	r24, 0x02	; 2
    19c2:	82 30       	cpi	r24, 0x02	; 2
    19c4:	d0 f0       	brcs	.+52     	; 0x19fa <loop+0x5a>
    19c6:	0e 94 71 18 	call	0x30e2	; 0x30e2 <millis>
    19ca:	00 91 d2 01 	lds	r16, 0x01D2	; 0x8001d2 <__data_end>
    19ce:	10 91 d3 01 	lds	r17, 0x01D3	; 0x8001d3 <__data_end+0x1>
    19d2:	20 91 d4 01 	lds	r18, 0x01D4	; 0x8001d4 <__data_end+0x2>
    19d6:	30 91 d5 01 	lds	r19, 0x01D5	; 0x8001d5 <__data_end+0x3>
    19da:	dc 01       	movw	r26, r24
    19dc:	cb 01       	movw	r24, r22
    19de:	80 1b       	sub	r24, r16
    19e0:	91 0b       	sbc	r25, r17
    19e2:	a2 0b       	sbc	r26, r18
    19e4:	b3 0b       	sbc	r27, r19
    19e6:	81 3c       	cpi	r24, 0xC1	; 193
    19e8:	96 4c       	sbci	r25, 0xC6	; 198
    19ea:	af 4f       	sbci	r26, 0xFF	; 255
    19ec:	bf 4f       	sbci	r27, 0xFF	; 255
    19ee:	28 f0       	brcs	.+10     	; 0x19fa <loop+0x5a>
            (SCREENSAVER_TIMEOUT * 1000)
    ) {
        StateMachine::switchState(StateMachine::State::SCREENSAVER);
    19f0:	83 e0       	ldi	r24, 0x03	; 3
    }
}
    19f2:	1f 91       	pop	r17
    19f4:	0f 91       	pop	r16
        StateMachine::currentState != StateMachine::State::SCREENSAVER
        && StateMachine::currentState != StateMachine::State::BANDSCAN
        && (millis() - Buttons::lastChangeTime) >
            (SCREENSAVER_TIMEOUT * 1000)
    ) {
        StateMachine::switchState(StateMachine::State::SCREENSAVER);
    19f6:	0c 94 67 0d 	jmp	0x1ace	; 0x1ace <_ZN12StateMachine11switchStateENS_5StateE>
    }
}
    19fa:	1f 91       	pop	r17
    19fc:	0f 91       	pop	r16
    19fe:	08 95       	ret

00001a00 <_ZN12StateMachine12StateHandler8onUpdateEv>:
        public:
            virtual void onInitialDraw() {};
            virtual void onUpdateDraw() {};

            virtual void onEnter() {};
            virtual void onUpdate() {};
    1a00:	08 95       	ret

00001a02 <_ZN12StateMachine12StateHandler6onExitEv>:
            virtual void onExit() {};
    1a02:	08 95       	ret

00001a04 <_ZN12StateMachine12StateHandler14onButtonChangeE6ButtonN7Buttons9PressTypeE>:

            virtual void onButtonChange(
    1a04:	08 95       	ret

00001a06 <_ZN12StateMachineL14onButtonChangeE6ButtonN7Buttons9PressTypeE>:
    //     }

    //     #undef STATE_FACTORY
    // }

    static void onButtonChange(Button button, Buttons::PressType pressType) {
    1a06:	46 2f       	mov	r20, r22
        if (currentHandler != nullptr) {
    1a08:	a0 91 89 02 	lds	r26, 0x0289	; 0x800289 <_ZN12StateMachineL14currentHandlerE>
    1a0c:	b0 91 8a 02 	lds	r27, 0x028A	; 0x80028a <_ZN12StateMachineL14currentHandlerE+0x1>
    1a10:	10 97       	sbiw	r26, 0x00	; 0
    1a12:	49 f0       	breq	.+18     	; 0x1a26 <_ZN12StateMachineL14onButtonChangeE6ButtonN7Buttons9PressTypeE+0x20>
            currentHandler->onButtonChange(button, pressType);
    1a14:	ed 91       	ld	r30, X+
    1a16:	fc 91       	ld	r31, X
    1a18:	11 97       	sbiw	r26, 0x01	; 1
    1a1a:	02 84       	ldd	r0, Z+10	; 0x0a
    1a1c:	f3 85       	ldd	r31, Z+11	; 0x0b
    1a1e:	e0 2d       	mov	r30, r0
    1a20:	68 2f       	mov	r22, r24
    1a22:	cd 01       	movw	r24, r26
    1a24:	09 94       	ijmp
    1a26:	08 95       	ret

00001a28 <_ZN12StateMachine5setupEv>:
    State currentState = State::BOOT;
    State lastState = currentState;


    void setup() {
        Buttons::registerChangeFunc(onButtonChange);
    1a28:	83 e0       	ldi	r24, 0x03	; 3
    1a2a:	9d e0       	ldi	r25, 0x0D	; 13
    1a2c:	0c 94 46 0a 	jmp	0x148c	; 0x148c <_ZN7Buttons18registerChangeFuncEPFv6ButtonNS_9PressTypeEE>

00001a30 <_ZN12StateMachine6updateEv>:
    }

    void update() {
        if (currentHandler) {
    1a30:	80 91 89 02 	lds	r24, 0x0289	; 0x800289 <_ZN12StateMachineL14currentHandlerE>
    1a34:	90 91 8a 02 	lds	r25, 0x028A	; 0x80028a <_ZN12StateMachineL14currentHandlerE+0x1>
    1a38:	00 97       	sbiw	r24, 0x00	; 0
    1a3a:	09 f4       	brne	.+2      	; 0x1a3e <_ZN12StateMachine6updateEv+0xe>
    1a3c:	47 c0       	rjmp	.+142    	; 0x1acc <_ZN12StateMachine6updateEv+0x9c>
            currentHandler->onUpdate();
    1a3e:	dc 01       	movw	r26, r24
    1a40:	ed 91       	ld	r30, X+
    1a42:	fc 91       	ld	r31, X
    1a44:	06 80       	ldd	r0, Z+6	; 0x06
    1a46:	f7 81       	ldd	r31, Z+7	; 0x07
    1a48:	e0 2d       	mov	r30, r0
    1a4a:	09 95       	icall

            // FIXME: This should probably be handled in the UI module but not
            // 100% on how to decouple them at this stage
            static Timer drawTimer = Timer(OLED_FRAMERATE);
    1a4c:	80 91 7f 02 	lds	r24, 0x027F	; 0x80027f <_ZGVZN12StateMachine6updateEvE9drawTimer>
    1a50:	81 11       	cpse	r24, r1
    1a52:	09 c0       	rjmp	.+18     	; 0x1a66 <_ZN12StateMachine6updateEv+0x36>
    1a54:	68 e2       	ldi	r22, 0x28	; 40
    1a56:	70 e0       	ldi	r23, 0x00	; 0
    1a58:	88 e7       	ldi	r24, 0x78	; 120
    1a5a:	92 e0       	ldi	r25, 0x02	; 2
    1a5c:	0e 94 8b 14 	call	0x2916	; 0x2916 <_ZN5TimerC1Ej>
    1a60:	81 e0       	ldi	r24, 0x01	; 1
    1a62:	80 93 7f 02 	sts	0x027F, r24	; 0x80027f <_ZGVZN12StateMachine6updateEvE9drawTimer>
            if (currentHandler
                && Ui::shouldDrawUpdate
                && drawTimer.hasTicked()
    1a66:	80 91 89 02 	lds	r24, 0x0289	; 0x800289 <_ZN12StateMachineL14currentHandlerE>
    1a6a:	90 91 8a 02 	lds	r25, 0x028A	; 0x80028a <_ZN12StateMachineL14currentHandlerE+0x1>
    1a6e:	89 2b       	or	r24, r25
    1a70:	69 f1       	breq	.+90     	; 0x1acc <_ZN12StateMachine6updateEv+0x9c>

            // FIXME: This should probably be handled in the UI module but not
            // 100% on how to decouple them at this stage
            static Timer drawTimer = Timer(OLED_FRAMERATE);
            if (currentHandler
                && Ui::shouldDrawUpdate
    1a72:	80 91 8d 02 	lds	r24, 0x028D	; 0x80028d <_ZN2Ui16shouldDrawUpdateE>
    1a76:	88 23       	and	r24, r24
    1a78:	49 f1       	breq	.+82     	; 0x1acc <_ZN12StateMachine6updateEv+0x9c>
                && drawTimer.hasTicked()
    1a7a:	88 e7       	ldi	r24, 0x78	; 120
    1a7c:	92 e0       	ldi	r25, 0x02	; 2
    1a7e:	0e 94 a2 14 	call	0x2944	; 0x2944 <_ZN5Timer9hasTickedEv>
    1a82:	81 11       	cpse	r24, r1
    1a84:	01 c0       	rjmp	.+2      	; 0x1a88 <_ZN12StateMachine6updateEv+0x58>
    1a86:	08 95       	ret
            ) {
                if (Ui::shouldFullRedraw) {
    1a88:	80 91 8b 02 	lds	r24, 0x028B	; 0x80028b <_ZN2Ui16shouldFullRedrawE>
    1a8c:	88 23       	and	r24, r24
    1a8e:	69 f0       	breq	.+26     	; 0x1aaa <_ZN12StateMachine6updateEv+0x7a>
                    currentHandler->onInitialDraw();
    1a90:	80 91 89 02 	lds	r24, 0x0289	; 0x800289 <_ZN12StateMachineL14currentHandlerE>
    1a94:	90 91 8a 02 	lds	r25, 0x028A	; 0x80028a <_ZN12StateMachineL14currentHandlerE+0x1>
    1a98:	dc 01       	movw	r26, r24
    1a9a:	ed 91       	ld	r30, X+
    1a9c:	fc 91       	ld	r31, X
    1a9e:	01 90       	ld	r0, Z+
    1aa0:	f0 81       	ld	r31, Z
    1aa2:	e0 2d       	mov	r30, r0
    1aa4:	09 95       	icall
                    Ui::shouldFullRedraw = false;
    1aa6:	10 92 8b 02 	sts	0x028B, r1	; 0x80028b <_ZN2Ui16shouldFullRedrawE>
                }

                currentHandler->onUpdateDraw();
    1aaa:	80 91 89 02 	lds	r24, 0x0289	; 0x800289 <_ZN12StateMachineL14currentHandlerE>
    1aae:	90 91 8a 02 	lds	r25, 0x028A	; 0x80028a <_ZN12StateMachineL14currentHandlerE+0x1>
    1ab2:	dc 01       	movw	r26, r24
    1ab4:	ed 91       	ld	r30, X+
    1ab6:	fc 91       	ld	r31, X
    1ab8:	02 80       	ldd	r0, Z+2	; 0x02
    1aba:	f3 81       	ldd	r31, Z+3	; 0x03
    1abc:	e0 2d       	mov	r30, r0
    1abe:	09 95       	icall
                Ui::shouldDrawUpdate = false;
    1ac0:	10 92 8d 02 	sts	0x028D, r1	; 0x80028d <_ZN2Ui16shouldDrawUpdateE>
                drawTimer.reset();
    1ac4:	88 e7       	ldi	r24, 0x78	; 120
    1ac6:	92 e0       	ldi	r25, 0x02	; 2
    1ac8:	0c 94 c1 14 	jmp	0x2982	; 0x2982 <_ZN5Timer5resetEv>
    1acc:	08 95       	ret

00001ace <_ZN12StateMachine11switchStateENS_5StateE>:
            }
        }
    }

    void switchState(State newState) {
    1ace:	cf 93       	push	r28
    1ad0:	df 93       	push	r29
    1ad2:	c8 2f       	mov	r28, r24
        if (currentHandler != nullptr) {
    1ad4:	80 91 89 02 	lds	r24, 0x0289	; 0x800289 <_ZN12StateMachineL14currentHandlerE>
    1ad8:	90 91 8a 02 	lds	r25, 0x028A	; 0x80028a <_ZN12StateMachineL14currentHandlerE+0x1>
    1adc:	00 97       	sbiw	r24, 0x00	; 0
    1ade:	39 f0       	breq	.+14     	; 0x1aee <_ZN12StateMachine11switchStateENS_5StateE+0x20>
            currentHandler->onExit();
    1ae0:	dc 01       	movw	r26, r24
    1ae2:	ed 91       	ld	r30, X+
    1ae4:	fc 91       	ld	r31, X
    1ae6:	00 84       	ldd	r0, Z+8	; 0x08
    1ae8:	f1 85       	ldd	r31, Z+9	; 0x09
    1aea:	e0 2d       	mov	r30, r0
    1aec:	09 95       	icall
        }

        lastState = currentState;
    1aee:	80 91 88 02 	lds	r24, 0x0288	; 0x800288 <_ZN12StateMachine12currentStateE>
    1af2:	80 93 87 02 	sts	0x0287, r24	; 0x800287 <_ZN12StateMachine9lastStateE>
        currentState = newState;
    1af6:	c0 93 88 02 	sts	0x0288, r28	; 0x800288 <_ZN12StateMachine12currentStateE>
        // currentHandler = getStateHandler(newState);
        switch (newState){
    1afa:	c3 30       	cpi	r28, 0x03	; 3
    1afc:	09 f4       	brne	.+2      	; 0x1b00 <_ZN12StateMachine11switchStateENS_5StateE+0x32>
    1afe:	53 c0       	rjmp	.+166    	; 0x1ba6 <_ZN12StateMachine11switchStateENS_5StateE+0xd8>
    1b00:	d0 f4       	brcc	.+52     	; 0x1b36 <_ZN12StateMachine11switchStateENS_5StateE+0x68>
    1b02:	c1 30       	cpi	r28, 0x01	; 1
    1b04:	61 f1       	breq	.+88     	; 0x1b5e <_ZN12StateMachine11switchStateENS_5StateE+0x90>
    1b06:	c2 30       	cpi	r28, 0x02	; 2
    1b08:	09 f0       	breq	.+2      	; 0x1b0c <_ZN12StateMachine11switchStateENS_5StateE+0x3e>
    1b0a:	92 c0       	rjmp	.+292    	; 0x1c30 <_ZN12StateMachine11switchStateENS_5StateE+0x162>
                break;
            case State::SCREENSAVER:
                currentHandler = new  ScreensaverStateHandler();
                break;
            case State::BANDSCAN:
                currentHandler = new BandScanStateHandler();
    1b0c:	8c e2       	ldi	r24, 0x2C	; 44
    1b0e:	90 e0       	ldi	r25, 0x00	; 0
    1b10:	0e 94 84 17 	call	0x2f08	; 0x2f08 <_Znwj>
    1b14:	2c e2       	ldi	r18, 0x2C	; 44
    1b16:	ec 01       	movw	r28, r24
    1b18:	19 92       	st	Y+, r1
    1b1a:	2a 95       	dec	r18
    1b1c:	e9 f7       	brne	.-6      	; 0x1b18 <_ZN12StateMachine11switchStateENS_5StateE+0x4a>
#include "channels.h"
#include "state.h"


namespace StateMachine {
    class BandScanStateHandler : public StateMachine::StateHandler {
    1b1e:	2b e0       	ldi	r18, 0x0B	; 11
    1b20:	31 e0       	ldi	r19, 0x01	; 1
    1b22:	fc 01       	movw	r30, r24
    1b24:	31 83       	std	Z+1, r19	; 0x01
    1b26:	20 83       	st	Z, r18
    1b28:	34 96       	adiw	r30, 0x04	; 4
    1b2a:	28 e2       	ldi	r18, 0x28	; 40
    1b2c:	df 01       	movw	r26, r30
    1b2e:	1d 92       	st	X+, r1
    1b30:	2a 95       	dec	r18
    1b32:	e9 f7       	brne	.-6      	; 0x1b2e <_ZN12StateMachine11switchStateENS_5StateE+0x60>
    1b34:	78 c0       	rjmp	.+240    	; 0x1c26 <_ZN12StateMachine11switchStateENS_5StateE+0x158>
        }

        lastState = currentState;
        currentState = newState;
        // currentHandler = getStateHandler(newState);
        switch (newState){
    1b36:	c5 30       	cpi	r28, 0x05	; 5
    1b38:	09 f4       	brne	.+2      	; 0x1b3c <_ZN12StateMachine11switchStateENS_5StateE+0x6e>
    1b3a:	6c c0       	rjmp	.+216    	; 0x1c14 <_ZN12StateMachine11switchStateENS_5StateE+0x146>
    1b3c:	08 f4       	brcc	.+2      	; 0x1b40 <_ZN12StateMachine11switchStateENS_5StateE+0x72>
    1b3e:	4d c0       	rjmp	.+154    	; 0x1bda <_ZN12StateMachine11switchStateENS_5StateE+0x10c>
    1b40:	c6 30       	cpi	r28, 0x06	; 6
    1b42:	09 f0       	breq	.+2      	; 0x1b46 <_ZN12StateMachine11switchStateENS_5StateE+0x78>
    1b44:	75 c0       	rjmp	.+234    	; 0x1c30 <_ZN12StateMachine11switchStateENS_5StateE+0x162>
                break;
            case State::SETTINGS:
                currentHandler = new   SettingsStateHandler();
                break;
            case State::SETTINGS_RSSI:
                currentHandler = new   SettingsRssiStateHandler();
    1b46:	84 e0       	ldi	r24, 0x04	; 4
    1b48:	90 e0       	ldi	r25, 0x00	; 0
    1b4a:	0e 94 84 17 	call	0x2f08	; 0x2f08 <_Znwj>
    1b4e:	fc 01       	movw	r30, r24
    1b50:	12 82       	std	Z+2, r1	; 0x02
    1b52:	13 82       	std	Z+3, r1	; 0x03

#include "state.h"


namespace StateMachine {
    class SettingsRssiStateHandler : public StateMachine::StateHandler {
    1b54:	8b e5       	ldi	r24, 0x5B	; 91
    1b56:	91 e0       	ldi	r25, 0x01	; 1
    1b58:	91 83       	std	Z+1, r25	; 0x01
    1b5a:	80 83       	st	Z, r24
    1b5c:	56 c0       	rjmp	.+172    	; 0x1c0a <_ZN12StateMachine11switchStateENS_5StateE+0x13c>
        lastState = currentState;
        currentState = newState;
        // currentHandler = getStateHandler(newState);
        switch (newState){
            case State::SEARCH:
                currentHandler = new  SearchStateHandler();
    1b5e:	87 e2       	ldi	r24, 0x27	; 39
    1b60:	90 e0       	ldi	r25, 0x00	; 0
    1b62:	0e 94 84 17 	call	0x2f08	; 0x2f08 <_Znwj>
    1b66:	fc 01       	movw	r30, r24
    1b68:	87 e2       	ldi	r24, 0x27	; 39
    1b6a:	df 01       	movw	r26, r30
    1b6c:	1d 92       	st	X+, r1
    1b6e:	8a 95       	dec	r24
    1b70:	e9 f7       	brne	.-6      	; 0x1b6c <_ZN12StateMachine11switchStateENS_5StateE+0x9e>

#define PEAK_LOOKAHEAD 4


namespace StateMachine {
    class SearchStateHandler : public StateMachine::StateHandler {
    1b72:	8b e3       	ldi	r24, 0x3B	; 59
    1b74:	91 e0       	ldi	r25, 0x01	; 1
    1b76:	91 83       	std	Z+1, r25	; 0x01
    1b78:	80 83       	st	Z, r24
    1b7a:	c3 83       	std	Z+3, r28	; 0x03
    1b7c:	17 82       	std	Z+7, r1	; 0x07
    1b7e:	10 86       	std	Z+8, r1	; 0x08
    1b80:	11 86       	std	Z+9, r1	; 0x09
    1b82:	12 86       	std	Z+10, r1	; 0x0a
    1b84:	c3 87       	std	Z+11, r28	; 0x0b
                MenuIcon icon = nullptr;
                MenuHandler handler = nullptr;
            };


            StateMenuHelper(void* state) { this->state = state; }
    1b86:	df 01       	movw	r26, r30
    1b88:	1c 96       	adiw	r26, 0x0c	; 12
    1b8a:	80 e1       	ldi	r24, 0x10	; 16
    1b8c:	ed 01       	movw	r28, r26
    1b8e:	19 92       	st	Y+, r1
    1b90:	8a 95       	dec	r24
    1b92:	e9 f7       	brne	.-6      	; 0x1b8e <_ZN12StateMachine11switchStateENS_5StateE+0xc0>
    1b94:	17 8e       	std	Z+31, r1	; 0x1f
    1b96:	16 8e       	std	Z+30, r1	; 0x1e
    1b98:	11 a2       	std	Z+33, r1	; 0x21
    1b9a:	10 a2       	std	Z+32, r1	; 0x20
    1b9c:	12 a2       	std	Z+34, r1	; 0x22
    1b9e:	13 a2       	std	Z+35, r1	; 0x23
    1ba0:	f5 8f       	std	Z+29, r31	; 0x1d
    1ba2:	e4 8f       	std	Z+28, r30	; 0x1c
    1ba4:	32 c0       	rjmp	.+100    	; 0x1c0a <_ZN12StateMachine11switchStateENS_5StateE+0x13c>
                break;
            case State::SCREENSAVER:
                currentHandler = new  ScreensaverStateHandler();
    1ba6:	8a e0       	ldi	r24, 0x0A	; 10
    1ba8:	90 e0       	ldi	r25, 0x00	; 0
    1baa:	0e 94 84 17 	call	0x2f08	; 0x2f08 <_Znwj>
    1bae:	ec 01       	movw	r28, r24
    1bb0:	8a e0       	ldi	r24, 0x0A	; 10
    1bb2:	fe 01       	movw	r30, r28
    1bb4:	11 92       	st	Z+, r1
    1bb6:	8a 95       	dec	r24
    1bb8:	e9 f7       	brne	.-6      	; 0x1bb4 <_ZN12StateMachine11switchStateENS_5StateE+0xe6>
#include "timer.h"
#include "settings.h"


namespace StateMachine {
    class ScreensaverStateHandler : public StateMachine::StateHandler {
    1bba:	2b e2       	ldi	r18, 0x2B	; 43
    1bbc:	31 e0       	ldi	r19, 0x01	; 1
    1bbe:	de 01       	movw	r26, r28
    1bc0:	2d 93       	st	X+, r18
    1bc2:	3d 93       	st	X+, r19
    1bc4:	cd 01       	movw	r24, r26
    1bc6:	68 eb       	ldi	r22, 0xB8	; 184
    1bc8:	7b e0       	ldi	r23, 0x0B	; 11
    1bca:	0e 94 8b 14 	call	0x2916	; 0x2916 <_ZN5TimerC1Ej>
    1bce:	19 86       	std	Y+9, r1	; 0x09
    1bd0:	d0 93 8a 02 	sts	0x028A, r29	; 0x80028a <_ZN12StateMachineL14currentHandlerE+0x1>
    1bd4:	c0 93 89 02 	sts	0x0289, r28	; 0x800289 <_ZN12StateMachineL14currentHandlerE>
                break;
    1bd8:	2f c0       	rjmp	.+94     	; 0x1c38 <_ZN12StateMachine11switchStateENS_5StateE+0x16a>
            case State::BANDSCAN:
                currentHandler = new BandScanStateHandler();
                break;
            case State::MENU:
                currentHandler = new  MenuStateHandler();
    1bda:	8e e1       	ldi	r24, 0x1E	; 30
    1bdc:	90 e0       	ldi	r25, 0x00	; 0
    1bde:	0e 94 84 17 	call	0x2f08	; 0x2f08 <_Znwj>
    1be2:	fc 01       	movw	r30, r24
    1be4:	8e e1       	ldi	r24, 0x1E	; 30
    1be6:	ef 01       	movw	r28, r30
    1be8:	19 92       	st	Y+, r1
    1bea:	8a 95       	dec	r24
    1bec:	e9 f7       	brne	.-6      	; 0x1be8 <_ZN12StateMachine11switchStateENS_5StateE+0x11a>
#include "state.h"
#include "ui_menu.h"


namespace StateMachine {
    class MenuStateHandler : public StateMachine::StateHandler {
    1bee:	df 01       	movw	r26, r30
    1bf0:	8b e1       	ldi	r24, 0x1B	; 27
    1bf2:	91 e0       	ldi	r25, 0x01	; 1
    1bf4:	8d 93       	st	X+, r24
    1bf6:	9d 93       	st	X+, r25
        const char* text = nullptr;
        Ui::MenuHandler handler = nullptr;
        const unsigned char* icon = nullptr;
    };

    class MenuHelper {
    1bf8:	88 e1       	ldi	r24, 0x18	; 24
    1bfa:	ed 01       	movw	r28, r26
    1bfc:	19 92       	st	Y+, r1
    1bfe:	8a 95       	dec	r24
    1c00:	e9 f7       	brne	.-6      	; 0x1bfc <_ZN12StateMachine11switchStateENS_5StateE+0x12e>
    1c02:	13 8e       	std	Z+27, r1	; 0x1b
    1c04:	12 8e       	std	Z+26, r1	; 0x1a
    1c06:	15 8e       	std	Z+29, r1	; 0x1d
    1c08:	14 8e       	std	Z+28, r1	; 0x1c
    1c0a:	f0 93 8a 02 	sts	0x028A, r31	; 0x80028a <_ZN12StateMachineL14currentHandlerE+0x1>
    1c0e:	e0 93 89 02 	sts	0x0289, r30	; 0x800289 <_ZN12StateMachineL14currentHandlerE>
                break;
    1c12:	12 c0       	rjmp	.+36     	; 0x1c38 <_ZN12StateMachine11switchStateENS_5StateE+0x16a>
            case State::SETTINGS:
                currentHandler = new   SettingsStateHandler();
    1c14:	82 e0       	ldi	r24, 0x02	; 2
    1c16:	90 e0       	ldi	r25, 0x00	; 0
    1c18:	0e 94 84 17 	call	0x2f08	; 0x2f08 <_Znwj>

#include "state.h"


namespace StateMachine {
    class SettingsStateHandler : public StateMachine::StateHandler {
    1c1c:	2b e4       	ldi	r18, 0x4B	; 75
    1c1e:	31 e0       	ldi	r19, 0x01	; 1
    1c20:	fc 01       	movw	r30, r24
    1c22:	31 83       	std	Z+1, r19	; 0x01
    1c24:	20 83       	st	Z, r18
    1c26:	90 93 8a 02 	sts	0x028A, r25	; 0x80028a <_ZN12StateMachineL14currentHandlerE+0x1>
    1c2a:	80 93 89 02 	sts	0x0289, r24	; 0x800289 <_ZN12StateMachineL14currentHandlerE>
                break;
    1c2e:	04 c0       	rjmp	.+8      	; 0x1c38 <_ZN12StateMachine11switchStateENS_5StateE+0x16a>
            case State::SETTINGS_RSSI:
                currentHandler = new   SettingsRssiStateHandler();
                break;
            default:
                currentHandler = nullptr;
    1c30:	10 92 8a 02 	sts	0x028A, r1	; 0x80028a <_ZN12StateMachineL14currentHandlerE+0x1>
    1c34:	10 92 89 02 	sts	0x0289, r1	; 0x800289 <_ZN12StateMachineL14currentHandlerE>
                break;
        }

        if (currentHandler != nullptr) {
    1c38:	80 91 89 02 	lds	r24, 0x0289	; 0x800289 <_ZN12StateMachineL14currentHandlerE>
    1c3c:	90 91 8a 02 	lds	r25, 0x028A	; 0x80028a <_ZN12StateMachineL14currentHandlerE+0x1>
    1c40:	00 97       	sbiw	r24, 0x00	; 0
    1c42:	a1 f0       	breq	.+40     	; 0x1c6c <_ZN12StateMachine11switchStateENS_5StateE+0x19e>
            currentHandler->onEnter();
    1c44:	dc 01       	movw	r26, r24
    1c46:	ed 91       	ld	r30, X+
    1c48:	fc 91       	ld	r31, X
    1c4a:	04 80       	ldd	r0, Z+4	; 0x04
    1c4c:	f5 81       	ldd	r31, Z+5	; 0x05
    1c4e:	e0 2d       	mov	r30, r0
    1c50:	09 95       	icall
            currentHandler->onInitialDraw();
    1c52:	80 91 89 02 	lds	r24, 0x0289	; 0x800289 <_ZN12StateMachineL14currentHandlerE>
    1c56:	90 91 8a 02 	lds	r25, 0x028A	; 0x80028a <_ZN12StateMachineL14currentHandlerE+0x1>
    1c5a:	ec 01       	movw	r28, r24
    1c5c:	e8 81       	ld	r30, Y
    1c5e:	f9 81       	ldd	r31, Y+1	; 0x01
    1c60:	01 90       	ld	r0, Z+
    1c62:	f0 81       	ld	r31, Z
    1c64:	e0 2d       	mov	r30, r0
        }
    }
    1c66:	df 91       	pop	r29
    1c68:	cf 91       	pop	r28
                break;
        }

        if (currentHandler != nullptr) {
            currentHandler->onEnter();
            currentHandler->onInitialDraw();
    1c6a:	09 94       	ijmp
        }
    }
    1c6c:	df 91       	pop	r29
    1c6e:	cf 91       	pop	r28
    1c70:	08 95       	ret

00001c72 <_GLOBAL__sub_I__ZN12StateMachine12currentStateE>:


    static uint8_t stateBuffer[STATE_BUFFER_SIZE];
    static StateHandler* currentHandler = nullptr;
    State currentState = State::BOOT;
    State lastState = currentState;
    1c72:	80 91 88 02 	lds	r24, 0x0288	; 0x800288 <_ZN12StateMachine12currentStateE>
    1c76:	80 93 87 02 	sts	0x0287, r24	; 0x800287 <_ZN12StateMachine9lastStateE>
    1c7a:	08 95       	ret

00001c7c <_ZN12StateMachine20BandScanStateHandler7onEnterEv>:
#include "ui.h"
#include "ui_menu.h"


void StateMachine::BandScanStateHandler::onEnter() {
    orderedChanelIndex = 0;
    1c7c:	fc 01       	movw	r30, r24
    1c7e:	12 82       	std	Z+2, r1	; 0x02
    lastChannelIndex = Receiver::activeChannel;
    1c80:	20 91 62 02 	lds	r18, 0x0262	; 0x800262 <_ZN8Receiver13activeChannelE>
    1c84:	23 83       	std	Z+3, r18	; 0x03
    1c86:	08 95       	ret

00001c88 <_ZN12StateMachine20BandScanStateHandler6onExitEv>:
}

void StateMachine::BandScanStateHandler::onExit() {
    Receiver::setChannel(lastChannelIndex);
    1c88:	fc 01       	movw	r30, r24
    1c8a:	83 81       	ldd	r24, Z+3	; 0x03
    1c8c:	0c 94 aa 0a 	jmp	0x1554	; 0x1554 <_ZN8Receiver10setChannelEh>

00001c90 <_ZN12StateMachine20BandScanStateHandler8onUpdateEv>:
}


void StateMachine::BandScanStateHandler::onUpdate() {
    1c90:	cf 93       	push	r28
    1c92:	df 93       	push	r29
    1c94:	ec 01       	movw	r28, r24
    if (!Receiver::isRssiStable())
    1c96:	0e 94 c2 0a 	call	0x1584	; 0x1584 <_ZN8Receiver12isRssiStableEv>
    1c9a:	88 23       	and	r24, r24
    1c9c:	b1 f0       	breq	.+44     	; 0x1cca <_ZN12StateMachine20BandScanStateHandler8onUpdateEv+0x3a>
        return;

    #ifdef USE_DIVERSITY
        rssiData[orderedChanelIndex] = (Receiver::rssiA + Receiver::rssiB) / 2;
    #else
        rssiData[orderedChanelIndex] = Receiver::rssiA;
    1c9e:	8a 81       	ldd	r24, Y+2	; 0x02
    1ca0:	90 e0       	ldi	r25, 0x00	; 0
    1ca2:	fe 01       	movw	r30, r28
    1ca4:	e8 0f       	add	r30, r24
    1ca6:	f9 1f       	adc	r31, r25
    1ca8:	20 91 61 02 	lds	r18, 0x0261	; 0x800261 <_ZN8Receiver5rssiAE>
    1cac:	24 83       	std	Z+4, r18	; 0x04
    #endif

    orderedChanelIndex = (orderedChanelIndex + 1) % (CHANNELS_SIZE);
    1cae:	01 96       	adiw	r24, 0x01	; 1
    1cb0:	68 e2       	ldi	r22, 0x28	; 40
    1cb2:	70 e0       	ldi	r23, 0x00	; 0
    1cb4:	0e 94 aa 2f 	call	0x5f54	; 0x5f54 <__divmodhi4>
    1cb8:	8a 83       	std	Y+2, r24	; 0x02
    Receiver::setChannel(Channels::getOrderedIndex(orderedChanelIndex));
    1cba:	0e 94 85 0a 	call	0x150a	; 0x150a <_ZN8Channels15getOrderedIndexEh>
    1cbe:	0e 94 aa 0a 	call	0x1554	; 0x1554 <_ZN8Receiver10setChannelEh>
    Ui::needUpdate();

    if (orderedChanelIndex == 0) {

    }
}
    1cc2:	df 91       	pop	r29
    1cc4:	cf 91       	pop	r28
    #endif

    orderedChanelIndex = (orderedChanelIndex + 1) % (CHANNELS_SIZE);
    Receiver::setChannel(Channels::getOrderedIndex(orderedChanelIndex));

    Ui::needUpdate();
    1cc6:	0c 94 0a 15 	jmp	0x2a14	; 0x2a14 <_ZN2Ui10needUpdateEv>

    if (orderedChanelIndex == 0) {

    }
}
    1cca:	df 91       	pop	r29
    1ccc:	cf 91       	pop	r28
    1cce:	08 95       	ret

00001cd0 <_ZN12StateMachine20BandScanStateHandler13onInitialDrawEv>:
#define GRAPH_Y 0
#define GRAPH_W (BORDER_RIGHT_X - GRAPH_X)
#define GRAPH_H BORDER_BOTTOM_Y


void StateMachine::BandScanStateHandler::onInitialDraw() {
    1cd0:	0f 93       	push	r16
    1cd2:	1f 93       	push	r17
    1cd4:	cf 93       	push	r28
    1cd6:	df 93       	push	r29
    Ui::clear();
    1cd8:	0e 94 06 15 	call	0x2a0c	; 0x2a0c <_ZN2Ui5clearEv>
    Ui::display.drawFastVLine(
        BORDER_LEFT_X,
        BORDER_LEFT_Y,
        BORDER_LEFT_H,
        WHITE
    );
    1cdc:	01 e0       	ldi	r16, 0x01	; 1
    1cde:	10 e0       	ldi	r17, 0x00	; 0
    1ce0:	28 e3       	ldi	r18, 0x38	; 56
    1ce2:	30 e0       	ldi	r19, 0x00	; 0
    1ce4:	40 e0       	ldi	r20, 0x00	; 0
    1ce6:	50 e0       	ldi	r21, 0x00	; 0
    1ce8:	60 e0       	ldi	r22, 0x00	; 0
    1cea:	70 e0       	ldi	r23, 0x00	; 0
    1cec:	8e e8       	ldi	r24, 0x8E	; 142
    1cee:	92 e0       	ldi	r25, 0x02	; 2
    1cf0:	0e 94 41 2a 	call	0x5482	; 0x5482 <_ZN16Adafruit_SSD130613drawFastVLineEiiij>
    Ui::display.drawFastVLine(
        BORDER_RIGHT_X,
        BORDER_RIGHT_Y,
        BORDER_RIGHT_H,
        WHITE
    );
    1cf4:	28 e3       	ldi	r18, 0x38	; 56
    1cf6:	30 e0       	ldi	r19, 0x00	; 0
    1cf8:	40 e0       	ldi	r20, 0x00	; 0
    1cfa:	50 e0       	ldi	r21, 0x00	; 0
    1cfc:	6f e7       	ldi	r22, 0x7F	; 127
    1cfe:	70 e0       	ldi	r23, 0x00	; 0
    1d00:	8e e8       	ldi	r24, 0x8E	; 142
    1d02:	92 e0       	ldi	r25, 0x02	; 2
    1d04:	0e 94 41 2a 	call	0x5482	; 0x5482 <_ZN16Adafruit_SSD130613drawFastVLineEiiij>
    Ui::display.drawFastHLine(
        BORDER_BOTTOM_X,
        BORDER_BOTTOM_Y,
        BORDER_BOTTOM_W,
        WHITE
    );
    1d08:	20 e8       	ldi	r18, 0x80	; 128
    1d0a:	30 e0       	ldi	r19, 0x00	; 0
    1d0c:	47 e3       	ldi	r20, 0x37	; 55
    1d0e:	50 e0       	ldi	r21, 0x00	; 0
    1d10:	60 e0       	ldi	r22, 0x00	; 0
    1d12:	70 e0       	ldi	r23, 0x00	; 0
    1d14:	8e e8       	ldi	r24, 0x8E	; 142
    1d16:	92 e0       	ldi	r25, 0x02	; 2
    1d18:	0e 94 00 2a 	call	0x5400	; 0x5400 <_ZN16Adafruit_SSD130613drawFastHLineEiiij>
    Ui::display.drawFastHLine(
        BORDER_PROGRESS_LEFT_X,
        SCREEN_HEIGHT - 1,
        BORDER_PROGRESS_RIGHT_X - BORDER_PROGRESS_LEFT_X,
        WHITE
    );
    1d1c:	2f e4       	ldi	r18, 0x4F	; 79
    1d1e:	30 e0       	ldi	r19, 0x00	; 0
    1d20:	4f e3       	ldi	r20, 0x3F	; 63
    1d22:	50 e0       	ldi	r21, 0x00	; 0
    1d24:	68 e1       	ldi	r22, 0x18	; 24
    1d26:	70 e0       	ldi	r23, 0x00	; 0
    1d28:	8e e8       	ldi	r24, 0x8E	; 142
    1d2a:	92 e0       	ldi	r25, 0x02	; 2
    1d2c:	0e 94 00 2a 	call	0x5400	; 0x5400 <_ZN16Adafruit_SSD130613drawFastHLineEiiij>
    Ui::display.drawFastVLine(
        BORDER_PROGRESS_LEFT_X,
        BORDER_PROGRESS_Y,
        BORDER_PROGRESS_H,
        WHITE
    );
    1d30:	29 e0       	ldi	r18, 0x09	; 9
    1d32:	30 e0       	ldi	r19, 0x00	; 0
    1d34:	47 e3       	ldi	r20, 0x37	; 55
    1d36:	50 e0       	ldi	r21, 0x00	; 0
    1d38:	68 e1       	ldi	r22, 0x18	; 24
    1d3a:	70 e0       	ldi	r23, 0x00	; 0
    1d3c:	8e e8       	ldi	r24, 0x8E	; 142
    1d3e:	92 e0       	ldi	r25, 0x02	; 2
    1d40:	0e 94 41 2a 	call	0x5482	; 0x5482 <_ZN16Adafruit_SSD130613drawFastVLineEiiij>
    Ui::display.drawFastVLine(
        BORDER_PROGRESS_RIGHT_X,
        BORDER_PROGRESS_Y,
        BORDER_PROGRESS_H,
        WHITE
    );
    1d44:	29 e0       	ldi	r18, 0x09	; 9
    1d46:	30 e0       	ldi	r19, 0x00	; 0
    1d48:	47 e3       	ldi	r20, 0x37	; 55
    1d4a:	50 e0       	ldi	r21, 0x00	; 0
    1d4c:	67 e6       	ldi	r22, 0x67	; 103
    1d4e:	70 e0       	ldi	r23, 0x00	; 0
    1d50:	8e e8       	ldi	r24, 0x8E	; 142
    1d52:	92 e0       	ldi	r25, 0x02	; 2
    1d54:	0e 94 41 2a 	call	0x5482	; 0x5482 <_ZN16Adafruit_SSD130613drawFastVLineEiiij>

    Ui::display.setTextSize(1);
    1d58:	61 e0       	ldi	r22, 0x01	; 1
    1d5a:	8e e8       	ldi	r24, 0x8E	; 142
    1d5c:	92 e0       	ldi	r25, 0x02	; 2
    1d5e:	0e 94 7a 24 	call	0x48f4	; 0x48f4 <_ZN12Adafruit_GFX11setTextSizeEh>
    @param   c   16-bit 5-6-5 Color to draw text with
    @note    For 'transparent' background, background and foreground
             are set to same color rather than using a separate flag.
  */
  /**********************************************************************/
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
    1d62:	ce e8       	ldi	r28, 0x8E	; 142
    1d64:	d2 e0       	ldi	r29, 0x02	; 2
    1d66:	81 e0       	ldi	r24, 0x01	; 1
    1d68:	90 e0       	ldi	r25, 0x00	; 0
    1d6a:	9b 8b       	std	Y+19, r25	; 0x13
    1d6c:	8a 8b       	std	Y+18, r24	; 0x12
    1d6e:	99 8b       	std	Y+17, r25	; 0x11
    1d70:	88 8b       	std	Y+16, r24	; 0x10
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) {
    cursor_x = x;
    1d72:	1d 86       	std	Y+13, r1	; 0x0d
    1d74:	1c 86       	std	Y+12, r1	; 0x0c
    cursor_y = y;
    1d76:	09 e3       	ldi	r16, 0x39	; 57
    1d78:	10 e0       	ldi	r17, 0x00	; 0
    1d7a:	1f 87       	std	Y+15, r17	; 0x0f
    1d7c:	0e 87       	std	Y+14, r16	; 0x0e
    Ui::display.setTextColor(WHITE);
    Ui::display.setCursor(CHANNEL_TEXT_LOW_X, CHANNEL_TEXT_LOW_Y);
    Ui::display.print(Channels::getFrequency(Channels::getOrderedIndex(0)));
    1d7e:	80 e0       	ldi	r24, 0x00	; 0
    1d80:	0e 94 85 0a 	call	0x150a	; 0x150a <_ZN8Channels15getOrderedIndexEh>
    1d84:	0e 94 65 0a 	call	0x14ca	; 0x14ca <_ZN8Channels12getFrequencyEh>
    1d88:	4a e0       	ldi	r20, 0x0A	; 10
    1d8a:	50 e0       	ldi	r21, 0x00	; 0
    1d8c:	bc 01       	movw	r22, r24
    1d8e:	ce 01       	movw	r24, r28
    1d90:	0e 94 21 18 	call	0x3042	; 0x3042 <_ZN5Print5printEji>
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) {
    cursor_x = x;
    1d94:	89 e6       	ldi	r24, 0x69	; 105
    1d96:	90 e0       	ldi	r25, 0x00	; 0
    1d98:	9d 87       	std	Y+13, r25	; 0x0d
    1d9a:	8c 87       	std	Y+12, r24	; 0x0c
    cursor_y = y;
    1d9c:	1f 87       	std	Y+15, r17	; 0x0f
    1d9e:	0e 87       	std	Y+14, r16	; 0x0e

    Ui::display.setCursor(CHANNEL_TEXT_HIGH_X, CHANNEL_TEXT_HIGH_Y);
    Ui::display.print(
    1da0:	87 e2       	ldi	r24, 0x27	; 39
    1da2:	0e 94 85 0a 	call	0x150a	; 0x150a <_ZN8Channels15getOrderedIndexEh>
    1da6:	0e 94 65 0a 	call	0x14ca	; 0x14ca <_ZN8Channels12getFrequencyEh>
        Channels::getFrequency(Channels::getOrderedIndex(CHANNELS_SIZE - 1)));
    1daa:	4a e0       	ldi	r20, 0x0A	; 10
    1dac:	50 e0       	ldi	r21, 0x00	; 0
    1dae:	bc 01       	movw	r22, r24
    1db0:	ce 01       	movw	r24, r28
    1db2:	0e 94 21 18 	call	0x3042	; 0x3042 <_ZN5Print5printEji>

    Ui::needDisplay();
}
    1db6:	df 91       	pop	r29
    1db8:	cf 91       	pop	r28
    1dba:	1f 91       	pop	r17
    1dbc:	0f 91       	pop	r16

    Ui::display.setCursor(CHANNEL_TEXT_HIGH_X, CHANNEL_TEXT_HIGH_Y);
    Ui::display.print(
        Channels::getFrequency(Channels::getOrderedIndex(CHANNELS_SIZE - 1)));

    Ui::needDisplay();
    1dbe:	0c 94 0e 15 	jmp	0x2a1c	; 0x2a1c <_ZN2Ui11needDisplayEv>

00001dc2 <_ZN12StateMachine20BandScanStateHandler12onUpdateDrawEv>:
}

void StateMachine::BandScanStateHandler::onUpdateDraw() {
    1dc2:	cf 92       	push	r12
    1dc4:	ef 92       	push	r14
    1dc6:	ff 92       	push	r15
    1dc8:	0f 93       	push	r16
    1dca:	1f 93       	push	r17
    1dcc:	cf 93       	push	r28
    1dce:	df 93       	push	r29
    1dd0:	ec 01       	movw	r28, r24
        100,
        GRAPH_X,
        GRAPH_Y,
        GRAPH_W,
        GRAPH_H
    );
    1dd2:	27 e3       	ldi	r18, 0x37	; 55
    1dd4:	c2 2e       	mov	r12, r18
    1dd6:	3e e7       	ldi	r19, 0x7E	; 126
    1dd8:	e3 2e       	mov	r14, r19
    1dda:	00 e0       	ldi	r16, 0x00	; 0
    1ddc:	21 e0       	ldi	r18, 0x01	; 1
    1dde:	44 e6       	ldi	r20, 0x64	; 100
    1de0:	68 e2       	ldi	r22, 0x28	; 40
    1de2:	04 96       	adiw	r24, 0x04	; 4
    1de4:	0e 94 6e 15 	call	0x2adc	; 0x2adc <_ZN2Ui9drawGraphEPKhhhhhhh>
    Ui::display.drawFastHLine(
        BORDER_BOTTOM_X,
        BORDER_BOTTOM_Y,
        BORDER_BOTTOM_W,
        WHITE
    );
    1de8:	01 e0       	ldi	r16, 0x01	; 1
    1dea:	10 e0       	ldi	r17, 0x00	; 0
    1dec:	20 e8       	ldi	r18, 0x80	; 128
    1dee:	30 e0       	ldi	r19, 0x00	; 0
    1df0:	47 e3       	ldi	r20, 0x37	; 55
    1df2:	50 e0       	ldi	r21, 0x00	; 0
    1df4:	60 e0       	ldi	r22, 0x00	; 0
    1df6:	70 e0       	ldi	r23, 0x00	; 0
    1df8:	8e e8       	ldi	r24, 0x8E	; 142
    1dfa:	92 e0       	ldi	r25, 0x02	; 2
    1dfc:	0e 94 00 2a 	call	0x5400	; 0x5400 <_ZN16Adafruit_SSD130613drawFastHLineEiiij>
    Ui::clearRect(
        PROGRESS_X,
        PROGRESS_Y,
        PROGRESS_W,
        PROGRESS_H
    );
    1e00:	25 e0       	ldi	r18, 0x05	; 5
    1e02:	30 e0       	ldi	r19, 0x00	; 0
    1e04:	4c e4       	ldi	r20, 0x4C	; 76
    1e06:	50 e0       	ldi	r21, 0x00	; 0
    1e08:	69 e3       	ldi	r22, 0x39	; 57
    1e0a:	70 e0       	ldi	r23, 0x00	; 0
    1e0c:	8a e1       	ldi	r24, 0x1A	; 26
    1e0e:	90 e0       	ldi	r25, 0x00	; 0
    1e10:	0e 94 5b 15 	call	0x2ab6	; 0x2ab6 <_ZN2Ui9clearRectEiiii>

    uint8_t progressW = orderedChanelIndex * PROGRESS_W / CHANNELS_SIZE + 1;
    1e14:	8a 81       	ldd	r24, Y+2	; 0x02
        PROGRESS_X,
        PROGRESS_Y,
        progressW,
        PROGRESS_H,
        WHITE
    );
    1e16:	2c e4       	ldi	r18, 0x4C	; 76
    1e18:	82 9f       	mul	r24, r18
    1e1a:	c0 01       	movw	r24, r0
    1e1c:	11 24       	eor	r1, r1
    1e1e:	68 e2       	ldi	r22, 0x28	; 40
    1e20:	70 e0       	ldi	r23, 0x00	; 0
    1e22:	0e 94 aa 2f 	call	0x5f54	; 0x5f54 <__divmodhi4>
    1e26:	6f 5f       	subi	r22, 0xFF	; 255
    1e28:	26 2f       	mov	r18, r22
    1e2a:	30 e0       	ldi	r19, 0x00	; 0
    1e2c:	ee 24       	eor	r14, r14
    1e2e:	e3 94       	inc	r14
    1e30:	f1 2c       	mov	r15, r1
    1e32:	05 e0       	ldi	r16, 0x05	; 5
    1e34:	10 e0       	ldi	r17, 0x00	; 0
    1e36:	49 e3       	ldi	r20, 0x39	; 57
    1e38:	50 e0       	ldi	r21, 0x00	; 0
    1e3a:	6a e1       	ldi	r22, 0x1A	; 26
    1e3c:	70 e0       	ldi	r23, 0x00	; 0
    1e3e:	8e e8       	ldi	r24, 0x8E	; 142
    1e40:	92 e0       	ldi	r25, 0x02	; 2
    1e42:	0e 94 93 1b 	call	0x3726	; 0x3726 <_ZN12Adafruit_GFX8fillRectEiiiij>

    Ui::needDisplay();
}
    1e46:	df 91       	pop	r29
    1e48:	cf 91       	pop	r28
    1e4a:	1f 91       	pop	r17
    1e4c:	0f 91       	pop	r16
    1e4e:	ff 90       	pop	r15
    1e50:	ef 90       	pop	r14
    1e52:	cf 90       	pop	r12
        progressW,
        PROGRESS_H,
        WHITE
    );

    Ui::needDisplay();
    1e54:	0c 94 0e 15 	jmp	0x2a1c	; 0x2a1c <_ZN2Ui11needDisplayEv>

00001e58 <_ZN12StateMachine16MenuStateHandler7onEnterEv>:
static void searchMenuHandler();
static void bandScannerMenuHandler();
static void settingsMenuHandler();


void StateMachine::MenuStateHandler::onEnter() {
    1e58:	cf 93       	push	r28
    1e5a:	df 93       	push	r29
    this->menu.reset();
    1e5c:	ec 01       	movw	r28, r24
    1e5e:	22 96       	adiw	r28, 0x02	; 2
    1e60:	ce 01       	movw	r24, r28
    1e62:	0e 94 14 16 	call	0x2c28	; 0x2c28 <_ZN2Ui10MenuHelper5resetEv>
    this->menu.addItem(PSTR("Search"), searchIcon, searchMenuHandler);
    1e66:	26 e5       	ldi	r18, 0x56	; 86
    1e68:	3f e0       	ldi	r19, 0x0F	; 15
    1e6a:	46 ea       	ldi	r20, 0xA6	; 166
    1e6c:	52 e0       	ldi	r21, 0x02	; 2
    1e6e:	6f e9       	ldi	r22, 0x9F	; 159
    1e70:	71 e0       	ldi	r23, 0x01	; 1
    1e72:	ce 01       	movw	r24, r28
    1e74:	0e 94 1a 16 	call	0x2c34	; 0x2c34 <_ZN2Ui10MenuHelper7addItemEPKcPKhPFvvE>
    this->menu.addItem(PSTR("Band Scan"), bandScanIcon, bandScannerMenuHandler);
    1e78:	23 e5       	ldi	r18, 0x53	; 83
    1e7a:	3f e0       	ldi	r19, 0x0F	; 15
    1e7c:	46 e2       	ldi	r20, 0x26	; 38
    1e7e:	52 e0       	ldi	r21, 0x02	; 2
    1e80:	65 e9       	ldi	r22, 0x95	; 149
    1e82:	71 e0       	ldi	r23, 0x01	; 1
    1e84:	ce 01       	movw	r24, r28
    1e86:	0e 94 1a 16 	call	0x2c34	; 0x2c34 <_ZN2Ui10MenuHelper7addItemEPKcPKhPFvvE>
    this->menu.addItem(PSTR("Settings"), settingsIcon, settingsMenuHandler);
    1e8a:	20 e5       	ldi	r18, 0x50	; 80
    1e8c:	3f e0       	ldi	r19, 0x0F	; 15
    1e8e:	46 ea       	ldi	r20, 0xA6	; 166
    1e90:	51 e0       	ldi	r21, 0x01	; 1
    1e92:	6c e8       	ldi	r22, 0x8C	; 140
    1e94:	71 e0       	ldi	r23, 0x01	; 1
    1e96:	ce 01       	movw	r24, r28
}
    1e98:	df 91       	pop	r29
    1e9a:	cf 91       	pop	r28

void StateMachine::MenuStateHandler::onEnter() {
    this->menu.reset();
    this->menu.addItem(PSTR("Search"), searchIcon, searchMenuHandler);
    this->menu.addItem(PSTR("Band Scan"), bandScanIcon, bandScannerMenuHandler);
    this->menu.addItem(PSTR("Settings"), settingsIcon, settingsMenuHandler);
    1e9c:	0c 94 1a 16 	jmp	0x2c34	; 0x2c34 <_ZN2Ui10MenuHelper7addItemEPKcPKhPFvvE>

00001ea0 <_ZL19settingsMenuHandlerv>:
static void bandScannerMenuHandler() {
    StateMachine::switchState(StateMachine::State::BANDSCAN);
};

static void settingsMenuHandler() {
    StateMachine::switchState(StateMachine::State::SETTINGS);
    1ea0:	85 e0       	ldi	r24, 0x05	; 5
    1ea2:	0c 94 67 0d 	jmp	0x1ace	; 0x1ace <_ZN12StateMachine11switchStateENS_5StateE>

00001ea6 <_ZL22bandScannerMenuHandlerv>:
static void searchMenuHandler() {
    StateMachine::switchState(StateMachine::State::SEARCH);
};

static void bandScannerMenuHandler() {
    StateMachine::switchState(StateMachine::State::BANDSCAN);
    1ea6:	82 e0       	ldi	r24, 0x02	; 2
    1ea8:	0c 94 67 0d 	jmp	0x1ace	; 0x1ace <_ZN12StateMachine11switchStateENS_5StateE>

00001eac <_ZL17searchMenuHandlerv>:
    }
}


static void searchMenuHandler() {
    StateMachine::switchState(StateMachine::State::SEARCH);
    1eac:	81 e0       	ldi	r24, 0x01	; 1
    1eae:	0c 94 67 0d 	jmp	0x1ace	; 0x1ace <_ZN12StateMachine11switchStateENS_5StateE>

00001eb2 <_ZN12StateMachine16MenuStateHandler14onButtonChangeE6ButtonN7Buttons9PressTypeE>:

void StateMachine::MenuStateHandler::onButtonChange(
    Button button,
    Buttons::PressType pressType
) {
    if (pressType != Buttons::PressType::SHORT)
    1eb2:	41 11       	cpse	r20, r1
    1eb4:	12 c0       	rjmp	.+36     	; 0x1eda <_ZN12StateMachine16MenuStateHandler14onButtonChangeE6ButtonN7Buttons9PressTypeE+0x28>
        return;

    switch (button) {
    1eb6:	61 30       	cpi	r22, 0x01	; 1
    1eb8:	41 f0       	breq	.+16     	; 0x1eca <_ZN12StateMachine16MenuStateHandler14onButtonChangeE6ButtonN7Buttons9PressTypeE+0x18>
    1eba:	18 f0       	brcs	.+6      	; 0x1ec2 <_ZN12StateMachine16MenuStateHandler14onButtonChangeE6ButtonN7Buttons9PressTypeE+0x10>
    1ebc:	62 30       	cpi	r22, 0x02	; 2
    1ebe:	51 f0       	breq	.+20     	; 0x1ed4 <_ZN12StateMachine16MenuStateHandler14onButtonChangeE6ButtonN7Buttons9PressTypeE+0x22>
    1ec0:	08 95       	ret
        case Button::UP:
            this->menu.selectPreviousItem();
    1ec2:	02 96       	adiw	r24, 0x02	; 2
    1ec4:	0e 94 40 16 	call	0x2c80	; 0x2c80 <_ZN2Ui10MenuHelper18selectPreviousItemEv>
    1ec8:	03 c0       	rjmp	.+6      	; 0x1ed0 <_ZN12StateMachine16MenuStateHandler14onButtonChangeE6ButtonN7Buttons9PressTypeE+0x1e>
            Ui::needUpdate();
            break;

        case Button::DOWN:
            this->menu.selectNextItem();
    1eca:	02 96       	adiw	r24, 0x02	; 2
    1ecc:	0e 94 32 16 	call	0x2c64	; 0x2c64 <_ZN2Ui10MenuHelper14selectNextItemEv>
            Ui::needUpdate();
    1ed0:	0c 94 0a 15 	jmp	0x2a14	; 0x2a14 <_ZN2Ui10needUpdateEv>
            break;

        case Button::MODE:
            this->menu.activateItem();
    1ed4:	02 96       	adiw	r24, 0x02	; 2
    1ed6:	0c 94 4e 16 	jmp	0x2c9c	; 0x2c9c <_ZN2Ui10MenuHelper12activateItemEv>
    1eda:	08 95       	ret

00001edc <_ZN12StateMachine16MenuStateHandler13drawMenuEntryEv>:
    drawMenuEntry();
    Ui::needDisplay();
}


void StateMachine::MenuStateHandler::drawMenuEntry() {
    1edc:	cf 92       	push	r12
    1ede:	df 92       	push	r13
    1ee0:	ef 92       	push	r14
    1ee2:	ff 92       	push	r15
    1ee4:	0f 93       	push	r16
    1ee6:	1f 93       	push	r17
    1ee8:	cf 93       	push	r28
    1eea:	df 93       	push	r29
    const Ui::MenuItem* item = this->menu.getCurrentItem();
    1eec:	02 96       	adiw	r24, 0x02	; 2
    1eee:	0e 94 5d 16 	call	0x2cba	; 0x2cba <_ZN2Ui10MenuHelper14getCurrentItemEv>
    1ef2:	ec 01       	movw	r28, r24
    const uint8_t charLen = strlen(PSTRtoBuffer_P(item->text));
    1ef4:	88 81       	ld	r24, Y
    1ef6:	99 81       	ldd	r25, Y+1	; 0x01
    1ef8:	0e 94 91 0a 	call	0x1522	; 0x1522 <_Z14PSTRtoBuffer_PPKc>
    1efc:	fc 01       	movw	r30, r24
    1efe:	01 90       	ld	r0, Z+
    1f00:	00 20       	and	r0, r0
    1f02:	e9 f7       	brne	.-6      	; 0x1efe <_ZN12StateMachine16MenuStateHandler13drawMenuEntryEv+0x22>
    1f04:	31 97       	sbiw	r30, 0x01	; 1
    1f06:	8f 01       	movw	r16, r30
    1f08:	08 1b       	sub	r16, r24
    1f0a:	19 0b       	sbc	r17, r25

    Ui::display.setTextSize(2);
    1f0c:	62 e0       	ldi	r22, 0x02	; 2
    1f0e:	8e e8       	ldi	r24, 0x8E	; 142
    1f10:	92 e0       	ldi	r25, 0x02	; 2
    1f12:	0e 94 7a 24 	call	0x48f4	; 0x48f4 <_ZN12Adafruit_GFX11setTextSizeEh>
    @param   c   16-bit 5-6-5 Color to draw text with
    @note    For 'transparent' background, background and foreground
             are set to same color rather than using a separate flag.
  */
  /**********************************************************************/
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
    1f16:	81 e0       	ldi	r24, 0x01	; 1
    1f18:	90 e0       	ldi	r25, 0x00	; 0
    1f1a:	90 93 a1 02 	sts	0x02A1, r25	; 0x8002a1 <_ZN2Ui7displayE+0x13>
    1f1e:	80 93 a0 02 	sts	0x02A0, r24	; 0x8002a0 <_ZN2Ui7displayE+0x12>
    1f22:	90 93 9f 02 	sts	0x029F, r25	; 0x80029f <_ZN2Ui7displayE+0x11>
    1f26:	80 93 9e 02 	sts	0x029E, r24	; 0x80029e <_ZN2Ui7displayE+0x10>
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) {
    cursor_x = x;
    1f2a:	2a ef       	ldi	r18, 0xFA	; 250
    1f2c:	20 03       	mulsu	r18, r16
    1f2e:	f0 01       	movw	r30, r0
    1f30:	11 24       	eor	r1, r1
    1f32:	ff 96       	adiw	r30, 0x3f	; 63
    1f34:	f0 93 9b 02 	sts	0x029B, r31	; 0x80029b <_ZN2Ui7displayE+0xd>
    1f38:	e0 93 9a 02 	sts	0x029A, r30	; 0x80029a <_ZN2Ui7displayE+0xc>
    cursor_y = y;
    1f3c:	8e e2       	ldi	r24, 0x2E	; 46
    1f3e:	90 e0       	ldi	r25, 0x00	; 0
    1f40:	90 93 9d 02 	sts	0x029D, r25	; 0x80029d <_ZN2Ui7displayE+0xf>
    1f44:	80 93 9c 02 	sts	0x029C, r24	; 0x80029c <_ZN2Ui7displayE+0xe>
    Ui::display.setTextColor(WHITE);
    Ui::display.setCursor(
        SCREEN_WIDTH_MID - (charLen * ((CHAR_WIDTH + 1) * 2)) / 2,
        TEXT_Y
    );
    Ui::display.print(PSTRtoBuffer_P(item->text));
    1f48:	88 81       	ld	r24, Y
    1f4a:	99 81       	ldd	r25, Y+1	; 0x01
    1f4c:	0e 94 91 0a 	call	0x1522	; 0x1522 <_Z14PSTRtoBuffer_PPKc>
    1f50:	bc 01       	movw	r22, r24
    1f52:	8e e8       	ldi	r24, 0x8E	; 142
    1f54:	92 e0       	ldi	r25, 0x02	; 2
    1f56:	0e 94 c9 17 	call	0x2f92	; 0x2f92 <_ZN5Print5printEPKc>

    if (item->icon) {
    1f5a:	8c 81       	ldd	r24, Y+4	; 0x04
    1f5c:	9d 81       	ldd	r25, Y+5	; 0x05
    1f5e:	89 2b       	or	r24, r25
    1f60:	e1 f0       	breq	.+56     	; 0x1f9a <_ZN12StateMachine16MenuStateHandler13drawMenuEntryEv+0xbe>
        Ui::clearRect(
            GRAPHIC_X,
            GRAPHIC_Y,
            GRAPHIC_SIZE,
            GRAPHIC_SIZE
        );
    1f62:	20 e2       	ldi	r18, 0x20	; 32
    1f64:	30 e0       	ldi	r19, 0x00	; 0
    1f66:	40 e2       	ldi	r20, 0x20	; 32
    1f68:	50 e0       	ldi	r21, 0x00	; 0
    1f6a:	67 e0       	ldi	r22, 0x07	; 7
    1f6c:	70 e0       	ldi	r23, 0x00	; 0
    1f6e:	8f e2       	ldi	r24, 0x2F	; 47
    1f70:	90 e0       	ldi	r25, 0x00	; 0
    1f72:	0e 94 5b 15 	call	0x2ab6	; 0x2ab6 <_ZN2Ui9clearRectEiiii>
            GRAPHIC_Y,
            item->icon,
            GRAPHIC_SIZE,
            GRAPHIC_SIZE,
            WHITE
        );
    1f76:	2c 81       	ldd	r18, Y+4	; 0x04
    1f78:	3d 81       	ldd	r19, Y+5	; 0x05
    1f7a:	cc 24       	eor	r12, r12
    1f7c:	c3 94       	inc	r12
    1f7e:	d1 2c       	mov	r13, r1
    1f80:	90 e2       	ldi	r25, 0x20	; 32
    1f82:	e9 2e       	mov	r14, r25
    1f84:	f1 2c       	mov	r15, r1
    1f86:	00 e2       	ldi	r16, 0x20	; 32
    1f88:	10 e0       	ldi	r17, 0x00	; 0
    1f8a:	47 e0       	ldi	r20, 0x07	; 7
    1f8c:	50 e0       	ldi	r21, 0x00	; 0
    1f8e:	6f e2       	ldi	r22, 0x2F	; 47
    1f90:	70 e0       	ldi	r23, 0x00	; 0
    1f92:	8e e8       	ldi	r24, 0x8E	; 142
    1f94:	92 e0       	ldi	r25, 0x02	; 2
    1f96:	0e 94 c4 20 	call	0x4188	; 0x4188 <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij>
    }
}
    1f9a:	df 91       	pop	r29
    1f9c:	cf 91       	pop	r28
    1f9e:	1f 91       	pop	r17
    1fa0:	0f 91       	pop	r16
    1fa2:	ff 90       	pop	r15
    1fa4:	ef 90       	pop	r14
    1fa6:	df 90       	pop	r13
    1fa8:	cf 90       	pop	r12
    1faa:	08 95       	ret

00001fac <_ZN12StateMachine16MenuStateHandler13onInitialDrawEv>:

static void drawTriangles();
static void drawMenuEntry();


void StateMachine::MenuStateHandler::onInitialDraw() {
    1fac:	af 92       	push	r10
    1fae:	bf 92       	push	r11
    1fb0:	cf 92       	push	r12
    1fb2:	df 92       	push	r13
    1fb4:	ef 92       	push	r14
    1fb6:	ff 92       	push	r15
    1fb8:	0f 93       	push	r16
    1fba:	1f 93       	push	r17
    1fbc:	cf 93       	push	r28
    1fbe:	df 93       	push	r29
    1fc0:	ec 01       	movw	r28, r24
    Ui::clear();
    1fc2:	0e 94 06 15 	call	0x2a0c	; 0x2a0c <_ZN2Ui5clearEv>

    drawMenuEntry();
    1fc6:	ce 01       	movw	r24, r28
    1fc8:	0e 94 6e 0f 	call	0x1edc	; 0x1edc <_ZN12StateMachine16MenuStateHandler13drawMenuEntryEv>

        SCREEN_WIDTH - 1,
        SCREEN_HEIGHT_MID + TRIANGLE_MARGIN,

        WHITE
    );
    1fcc:	aa 24       	eor	r10, r10
    1fce:	a3 94       	inc	r10
    1fd0:	b1 2c       	mov	r11, r1
    1fd2:	91 e2       	ldi	r25, 0x21	; 33
    1fd4:	c9 2e       	mov	r12, r25
    1fd6:	d1 2c       	mov	r13, r1
    1fd8:	2f e7       	ldi	r18, 0x7F	; 127
    1fda:	e2 2e       	mov	r14, r18
    1fdc:	f1 2c       	mov	r15, r1
    1fde:	05 e2       	ldi	r16, 0x25	; 37
    1fe0:	10 e0       	ldi	r17, 0x00	; 0
    1fe2:	2d e7       	ldi	r18, 0x7D	; 125
    1fe4:	30 e0       	ldi	r19, 0x00	; 0
    1fe6:	41 e2       	ldi	r20, 0x21	; 33
    1fe8:	50 e0       	ldi	r21, 0x00	; 0
    1fea:	6b e7       	ldi	r22, 0x7B	; 123
    1fec:	70 e0       	ldi	r23, 0x00	; 0
    1fee:	8e e8       	ldi	r24, 0x8E	; 142
    1ff0:	92 e0       	ldi	r25, 0x02	; 2
    1ff2:	0e 94 e2 1e 	call	0x3dc4	; 0x3dc4 <_ZN12Adafruit_GFX12fillTriangleEiiiiiij>

        SCREEN_WIDTH - 1,
        SCREEN_HEIGHT_MID - TRIANGLE_MARGIN,

        WHITE
    );
    1ff6:	3d e1       	ldi	r19, 0x1D	; 29
    1ff8:	c3 2e       	mov	r12, r19
    1ffa:	d1 2c       	mov	r13, r1
    1ffc:	09 e1       	ldi	r16, 0x19	; 25
    1ffe:	10 e0       	ldi	r17, 0x00	; 0
    2000:	2d e7       	ldi	r18, 0x7D	; 125
    2002:	30 e0       	ldi	r19, 0x00	; 0
    2004:	4d e1       	ldi	r20, 0x1D	; 29
    2006:	50 e0       	ldi	r21, 0x00	; 0
    2008:	6b e7       	ldi	r22, 0x7B	; 123
    200a:	70 e0       	ldi	r23, 0x00	; 0
    200c:	8e e8       	ldi	r24, 0x8E	; 142
    200e:	92 e0       	ldi	r25, 0x02	; 2
    2010:	0e 94 e2 1e 	call	0x3dc4	; 0x3dc4 <_ZN12Adafruit_GFX12fillTriangleEiiiiiij>

    drawMenuEntry();
    drawTriangles();

    Ui::needDisplay();
}
    2014:	df 91       	pop	r29
    2016:	cf 91       	pop	r28
    2018:	1f 91       	pop	r17
    201a:	0f 91       	pop	r16
    201c:	ff 90       	pop	r15
    201e:	ef 90       	pop	r14
    2020:	df 90       	pop	r13
    2022:	cf 90       	pop	r12
    2024:	bf 90       	pop	r11
    2026:	af 90       	pop	r10
    Ui::clear();

    drawMenuEntry();
    drawTriangles();

    Ui::needDisplay();
    2028:	0c 94 0e 15 	jmp	0x2a1c	; 0x2a1c <_ZN2Ui11needDisplayEv>

0000202c <_ZN12StateMachine16MenuStateHandler12onUpdateDrawEv>:
}

void StateMachine::MenuStateHandler::onUpdateDraw() {
    202c:	cf 93       	push	r28
    202e:	df 93       	push	r29
    2030:	ec 01       	movw	r28, r24
    Ui::clearRect(
        0,
        SCREEN_HEIGHT - (CHAR_HEIGHT + 2) * 2,
        SCREEN_WIDTH,
        (CHAR_HEIGHT + 2) * 2
    );
    2032:	22 e1       	ldi	r18, 0x12	; 18
    2034:	30 e0       	ldi	r19, 0x00	; 0
    2036:	40 e8       	ldi	r20, 0x80	; 128
    2038:	50 e0       	ldi	r21, 0x00	; 0
    203a:	6e e2       	ldi	r22, 0x2E	; 46
    203c:	70 e0       	ldi	r23, 0x00	; 0
    203e:	80 e0       	ldi	r24, 0x00	; 0
    2040:	90 e0       	ldi	r25, 0x00	; 0
    2042:	0e 94 5b 15 	call	0x2ab6	; 0x2ab6 <_ZN2Ui9clearRectEiiii>

    drawMenuEntry();
    2046:	ce 01       	movw	r24, r28
    2048:	0e 94 6e 0f 	call	0x1edc	; 0x1edc <_ZN12StateMachine16MenuStateHandler13drawMenuEntryEv>
    Ui::needDisplay();
}
    204c:	df 91       	pop	r29
    204e:	cf 91       	pop	r28
        SCREEN_WIDTH,
        (CHAR_HEIGHT + 2) * 2
    );

    drawMenuEntry();
    Ui::needDisplay();
    2050:	0c 94 0e 15 	jmp	0x2a1c	; 0x2a1c <_ZN2Ui11needDisplayEv>

00002054 <_ZN12StateMachine23ScreensaverStateHandler7onEnterEv>:
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};


void StateMachine::ScreensaverStateHandler::onEnter() {
    showLogo = true;
    2054:	21 e0       	ldi	r18, 0x01	; 1
    2056:	fc 01       	movw	r30, r24
    2058:	21 87       	std	Z+9, r18	; 0x09
    205a:	08 95       	ret

0000205c <_ZN12StateMachine23ScreensaverStateHandler12onUpdateDrawEv>:

    Ui::needDisplay();
}

void StateMachine::ScreensaverStateHandler::onUpdateDraw() {
    this->onInitialDraw();
    205c:	dc 01       	movw	r26, r24
    205e:	ed 91       	ld	r30, X+
    2060:	fc 91       	ld	r31, X
    2062:	01 90       	ld	r0, Z+
    2064:	f0 81       	ld	r31, Z
    2066:	e0 2d       	mov	r30, r0
    2068:	09 94       	ijmp

0000206a <_ZN12StateMachine23ScreensaverStateHandler8onUpdateEv>:

void StateMachine::ScreensaverStateHandler::onEnter() {
    showLogo = true;
}

void StateMachine::ScreensaverStateHandler::onUpdate() {
    206a:	0f 93       	push	r16
    206c:	1f 93       	push	r17
    206e:	cf 93       	push	r28
    2070:	df 93       	push	r29
    2072:	ec 01       	movw	r28, r24
    if (this->displaySwapTimer.hasTicked()) {
    2074:	8c 01       	movw	r16, r24
    2076:	0e 5f       	subi	r16, 0xFE	; 254
    2078:	1f 4f       	sbci	r17, 0xFF	; 255
    207a:	c8 01       	movw	r24, r16
    207c:	0e 94 a2 14 	call	0x2944	; 0x2944 <_ZN5Timer9hasTickedEv>
    2080:	88 23       	and	r24, r24
    2082:	69 f0       	breq	.+26     	; 0x209e <_ZN12StateMachine23ScreensaverStateHandler8onUpdateEv+0x34>
        this->displaySwapTimer.reset();
    2084:	c8 01       	movw	r24, r16
    2086:	0e 94 c1 14 	call	0x2982	; 0x2982 <_ZN5Timer5resetEv>
        showLogo = !showLogo;
    208a:	99 85       	ldd	r25, Y+9	; 0x09
    208c:	81 e0       	ldi	r24, 0x01	; 1
    208e:	89 27       	eor	r24, r25
    2090:	89 87       	std	Y+9, r24	; 0x09

        Ui::needUpdate();
    }
}
    2092:	df 91       	pop	r29
    2094:	cf 91       	pop	r28
    2096:	1f 91       	pop	r17
    2098:	0f 91       	pop	r16
void StateMachine::ScreensaverStateHandler::onUpdate() {
    if (this->displaySwapTimer.hasTicked()) {
        this->displaySwapTimer.reset();
        showLogo = !showLogo;

        Ui::needUpdate();
    209a:	0c 94 0a 15 	jmp	0x2a14	; 0x2a14 <_ZN2Ui10needUpdateEv>
    }
}
    209e:	df 91       	pop	r29
    20a0:	cf 91       	pop	r28
    20a2:	1f 91       	pop	r17
    20a4:	0f 91       	pop	r16
    20a6:	08 95       	ret

000020a8 <_ZN12StateMachine23ScreensaverStateHandler14onButtonChangeE6ButtonN7Buttons9PressTypeE>:

void StateMachine::ScreensaverStateHandler::onButtonChange(
    Button button,
    Buttons::PressType pressType
) {
    StateMachine::switchState(StateMachine::lastState);
    20a8:	80 91 87 02 	lds	r24, 0x0287	; 0x800287 <_ZN12StateMachine9lastStateE>
    20ac:	0c 94 67 0d 	jmp	0x1ace	; 0x1ace <_ZN12StateMachine11switchStateENS_5StateE>

000020b0 <_ZN12StateMachine23ScreensaverStateHandler13onInitialDrawEv>:
}


void StateMachine::ScreensaverStateHandler::onInitialDraw() {
    20b0:	cf 92       	push	r12
    20b2:	df 92       	push	r13
    20b4:	ef 92       	push	r14
    20b6:	ff 92       	push	r15
    20b8:	0f 93       	push	r16
    20ba:	1f 93       	push	r17
    20bc:	cf 93       	push	r28
    20be:	df 93       	push	r29
    20c0:	ec 01       	movw	r28, r24
    Ui::clear();
    20c2:	0e 94 06 15 	call	0x2a0c	; 0x2a0c <_ZN2Ui5clearEv>

    if (showLogo) {
    20c6:	89 85       	ldd	r24, Y+9	; 0x09
    20c8:	88 23       	and	r24, r24
    20ca:	99 f0       	breq	.+38     	; 0x20f2 <_ZN12StateMachine23ScreensaverStateHandler13onInitialDrawEv+0x42>
            0,
            logo,
            SCREEN_WIDTH,
            SCREEN_HEIGHT,
            WHITE
        );
    20cc:	cc 24       	eor	r12, r12
    20ce:	c3 94       	inc	r12
    20d0:	d1 2c       	mov	r13, r1
    20d2:	90 e4       	ldi	r25, 0x40	; 64
    20d4:	e9 2e       	mov	r14, r25
    20d6:	f1 2c       	mov	r15, r1
    20d8:	00 e8       	ldi	r16, 0x80	; 128
    20da:	10 e0       	ldi	r17, 0x00	; 0
    20dc:	26 e2       	ldi	r18, 0x26	; 38
    20de:	33 e0       	ldi	r19, 0x03	; 3
    20e0:	40 e0       	ldi	r20, 0x00	; 0
    20e2:	50 e0       	ldi	r21, 0x00	; 0
    20e4:	60 e0       	ldi	r22, 0x00	; 0
    20e6:	70 e0       	ldi	r23, 0x00	; 0
    20e8:	8e e8       	ldi	r24, 0x8E	; 142
    20ea:	92 e0       	ldi	r25, 0x02	; 2
    20ec:	0e 94 c4 20 	call	0x4188	; 0x4188 <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij>
    20f0:	40 c0       	rjmp	.+128    	; 0x2172 <_ZN12StateMachine23ScreensaverStateHandler13onInitialDrawEv+0xc2>
    @param   c   16-bit 5-6-5 Color to draw text with
    @note    For 'transparent' background, background and foreground
             are set to same color rather than using a separate flag.
  */
  /**********************************************************************/
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
    20f2:	81 e0       	ldi	r24, 0x01	; 1
    20f4:	90 e0       	ldi	r25, 0x00	; 0
    20f6:	90 93 a1 02 	sts	0x02A1, r25	; 0x8002a1 <_ZN2Ui7displayE+0x13>
    20fa:	80 93 a0 02 	sts	0x02A0, r24	; 0x8002a0 <_ZN2Ui7displayE+0x12>
    20fe:	90 93 9f 02 	sts	0x029F, r25	; 0x80029f <_ZN2Ui7displayE+0x11>
    2102:	80 93 9e 02 	sts	0x029E, r24	; 0x80029e <_ZN2Ui7displayE+0x10>
    } else {
        Ui::display.setTextColor(WHITE);

        Ui::display.setTextSize(6);
    2106:	66 e0       	ldi	r22, 0x06	; 6
    2108:	8e e8       	ldi	r24, 0x8E	; 142
    210a:	92 e0       	ldi	r25, 0x02	; 2
    210c:	0e 94 7a 24 	call	0x48f4	; 0x48f4 <_ZN12Adafruit_GFX11setTextSizeEh>
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) {
    cursor_x = x;
    2110:	8e e1       	ldi	r24, 0x1E	; 30
    2112:	90 e0       	ldi	r25, 0x00	; 0
    2114:	90 93 9b 02 	sts	0x029B, r25	; 0x80029b <_ZN2Ui7displayE+0xd>
    2118:	80 93 9a 02 	sts	0x029A, r24	; 0x80029a <_ZN2Ui7displayE+0xc>
    cursor_y = y;
    211c:	82 e0       	ldi	r24, 0x02	; 2
    211e:	90 e0       	ldi	r25, 0x00	; 0
    2120:	90 93 9d 02 	sts	0x029D, r25	; 0x80029d <_ZN2Ui7displayE+0xf>
    2124:	80 93 9c 02 	sts	0x029C, r24	; 0x80029c <_ZN2Ui7displayE+0xe>
        Ui::display.setCursor(
            SCREEN_WIDTH_MID - ((CHAR_WIDTH) * 6) / 2 * 2 - 3,
            2);

        Ui::display.print(Channels::getName(Receiver::activeChannel));
    2128:	80 91 62 02 	lds	r24, 0x0262	; 0x800262 <_ZN8Receiver13activeChannelE>
    212c:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <_ZN8Channels7getNameEh>
    2130:	bc 01       	movw	r22, r24
    2132:	8e e8       	ldi	r24, 0x8E	; 142
    2134:	92 e0       	ldi	r25, 0x02	; 2
    2136:	0e 94 c9 17 	call	0x2f92	; 0x2f92 <_ZN5Print5printEPKc>

        Ui::display.setTextSize(2);
    213a:	62 e0       	ldi	r22, 0x02	; 2
    213c:	8e e8       	ldi	r24, 0x8E	; 142
    213e:	92 e0       	ldi	r25, 0x02	; 2
    2140:	0e 94 7a 24 	call	0x48f4	; 0x48f4 <_ZN12Adafruit_GFX11setTextSizeEh>
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) {
    cursor_x = x;
    2144:	86 e2       	ldi	r24, 0x26	; 38
    2146:	90 e0       	ldi	r25, 0x00	; 0
    2148:	90 93 9b 02 	sts	0x029B, r25	; 0x80029b <_ZN2Ui7displayE+0xd>
    214c:	80 93 9a 02 	sts	0x029A, r24	; 0x80029a <_ZN2Ui7displayE+0xc>
    cursor_y = y;
    2150:	80 e3       	ldi	r24, 0x30	; 48
    2152:	90 e0       	ldi	r25, 0x00	; 0
    2154:	90 93 9d 02 	sts	0x029D, r25	; 0x80029d <_ZN2Ui7displayE+0xf>
    2158:	80 93 9c 02 	sts	0x029C, r24	; 0x80029c <_ZN2Ui7displayE+0xe>
        Ui::display.setCursor(
            SCREEN_WIDTH_MID - ((CHAR_WIDTH + 1) * 2) / 2 * 4 - 1,
            SCREEN_HEIGHT - CHAR_HEIGHT * 2 - 2);
        Ui::display.print(Channels::getFrequency(Receiver::activeChannel));
    215c:	80 91 62 02 	lds	r24, 0x0262	; 0x800262 <_ZN8Receiver13activeChannelE>
    2160:	0e 94 65 0a 	call	0x14ca	; 0x14ca <_ZN8Channels12getFrequencyEh>
    2164:	4a e0       	ldi	r20, 0x0A	; 10
    2166:	50 e0       	ldi	r21, 0x00	; 0
    2168:	bc 01       	movw	r22, r24
    216a:	8e e8       	ldi	r24, 0x8E	; 142
    216c:	92 e0       	ldi	r25, 0x02	; 2
    216e:	0e 94 21 18 	call	0x3042	; 0x3042 <_ZN5Print5printEji>
    }

    Ui::needDisplay();
}
    2172:	df 91       	pop	r29
    2174:	cf 91       	pop	r28
    2176:	1f 91       	pop	r17
    2178:	0f 91       	pop	r16
    217a:	ff 90       	pop	r15
    217c:	ef 90       	pop	r14
    217e:	df 90       	pop	r13
    2180:	cf 90       	pop	r12
            SCREEN_WIDTH_MID - ((CHAR_WIDTH + 1) * 2) / 2 * 4 - 1,
            SCREEN_HEIGHT - CHAR_HEIGHT * 2 - 2);
        Ui::display.print(Channels::getFrequency(Receiver::activeChannel));
    }

    Ui::needDisplay();
    2182:	0c 94 0e 15 	jmp	0x2a1c	; 0x2a1c <_ZN2Ui11needDisplayEv>

00002186 <_ZL12menuModeIconPv>:
};


static const unsigned char* menuModeIcon(void* state) {
    SearchStateHandler* search = static_cast<SearchStateHandler*>(state);
    return search->manual ? manualIcon : autoIcon;
    2186:	fc 01       	movw	r30, r24
    2188:	84 a1       	ldd	r24, Z+36	; 0x24
    218a:	81 11       	cpse	r24, r1
    218c:	03 c0       	rjmp	.+6      	; 0x2194 <_ZL12menuModeIconPv+0xe>
    218e:	86 e8       	ldi	r24, 0x86	; 134
    2190:	97 e0       	ldi	r25, 0x07	; 7
    2192:	08 95       	ret
    2194:	86 e6       	ldi	r24, 0x66	; 102
    2196:	97 e0       	ldi	r25, 0x07	; 7
}
    2198:	08 95       	ret

0000219a <_ZL13menuOrderIconPv>:

static const unsigned char* menuOrderIcon(void* state) {
    SearchStateHandler* search = static_cast<SearchStateHandler*>(state);
    switch (search->order) {
    219a:	fc 01       	movw	r30, r24
    219c:	85 a1       	ldd	r24, Z+37	; 0x25
    219e:	88 23       	and	r24, r24
    21a0:	31 f0       	breq	.+12     	; 0x21ae <_ZL13menuOrderIconPv+0x14>
    21a2:	81 30       	cpi	r24, 0x01	; 1
    21a4:	19 f4       	brne	.+6      	; 0x21ac <_ZL13menuOrderIconPv+0x12>
        case SearchStateHandler::ScanOrder::FREQUENCY:
            return freqOrderIcon;
            break;

        case SearchStateHandler::ScanOrder::CHANNEL:
            return channelOrderIcon;
    21a6:	26 e4       	ldi	r18, 0x46	; 70
    21a8:	37 e0       	ldi	r19, 0x07	; 7
    21aa:	03 c0       	rjmp	.+6      	; 0x21b2 <_ZL13menuOrderIconPv+0x18>
            break;
    }
}
    21ac:	08 95       	ret

static const unsigned char* menuOrderIcon(void* state) {
    SearchStateHandler* search = static_cast<SearchStateHandler*>(state);
    switch (search->order) {
        case SearchStateHandler::ScanOrder::FREQUENCY:
            return freqOrderIcon;
    21ae:	26 e2       	ldi	r18, 0x26	; 38
    21b0:	37 e0       	ldi	r19, 0x07	; 7
    21b2:	c9 01       	movw	r24, r18

        case SearchStateHandler::ScanOrder::CHANNEL:
            return channelOrderIcon;
            break;
    }
}
    21b4:	08 95       	ret

000021b6 <_ZL16menuOrderHandlerPv>:

    EepromSettings.searchManual = search->manual;
    EepromSettings.markDirty();
}

static void menuOrderHandler(void* state) {
    21b6:	1f 93       	push	r17
    21b8:	cf 93       	push	r28
    21ba:	df 93       	push	r29
    21bc:	ec 01       	movw	r28, r24
    SearchStateHandler* search = static_cast<SearchStateHandler*>(state);
    if (search->order == SearchStateHandler::ScanOrder::FREQUENCY) {
    21be:	8d a1       	ldd	r24, Y+37	; 0x25
    21c0:	81 11       	cpse	r24, r1
    21c2:	09 c0       	rjmp	.+18     	; 0x21d6 <_ZL16menuOrderHandlerPv+0x20>
        search->order = SearchStateHandler::ScanOrder::CHANNEL;
    21c4:	11 e0       	ldi	r17, 0x01	; 1
    21c6:	1d a3       	std	Y+37, r17	; 0x25
        search->orderedChanelIndex =
            Channels::getOrderedIndex(search->orderedChanelIndex);
    21c8:	8e a1       	ldd	r24, Y+38	; 0x26
    21ca:	0e 94 85 0a 	call	0x150a	; 0x150a <_ZN8Channels15getOrderedIndexEh>
    21ce:	8e a3       	std	Y+38, r24	; 0x26
        EepromSettings.searchOrderByChannel = true;
    21d0:	10 93 6b 02 	sts	0x026B, r17	; 0x80026b <EepromSettings+0x7>
    21d4:	07 c0       	rjmp	.+14     	; 0x21e4 <_ZL16menuOrderHandlerPv+0x2e>
    } else {
        search->order = SearchStateHandler::ScanOrder::FREQUENCY;
    21d6:	1d a2       	std	Y+37, r1	; 0x25
        search->orderedChanelIndex =
            Channels::getOrderedIndexFromIndex(search->orderedChanelIndex);
    21d8:	8e a1       	ldd	r24, Y+38	; 0x26
    21da:	0e 94 8b 0a 	call	0x1516	; 0x1516 <_ZN8Channels24getOrderedIndexFromIndexEh>
    21de:	8e a3       	std	Y+38, r24	; 0x26
        EepromSettings.searchOrderByChannel = false;
    21e0:	10 92 6b 02 	sts	0x026B, r1	; 0x80026b <EepromSettings+0x7>
    }

    EepromSettings.markDirty();
    21e4:	84 e6       	ldi	r24, 0x64	; 100
    21e6:	92 e0       	ldi	r25, 0x02	; 2
}
    21e8:	df 91       	pop	r29
    21ea:	cf 91       	pop	r28
    21ec:	1f 91       	pop	r17
        search->orderedChanelIndex =
            Channels::getOrderedIndexFromIndex(search->orderedChanelIndex);
        EepromSettings.searchOrderByChannel = false;
    }

    EepromSettings.markDirty();
    21ee:	0c 94 1b 0c 	jmp	0x1836	; 0x1836 <_ZN14EepromSettings9markDirtyEv>

000021f2 <_ZL15menuModeHandlerPv>:
            return channelOrderIcon;
            break;
    }
}

static void menuModeHandler(void* state) {
    21f2:	fc 01       	movw	r30, r24
    SearchStateHandler* search = static_cast<SearchStateHandler*>(state);
    search->manual = !search->manual;
    21f4:	84 a1       	ldd	r24, Z+36	; 0x24
    21f6:	91 e0       	ldi	r25, 0x01	; 1
    21f8:	98 27       	eor	r25, r24
    21fa:	94 a3       	std	Z+36, r25	; 0x24

    EepromSettings.searchManual = search->manual;
    21fc:	90 93 6a 02 	sts	0x026A, r25	; 0x80026a <EepromSettings+0x6>
    EepromSettings.markDirty();
    2200:	84 e6       	ldi	r24, 0x64	; 100
    2202:	92 e0       	ldi	r25, 0x02	; 2
    2204:	0c 94 1b 0c 	jmp	0x1836	; 0x1836 <_ZN14EepromSettings9markDirtyEv>

00002208 <_ZN12StateMachine18SearchStateHandler7onEnterEv>:

    EepromSettings.markDirty();
}


void SearchStateHandler::onEnter() {
    2208:	0f 93       	push	r16
    220a:	1f 93       	push	r17
    220c:	cf 93       	push	r28
    220e:	df 93       	push	r29
    2210:	ec 01       	movw	r28, r24
    menu.addItem(menuModeIcon, menuModeHandler);
    2212:	8c 01       	movw	r16, r24
    2214:	04 5f       	subi	r16, 0xF4	; 244
    2216:	1f 4f       	sbci	r17, 0xFF	; 255
    2218:	49 ef       	ldi	r20, 0xF9	; 249
    221a:	50 e1       	ldi	r21, 0x10	; 16
    221c:	63 ec       	ldi	r22, 0xC3	; 195
    221e:	70 e1       	ldi	r23, 0x10	; 16
    2220:	c8 01       	movw	r24, r16
    2222:	0e 94 69 16 	call	0x2cd2	; 0x2cd2 <_ZN2Ui15StateMenuHelper7addItemEPFPKhPvEPFvS3_E>
    menu.addItem(menuOrderIcon, menuOrderHandler);
    2226:	4b ed       	ldi	r20, 0xDB	; 219
    2228:	50 e1       	ldi	r21, 0x10	; 16
    222a:	6d ec       	ldi	r22, 0xCD	; 205
    222c:	70 e1       	ldi	r23, 0x10	; 16
    222e:	c8 01       	movw	r24, r16
    2230:	0e 94 69 16 	call	0x2cd2	; 0x2cd2 <_ZN2Ui15StateMenuHelper7addItemEPFPKhPvEPFvS3_E>

    this->manual = EepromSettings.searchManual;
    2234:	81 e0       	ldi	r24, 0x01	; 1
    2236:	90 91 6a 02 	lds	r25, 0x026A	; 0x80026a <EepromSettings+0x6>
    223a:	91 11       	cpse	r25, r1
    223c:	01 c0       	rjmp	.+2      	; 0x2240 <_ZN12StateMachine18SearchStateHandler7onEnterEv+0x38>
    223e:	80 e0       	ldi	r24, 0x00	; 0
    2240:	8c a3       	std	Y+36, r24	; 0x24
    this->order = EepromSettings.searchOrderByChannel ?
        ScanOrder::CHANNEL :
        ScanOrder::FREQUENCY;
    2242:	81 e0       	ldi	r24, 0x01	; 1
    2244:	90 91 6b 02 	lds	r25, 0x026B	; 0x80026b <EepromSettings+0x7>
    2248:	91 11       	cpse	r25, r1
    224a:	01 c0       	rjmp	.+2      	; 0x224e <_ZN12StateMachine18SearchStateHandler7onEnterEv+0x46>
    224c:	80 e0       	ldi	r24, 0x00	; 0
    224e:	8d a3       	std	Y+37, r24	; 0x25

    switch (this->order) {
    2250:	81 30       	cpi	r24, 0x01	; 1
    2252:	19 f4       	brne	.+6      	; 0x225a <_ZN12StateMachine18SearchStateHandler7onEnterEv+0x52>
        case ScanOrder::CHANNEL:
            this->orderedChanelIndex = EepromSettings.startChannel;
    2254:	80 91 68 02 	lds	r24, 0x0268	; 0x800268 <EepromSettings+0x4>
    2258:	04 c0       	rjmp	.+8      	; 0x2262 <_ZN12StateMachine18SearchStateHandler7onEnterEv+0x5a>
            break;

        case ScanOrder::FREQUENCY:
            this->orderedChanelIndex =
                Channels::getOrderedIndexFromIndex(EepromSettings.startChannel);
    225a:	80 91 68 02 	lds	r24, 0x0268	; 0x800268 <EepromSettings+0x4>
    225e:	0e 94 8b 0a 	call	0x1516	; 0x1516 <_ZN8Channels24getOrderedIndexFromIndexEh>
    2262:	8e a3       	std	Y+38, r24	; 0x26
            break;
    }
}
    2264:	df 91       	pop	r29
    2266:	cf 91       	pop	r28
    2268:	1f 91       	pop	r17
    226a:	0f 91       	pop	r16
    226c:	08 95       	ret

0000226e <_ZN12StateMachine18SearchStateHandler12onUpdateAutoEv>:
    }

    Ui::needUpdate();
}

void SearchStateHandler::onUpdateAuto() {
    226e:	1f 93       	push	r17
    2270:	cf 93       	push	r28
    2272:	df 93       	push	r29
    2274:	ec 01       	movw	r28, r24
    if (scanningPeak) {
    2276:	8d 81       	ldd	r24, Y+5	; 0x05
    2278:	88 23       	and	r24, r24
    227a:	b1 f1       	breq	.+108    	; 0x22e8 <_ZN12StateMachine18SearchStateHandler12onUpdateAutoEv+0x7a>
        uint8_t peaksIndex = peakChannelIndex - orderedChanelIndex;
    227c:	8e 81       	ldd	r24, Y+6	; 0x06
    227e:	9e a1       	ldd	r25, Y+38	; 0x26
    2280:	28 2f       	mov	r18, r24
    2282:	29 1b       	sub	r18, r25
        peaks[peaksIndex] = Receiver::rssiA;
    2284:	fe 01       	movw	r30, r28
    2286:	e2 0f       	add	r30, r18
    2288:	f1 1d       	adc	r31, r1
    228a:	30 91 61 02 	lds	r19, 0x0261	; 0x800261 <_ZN8Receiver5rssiAE>
    228e:	37 83       	std	Z+7, r19	; 0x07
        peakChannelIndex++;
    2290:	8f 5f       	subi	r24, 0xFF	; 255
    2292:	8e 83       	std	Y+6, r24	; 0x06

        if (peaksIndex >= PEAK_LOOKAHEAD || peakChannelIndex >= CHANNELS_SIZE) {
    2294:	24 30       	cpi	r18, 0x04	; 4
    2296:	10 f4       	brcc	.+4      	; 0x229c <_ZN12StateMachine18SearchStateHandler12onUpdateAutoEv+0x2e>
    2298:	88 32       	cpi	r24, 0x28	; 40
    229a:	f8 f0       	brcs	.+62     	; 0x22da <_ZN12StateMachine18SearchStateHandler12onUpdateAutoEv+0x6c>
    229c:	fe 01       	movw	r30, r28
    229e:	37 96       	adiw	r30, 0x07	; 7
    }

    Ui::needUpdate();
}

void SearchStateHandler::onUpdateAuto() {
    22a0:	80 e0       	ldi	r24, 0x00	; 0
    22a2:	10 e0       	ldi	r17, 0x00	; 0
    22a4:	20 e0       	ldi	r18, 0x00	; 0

        if (peaksIndex >= PEAK_LOOKAHEAD || peakChannelIndex >= CHANNELS_SIZE) {
            uint8_t largestPeak = 0;
            uint8_t largestPeakIndex = 0;
            for (uint8_t i = 0; i < PEAK_LOOKAHEAD; i++) {
                uint8_t peak = peaks[i];
    22a6:	31 91       	ld	r19, Z+
                if (peak > largestPeak) {
    22a8:	23 17       	cp	r18, r19
    22aa:	10 f4       	brcc	.+4      	; 0x22b0 <_ZN12StateMachine18SearchStateHandler12onUpdateAutoEv+0x42>
    22ac:	18 2f       	mov	r17, r24
    22ae:	23 2f       	mov	r18, r19
        peakChannelIndex++;

        if (peaksIndex >= PEAK_LOOKAHEAD || peakChannelIndex >= CHANNELS_SIZE) {
            uint8_t largestPeak = 0;
            uint8_t largestPeakIndex = 0;
            for (uint8_t i = 0; i < PEAK_LOOKAHEAD; i++) {
    22b0:	8f 5f       	subi	r24, 0xFF	; 255
    22b2:	84 30       	cpi	r24, 0x04	; 4
    22b4:	c1 f7       	brne	.-16     	; 0x22a6 <_ZN12StateMachine18SearchStateHandler12onUpdateAutoEv+0x38>
                    largestPeak = peak;
                    largestPeakIndex = i;
                }
            }

            uint8_t peakChannel = orderedChanelIndex + largestPeakIndex;
    22b6:	19 0f       	add	r17, r25
            orderedChanelIndex = peakChannel;
    22b8:	1e a3       	std	Y+38, r17	; 0x26
            Receiver::setChannel(Channels::getOrderedIndex(peakChannel));
    22ba:	81 2f       	mov	r24, r17
    22bc:	0e 94 85 0a 	call	0x150a	; 0x150a <_ZN8Channels15getOrderedIndexEh>
    22c0:	0e 94 aa 0a 	call	0x1554	; 0x1554 <_ZN8Receiver10setChannelEh>

            EepromSettings.startChannel =
                Channels::getOrderedIndex(peakChannel);
    22c4:	81 2f       	mov	r24, r17
    22c6:	0e 94 85 0a 	call	0x150a	; 0x150a <_ZN8Channels15getOrderedIndexEh>
    22ca:	80 93 68 02 	sts	0x0268, r24	; 0x800268 <EepromSettings+0x4>
            EepromSettings.markDirty();
    22ce:	84 e6       	ldi	r24, 0x64	; 100
    22d0:	92 e0       	ldi	r25, 0x02	; 2
    22d2:	0e 94 1b 0c 	call	0x1836	; 0x1836 <_ZN14EepromSettings9markDirtyEv>

            scanningPeak = false;
    22d6:	1d 82       	std	Y+5, r1	; 0x05
    22d8:	2e c0       	rjmp	.+92     	; 0x2336 <_ZN12StateMachine18SearchStateHandler12onUpdateAutoEv+0xc8>
        } else {
            Receiver::setChannel(Channels::getOrderedIndex(peakChannelIndex));
    22da:	0e 94 85 0a 	call	0x150a	; 0x150a <_ZN8Channels15getOrderedIndexEh>
                if (forceNext)
                    forceNext = false;
            }
        }
    }
}
    22de:	df 91       	pop	r29
    22e0:	cf 91       	pop	r28
    22e2:	1f 91       	pop	r17
                Channels::getOrderedIndex(peakChannel);
            EepromSettings.markDirty();

            scanningPeak = false;
        } else {
            Receiver::setChannel(Channels::getOrderedIndex(peakChannelIndex));
    22e4:	0c 94 aa 0a 	jmp	0x1554	; 0x1554 <_ZN8Receiver10setChannelEh>
        }
    } else {
        if (scanning) {
    22e8:	8a 81       	ldd	r24, Y+2	; 0x02
    22ea:	88 23       	and	r24, r24
    22ec:	21 f1       	breq	.+72     	; 0x2336 <_ZN12StateMachine18SearchStateHandler12onUpdateAutoEv+0xc8>
            if (!forceNext && Receiver::rssiA >= RSSI_SEEK_TRESHOLD) {
    22ee:	8c 81       	ldd	r24, Y+4	; 0x04
    22f0:	9e a1       	ldd	r25, Y+38	; 0x26
    22f2:	81 11       	cpse	r24, r1
    22f4:	0d c0       	rjmp	.+26     	; 0x2310 <_ZN12StateMachine18SearchStateHandler12onUpdateAutoEv+0xa2>
    22f6:	80 91 61 02 	lds	r24, 0x0261	; 0x800261 <_ZN8Receiver5rssiAE>
    22fa:	80 35       	cpi	r24, 0x50	; 80
    22fc:	48 f0       	brcs	.+18     	; 0x2310 <_ZN12StateMachine18SearchStateHandler12onUpdateAutoEv+0xa2>
                scanning = false;
    22fe:	1a 82       	std	Y+2, r1	; 0x02
                scanningPeak = true;
    2300:	81 e0       	ldi	r24, 0x01	; 1
    2302:	8d 83       	std	Y+5, r24	; 0x05
                peakChannelIndex = orderedChanelIndex;
    2304:	9e 83       	std	Y+6, r25	; 0x06

                for (uint8_t i = 0; i < PEAK_LOOKAHEAD; i++)
                    peaks[i] = 0;
    2306:	1f 82       	std	Y+7, r1	; 0x07
    2308:	18 86       	std	Y+8, r1	; 0x08
    230a:	19 86       	std	Y+9, r1	; 0x09
    230c:	1a 86       	std	Y+10, r1	; 0x0a
    230e:	13 c0       	rjmp	.+38     	; 0x2336 <_ZN12StateMachine18SearchStateHandler12onUpdateAutoEv+0xc8>
            } else {
                orderedChanelIndex += static_cast<int8_t>(direction);
    2310:	8b 81       	ldd	r24, Y+3	; 0x03
    2312:	89 0f       	add	r24, r25
                if (orderedChanelIndex == 255)
    2314:	8f 3f       	cpi	r24, 0xFF	; 255
    2316:	11 f4       	brne	.+4      	; 0x231c <_ZN12StateMachine18SearchStateHandler12onUpdateAutoEv+0xae>
                    orderedChanelIndex = CHANNELS_SIZE - 1;
    2318:	87 e2       	ldi	r24, 0x27	; 39
    231a:	02 c0       	rjmp	.+4      	; 0x2320 <_ZN12StateMachine18SearchStateHandler12onUpdateAutoEv+0xb2>
                else if (orderedChanelIndex >= CHANNELS_SIZE)
    231c:	88 32       	cpi	r24, 0x28	; 40
    231e:	10 f4       	brcc	.+4      	; 0x2324 <_ZN12StateMachine18SearchStateHandler12onUpdateAutoEv+0xb6>
                peakChannelIndex = orderedChanelIndex;

                for (uint8_t i = 0; i < PEAK_LOOKAHEAD; i++)
                    peaks[i] = 0;
            } else {
                orderedChanelIndex += static_cast<int8_t>(direction);
    2320:	8e a3       	std	Y+38, r24	; 0x26
    2322:	01 c0       	rjmp	.+2      	; 0x2326 <_ZN12StateMachine18SearchStateHandler12onUpdateAutoEv+0xb8>
                if (orderedChanelIndex == 255)
                    orderedChanelIndex = CHANNELS_SIZE - 1;
                else if (orderedChanelIndex >= CHANNELS_SIZE)
                    orderedChanelIndex = 0;
    2324:	1e a2       	std	Y+38, r1	; 0x26

                Receiver::setChannel(
    2326:	8e a1       	ldd	r24, Y+38	; 0x26
    2328:	0e 94 85 0a 	call	0x150a	; 0x150a <_ZN8Channels15getOrderedIndexEh>
                    Channels::getOrderedIndex(orderedChanelIndex));
    232c:	0e 94 aa 0a 	call	0x1554	; 0x1554 <_ZN8Receiver10setChannelEh>

                if (forceNext)
    2330:	8c 81       	ldd	r24, Y+4	; 0x04
    2332:	81 11       	cpse	r24, r1
                    forceNext = false;
    2334:	1c 82       	std	Y+4, r1	; 0x04
            }
        }
    }
}
    2336:	df 91       	pop	r29
    2338:	cf 91       	pop	r28
    233a:	1f 91       	pop	r17
    233c:	08 95       	ret

0000233e <_ZN12StateMachine18SearchStateHandler8onUpdateEv>:
            break;
    }
}

void SearchStateHandler::onUpdate() {
    if (!manual) {
    233e:	fc 01       	movw	r30, r24
    2340:	24 a1       	ldd	r18, Z+36	; 0x24
    2342:	21 11       	cpse	r18, r1
    2344:	02 c0       	rjmp	.+4      	; 0x234a <_ZN12StateMachine18SearchStateHandler8onUpdateEv+0xc>
        onUpdateAuto();
    2346:	0e 94 37 11 	call	0x226e	; 0x226e <_ZN12StateMachine18SearchStateHandler12onUpdateAutoEv>
    }

    Ui::needUpdate();
    234a:	0c 94 0a 15 	jmp	0x2a14	; 0x2a14 <_ZN2Ui10needUpdateEv>

0000234e <_ZN12StateMachine18SearchStateHandler10setChannelEv>:

        this->setChannel();
    }
}

void SearchStateHandler::setChannel() {
    234e:	cf 93       	push	r28
    2350:	fc 01       	movw	r30, r24
    uint8_t actualChannelIndex;
    if (this->order == ScanOrder::FREQUENCY) {
    2352:	85 a1       	ldd	r24, Z+37	; 0x25
    2354:	81 11       	cpse	r24, r1
    2356:	05 c0       	rjmp	.+10     	; 0x2362 <_ZN12StateMachine18SearchStateHandler10setChannelEv+0x14>
        actualChannelIndex = Channels::getOrderedIndex(orderedChanelIndex);
    2358:	86 a1       	ldd	r24, Z+38	; 0x26
    235a:	0e 94 85 0a 	call	0x150a	; 0x150a <_ZN8Channels15getOrderedIndexEh>
    235e:	c8 2f       	mov	r28, r24
    2360:	01 c0       	rjmp	.+2      	; 0x2364 <_ZN12StateMachine18SearchStateHandler10setChannelEv+0x16>
    } else {
        actualChannelIndex = orderedChanelIndex;
    2362:	c6 a1       	ldd	r28, Z+38	; 0x26
    }

    Receiver::setChannel(actualChannelIndex);
    2364:	8c 2f       	mov	r24, r28
    2366:	0e 94 aa 0a 	call	0x1554	; 0x1554 <_ZN8Receiver10setChannelEh>
    EepromSettings.startChannel = actualChannelIndex;
    236a:	c0 93 68 02 	sts	0x0268, r28	; 0x800268 <EepromSettings+0x4>
    EepromSettings.markDirty();
    236e:	84 e6       	ldi	r24, 0x64	; 100
    2370:	92 e0       	ldi	r25, 0x02	; 2
}
    2372:	cf 91       	pop	r28
        actualChannelIndex = orderedChanelIndex;
    }

    Receiver::setChannel(actualChannelIndex);
    EepromSettings.startChannel = actualChannelIndex;
    EepromSettings.markDirty();
    2374:	0c 94 1b 0c 	jmp	0x1836	; 0x1836 <_ZN14EepromSettings9markDirtyEv>

00002378 <_ZN12StateMachine18SearchStateHandler14onButtonChangeE6ButtonN7Buttons9PressTypeE>:
}

void SearchStateHandler::onButtonChange(
    Button button,
    Buttons::PressType pressType
) {
    2378:	0f 93       	push	r16
    237a:	1f 93       	push	r17
    237c:	cf 93       	push	r28
    237e:	df 93       	push	r29
    2380:	ec 01       	movw	r28, r24
    2382:	16 2f       	mov	r17, r22
    2384:	04 2f       	mov	r16, r20
    if (this->menu.handleButtons(button, pressType))
    2386:	0c 96       	adiw	r24, 0x0c	; 12
    2388:	0e 94 7d 16 	call	0x2cfa	; 0x2cfa <_ZN2Ui15StateMenuHelper13handleButtonsE6ButtonN7Buttons9PressTypeE>
    238c:	81 11       	cpse	r24, r1
    238e:	2c c0       	rjmp	.+88     	; 0x23e8 <_ZN12StateMachine18SearchStateHandler14onButtonChangeE6ButtonN7Buttons9PressTypeE+0x70>
        return;

    if (!this->manual) {
    2390:	8c a1       	ldd	r24, Y+36	; 0x24
    2392:	81 11       	cpse	r24, r1
    2394:	0e c0       	rjmp	.+28     	; 0x23b2 <_ZN12StateMachine18SearchStateHandler14onButtonChangeE6ButtonN7Buttons9PressTypeE+0x3a>
        if (
    2396:	01 11       	cpse	r16, r1
    2398:	27 c0       	rjmp	.+78     	; 0x23e8 <_ZN12StateMachine18SearchStateHandler14onButtonChangeE6ButtonN7Buttons9PressTypeE+0x70>
            pressType != Buttons::PressType::SHORT ||
    239a:	12 30       	cpi	r17, 0x02	; 2
    239c:	29 f1       	breq	.+74     	; 0x23e8 <_ZN12StateMachine18SearchStateHandler14onButtonChangeE6ButtonN7Buttons9PressTypeE+0x70>
            button == Button::MODE
        ) {
            return;
        }

        scanning = true;
    239e:	81 e0       	ldi	r24, 0x01	; 1
    23a0:	8a 83       	std	Y+2, r24	; 0x02
        forceNext = true;
    23a2:	8c 83       	std	Y+4, r24	; 0x04
        direction = button == Button::UP ?
            ScanDirection::UP : ScanDirection::DOWN;
    23a4:	11 23       	and	r17, r17
    23a6:	11 f0       	breq	.+4      	; 0x23ac <_ZN12StateMachine18SearchStateHandler14onButtonChangeE6ButtonN7Buttons9PressTypeE+0x34>
    23a8:	8f ef       	ldi	r24, 0xFF	; 255
    23aa:	01 c0       	rjmp	.+2      	; 0x23ae <_ZN12StateMachine18SearchStateHandler14onButtonChangeE6ButtonN7Buttons9PressTypeE+0x36>
    23ac:	81 e0       	ldi	r24, 0x01	; 1
    23ae:	8b 83       	std	Y+3, r24	; 0x03
    23b0:	1b c0       	rjmp	.+54     	; 0x23e8 <_ZN12StateMachine18SearchStateHandler14onButtonChangeE6ButtonN7Buttons9PressTypeE+0x70>
    } else {
        if (
    23b2:	0d 7f       	andi	r16, 0xFD	; 253
    23b4:	c9 f4       	brne	.+50     	; 0x23e8 <_ZN12StateMachine18SearchStateHandler14onButtonChangeE6ButtonN7Buttons9PressTypeE+0x70>
    23b6:	8e a1       	ldd	r24, Y+38	; 0x26
            pressType != Buttons::PressType::HOLDING
        ) {
            return;
        }

        if (button == Button::UP) {
    23b8:	11 11       	cpse	r17, r1
    23ba:	02 c0       	rjmp	.+4      	; 0x23c0 <_ZN12StateMachine18SearchStateHandler14onButtonChangeE6ButtonN7Buttons9PressTypeE+0x48>
            orderedChanelIndex += 1;
    23bc:	8f 5f       	subi	r24, 0xFF	; 255
    23be:	03 c0       	rjmp	.+6      	; 0x23c6 <_ZN12StateMachine18SearchStateHandler14onButtonChangeE6ButtonN7Buttons9PressTypeE+0x4e>
        } else if (button == Button::DOWN) {
    23c0:	11 30       	cpi	r17, 0x01	; 1
    23c2:	11 f4       	brne	.+4      	; 0x23c8 <_ZN12StateMachine18SearchStateHandler14onButtonChangeE6ButtonN7Buttons9PressTypeE+0x50>
            orderedChanelIndex -= 1;
    23c4:	81 50       	subi	r24, 0x01	; 1
    23c6:	8e a3       	std	Y+38, r24	; 0x26
        }

        if (orderedChanelIndex == 255)
    23c8:	8e a1       	ldd	r24, Y+38	; 0x26
    23ca:	8f 3f       	cpi	r24, 0xFF	; 255
    23cc:	19 f4       	brne	.+6      	; 0x23d4 <_ZN12StateMachine18SearchStateHandler14onButtonChangeE6ButtonN7Buttons9PressTypeE+0x5c>
            orderedChanelIndex = CHANNELS_SIZE - 1;
    23ce:	87 e2       	ldi	r24, 0x27	; 39
    23d0:	8e a3       	std	Y+38, r24	; 0x26
    23d2:	03 c0       	rjmp	.+6      	; 0x23da <_ZN12StateMachine18SearchStateHandler14onButtonChangeE6ButtonN7Buttons9PressTypeE+0x62>
        else if (orderedChanelIndex >= CHANNELS_SIZE)
    23d4:	88 32       	cpi	r24, 0x28	; 40
    23d6:	08 f0       	brcs	.+2      	; 0x23da <_ZN12StateMachine18SearchStateHandler14onButtonChangeE6ButtonN7Buttons9PressTypeE+0x62>
            orderedChanelIndex = 0;
    23d8:	1e a2       	std	Y+38, r1	; 0x26

        this->setChannel();
    23da:	ce 01       	movw	r24, r28
    }
}
    23dc:	df 91       	pop	r29
    23de:	cf 91       	pop	r28
    23e0:	1f 91       	pop	r17
    23e2:	0f 91       	pop	r16
        if (orderedChanelIndex == 255)
            orderedChanelIndex = CHANNELS_SIZE - 1;
        else if (orderedChanelIndex >= CHANNELS_SIZE)
            orderedChanelIndex = 0;

        this->setChannel();
    23e4:	0c 94 a7 11 	jmp	0x234e	; 0x234e <_ZN12StateMachine18SearchStateHandler10setChannelEv>
    }
}
    23e8:	df 91       	pop	r29
    23ea:	cf 91       	pop	r28
    23ec:	1f 91       	pop	r17
    23ee:	0f 91       	pop	r16
    23f0:	08 95       	ret

000023f2 <_ZN12StateMachine18SearchStateHandler11drawBordersEv>:
        );
    #endif
}

void StateMachine::SearchStateHandler::drawMenu() {
    this->menu.draw();
    23f2:	cf 92       	push	r12
    23f4:	df 92       	push	r13
    23f6:	ef 92       	push	r14
    23f8:	ff 92       	push	r15
    23fa:	0f 93       	push	r16
    23fc:	1f 93       	push	r17
    23fe:	cc 24       	eor	r12, r12
    2400:	c3 94       	inc	r12
    2402:	d1 2c       	mov	r13, r1
    2404:	92 e0       	ldi	r25, 0x02	; 2
    2406:	e9 2e       	mov	r14, r25
    2408:	f1 2c       	mov	r15, r1
    240a:	07 e0       	ldi	r16, 0x07	; 7
    240c:	10 e0       	ldi	r17, 0x00	; 0
    240e:	27 e3       	ldi	r18, 0x37	; 55
    2410:	30 e0       	ldi	r19, 0x00	; 0
    2412:	47 e2       	ldi	r20, 0x27	; 39
    2414:	50 e0       	ldi	r21, 0x00	; 0
    2416:	60 e0       	ldi	r22, 0x00	; 0
    2418:	70 e0       	ldi	r23, 0x00	; 0
    241a:	8e e8       	ldi	r24, 0x8E	; 142
    241c:	92 e0       	ldi	r25, 0x02	; 2
    241e:	0e 94 f7 1d 	call	0x3bee	; 0x3bee <_ZN12Adafruit_GFX13drawRoundRectEiiiiij>
    2422:	23 e0       	ldi	r18, 0x03	; 3
    2424:	30 e0       	ldi	r19, 0x00	; 0
    2426:	40 e4       	ldi	r20, 0x40	; 64
    2428:	50 e0       	ldi	r21, 0x00	; 0
    242a:	60 e0       	ldi	r22, 0x00	; 0
    242c:	70 e0       	ldi	r23, 0x00	; 0
    242e:	8b e3       	ldi	r24, 0x3B	; 59
    2430:	90 e0       	ldi	r25, 0x00	; 0
    2432:	1f 91       	pop	r17
    2434:	0f 91       	pop	r16
    2436:	ff 90       	pop	r15
    2438:	ef 90       	pop	r14
    243a:	df 90       	pop	r13
    243c:	cf 90       	pop	r12
    243e:	0c 94 1f 15 	jmp	0x2a3e	; 0x2a3e <_ZN2Ui15drawDashedVLineEiiii>

00002442 <_ZN12StateMachine18SearchStateHandler15drawChannelTextEv>:
    2442:	65 e0       	ldi	r22, 0x05	; 5
    2444:	8e e8       	ldi	r24, 0x8E	; 142
    2446:	92 e0       	ldi	r25, 0x02	; 2
    2448:	0e 94 7a 24 	call	0x48f4	; 0x48f4 <_ZN12Adafruit_GFX11setTextSizeEh>
    244c:	ee e8       	ldi	r30, 0x8E	; 142
    244e:	f2 e0       	ldi	r31, 0x02	; 2
    2450:	81 e0       	ldi	r24, 0x01	; 1
    2452:	90 e0       	ldi	r25, 0x00	; 0
    2454:	93 8b       	std	Z+19, r25	; 0x13
    2456:	82 8b       	std	Z+18, r24	; 0x12
    2458:	91 8b       	std	Z+17, r25	; 0x11
    245a:	80 8b       	std	Z+16, r24	; 0x10
    245c:	15 86       	std	Z+13, r1	; 0x0d
    245e:	14 86       	std	Z+12, r1	; 0x0c
    2460:	17 86       	std	Z+15, r1	; 0x0f
    2462:	16 86       	std	Z+14, r1	; 0x0e
    2464:	80 91 62 02 	lds	r24, 0x0262	; 0x800262 <_ZN8Receiver13activeChannelE>
    2468:	0e 94 6e 0a 	call	0x14dc	; 0x14dc <_ZN8Channels7getNameEh>
    246c:	bc 01       	movw	r22, r24
    246e:	8e e8       	ldi	r24, 0x8E	; 142
    2470:	92 e0       	ldi	r25, 0x02	; 2
    2472:	0c 94 c9 17 	jmp	0x2f92	; 0x2f92 <_ZN5Print5printEPKc>

00002476 <_ZN12StateMachine18SearchStateHandler17drawFrequencyTextEv>:
    2476:	62 e0       	ldi	r22, 0x02	; 2
    2478:	8e e8       	ldi	r24, 0x8E	; 142
    247a:	92 e0       	ldi	r25, 0x02	; 2
    247c:	0e 94 7a 24 	call	0x48f4	; 0x48f4 <_ZN12Adafruit_GFX11setTextSizeEh>
    2480:	ee e8       	ldi	r30, 0x8E	; 142
    2482:	f2 e0       	ldi	r31, 0x02	; 2
    2484:	81 e0       	ldi	r24, 0x01	; 1
    2486:	90 e0       	ldi	r25, 0x00	; 0
    2488:	93 8b       	std	Z+19, r25	; 0x13
    248a:	82 8b       	std	Z+18, r24	; 0x12
    248c:	91 8b       	std	Z+17, r25	; 0x11
    248e:	80 8b       	std	Z+16, r24	; 0x10
    2490:	86 e0       	ldi	r24, 0x06	; 6
    2492:	90 e0       	ldi	r25, 0x00	; 0
    2494:	95 87       	std	Z+13, r25	; 0x0d
    2496:	84 87       	std	Z+12, r24	; 0x0c
    2498:	82 e3       	ldi	r24, 0x32	; 50
    249a:	90 e0       	ldi	r25, 0x00	; 0
    249c:	97 87       	std	Z+15, r25	; 0x0f
    249e:	86 87       	std	Z+14, r24	; 0x0e
    24a0:	80 91 62 02 	lds	r24, 0x0262	; 0x800262 <_ZN8Receiver13activeChannelE>
    24a4:	0e 94 65 0a 	call	0x14ca	; 0x14ca <_ZN8Channels12getFrequencyEh>
    24a8:	4a e0       	ldi	r20, 0x0A	; 10
    24aa:	50 e0       	ldi	r21, 0x00	; 0
    24ac:	bc 01       	movw	r22, r24
    24ae:	8e e8       	ldi	r24, 0x8E	; 142
    24b0:	92 e0       	ldi	r25, 0x02	; 2
    24b2:	0c 94 21 18 	jmp	0x3042	; 0x3042 <_ZN5Print5printEji>

000024b6 <_ZN12StateMachine18SearchStateHandler13drawRssiGraphEv>:
    24b6:	cf 92       	push	r12
    24b8:	ef 92       	push	r14
    24ba:	0f 93       	push	r16
    24bc:	8f e3       	ldi	r24, 0x3F	; 63
    24be:	c8 2e       	mov	r12, r24
    24c0:	95 e4       	ldi	r25, 0x45	; 69
    24c2:	e9 2e       	mov	r14, r25
    24c4:	00 e0       	ldi	r16, 0x00	; 0
    24c6:	2d e3       	ldi	r18, 0x3D	; 61
    24c8:	44 e6       	ldi	r20, 0x64	; 100
    24ca:	68 e1       	ldi	r22, 0x18	; 24
    24cc:	87 e4       	ldi	r24, 0x47	; 71
    24ce:	92 e0       	ldi	r25, 0x02	; 2
    24d0:	0e 94 6e 15 	call	0x2adc	; 0x2adc <_ZN2Ui9drawGraphEPKhhhhhhh>
    24d4:	0f 91       	pop	r16
    24d6:	ef 90       	pop	r14
    24d8:	cf 90       	pop	r12
    24da:	08 95       	ret

000024dc <_ZN12StateMachine18SearchStateHandler11drawScanBarEv>:
    display.setCursor(FREQUENCY_TEXT_X, FREQUENCY_TEXT_Y);

    display.print(Channels::getFrequency(Receiver::activeChannel));
}

void StateMachine::SearchStateHandler::drawScanBar() {
    24dc:	ef 92       	push	r14
    24de:	ff 92       	push	r15
    24e0:	0f 93       	push	r16
    24e2:	1f 93       	push	r17
    uint8_t scanWidth = orderedChanelIndex * SCANBAR_W / CHANNELS_SIZE;
    24e4:	fc 01       	movw	r30, r24
    24e6:	86 a1       	ldd	r24, Z+38	; 0x26
        SCANBAR_X,
        SCANBAR_Y,
        scanWidth,
        SCANBAR_H,
        WHITE
    );
    24e8:	f3 e3       	ldi	r31, 0x33	; 51
    24ea:	8f 9f       	mul	r24, r31
    24ec:	c0 01       	movw	r24, r0
    24ee:	11 24       	eor	r1, r1
    24f0:	68 e2       	ldi	r22, 0x28	; 40
    24f2:	70 e0       	ldi	r23, 0x00	; 0
    24f4:	0e 94 aa 2f 	call	0x5f54	; 0x5f54 <__divmodhi4>
    24f8:	9b 01       	movw	r18, r22
    24fa:	33 27       	eor	r19, r19
    24fc:	ee 24       	eor	r14, r14
    24fe:	e3 94       	inc	r14
    2500:	f1 2c       	mov	r15, r1
    2502:	03 e0       	ldi	r16, 0x03	; 3
    2504:	10 e0       	ldi	r17, 0x00	; 0
    2506:	49 e2       	ldi	r20, 0x29	; 41
    2508:	50 e0       	ldi	r21, 0x00	; 0
    250a:	62 e0       	ldi	r22, 0x02	; 2
    250c:	70 e0       	ldi	r23, 0x00	; 0
    250e:	8e e8       	ldi	r24, 0x8E	; 142
    2510:	92 e0       	ldi	r25, 0x02	; 2
    2512:	0e 94 93 1b 	call	0x3726	; 0x3726 <_ZN12Adafruit_GFX8fillRectEiiiij>
}
    2516:	1f 91       	pop	r17
    2518:	0f 91       	pop	r16
    251a:	ff 90       	pop	r15
    251c:	ef 90       	pop	r14
    251e:	08 95       	ret

00002520 <_ZN12StateMachine18SearchStateHandler13onInitialDrawEv>:


using Ui::display;


void StateMachine::SearchStateHandler::onInitialDraw() {
    2520:	cf 93       	push	r28
    2522:	df 93       	push	r29
    2524:	ec 01       	movw	r28, r24
    Ui::clear();
    2526:	0e 94 06 15 	call	0x2a0c	; 0x2a0c <_ZN2Ui5clearEv>

    drawBorders();
    252a:	ce 01       	movw	r24, r28
    252c:	0e 94 f9 11 	call	0x23f2	; 0x23f2 <_ZN12StateMachine18SearchStateHandler11drawBordersEv>

    drawChannelText();
    2530:	ce 01       	movw	r24, r28
    2532:	0e 94 21 12 	call	0x2442	; 0x2442 <_ZN12StateMachine18SearchStateHandler15drawChannelTextEv>
    drawFrequencyText();
    2536:	ce 01       	movw	r24, r28
    2538:	0e 94 3b 12 	call	0x2476	; 0x2476 <_ZN12StateMachine18SearchStateHandler17drawFrequencyTextEv>
    drawScanBar();
    253c:	ce 01       	movw	r24, r28
    253e:	0e 94 6e 12 	call	0x24dc	; 0x24dc <_ZN12StateMachine18SearchStateHandler11drawScanBarEv>
    drawRssiGraph();
    2542:	ce 01       	movw	r24, r28
    2544:	0e 94 5b 12 	call	0x24b6	; 0x24b6 <_ZN12StateMachine18SearchStateHandler13drawRssiGraphEv>

    Ui::needDisplay();
}
    2548:	df 91       	pop	r29
    254a:	cf 91       	pop	r28
    drawChannelText();
    drawFrequencyText();
    drawScanBar();
    drawRssiGraph();

    Ui::needDisplay();
    254c:	0c 94 0e 15 	jmp	0x2a1c	; 0x2a1c <_ZN2Ui11needDisplayEv>

00002550 <_ZN12StateMachine18SearchStateHandler12onUpdateDrawEv>:
}

void StateMachine::SearchStateHandler::onUpdateDraw() {
    2550:	cf 93       	push	r28
    2552:	df 93       	push	r29
    2554:	ec 01       	movw	r28, r24
    Ui::clearRect(
        0,
        0,
        BORDER_GRAPH_L_X,
        CHANNEL_TEXT_H
    );
    2556:	23 e2       	ldi	r18, 0x23	; 35
    2558:	30 e0       	ldi	r19, 0x00	; 0
    255a:	4b e3       	ldi	r20, 0x3B	; 59
    255c:	50 e0       	ldi	r21, 0x00	; 0
    255e:	60 e0       	ldi	r22, 0x00	; 0
    2560:	70 e0       	ldi	r23, 0x00	; 0
    2562:	80 e0       	ldi	r24, 0x00	; 0
    2564:	90 e0       	ldi	r25, 0x00	; 0
    2566:	0e 94 5b 15 	call	0x2ab6	; 0x2ab6 <_ZN2Ui9clearRectEiiii>
    Ui::clearRect(
        0,
        FREQUENCY_TEXT_Y,
        BORDER_GRAPH_L_X,
        CHAR_HEIGHT * 2
    );
    256a:	2e e0       	ldi	r18, 0x0E	; 14
    256c:	30 e0       	ldi	r19, 0x00	; 0
    256e:	4b e3       	ldi	r20, 0x3B	; 59
    2570:	50 e0       	ldi	r21, 0x00	; 0
    2572:	62 e3       	ldi	r22, 0x32	; 50
    2574:	70 e0       	ldi	r23, 0x00	; 0
    2576:	80 e0       	ldi	r24, 0x00	; 0
    2578:	90 e0       	ldi	r25, 0x00	; 0
    257a:	0e 94 5b 15 	call	0x2ab6	; 0x2ab6 <_ZN2Ui9clearRectEiiii>
    Ui::clearRect(
        SCANBAR_X,
        SCANBAR_Y,
        SCANBAR_W,
        SCANBAR_H
    );
    257e:	23 e0       	ldi	r18, 0x03	; 3
    2580:	30 e0       	ldi	r19, 0x00	; 0
    2582:	43 e3       	ldi	r20, 0x33	; 51
    2584:	50 e0       	ldi	r21, 0x00	; 0
    2586:	69 e2       	ldi	r22, 0x29	; 41
    2588:	70 e0       	ldi	r23, 0x00	; 0
    258a:	82 e0       	ldi	r24, 0x02	; 2
    258c:	90 e0       	ldi	r25, 0x00	; 0
    258e:	0e 94 5b 15 	call	0x2ab6	; 0x2ab6 <_ZN2Ui9clearRectEiiii>

    drawChannelText();
    2592:	ce 01       	movw	r24, r28
    2594:	0e 94 21 12 	call	0x2442	; 0x2442 <_ZN12StateMachine18SearchStateHandler15drawChannelTextEv>
    drawFrequencyText();
    2598:	ce 01       	movw	r24, r28
    259a:	0e 94 3b 12 	call	0x2476	; 0x2476 <_ZN12StateMachine18SearchStateHandler17drawFrequencyTextEv>
    drawScanBar();
    259e:	ce 01       	movw	r24, r28
    25a0:	0e 94 6e 12 	call	0x24dc	; 0x24dc <_ZN12StateMachine18SearchStateHandler11drawScanBarEv>
    drawRssiGraph();
    25a4:	ce 01       	movw	r24, r28
    25a6:	0e 94 5b 12 	call	0x24b6	; 0x24b6 <_ZN12StateMachine18SearchStateHandler13drawRssiGraphEv>
    menu.draw();
    25aa:	ce 01       	movw	r24, r28
    25ac:	0c 96       	adiw	r24, 0x0c	; 12
    25ae:	0e 94 c9 16 	call	0x2d92	; 0x2d92 <_ZN2Ui15StateMenuHelper4drawEv>

    Ui::needDisplay();
}
    25b2:	df 91       	pop	r29
    25b4:	cf 91       	pop	r28
    drawFrequencyText();
    drawScanBar();
    drawRssiGraph();
    menu.draw();

    Ui::needDisplay();
    25b6:	0c 94 0e 15 	jmp	0x2a1c	; 0x2a1c <_ZN2Ui11needDisplayEv>

000025ba <_ZN12StateMachine20SettingsStateHandler12onUpdateDrawEv>:
    Ui::display.print(PSTR2("Press mode for\nRSSI calibration"));

    Ui::needDisplay();
}

void StateMachine::SettingsStateHandler::onUpdateDraw() {
    25ba:	08 95       	ret

000025bc <_ZN12StateMachine20SettingsStateHandler14onButtonChangeE6ButtonN7Buttons9PressTypeE>:

void StateMachine::SettingsStateHandler::onButtonChange(
    Button button,
    Buttons::PressType pressType
) {
    if (button == Button::MODE) {
    25bc:	62 30       	cpi	r22, 0x02	; 2
    25be:	19 f4       	brne	.+6      	; 0x25c6 <_ZN12StateMachine20SettingsStateHandler14onButtonChangeE6ButtonN7Buttons9PressTypeE+0xa>
        StateMachine::switchState(StateMachine::State::SETTINGS_RSSI);
    25c0:	86 e0       	ldi	r24, 0x06	; 6
    25c2:	0c 94 67 0d 	jmp	0x1ace	; 0x1ace <_ZN12StateMachine11switchStateENS_5StateE>
    25c6:	08 95       	ret

000025c8 <_ZN12StateMachine20SettingsStateHandler13onInitialDrawEv>:
    }
}


void StateMachine::SettingsStateHandler::onInitialDraw() {
    Ui::clear();
    25c8:	0e 94 06 15 	call	0x2a0c	; 0x2a0c <_ZN2Ui5clearEv>

    Ui::display.setTextSize(1);
    25cc:	61 e0       	ldi	r22, 0x01	; 1
    25ce:	8e e8       	ldi	r24, 0x8E	; 142
    25d0:	92 e0       	ldi	r25, 0x02	; 2
    25d2:	0e 94 7a 24 	call	0x48f4	; 0x48f4 <_ZN12Adafruit_GFX11setTextSizeEh>
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) {
    cursor_x = x;
    25d6:	ee e8       	ldi	r30, 0x8E	; 142
    25d8:	f2 e0       	ldi	r31, 0x02	; 2
    25da:	15 86       	std	Z+13, r1	; 0x0d
    25dc:	14 86       	std	Z+12, r1	; 0x0c
    cursor_y = y;
    25de:	17 86       	std	Z+15, r1	; 0x0f
    25e0:	16 86       	std	Z+14, r1	; 0x0e
    Ui::display.setCursor(0, 0);
    Ui::display.print(PSTR2("Press mode for\nRSSI calibration"));
    25e2:	86 ea       	ldi	r24, 0xA6	; 166
    25e4:	97 e0       	ldi	r25, 0x07	; 7
    25e6:	0e 94 91 0a 	call	0x1522	; 0x1522 <_Z14PSTRtoBuffer_PPKc>
    25ea:	bc 01       	movw	r22, r24
    25ec:	8e e8       	ldi	r24, 0x8E	; 142
    25ee:	92 e0       	ldi	r25, 0x02	; 2
    25f0:	0e 94 c9 17 	call	0x2f92	; 0x2f92 <_ZN5Print5printEPKc>

    Ui::needDisplay();
    25f4:	0c 94 0e 15 	jmp	0x2a1c	; 0x2a1c <_ZN2Ui11needDisplayEv>

000025f8 <_ZN12StateMachine24SettingsRssiStateHandler7onEnterEv>:
#include "ui.h"
#include "pstr_helper.h"


void StateMachine::SettingsRssiStateHandler::onEnter() {
    internalState = InternalState::WAIT_FOR_LOW;
    25f8:	fc 01       	movw	r30, r24
    25fa:	12 82       	std	Z+2, r1	; 0x02
    25fc:	08 95       	ret

000025fe <_ZN12StateMachine24SettingsRssiStateHandler13onInitialDrawEv>:
    Ui::needUpdate();
}


void StateMachine::SettingsRssiStateHandler::onInitialDraw() {
    Ui::needUpdate(); // Lazy. :(
    25fe:	0c 94 0a 15 	jmp	0x2a14	; 0x2a14 <_ZN2Ui10needUpdateEv>

00002602 <_ZN12StateMachine24SettingsRssiStateHandler12onUpdateDrawEv>:
}

void StateMachine::SettingsRssiStateHandler::onUpdateDraw() {
    2602:	0f 93       	push	r16
    2604:	1f 93       	push	r17
    2606:	cf 93       	push	r28
    2608:	df 93       	push	r29
    260a:	ec 01       	movw	r28, r24
    Ui::clear();
    260c:	0e 94 06 15 	call	0x2a0c	; 0x2a0c <_ZN2Ui5clearEv>

    switch (internalState) {
    2610:	8a 81       	ldd	r24, Y+2	; 0x02
    2612:	82 30       	cpi	r24, 0x02	; 2
    2614:	09 f4       	brne	.+2      	; 0x2618 <_ZN12StateMachine24SettingsRssiStateHandler12onUpdateDrawEv+0x16>
    2616:	c2 c0       	rjmp	.+388    	; 0x279c <_ZN12StateMachine24SettingsRssiStateHandler12onUpdateDrawEv+0x19a>
    2618:	b0 f4       	brcc	.+44     	; 0x2646 <_ZN12StateMachine24SettingsRssiStateHandler12onUpdateDrawEv+0x44>
    261a:	88 23       	and	r24, r24
    261c:	09 f4       	brne	.+2      	; 0x2620 <_ZN12StateMachine24SettingsRssiStateHandler12onUpdateDrawEv+0x1e>
    261e:	88 c0       	rjmp	.+272    	; 0x2730 <_ZN12StateMachine24SettingsRssiStateHandler12onUpdateDrawEv+0x12e>
    2620:	81 30       	cpi	r24, 0x01	; 1
    2622:	09 f0       	breq	.+2      	; 0x2626 <_ZN12StateMachine24SettingsRssiStateHandler12onUpdateDrawEv+0x24>
    2624:	f4 c0       	rjmp	.+488    	; 0x280e <_ZN12StateMachine24SettingsRssiStateHandler12onUpdateDrawEv+0x20c>
            Ui::display.setCursor(0, SCREEN_HEIGHT - CHAR_HEIGHT - 1);
            Ui::display.print(PSTR2("Press MODE when ready."));
        break;

        case InternalState::SCANNING_LOW:
            Ui::display.setTextSize(1);
    2626:	61 e0       	ldi	r22, 0x01	; 1
    2628:	8e e8       	ldi	r24, 0x8E	; 142
    262a:	92 e0       	ldi	r25, 0x02	; 2
    262c:	0e 94 7a 24 	call	0x48f4	; 0x48f4 <_ZN12Adafruit_GFX11setTextSizeEh>
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) {
    cursor_x = x;
    2630:	10 92 9b 02 	sts	0x029B, r1	; 0x80029b <_ZN2Ui7displayE+0xd>
    2634:	10 92 9a 02 	sts	0x029A, r1	; 0x80029a <_ZN2Ui7displayE+0xc>
    cursor_y = y;
    2638:	10 92 9d 02 	sts	0x029D, r1	; 0x80029d <_ZN2Ui7displayE+0xf>
    263c:	10 92 9c 02 	sts	0x029C, r1	; 0x80029c <_ZN2Ui7displayE+0xe>
            Ui::display.setCursor(0, 0);
            Ui::display.print(PSTR2("2/4\nScanning for lowest\nRSSI..."));
    2640:	8e e3       	ldi	r24, 0x3E	; 62
    2642:	98 e0       	ldi	r25, 0x08	; 8
    2644:	dd c0       	rjmp	.+442    	; 0x2800 <_ZN12StateMachine24SettingsRssiStateHandler12onUpdateDrawEv+0x1fe>
}

void StateMachine::SettingsRssiStateHandler::onUpdateDraw() {
    Ui::clear();

    switch (internalState) {
    2646:	83 30       	cpi	r24, 0x03	; 3
    2648:	09 f4       	brne	.+2      	; 0x264c <_ZN12StateMachine24SettingsRssiStateHandler12onUpdateDrawEv+0x4a>
    264a:	cb c0       	rjmp	.+406    	; 0x27e2 <_ZN12StateMachine24SettingsRssiStateHandler12onUpdateDrawEv+0x1e0>
    264c:	84 30       	cpi	r24, 0x04	; 4
    264e:	09 f0       	breq	.+2      	; 0x2652 <_ZN12StateMachine24SettingsRssiStateHandler12onUpdateDrawEv+0x50>
    2650:	de c0       	rjmp	.+444    	; 0x280e <_ZN12StateMachine24SettingsRssiStateHandler12onUpdateDrawEv+0x20c>
            Ui::display.setCursor(0, 0);
            Ui::display.print(PSTR2("4/4\nScanning for highest\nRSSI..."));
        break;

        case InternalState::DONE:
            Ui::display.setTextSize(1);
    2652:	61 e0       	ldi	r22, 0x01	; 1
    2654:	8e e8       	ldi	r24, 0x8E	; 142
    2656:	92 e0       	ldi	r25, 0x02	; 2
    2658:	0e 94 7a 24 	call	0x48f4	; 0x48f4 <_ZN12Adafruit_GFX11setTextSizeEh>
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) {
    cursor_x = x;
    265c:	10 92 9b 02 	sts	0x029B, r1	; 0x80029b <_ZN2Ui7displayE+0xd>
    2660:	10 92 9a 02 	sts	0x029A, r1	; 0x80029a <_ZN2Ui7displayE+0xc>
    cursor_y = y;
    2664:	10 92 9d 02 	sts	0x029D, r1	; 0x80029d <_ZN2Ui7displayE+0xf>
    2668:	10 92 9c 02 	sts	0x029C, r1	; 0x80029c <_ZN2Ui7displayE+0xe>
            Ui::display.setCursor(0, 0);
            Ui::display.print(PSTR2("All done!"));
    266c:	86 ee       	ldi	r24, 0xE6	; 230
    266e:	97 e0       	ldi	r25, 0x07	; 7
    2670:	0e 94 91 0a 	call	0x1522	; 0x1522 <_Z14PSTRtoBuffer_PPKc>
    2674:	bc 01       	movw	r22, r24
    2676:	8e e8       	ldi	r24, 0x8E	; 142
    2678:	92 e0       	ldi	r25, 0x02	; 2
    267a:	0e 94 c9 17 	call	0x2f92	; 0x2f92 <_ZN5Print5printEPKc>
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) {
    cursor_x = x;
    267e:	10 92 9b 02 	sts	0x029B, r1	; 0x80029b <_ZN2Ui7displayE+0xd>
    2682:	10 92 9a 02 	sts	0x029A, r1	; 0x80029a <_ZN2Ui7displayE+0xc>
    cursor_y = y;
    2686:	ce e0       	ldi	r28, 0x0E	; 14
    2688:	d0 e0       	ldi	r29, 0x00	; 0
    268a:	d0 93 9d 02 	sts	0x029D, r29	; 0x80029d <_ZN2Ui7displayE+0xf>
    268e:	c0 93 9c 02 	sts	0x029C, r28	; 0x80029c <_ZN2Ui7displayE+0xe>

            Ui::display.setCursor(0, CHAR_HEIGHT * 2);
            Ui::display.print(PSTR2("Min: "));
    2692:	80 ee       	ldi	r24, 0xE0	; 224
    2694:	97 e0       	ldi	r25, 0x07	; 7
    2696:	0e 94 91 0a 	call	0x1522	; 0x1522 <_Z14PSTRtoBuffer_PPKc>
    269a:	bc 01       	movw	r22, r24
    269c:	8e e8       	ldi	r24, 0x8E	; 142
    269e:	92 e0       	ldi	r25, 0x02	; 2
    26a0:	0e 94 c9 17 	call	0x2f92	; 0x2f92 <_ZN5Print5printEPKc>
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) {
    cursor_x = x;
    26a4:	0e e1       	ldi	r16, 0x1E	; 30
    26a6:	10 e0       	ldi	r17, 0x00	; 0
    26a8:	10 93 9b 02 	sts	0x029B, r17	; 0x80029b <_ZN2Ui7displayE+0xd>
    26ac:	00 93 9a 02 	sts	0x029A, r16	; 0x80029a <_ZN2Ui7displayE+0xc>
    cursor_y = y;
    26b0:	d0 93 9d 02 	sts	0x029D, r29	; 0x80029d <_ZN2Ui7displayE+0xf>
    26b4:	c0 93 9c 02 	sts	0x029C, r28	; 0x80029c <_ZN2Ui7displayE+0xe>

            Ui::display.setCursor((CHAR_WIDTH + 1) * 5, CHAR_HEIGHT * 2);
            Ui::display.print(EepromSettings.rssiAMin);
    26b8:	60 91 6c 02 	lds	r22, 0x026C	; 0x80026c <EepromSettings+0x8>
    26bc:	70 91 6d 02 	lds	r23, 0x026D	; 0x80026d <EepromSettings+0x9>
    26c0:	4a e0       	ldi	r20, 0x0A	; 10
    26c2:	50 e0       	ldi	r21, 0x00	; 0
    26c4:	8e e8       	ldi	r24, 0x8E	; 142
    26c6:	92 e0       	ldi	r25, 0x02	; 2
    26c8:	0e 94 21 18 	call	0x3042	; 0x3042 <_ZN5Print5printEji>
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) {
    cursor_x = x;
    26cc:	10 92 9b 02 	sts	0x029B, r1	; 0x80029b <_ZN2Ui7displayE+0xd>
    26d0:	10 92 9a 02 	sts	0x029A, r1	; 0x80029a <_ZN2Ui7displayE+0xc>
    cursor_y = y;
    26d4:	c6 e1       	ldi	r28, 0x16	; 22
    26d6:	d0 e0       	ldi	r29, 0x00	; 0
    26d8:	d0 93 9d 02 	sts	0x029D, r29	; 0x80029d <_ZN2Ui7displayE+0xf>
    26dc:	c0 93 9c 02 	sts	0x029C, r28	; 0x80029c <_ZN2Ui7displayE+0xe>
                Ui::display.setCursor((CHAR_WIDTH + 1) * 12, CHAR_HEIGHT * 2);
                Ui::display.print(EepromSettings.rssiAMin);
            #endif

            Ui::display.setCursor(0, CHAR_HEIGHT * 3 + 1);
            Ui::display.print(PSTR2("Max: "));
    26e0:	8a ed       	ldi	r24, 0xDA	; 218
    26e2:	97 e0       	ldi	r25, 0x07	; 7
    26e4:	0e 94 91 0a 	call	0x1522	; 0x1522 <_Z14PSTRtoBuffer_PPKc>
    26e8:	bc 01       	movw	r22, r24
    26ea:	8e e8       	ldi	r24, 0x8E	; 142
    26ec:	92 e0       	ldi	r25, 0x02	; 2
    26ee:	0e 94 c9 17 	call	0x2f92	; 0x2f92 <_ZN5Print5printEPKc>
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) {
    cursor_x = x;
    26f2:	10 93 9b 02 	sts	0x029B, r17	; 0x80029b <_ZN2Ui7displayE+0xd>
    26f6:	00 93 9a 02 	sts	0x029A, r16	; 0x80029a <_ZN2Ui7displayE+0xc>
    cursor_y = y;
    26fa:	d0 93 9d 02 	sts	0x029D, r29	; 0x80029d <_ZN2Ui7displayE+0xf>
    26fe:	c0 93 9c 02 	sts	0x029C, r28	; 0x80029c <_ZN2Ui7displayE+0xe>

            Ui::display.setCursor((CHAR_WIDTH + 1) * 5, CHAR_HEIGHT * 3 + 1);
            Ui::display.print(EepromSettings.rssiAMax);
    2702:	60 91 6e 02 	lds	r22, 0x026E	; 0x80026e <EepromSettings+0xa>
    2706:	70 91 6f 02 	lds	r23, 0x026F	; 0x80026f <EepromSettings+0xb>
    270a:	4a e0       	ldi	r20, 0x0A	; 10
    270c:	50 e0       	ldi	r21, 0x00	; 0
    270e:	8e e8       	ldi	r24, 0x8E	; 142
    2710:	92 e0       	ldi	r25, 0x02	; 2
    2712:	0e 94 21 18 	call	0x3042	; 0x3042 <_ZN5Print5printEji>
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) {
    cursor_x = x;
    2716:	10 92 9b 02 	sts	0x029B, r1	; 0x80029b <_ZN2Ui7displayE+0xd>
    271a:	10 92 9a 02 	sts	0x029A, r1	; 0x80029a <_ZN2Ui7displayE+0xc>
    cursor_y = y;
    271e:	88 e3       	ldi	r24, 0x38	; 56
    2720:	90 e0       	ldi	r25, 0x00	; 0
    2722:	90 93 9d 02 	sts	0x029D, r25	; 0x80029d <_ZN2Ui7displayE+0xf>
    2726:	80 93 9c 02 	sts	0x029C, r24	; 0x80029c <_ZN2Ui7displayE+0xe>
                    CHAR_HEIGHT * 3 + 1);
                Ui::display.print(EepromSettings.rssiBMax);
            #endif

            Ui::display.setCursor(0, SCREEN_HEIGHT - CHAR_HEIGHT - 1);
            Ui::display.print(PSTR2("Press MODE to save."));
    272a:	86 ec       	ldi	r24, 0xC6	; 198
    272c:	97 e0       	ldi	r25, 0x07	; 7
    272e:	68 c0       	rjmp	.+208    	; 0x2800 <_ZN12StateMachine24SettingsRssiStateHandler12onUpdateDrawEv+0x1fe>
void StateMachine::SettingsRssiStateHandler::onUpdateDraw() {
    Ui::clear();

    switch (internalState) {
        case InternalState::WAIT_FOR_LOW:
            Ui::display.setTextSize(1);
    2730:	61 e0       	ldi	r22, 0x01	; 1
    2732:	8e e8       	ldi	r24, 0x8E	; 142
    2734:	92 e0       	ldi	r25, 0x02	; 2
    2736:	0e 94 7a 24 	call	0x48f4	; 0x48f4 <_ZN12Adafruit_GFX11setTextSizeEh>
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) {
    cursor_x = x;
    273a:	10 92 9b 02 	sts	0x029B, r1	; 0x80029b <_ZN2Ui7displayE+0xd>
    273e:	10 92 9a 02 	sts	0x029A, r1	; 0x80029a <_ZN2Ui7displayE+0xc>
    cursor_y = y;
    2742:	10 92 9d 02 	sts	0x029D, r1	; 0x80029d <_ZN2Ui7displayE+0xf>
    2746:	10 92 9c 02 	sts	0x029C, r1	; 0x80029c <_ZN2Ui7displayE+0xe>
            Ui::display.setCursor(0, 0);
            Ui::display.print(PSTR2("1/4\nTurn off all VTXs."));
    274a:	89 e8       	ldi	r24, 0x89	; 137
    274c:	98 e0       	ldi	r25, 0x08	; 8
    274e:	0e 94 91 0a 	call	0x1522	; 0x1522 <_Z14PSTRtoBuffer_PPKc>
    2752:	bc 01       	movw	r22, r24
    2754:	8e e8       	ldi	r24, 0x8E	; 142
    2756:	92 e0       	ldi	r25, 0x02	; 2
    2758:	0e 94 c9 17 	call	0x2f92	; 0x2f92 <_ZN5Print5printEPKc>
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) {
    cursor_x = x;
    275c:	10 92 9b 02 	sts	0x029B, r1	; 0x80029b <_ZN2Ui7displayE+0xd>
    2760:	10 92 9a 02 	sts	0x029A, r1	; 0x80029a <_ZN2Ui7displayE+0xc>
    cursor_y = y;
    2764:	80 e1       	ldi	r24, 0x10	; 16
    2766:	90 e0       	ldi	r25, 0x00	; 0
    2768:	90 93 9d 02 	sts	0x029D, r25	; 0x80029d <_ZN2Ui7displayE+0xf>
    276c:	80 93 9c 02 	sts	0x029C, r24	; 0x80029c <_ZN2Ui7displayE+0xe>
            Ui::display.setCursor(0, (CHAR_HEIGHT + 1) * 2);
            Ui::display.print(PSTR2("Remove RX antennas."));
    2770:	85 e7       	ldi	r24, 0x75	; 117
    2772:	98 e0       	ldi	r25, 0x08	; 8
    2774:	0e 94 91 0a 	call	0x1522	; 0x1522 <_Z14PSTRtoBuffer_PPKc>
    2778:	bc 01       	movw	r22, r24
    277a:	8e e8       	ldi	r24, 0x8E	; 142
    277c:	92 e0       	ldi	r25, 0x02	; 2
    277e:	0e 94 c9 17 	call	0x2f92	; 0x2f92 <_ZN5Print5printEPKc>
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) {
    cursor_x = x;
    2782:	10 92 9b 02 	sts	0x029B, r1	; 0x80029b <_ZN2Ui7displayE+0xd>
    2786:	10 92 9a 02 	sts	0x029A, r1	; 0x80029a <_ZN2Ui7displayE+0xc>
    cursor_y = y;
    278a:	88 e3       	ldi	r24, 0x38	; 56
    278c:	90 e0       	ldi	r25, 0x00	; 0
    278e:	90 93 9d 02 	sts	0x029D, r25	; 0x80029d <_ZN2Ui7displayE+0xf>
    2792:	80 93 9c 02 	sts	0x029C, r24	; 0x80029c <_ZN2Ui7displayE+0xe>

            Ui::display.setCursor(0, SCREEN_HEIGHT - CHAR_HEIGHT - 1);
            Ui::display.print(PSTR2("Press MODE when ready."));
    2796:	8e e5       	ldi	r24, 0x5E	; 94
    2798:	98 e0       	ldi	r25, 0x08	; 8
    279a:	32 c0       	rjmp	.+100    	; 0x2800 <_ZN12StateMachine24SettingsRssiStateHandler12onUpdateDrawEv+0x1fe>
            Ui::display.setCursor(0, 0);
            Ui::display.print(PSTR2("2/4\nScanning for lowest\nRSSI..."));
        break;

        case InternalState::WAIT_FOR_HIGH:
            Ui::display.setTextSize(1);
    279c:	61 e0       	ldi	r22, 0x01	; 1
    279e:	8e e8       	ldi	r24, 0x8E	; 142
    27a0:	92 e0       	ldi	r25, 0x02	; 2
    27a2:	0e 94 7a 24 	call	0x48f4	; 0x48f4 <_ZN12Adafruit_GFX11setTextSizeEh>
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) {
    cursor_x = x;
    27a6:	10 92 9b 02 	sts	0x029B, r1	; 0x80029b <_ZN2Ui7displayE+0xd>
    27aa:	10 92 9a 02 	sts	0x029A, r1	; 0x80029a <_ZN2Ui7displayE+0xc>
    cursor_y = y;
    27ae:	10 92 9d 02 	sts	0x029D, r1	; 0x80029d <_ZN2Ui7displayE+0xf>
    27b2:	10 92 9c 02 	sts	0x029C, r1	; 0x80029c <_ZN2Ui7displayE+0xe>
            Ui::display.setCursor(0, 0);
            Ui::display.print(PSTR2("3/4\nTurn on your VTX."));
    27b6:	88 e2       	ldi	r24, 0x28	; 40
    27b8:	98 e0       	ldi	r25, 0x08	; 8
    27ba:	0e 94 91 0a 	call	0x1522	; 0x1522 <_Z14PSTRtoBuffer_PPKc>
    27be:	bc 01       	movw	r22, r24
    27c0:	8e e8       	ldi	r24, 0x8E	; 142
    27c2:	92 e0       	ldi	r25, 0x02	; 2
    27c4:	0e 94 c9 17 	call	0x2f92	; 0x2f92 <_ZN5Print5printEPKc>
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) {
    cursor_x = x;
    27c8:	10 92 9b 02 	sts	0x029B, r1	; 0x80029b <_ZN2Ui7displayE+0xd>
    27cc:	10 92 9a 02 	sts	0x029A, r1	; 0x80029a <_ZN2Ui7displayE+0xc>
    cursor_y = y;
    27d0:	88 e3       	ldi	r24, 0x38	; 56
    27d2:	90 e0       	ldi	r25, 0x00	; 0
    27d4:	90 93 9d 02 	sts	0x029D, r25	; 0x80029d <_ZN2Ui7displayE+0xf>
    27d8:	80 93 9c 02 	sts	0x029C, r24	; 0x80029c <_ZN2Ui7displayE+0xe>

            Ui::display.setCursor(0, SCREEN_HEIGHT - CHAR_HEIGHT - 1);
            Ui::display.print(PSTR2("Press MODE when ready."));
    27dc:	81 e1       	ldi	r24, 0x11	; 17
    27de:	98 e0       	ldi	r25, 0x08	; 8
    27e0:	0f c0       	rjmp	.+30     	; 0x2800 <_ZN12StateMachine24SettingsRssiStateHandler12onUpdateDrawEv+0x1fe>
        break;

        case InternalState::SCANNING_HIGH:
            Ui::display.setTextSize(1);
    27e2:	61 e0       	ldi	r22, 0x01	; 1
    27e4:	8e e8       	ldi	r24, 0x8E	; 142
    27e6:	92 e0       	ldi	r25, 0x02	; 2
    27e8:	0e 94 7a 24 	call	0x48f4	; 0x48f4 <_ZN12Adafruit_GFX11setTextSizeEh>
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) {
    cursor_x = x;
    27ec:	10 92 9b 02 	sts	0x029B, r1	; 0x80029b <_ZN2Ui7displayE+0xd>
    27f0:	10 92 9a 02 	sts	0x029A, r1	; 0x80029a <_ZN2Ui7displayE+0xc>
    cursor_y = y;
    27f4:	10 92 9d 02 	sts	0x029D, r1	; 0x80029d <_ZN2Ui7displayE+0xf>
    27f8:	10 92 9c 02 	sts	0x029C, r1	; 0x80029c <_ZN2Ui7displayE+0xe>
            Ui::display.setCursor(0, 0);
            Ui::display.print(PSTR2("4/4\nScanning for highest\nRSSI..."));
    27fc:	80 ef       	ldi	r24, 0xF0	; 240
    27fe:	97 e0       	ldi	r25, 0x07	; 7
                    CHAR_HEIGHT * 3 + 1);
                Ui::display.print(EepromSettings.rssiBMax);
            #endif

            Ui::display.setCursor(0, SCREEN_HEIGHT - CHAR_HEIGHT - 1);
            Ui::display.print(PSTR2("Press MODE to save."));
    2800:	0e 94 91 0a 	call	0x1522	; 0x1522 <_Z14PSTRtoBuffer_PPKc>
    2804:	bc 01       	movw	r22, r24
    2806:	8e e8       	ldi	r24, 0x8E	; 142
    2808:	92 e0       	ldi	r25, 0x02	; 2
    280a:	0e 94 c9 17 	call	0x2f92	; 0x2f92 <_ZN5Print5printEPKc>
        break;
    }

    Ui::needDisplay();
}
    280e:	df 91       	pop	r29
    2810:	cf 91       	pop	r28
    2812:	1f 91       	pop	r17
    2814:	0f 91       	pop	r16
            Ui::display.setCursor(0, SCREEN_HEIGHT - CHAR_HEIGHT - 1);
            Ui::display.print(PSTR2("Press MODE to save."));
        break;
    }

    Ui::needDisplay();
    2816:	0c 94 0e 15 	jmp	0x2a1c	; 0x2a1c <_ZN2Ui11needDisplayEv>

0000281a <_ZN12StateMachine24SettingsRssiStateHandler14onButtonChangeE6ButtonN7Buttons9PressTypeE>:

void StateMachine::SettingsRssiStateHandler::onButtonChange(
    Button button,
    Buttons::PressType pressType
) {
    if (button != Button::MODE || pressType != Buttons::PressType::SHORT)
    281a:	62 30       	cpi	r22, 0x02	; 2
    281c:	59 f5       	brne	.+86     	; 0x2874 <_ZN12StateMachine24SettingsRssiStateHandler14onButtonChangeE6ButtonN7Buttons9PressTypeE+0x5a>
    281e:	41 11       	cpse	r20, r1
    2820:	29 c0       	rjmp	.+82     	; 0x2874 <_ZN12StateMachine24SettingsRssiStateHandler14onButtonChangeE6ButtonN7Buttons9PressTypeE+0x5a>
    2822:	fc 01       	movw	r30, r24
        return;

    switch (internalState) {
    2824:	82 81       	ldd	r24, Z+2	; 0x02
    2826:	82 30       	cpi	r24, 0x02	; 2
    2828:	89 f0       	breq	.+34     	; 0x284c <_ZN12StateMachine24SettingsRssiStateHandler14onButtonChangeE6ButtonN7Buttons9PressTypeE+0x32>
    282a:	84 30       	cpi	r24, 0x04	; 4
    282c:	d1 f0       	breq	.+52     	; 0x2862 <_ZN12StateMachine24SettingsRssiStateHandler14onButtonChangeE6ButtonN7Buttons9PressTypeE+0x48>
    282e:	81 11       	cpse	r24, r1
    2830:	1f c0       	rjmp	.+62     	; 0x2870 <_ZN12StateMachine24SettingsRssiStateHandler14onButtonChangeE6ButtonN7Buttons9PressTypeE+0x56>
        case InternalState::WAIT_FOR_LOW:
            internalState = InternalState::SCANNING_LOW;
    2832:	81 e0       	ldi	r24, 0x01	; 1
    2834:	82 83       	std	Z+2, r24	; 0x02
            currentSweep = 0;
    2836:	13 82       	std	Z+3, r1	; 0x03
            Receiver::setChannel(0);
    2838:	80 e0       	ldi	r24, 0x00	; 0
    283a:	0e 94 aa 0a 	call	0x1554	; 0x1554 <_ZN8Receiver10setChannelEh>

            EepromSettings.rssiAMin = UINT16_MAX;
    283e:	8f ef       	ldi	r24, 0xFF	; 255
    2840:	9f ef       	ldi	r25, 0xFF	; 255
    2842:	90 93 6d 02 	sts	0x026D, r25	; 0x80026d <EepromSettings+0x9>
    2846:	80 93 6c 02 	sts	0x026C, r24	; 0x80026c <EepromSettings+0x8>
    284a:	12 c0       	rjmp	.+36     	; 0x2870 <_ZN12StateMachine24SettingsRssiStateHandler14onButtonChangeE6ButtonN7Buttons9PressTypeE+0x56>
                EepromSettings.rssiBMin = UINT16_MAX;
            #endif
        break;

        case InternalState::WAIT_FOR_HIGH:
            internalState = InternalState::SCANNING_HIGH;
    284c:	83 e0       	ldi	r24, 0x03	; 3
    284e:	82 83       	std	Z+2, r24	; 0x02
            currentSweep = 0;
    2850:	13 82       	std	Z+3, r1	; 0x03
            Receiver::setChannel(0);
    2852:	80 e0       	ldi	r24, 0x00	; 0
    2854:	0e 94 aa 0a 	call	0x1554	; 0x1554 <_ZN8Receiver10setChannelEh>

            EepromSettings.rssiAMax = 0;
    2858:	10 92 6f 02 	sts	0x026F, r1	; 0x80026f <EepromSettings+0xb>
    285c:	10 92 6e 02 	sts	0x026E, r1	; 0x80026e <EepromSettings+0xa>
    2860:	07 c0       	rjmp	.+14     	; 0x2870 <_ZN12StateMachine24SettingsRssiStateHandler14onButtonChangeE6ButtonN7Buttons9PressTypeE+0x56>
                EepromSettings.rssiBMax = 0;
            #endif
        break;

        case InternalState::DONE:
            EepromSettings.save();
    2862:	84 e6       	ldi	r24, 0x64	; 100
    2864:	92 e0       	ldi	r25, 0x02	; 2
    2866:	0e 94 e2 0b 	call	0x17c4	; 0x17c4 <_ZN14EepromSettings4saveEv>
            StateMachine::switchState(StateMachine::State::MENU);
    286a:	84 e0       	ldi	r24, 0x04	; 4
    286c:	0e 94 67 0d 	call	0x1ace	; 0x1ace <_ZN12StateMachine11switchStateENS_5StateE>
        break;
    }

    Ui::needUpdate();
    2870:	0c 94 0a 15 	jmp	0x2a14	; 0x2a14 <_ZN2Ui10needUpdateEv>
    2874:	08 95       	ret

00002876 <_ZN12StateMachine24SettingsRssiStateHandler8onUpdateEv>:

void StateMachine::SettingsRssiStateHandler::onEnter() {
    internalState = InternalState::WAIT_FOR_LOW;
}

void StateMachine::SettingsRssiStateHandler::onUpdate() {
    2876:	cf 93       	push	r28
    2878:	df 93       	push	r29
    287a:	ec 01       	movw	r28, r24
    if (!Receiver::isRssiStable())
    287c:	0e 94 c2 0a 	call	0x1584	; 0x1584 <_ZN8Receiver12isRssiStableEv>
    2880:	88 23       	and	r24, r24
    2882:	09 f4       	brne	.+2      	; 0x2886 <_ZN12StateMachine24SettingsRssiStateHandler8onUpdateEv+0x10>
    2884:	45 c0       	rjmp	.+138    	; 0x2910 <_ZN12StateMachine24SettingsRssiStateHandler8onUpdateEv+0x9a>
        return;

    switch (internalState) {
    2886:	8a 81       	ldd	r24, Y+2	; 0x02
    2888:	81 30       	cpi	r24, 0x01	; 1
    288a:	19 f0       	breq	.+6      	; 0x2892 <_ZN12StateMachine24SettingsRssiStateHandler8onUpdateEv+0x1c>
    288c:	83 30       	cpi	r24, 0x03	; 3
    288e:	89 f0       	breq	.+34     	; 0x28b2 <_ZN12StateMachine24SettingsRssiStateHandler8onUpdateEv+0x3c>
    2890:	1f c0       	rjmp	.+62     	; 0x28d0 <_ZN12StateMachine24SettingsRssiStateHandler8onUpdateEv+0x5a>
        case InternalState::SCANNING_LOW:
            if (Receiver::rssiARaw < EepromSettings.rssiAMin)
    2892:	80 91 5f 02 	lds	r24, 0x025F	; 0x80025f <_ZN8Receiver8rssiARawE>
    2896:	90 91 60 02 	lds	r25, 0x0260	; 0x800260 <_ZN8Receiver8rssiARawE+0x1>
    289a:	20 91 6c 02 	lds	r18, 0x026C	; 0x80026c <EepromSettings+0x8>
    289e:	30 91 6d 02 	lds	r19, 0x026D	; 0x80026d <EepromSettings+0x9>
    28a2:	82 17       	cp	r24, r18
    28a4:	93 07       	cpc	r25, r19
    28a6:	a0 f4       	brcc	.+40     	; 0x28d0 <_ZN12StateMachine24SettingsRssiStateHandler8onUpdateEv+0x5a>
                EepromSettings.rssiAMin = Receiver::rssiARaw;
    28a8:	90 93 6d 02 	sts	0x026D, r25	; 0x80026d <EepromSettings+0x9>
    28ac:	80 93 6c 02 	sts	0x026C, r24	; 0x80026c <EepromSettings+0x8>
    28b0:	0f c0       	rjmp	.+30     	; 0x28d0 <_ZN12StateMachine24SettingsRssiStateHandler8onUpdateEv+0x5a>
                    EepromSettings.rssiBMin = Receiver::rssiBRaw;
            #endif
        break;

        case InternalState::SCANNING_HIGH:
            if (Receiver::rssiARaw > EepromSettings.rssiAMax)
    28b2:	80 91 5f 02 	lds	r24, 0x025F	; 0x80025f <_ZN8Receiver8rssiARawE>
    28b6:	90 91 60 02 	lds	r25, 0x0260	; 0x800260 <_ZN8Receiver8rssiARawE+0x1>
    28ba:	20 91 6e 02 	lds	r18, 0x026E	; 0x80026e <EepromSettings+0xa>
    28be:	30 91 6f 02 	lds	r19, 0x026F	; 0x80026f <EepromSettings+0xb>
    28c2:	28 17       	cp	r18, r24
    28c4:	39 07       	cpc	r19, r25
    28c6:	20 f4       	brcc	.+8      	; 0x28d0 <_ZN12StateMachine24SettingsRssiStateHandler8onUpdateEv+0x5a>
                EepromSettings.rssiAMax = Receiver::rssiARaw;
    28c8:	90 93 6f 02 	sts	0x026F, r25	; 0x80026f <EepromSettings+0xb>
    28cc:	80 93 6e 02 	sts	0x026E, r24	; 0x80026e <EepromSettings+0xa>
                    EepromSettings.rssiBMax = Receiver::rssiBRaw;
            #endif
        break;
    }

    Receiver::setChannel((Receiver::activeChannel + 1) % CHANNELS_SIZE);
    28d0:	80 91 62 02 	lds	r24, 0x0262	; 0x800262 <_ZN8Receiver13activeChannelE>
    28d4:	90 e0       	ldi	r25, 0x00	; 0
    28d6:	01 96       	adiw	r24, 0x01	; 1
    28d8:	68 e2       	ldi	r22, 0x28	; 40
    28da:	70 e0       	ldi	r23, 0x00	; 0
    28dc:	0e 94 aa 2f 	call	0x5f54	; 0x5f54 <__divmodhi4>
    28e0:	0e 94 aa 0a 	call	0x1554	; 0x1554 <_ZN8Receiver10setChannelEh>
    if (Receiver::activeChannel == 0) {
    28e4:	80 91 62 02 	lds	r24, 0x0262	; 0x800262 <_ZN8Receiver13activeChannelE>
    28e8:	81 11       	cpse	r24, r1
    28ea:	12 c0       	rjmp	.+36     	; 0x2910 <_ZN12StateMachine24SettingsRssiStateHandler8onUpdateEv+0x9a>
        currentSweep++;
    28ec:	8b 81       	ldd	r24, Y+3	; 0x03
    28ee:	8f 5f       	subi	r24, 0xFF	; 255
    28f0:	8b 83       	std	Y+3, r24	; 0x03

        if (currentSweep == RSSI_SETUP_RUN) {
    28f2:	83 30       	cpi	r24, 0x03	; 3
    28f4:	69 f4       	brne	.+26     	; 0x2910 <_ZN12StateMachine24SettingsRssiStateHandler8onUpdateEv+0x9a>
            switch (internalState) {
    28f6:	8a 81       	ldd	r24, Y+2	; 0x02
    28f8:	81 30       	cpi	r24, 0x01	; 1
    28fa:	21 f0       	breq	.+8      	; 0x2904 <_ZN12StateMachine24SettingsRssiStateHandler8onUpdateEv+0x8e>
    28fc:	83 30       	cpi	r24, 0x03	; 3
    28fe:	21 f4       	brne	.+8      	; 0x2908 <_ZN12StateMachine24SettingsRssiStateHandler8onUpdateEv+0x92>
                case InternalState::SCANNING_LOW:
                    internalState = InternalState::WAIT_FOR_HIGH;
                break;

                case InternalState::SCANNING_HIGH:
                    internalState = InternalState::DONE;
    2900:	84 e0       	ldi	r24, 0x04	; 4
    2902:	01 c0       	rjmp	.+2      	; 0x2906 <_ZN12StateMachine24SettingsRssiStateHandler8onUpdateEv+0x90>
        currentSweep++;

        if (currentSweep == RSSI_SETUP_RUN) {
            switch (internalState) {
                case InternalState::SCANNING_LOW:
                    internalState = InternalState::WAIT_FOR_HIGH;
    2904:	82 e0       	ldi	r24, 0x02	; 2
                break;

                case InternalState::SCANNING_HIGH:
                    internalState = InternalState::DONE;
    2906:	8a 83       	std	Y+2, r24	; 0x02
            }

            Ui::needUpdate();
        }
    }
}
    2908:	df 91       	pop	r29
    290a:	cf 91       	pop	r28
                case InternalState::SCANNING_HIGH:
                    internalState = InternalState::DONE;
                break;
            }

            Ui::needUpdate();
    290c:	0c 94 0a 15 	jmp	0x2a14	; 0x2a14 <_ZN2Ui10needUpdateEv>
        }
    }
}
    2910:	df 91       	pop	r29
    2912:	cf 91       	pop	r28
    2914:	08 95       	ret

00002916 <_ZN5TimerC1Ej>:
#include <Arduino.h>
#include "timer.h"


Timer::Timer(uint16_t delay) {
    2916:	cf 93       	push	r28
    2918:	df 93       	push	r29
    291a:	ec 01       	movw	r28, r24
    this->delay = delay;
    291c:	7d 83       	std	Y+5, r23	; 0x05
    291e:	6c 83       	std	Y+4, r22	; 0x04
    this->nextTick = millis() + this->delay;
    2920:	0e 94 71 18 	call	0x30e2	; 0x30e2 <millis>
    2924:	2c 81       	ldd	r18, Y+4	; 0x04
    2926:	3d 81       	ldd	r19, Y+5	; 0x05
    2928:	dc 01       	movw	r26, r24
    292a:	cb 01       	movw	r24, r22
    292c:	82 0f       	add	r24, r18
    292e:	93 1f       	adc	r25, r19
    2930:	a1 1d       	adc	r26, r1
    2932:	b1 1d       	adc	r27, r1
    2934:	88 83       	st	Y, r24
    2936:	99 83       	std	Y+1, r25	; 0x01
    2938:	aa 83       	std	Y+2, r26	; 0x02
    293a:	bb 83       	std	Y+3, r27	; 0x03
    this->ticked = false;
    293c:	1e 82       	std	Y+6, r1	; 0x06
}
    293e:	df 91       	pop	r29
    2940:	cf 91       	pop	r28
    2942:	08 95       	ret

00002944 <_ZN5Timer9hasTickedEv>:

const bool Timer::hasTicked() {
    2944:	0f 93       	push	r16
    2946:	1f 93       	push	r17
    2948:	cf 93       	push	r28
    294a:	df 93       	push	r29
    if (this->ticked)
    294c:	fc 01       	movw	r30, r24
    294e:	26 81       	ldd	r18, Z+6	; 0x06
    2950:	21 11       	cpse	r18, r1
    2952:	0f c0       	rjmp	.+30     	; 0x2972 <_ZN5Timer9hasTickedEv+0x2e>
    2954:	ec 01       	movw	r28, r24
        return true;

    if (millis() >= this->nextTick) {
    2956:	0e 94 71 18 	call	0x30e2	; 0x30e2 <millis>
    295a:	08 81       	ld	r16, Y
    295c:	19 81       	ldd	r17, Y+1	; 0x01
    295e:	2a 81       	ldd	r18, Y+2	; 0x02
    2960:	3b 81       	ldd	r19, Y+3	; 0x03
    2962:	60 17       	cp	r22, r16
    2964:	71 07       	cpc	r23, r17
    2966:	82 07       	cpc	r24, r18
    2968:	93 07       	cpc	r25, r19
    296a:	28 f0       	brcs	.+10     	; 0x2976 <_ZN5Timer9hasTickedEv+0x32>
        this->ticked = true;
    296c:	81 e0       	ldi	r24, 0x01	; 1
    296e:	8e 83       	std	Y+6, r24	; 0x06
        return true;
    2970:	03 c0       	rjmp	.+6      	; 0x2978 <_ZN5Timer9hasTickedEv+0x34>
    this->ticked = false;
}

const bool Timer::hasTicked() {
    if (this->ticked)
        return true;
    2972:	81 e0       	ldi	r24, 0x01	; 1
    2974:	01 c0       	rjmp	.+2      	; 0x2978 <_ZN5Timer9hasTickedEv+0x34>
    if (millis() >= this->nextTick) {
        this->ticked = true;
        return true;
    }

    return false;
    2976:	80 e0       	ldi	r24, 0x00	; 0
}
    2978:	df 91       	pop	r29
    297a:	cf 91       	pop	r28
    297c:	1f 91       	pop	r17
    297e:	0f 91       	pop	r16
    2980:	08 95       	ret

00002982 <_ZN5Timer5resetEv>:

void Timer::reset() {
    2982:	cf 93       	push	r28
    2984:	df 93       	push	r29
    2986:	ec 01       	movw	r28, r24
    this->nextTick = millis() + this->delay;
    2988:	0e 94 71 18 	call	0x30e2	; 0x30e2 <millis>
    298c:	2c 81       	ldd	r18, Y+4	; 0x04
    298e:	3d 81       	ldd	r19, Y+5	; 0x05
    2990:	dc 01       	movw	r26, r24
    2992:	cb 01       	movw	r24, r22
    2994:	82 0f       	add	r24, r18
    2996:	93 1f       	adc	r25, r19
    2998:	a1 1d       	adc	r26, r1
    299a:	b1 1d       	adc	r27, r1
    299c:	88 83       	st	Y, r24
    299e:	99 83       	std	Y+1, r25	; 0x01
    29a0:	aa 83       	std	Y+2, r26	; 0x02
    29a2:	bb 83       	std	Y+3, r27	; 0x03
    this->ticked = false;
    29a4:	1e 82       	std	Y+6, r1	; 0x06
}
    29a6:	df 91       	pop	r29
    29a8:	cf 91       	pop	r28
    29aa:	08 95       	ret

000029ac <_ZN2Ui5setupEv>:
        const int step
    ) {
        for (int i = 0; i <= w; i += step) {
            Ui::display.drawFastHLine(x + i, y, step / 2, WHITE);
        }
    }
    29ac:	0f 93       	push	r16
    29ae:	cf 93       	push	r28
    29b0:	df 93       	push	r29
    29b2:	01 e0       	ldi	r16, 0x01	; 1
    29b4:	21 e0       	ldi	r18, 0x01	; 1
    29b6:	4c e3       	ldi	r20, 0x3C	; 60
    29b8:	62 e0       	ldi	r22, 0x02	; 2
    29ba:	8e e8       	ldi	r24, 0x8E	; 142
    29bc:	92 e0       	ldi	r25, 0x02	; 2
    29be:	0e 94 0a 27 	call	0x4e14	; 0x4e14 <_ZN16Adafruit_SSD13065beginEhhbb>
    29c2:	ce e8       	ldi	r28, 0x8E	; 142
    29c4:	d2 e0       	ldi	r29, 0x02	; 2
    29c6:	81 e0       	ldi	r24, 0x01	; 1
    29c8:	90 e0       	ldi	r25, 0x00	; 0
    29ca:	9b 8b       	std	Y+19, r25	; 0x13
    29cc:	8a 8b       	std	Y+18, r24	; 0x12
    29ce:	99 8b       	std	Y+17, r25	; 0x11
    29d0:	88 8b       	std	Y+16, r24	; 0x10
    29d2:	61 e0       	ldi	r22, 0x01	; 1
    29d4:	ce 01       	movw	r24, r28
    29d6:	0e 94 7a 24 	call	0x48f4	; 0x48f4 <_ZN12Adafruit_GFX11setTextSizeEh>
    29da:	1f 8a       	std	Y+23, r1	; 0x17
    29dc:	ce 01       	movw	r24, r28
    29de:	0e 94 ec 26 	call	0x4dd8	; 0x4dd8 <_ZN16Adafruit_SSD130612clearDisplayEv>
    29e2:	21 e0       	ldi	r18, 0x01	; 1
    29e4:	40 e0       	ldi	r20, 0x00	; 0
    29e6:	62 e0       	ldi	r22, 0x02	; 2
    29e8:	ce 01       	movw	r24, r28
    29ea:	0e 94 0a 27 	call	0x4e14	; 0x4e14 <_ZN16Adafruit_SSD13065beginEhhbb>
    29ee:	df 91       	pop	r29
    29f0:	cf 91       	pop	r28
    29f2:	0f 91       	pop	r16
    29f4:	08 95       	ret

000029f6 <_ZN2Ui6updateEv>:
    29f6:	80 91 8c 02 	lds	r24, 0x028C	; 0x80028c <_ZN2Ui13shouldDisplayE>
    29fa:	88 23       	and	r24, r24
    29fc:	31 f0       	breq	.+12     	; 0x2a0a <_ZN2Ui6updateEv+0x14>
    29fe:	8e e8       	ldi	r24, 0x8E	; 142
    2a00:	92 e0       	ldi	r25, 0x02	; 2
    2a02:	0e 94 83 2a 	call	0x5506	; 0x5506 <_ZN16Adafruit_SSD13067displayEv>
    2a06:	10 92 8c 02 	sts	0x028C, r1	; 0x80028c <_ZN2Ui13shouldDisplayE>
    2a0a:	08 95       	ret

00002a0c <_ZN2Ui5clearEv>:
    2a0c:	8e e8       	ldi	r24, 0x8E	; 142
    2a0e:	92 e0       	ldi	r25, 0x02	; 2
    2a10:	0c 94 ec 26 	jmp	0x4dd8	; 0x4dd8 <_ZN16Adafruit_SSD130612clearDisplayEv>

00002a14 <_ZN2Ui10needUpdateEv>:
    2a14:	81 e0       	ldi	r24, 0x01	; 1
    2a16:	80 93 8d 02 	sts	0x028D, r24	; 0x80028d <_ZN2Ui16shouldDrawUpdateE>
    2a1a:	08 95       	ret

00002a1c <_ZN2Ui11needDisplayEv>:
    2a1c:	81 e0       	ldi	r24, 0x01	; 1
    2a1e:	80 93 8c 02 	sts	0x028C, r24	; 0x80028c <_ZN2Ui13shouldDisplayE>
    2a22:	08 95       	ret

00002a24 <_ZN2Ui14needFullRedrawEv>:
    2a24:	81 e0       	ldi	r24, 0x01	; 1
    2a26:	80 93 8b 02 	sts	0x028B, r24	; 0x80028b <_ZN2Ui16shouldFullRedrawE>
    2a2a:	08 95       	ret

00002a2c <_GLOBAL__sub_I__ZN2Ui7displayE>:
    2a2c:	6f ef       	ldi	r22, 0xFF	; 255
    2a2e:	8e e8       	ldi	r24, 0x8E	; 142
    2a30:	92 e0       	ldi	r25, 0x02	; 2
    2a32:	0c 94 6c 25 	jmp	0x4ad8	; 0x4ad8 <_ZN16Adafruit_SSD1306C1Ea>

00002a36 <_GLOBAL__sub_D__ZN2Ui7displayE>:
    2a36:	8e e8       	ldi	r24, 0x8E	; 142
    2a38:	92 e0       	ldi	r25, 0x02	; 2
    2a3a:	0c 94 90 25 	jmp	0x4b20	; 0x4b20 <_ZN16Adafruit_SSD1306D1Ev>

00002a3e <_ZN2Ui15drawDashedVLineEiiii>:
    void drawDashedVLine(
        const int x,
        const int y,
        const int h,
        const int step
    ) {
    2a3e:	6f 92       	push	r6
    2a40:	7f 92       	push	r7
    2a42:	8f 92       	push	r8
    2a44:	9f 92       	push	r9
    2a46:	af 92       	push	r10
    2a48:	bf 92       	push	r11
    2a4a:	cf 92       	push	r12
    2a4c:	df 92       	push	r13
    2a4e:	ef 92       	push	r14
    2a50:	ff 92       	push	r15
    2a52:	0f 93       	push	r16
    2a54:	1f 93       	push	r17
    2a56:	cf 93       	push	r28
    2a58:	df 93       	push	r29
    2a5a:	3c 01       	movw	r6, r24
    2a5c:	5b 01       	movw	r10, r22
    2a5e:	4a 01       	movw	r8, r20
    2a60:	79 01       	movw	r14, r18
        for (int i = 0; i <= h; i += step) {
            Ui::display.drawFastVLine(x, y + i, step / 2, INVERSE);
    2a62:	69 01       	movw	r12, r18
    2a64:	37 ff       	sbrs	r19, 7
    2a66:	03 c0       	rjmp	.+6      	; 0x2a6e <_ZN2Ui15drawDashedVLineEiiii+0x30>
    2a68:	8f ef       	ldi	r24, 0xFF	; 255
    2a6a:	c8 1a       	sub	r12, r24
    2a6c:	d8 0a       	sbc	r13, r24
    2a6e:	d5 94       	asr	r13
    2a70:	c7 94       	ror	r12
        const int x,
        const int y,
        const int h,
        const int step
    ) {
        for (int i = 0; i <= h; i += step) {
    2a72:	c0 e0       	ldi	r28, 0x00	; 0
    2a74:	d0 e0       	ldi	r29, 0x00	; 0
    2a76:	8c 16       	cp	r8, r28
    2a78:	9d 06       	cpc	r9, r29
    2a7a:	74 f0       	brlt	.+28     	; 0x2a98 <_ZN2Ui15drawDashedVLineEiiii+0x5a>
            Ui::display.drawFastVLine(x, y + i, step / 2, INVERSE);
    2a7c:	ae 01       	movw	r20, r28
    2a7e:	4a 0d       	add	r20, r10
    2a80:	5b 1d       	adc	r21, r11
    2a82:	02 e0       	ldi	r16, 0x02	; 2
    2a84:	10 e0       	ldi	r17, 0x00	; 0
    2a86:	96 01       	movw	r18, r12
    2a88:	b3 01       	movw	r22, r6
    2a8a:	8e e8       	ldi	r24, 0x8E	; 142
    2a8c:	92 e0       	ldi	r25, 0x02	; 2
    2a8e:	0e 94 41 2a 	call	0x5482	; 0x5482 <_ZN16Adafruit_SSD130613drawFastVLineEiiij>
        const int x,
        const int y,
        const int h,
        const int step
    ) {
        for (int i = 0; i <= h; i += step) {
    2a92:	ce 0d       	add	r28, r14
    2a94:	df 1d       	adc	r29, r15
    2a96:	ef cf       	rjmp	.-34     	; 0x2a76 <_ZN2Ui15drawDashedVLineEiiii+0x38>
            Ui::display.drawFastVLine(x, y + i, step / 2, INVERSE);
        }
    }
    2a98:	df 91       	pop	r29
    2a9a:	cf 91       	pop	r28
    2a9c:	1f 91       	pop	r17
    2a9e:	0f 91       	pop	r16
    2aa0:	ff 90       	pop	r15
    2aa2:	ef 90       	pop	r14
    2aa4:	df 90       	pop	r13
    2aa6:	cf 90       	pop	r12
    2aa8:	bf 90       	pop	r11
    2aaa:	af 90       	pop	r10
    2aac:	9f 90       	pop	r9
    2aae:	8f 90       	pop	r8
    2ab0:	7f 90       	pop	r7
    2ab2:	6f 90       	pop	r6
    2ab4:	08 95       	ret

00002ab6 <_ZN2Ui9clearRectEiiii>:

    void clear() {
        display.clearDisplay();
    }

    void clearRect(const int x, const int y, const int w, const int h) {
    2ab6:	ef 92       	push	r14
    2ab8:	ff 92       	push	r15
    2aba:	0f 93       	push	r16
    2abc:	1f 93       	push	r17
        display.fillRect(x, y, w, h, BLACK);
    2abe:	e1 2c       	mov	r14, r1
    2ac0:	f1 2c       	mov	r15, r1
    2ac2:	89 01       	movw	r16, r18
    2ac4:	9a 01       	movw	r18, r20
    2ac6:	ab 01       	movw	r20, r22
    2ac8:	bc 01       	movw	r22, r24
    2aca:	8e e8       	ldi	r24, 0x8E	; 142
    2acc:	92 e0       	ldi	r25, 0x02	; 2
    2ace:	0e 94 93 1b 	call	0x3726	; 0x3726 <_ZN12Adafruit_GFX8fillRectEiiiij>
    }
    2ad2:	1f 91       	pop	r17
    2ad4:	0f 91       	pop	r16
    2ad6:	ff 90       	pop	r15
    2ad8:	ef 90       	pop	r14
    2ada:	08 95       	ret

00002adc <_ZN2Ui9drawGraphEPKhhhhhhh>:
        const uint8_t dataScale,
        const uint8_t x,
        const uint8_t y,
        const uint8_t w,
        const uint8_t h
    ) {
    2adc:	2f 92       	push	r2
    2ade:	3f 92       	push	r3
    2ae0:	4f 92       	push	r4
    2ae2:	5f 92       	push	r5
    2ae4:	6f 92       	push	r6
    2ae6:	7f 92       	push	r7
    2ae8:	8f 92       	push	r8
    2aea:	9f 92       	push	r9
    2aec:	af 92       	push	r10
    2aee:	bf 92       	push	r11
    2af0:	cf 92       	push	r12
    2af2:	df 92       	push	r13
    2af4:	ef 92       	push	r14
    2af6:	ff 92       	push	r15
    2af8:	0f 93       	push	r16
    2afa:	1f 93       	push	r17
    2afc:	cf 93       	push	r28
    2afe:	df 93       	push	r29
    2b00:	00 d0       	rcall	.+0      	; 0x2b02 <_ZN2Ui9drawGraphEPKhhhhhhh+0x26>
    2b02:	00 d0       	rcall	.+0      	; 0x2b04 <_ZN2Ui9drawGraphEPKhhhhhhh+0x28>
    2b04:	cd b7       	in	r28, 0x3d	; 61
    2b06:	de b7       	in	r29, 0x3e	; 62
    2b08:	3c 01       	movw	r6, r24
    2b0a:	69 83       	std	Y+1, r22	; 0x01
    2b0c:	34 2e       	mov	r3, r20
    2b0e:	2b 83       	std	Y+3, r18	; 0x03
        #define SCALE_DATAPOINT(p) (p * h / dataScale)
        #define CLAMP_DATAPOINT(p) \
            (p > dataScale) ? dataScale : ((p < 0) ? 0 : p);

        Ui::clearRect(x, y, w - 1, h + 1);
    2b10:	4e 2c       	mov	r4, r14
    2b12:	51 2c       	mov	r5, r1
    2b14:	a0 2e       	mov	r10, r16
    2b16:	b1 2c       	mov	r11, r1
    2b18:	2c 2d       	mov	r18, r12
    2b1a:	30 e0       	ldi	r19, 0x00	; 0
    2b1c:	2f 5f       	subi	r18, 0xFF	; 255
    2b1e:	3f 4f       	sbci	r19, 0xFF	; 255
    2b20:	a2 01       	movw	r20, r4
    2b22:	41 50       	subi	r20, 0x01	; 1
    2b24:	51 09       	sbc	r21, r1
    2b26:	b5 01       	movw	r22, r10
    2b28:	eb 81       	ldd	r30, Y+3	; 0x03
    2b2a:	8e 2f       	mov	r24, r30
    2b2c:	90 e0       	ldi	r25, 0x00	; 0
    2b2e:	0e 94 5b 15 	call	0x2ab6	; 0x2ab6 <_ZN2Ui9clearRectEiiii>

        const uint8_t xScaler = w / (dataSize - 1);
    2b32:	69 81       	ldd	r22, Y+1	; 0x01
    2b34:	26 2f       	mov	r18, r22
    2b36:	30 e0       	ldi	r19, 0x00	; 0
    2b38:	49 01       	movw	r8, r18
    2b3a:	71 e0       	ldi	r23, 0x01	; 1
    2b3c:	87 1a       	sub	r8, r23
    2b3e:	91 08       	sbc	r9, r1
    2b40:	c2 01       	movw	r24, r4
    2b42:	b4 01       	movw	r22, r8
    2b44:	0e 94 aa 2f 	call	0x5f54	; 0x5f54 <__divmodhi4>
    2b48:	6a 83       	std	Y+2, r22	; 0x02
            const uint8_t dataPointHeight = h - SCALE_DATAPOINT(dataPoint);
            const uint8_t dataPointNextHeight =
                h - SCALE_DATAPOINT(dataPointNext);

            const uint8_t xEnd = xNext + xScaler
                    + (i == 0 || i == dataSize - 2 ? (xScalarMissing + 1) / 2 : 0);
    2b4a:	68 9d       	mul	r22, r8
    2b4c:	e0 18       	sub	r14, r0
    2b4e:	11 24       	eor	r1, r1
    2b50:	f1 2c       	mov	r15, r1
    2b52:	8f ef       	ldi	r24, 0xFF	; 255
    2b54:	e8 1a       	sub	r14, r24
    2b56:	f8 0a       	sbc	r15, r24
    2b58:	f5 94       	asr	r15
    2b5a:	e7 94       	ror	r14
    2b5c:	de 2c       	mov	r13, r14
        Ui::clearRect(x, y, w - 1, h + 1);

        const uint8_t xScaler = w / (dataSize - 1);
        const uint8_t xScalarMissing = w - (xScaler * (dataSize - 1));

        uint8_t xNext = x;
    2b5e:	eb 81       	ldd	r30, Y+3	; 0x03

        for (uint8_t i = 0; i < dataSize - 1; i++) {
    2b60:	21 2c       	mov	r2, r1
            const uint8_t dataPoint = CLAMP_DATAPOINT(data[i]);
            const uint8_t dataPointNext = CLAMP_DATAPOINT(data[i + 1]);

            // Need to invert the heights so it shows the right way on the
            // screen.
            const uint8_t dataPointHeight = h - SCALE_DATAPOINT(dataPoint);
    2b62:	43 2c       	mov	r4, r3
    2b64:	51 2c       	mov	r5, r1
            const uint8_t dataPointNextHeight =
                h - SCALE_DATAPOINT(dataPointNext);

            const uint8_t xEnd = xNext + xScaler
                    + (i == 0 || i == dataSize - 2 ? (xScalarMissing + 1) / 2 : 0);
    2b66:	b9 01       	movw	r22, r18
    2b68:	62 50       	subi	r22, 0x02	; 2
    2b6a:	71 09       	sbc	r23, r1
    2b6c:	7c 83       	std	Y+4, r23	; 0x04
    2b6e:	6b 83       	std	Y+3, r22	; 0x03
        const uint8_t xScaler = w / (dataSize - 1);
        const uint8_t xScalarMissing = w - (xScaler * (dataSize - 1));

        uint8_t xNext = x;

        for (uint8_t i = 0; i < dataSize - 1; i++) {
    2b70:	22 2d       	mov	r18, r2
    2b72:	30 e0       	ldi	r19, 0x00	; 0
    2b74:	28 15       	cp	r18, r8
    2b76:	39 05       	cpc	r19, r9
    2b78:	0c f0       	brlt	.+2      	; 0x2b7c <_ZN2Ui9drawGraphEPKhhhhhhh+0xa0>
    2b7a:	3f c0       	rjmp	.+126    	; 0x2bfa <_ZN2Ui9drawGraphEPKhhhhhhh+0x11e>
            const uint8_t dataPoint = CLAMP_DATAPOINT(data[i]);
    2b7c:	d3 01       	movw	r26, r6
    2b7e:	a2 0f       	add	r26, r18
    2b80:	b3 1f       	adc	r27, r19
    2b82:	8c 91       	ld	r24, X
    2b84:	38 16       	cp	r3, r24
    2b86:	08 f4       	brcc	.+2      	; 0x2b8a <_ZN2Ui9drawGraphEPKhhhhhhh+0xae>
    2b88:	83 2d       	mov	r24, r3
            const uint8_t dataPointNext = CLAMP_DATAPOINT(data[i + 1]);
    2b8a:	11 96       	adiw	r26, 0x01	; 1
    2b8c:	fc 91       	ld	r31, X
    2b8e:	3f 16       	cp	r3, r31
    2b90:	08 f4       	brcc	.+2      	; 0x2b94 <_ZN2Ui9drawGraphEPKhhhhhhh+0xb8>
    2b92:	f3 2d       	mov	r31, r3

            // Need to invert the heights so it shows the right way on the
            // screen.
            const uint8_t dataPointHeight = h - SCALE_DATAPOINT(dataPoint);
    2b94:	c8 9e       	mul	r12, r24
    2b96:	c0 01       	movw	r24, r0
    2b98:	11 24       	eor	r1, r1
    2b9a:	b2 01       	movw	r22, r4
    2b9c:	0e 94 aa 2f 	call	0x5f54	; 0x5f54 <__divmodhi4>
    2ba0:	4c 2d       	mov	r20, r12
    2ba2:	46 1b       	sub	r20, r22
            const uint8_t dataPointNextHeight =
                h - SCALE_DATAPOINT(dataPointNext);
    2ba4:	cf 9e       	mul	r12, r31
    2ba6:	c0 01       	movw	r24, r0
    2ba8:	11 24       	eor	r1, r1
    2baa:	b2 01       	movw	r22, r4
    2bac:	0e 94 aa 2f 	call	0x5f54	; 0x5f54 <__divmodhi4>
    2bb0:	9c 2d       	mov	r25, r12
    2bb2:	96 1b       	sub	r25, r22

            const uint8_t xEnd = xNext + xScaler
                    + (i == 0 || i == dataSize - 2 ? (xScalarMissing + 1) / 2 : 0);
    2bb4:	22 20       	and	r2, r2
    2bb6:	39 f0       	breq	.+14     	; 0x2bc6 <_ZN2Ui9drawGraphEPKhhhhhhh+0xea>
    2bb8:	6b 81       	ldd	r22, Y+3	; 0x03
    2bba:	7c 81       	ldd	r23, Y+4	; 0x04
    2bbc:	26 17       	cp	r18, r22
    2bbe:	37 07       	cpc	r19, r23
    2bc0:	11 f0       	breq	.+4      	; 0x2bc6 <_ZN2Ui9drawGraphEPKhhhhhhh+0xea>
    2bc2:	80 e0       	ldi	r24, 0x00	; 0
    2bc4:	01 c0       	rjmp	.+2      	; 0x2bc8 <_ZN2Ui9drawGraphEPKhhhhhhh+0xec>
    2bc6:	8d 2d       	mov	r24, r13
    2bc8:	7a 81       	ldd	r23, Y+2	; 0x02
    2bca:	87 0f       	add	r24, r23
    2bcc:	8e 0f       	add	r24, r30
    2bce:	89 83       	std	Y+1, r24	; 0x01
                xNext,
                y + dataPointHeight,
                xEnd,
                y + dataPointNextHeight,
                WHITE
            );
    2bd0:	85 01       	movw	r16, r10
    2bd2:	09 0f       	add	r16, r25
    2bd4:	11 1d       	adc	r17, r1
    2bd6:	28 2f       	mov	r18, r24
    2bd8:	30 e0       	ldi	r19, 0x00	; 0
    2bda:	c5 01       	movw	r24, r10
    2bdc:	84 0f       	add	r24, r20
    2bde:	91 1d       	adc	r25, r1
    2be0:	ac 01       	movw	r20, r24
    2be2:	6e 2f       	mov	r22, r30
    2be4:	70 e0       	ldi	r23, 0x00	; 0
    2be6:	ee 24       	eor	r14, r14
    2be8:	e3 94       	inc	r14
    2bea:	f1 2c       	mov	r15, r1
    2bec:	8e e8       	ldi	r24, 0x8E	; 142
    2bee:	92 e0       	ldi	r25, 0x02	; 2
    2bf0:	0e 94 f5 1b 	call	0x37ea	; 0x37ea <_ZN12Adafruit_GFX8drawLineEiiiij>
        const uint8_t xScaler = w / (dataSize - 1);
        const uint8_t xScalarMissing = w - (xScaler * (dataSize - 1));

        uint8_t xNext = x;

        for (uint8_t i = 0; i < dataSize - 1; i++) {
    2bf4:	23 94       	inc	r2
                xEnd,
                y + dataPointNextHeight,
                WHITE
            );

            xNext = xEnd;
    2bf6:	e9 81       	ldd	r30, Y+1	; 0x01
        const uint8_t xScaler = w / (dataSize - 1);
        const uint8_t xScalarMissing = w - (xScaler * (dataSize - 1));

        uint8_t xNext = x;

        for (uint8_t i = 0; i < dataSize - 1; i++) {
    2bf8:	bb cf       	rjmp	.-138    	; 0x2b70 <_ZN2Ui9drawGraphEPKhhhhhhh+0x94>
            xNext = xEnd;
        }

        #undef SCALE_DATAPOINT
        #undef CLAMP_DATAPOINT
    }
    2bfa:	0f 90       	pop	r0
    2bfc:	0f 90       	pop	r0
    2bfe:	0f 90       	pop	r0
    2c00:	0f 90       	pop	r0
    2c02:	df 91       	pop	r29
    2c04:	cf 91       	pop	r28
    2c06:	1f 91       	pop	r17
    2c08:	0f 91       	pop	r16
    2c0a:	ff 90       	pop	r15
    2c0c:	ef 90       	pop	r14
    2c0e:	df 90       	pop	r13
    2c10:	cf 90       	pop	r12
    2c12:	bf 90       	pop	r11
    2c14:	af 90       	pop	r10
    2c16:	9f 90       	pop	r9
    2c18:	8f 90       	pop	r8
    2c1a:	7f 90       	pop	r7
    2c1c:	6f 90       	pop	r6
    2c1e:	5f 90       	pop	r5
    2c20:	4f 90       	pop	r4
    2c22:	3f 90       	pop	r3
    2c24:	2f 90       	pop	r2
    2c26:	08 95       	ret

00002c28 <_ZN2Ui10MenuHelper5resetEv>:
#include "ui.h"
#include "ui_menu.h"


void Ui::MenuHelper::reset() {
    this->activeItems = 0;
    2c28:	fc 01       	movw	r30, r24
    2c2a:	11 8e       	std	Z+25, r1	; 0x19
    2c2c:	10 8e       	std	Z+24, r1	; 0x18
    this->selectedItem = 0;
    2c2e:	13 8e       	std	Z+27, r1	; 0x1b
    2c30:	12 8e       	std	Z+26, r1	; 0x1a
    2c32:	08 95       	ret

00002c34 <_ZN2Ui10MenuHelper7addItemEPKcPKhPFvvE>:

void Ui::MenuHelper::addItem(
    const char* text,
    const unsigned char* icon,
    const Ui::MenuHandler handler
) {
    2c34:	cf 93       	push	r28
    this->menuItems[this->activeItems].text = text;
    2c36:	fc 01       	movw	r30, r24
    2c38:	a0 8d       	ldd	r26, Z+24	; 0x18
    2c3a:	b1 8d       	ldd	r27, Z+25	; 0x19
    2c3c:	c6 e0       	ldi	r28, 0x06	; 6
    2c3e:	ca 9f       	mul	r28, r26
    2c40:	f0 01       	movw	r30, r0
    2c42:	cb 9f       	mul	r28, r27
    2c44:	f0 0d       	add	r31, r0
    2c46:	11 24       	eor	r1, r1
    2c48:	e8 0f       	add	r30, r24
    2c4a:	f9 1f       	adc	r31, r25
    2c4c:	71 83       	std	Z+1, r23	; 0x01
    2c4e:	60 83       	st	Z, r22
    this->menuItems[this->activeItems].icon = icon;
    2c50:	55 83       	std	Z+5, r21	; 0x05
    2c52:	44 83       	std	Z+4, r20	; 0x04
    this->menuItems[this->activeItems].handler = handler;
    2c54:	33 83       	std	Z+3, r19	; 0x03
    2c56:	22 83       	std	Z+2, r18	; 0x02

    this->activeItems++;
    2c58:	11 96       	adiw	r26, 0x01	; 1
    2c5a:	fc 01       	movw	r30, r24
    2c5c:	b1 8f       	std	Z+25, r27	; 0x19
    2c5e:	a0 8f       	std	Z+24, r26	; 0x18
}
    2c60:	cf 91       	pop	r28
    2c62:	08 95       	ret

00002c64 <_ZN2Ui10MenuHelper14selectNextItemEv>:

void Ui::MenuHelper::selectNextItem() {
    2c64:	fc 01       	movw	r30, r24
    if (++this->selectedItem >= this->activeItems)
    2c66:	82 8d       	ldd	r24, Z+26	; 0x1a
    2c68:	93 8d       	ldd	r25, Z+27	; 0x1b
    2c6a:	01 96       	adiw	r24, 0x01	; 1
    2c6c:	93 8f       	std	Z+27, r25	; 0x1b
    2c6e:	82 8f       	std	Z+26, r24	; 0x1a
    2c70:	20 8d       	ldd	r18, Z+24	; 0x18
    2c72:	31 8d       	ldd	r19, Z+25	; 0x19
    2c74:	82 17       	cp	r24, r18
    2c76:	93 07       	cpc	r25, r19
    2c78:	14 f0       	brlt	.+4      	; 0x2c7e <_ZN2Ui10MenuHelper14selectNextItemEv+0x1a>
        this->selectedItem = 0;
    2c7a:	13 8e       	std	Z+27, r1	; 0x1b
    2c7c:	12 8e       	std	Z+26, r1	; 0x1a
    2c7e:	08 95       	ret

00002c80 <_ZN2Ui10MenuHelper18selectPreviousItemEv>:
}

void Ui::MenuHelper::selectPreviousItem() {
    2c80:	fc 01       	movw	r30, r24
    if (--this->selectedItem < 0)
    2c82:	82 8d       	ldd	r24, Z+26	; 0x1a
    2c84:	93 8d       	ldd	r25, Z+27	; 0x1b
    2c86:	01 97       	sbiw	r24, 0x01	; 1
    2c88:	93 8f       	std	Z+27, r25	; 0x1b
    2c8a:	82 8f       	std	Z+26, r24	; 0x1a
    2c8c:	97 ff       	sbrs	r25, 7
    2c8e:	05 c0       	rjmp	.+10     	; 0x2c9a <_ZN2Ui10MenuHelper18selectPreviousItemEv+0x1a>
        this->selectedItem = this->activeItems - 1;
    2c90:	80 8d       	ldd	r24, Z+24	; 0x18
    2c92:	91 8d       	ldd	r25, Z+25	; 0x19
    2c94:	01 97       	sbiw	r24, 0x01	; 1
    2c96:	93 8f       	std	Z+27, r25	; 0x1b
    2c98:	82 8f       	std	Z+26, r24	; 0x1a
    2c9a:	08 95       	ret

00002c9c <_ZN2Ui10MenuHelper12activateItemEv>:
}


void Ui::MenuHelper::activateItem() {
    this->menuItems[this->selectedItem].handler();
    2c9c:	fc 01       	movw	r30, r24
    2c9e:	42 8d       	ldd	r20, Z+26	; 0x1a
    2ca0:	53 8d       	ldd	r21, Z+27	; 0x1b
    2ca2:	66 e0       	ldi	r22, 0x06	; 6
    2ca4:	64 9f       	mul	r22, r20
    2ca6:	90 01       	movw	r18, r0
    2ca8:	65 9f       	mul	r22, r21
    2caa:	30 0d       	add	r19, r0
    2cac:	11 24       	eor	r1, r1
    2cae:	e2 0f       	add	r30, r18
    2cb0:	f3 1f       	adc	r31, r19
    2cb2:	02 80       	ldd	r0, Z+2	; 0x02
    2cb4:	f3 81       	ldd	r31, Z+3	; 0x03
    2cb6:	e0 2d       	mov	r30, r0
    2cb8:	09 94       	ijmp

00002cba <_ZN2Ui10MenuHelper14getCurrentItemEv>:
}


Ui::MenuItem* Ui::MenuHelper::getCurrentItem() {
    return &this->menuItems[this->selectedItem];
    2cba:	fc 01       	movw	r30, r24
    2cbc:	42 8d       	ldd	r20, Z+26	; 0x1a
    2cbe:	53 8d       	ldd	r21, Z+27	; 0x1b
    2cc0:	66 e0       	ldi	r22, 0x06	; 6
    2cc2:	64 9f       	mul	r22, r20
    2cc4:	90 01       	movw	r18, r0
    2cc6:	65 9f       	mul	r22, r21
    2cc8:	30 0d       	add	r19, r0
    2cca:	11 24       	eor	r1, r1
}
    2ccc:	82 0f       	add	r24, r18
    2cce:	93 1f       	adc	r25, r19
    2cd0:	08 95       	ret

00002cd2 <_ZN2Ui15StateMenuHelper7addItemEPFPKhPvEPFvS3_E>:

void StateMenuHelper::addItem(
    const MenuIcon icon,
    const MenuHandler handler
) {
    this->menuItems[this->activeItems].icon = icon;
    2cd2:	fc 01       	movw	r30, r24
    2cd4:	22 89       	ldd	r18, Z+18	; 0x12
    2cd6:	33 89       	ldd	r19, Z+19	; 0x13
    2cd8:	f9 01       	movw	r30, r18
    2cda:	ee 0f       	add	r30, r30
    2cdc:	ff 1f       	adc	r31, r31
    2cde:	ee 0f       	add	r30, r30
    2ce0:	ff 1f       	adc	r31, r31
    2ce2:	e8 0f       	add	r30, r24
    2ce4:	f9 1f       	adc	r31, r25
    2ce6:	71 83       	std	Z+1, r23	; 0x01
    2ce8:	60 83       	st	Z, r22
    this->menuItems[this->activeItems].handler = handler;
    2cea:	53 83       	std	Z+3, r21	; 0x03
    2cec:	42 83       	std	Z+2, r20	; 0x02

    this->activeItems++;
    2cee:	2f 5f       	subi	r18, 0xFF	; 255
    2cf0:	3f 4f       	sbci	r19, 0xFF	; 255
    2cf2:	fc 01       	movw	r30, r24
    2cf4:	33 8b       	std	Z+19, r19	; 0x13
    2cf6:	22 8b       	std	Z+18, r18	; 0x12
    2cf8:	08 95       	ret

00002cfa <_ZN2Ui15StateMenuHelper13handleButtonsE6ButtonN7Buttons9PressTypeE>:
}

bool StateMenuHelper::handleButtons(
    Button button,
    Buttons::PressType pressType
) {
    2cfa:	1f 93       	push	r17
    2cfc:	cf 93       	push	r28
    2cfe:	df 93       	push	r29
    2d00:	ec 01       	movw	r28, r24
    if (button == Button::MODE && pressType == Buttons::PressType::LONG) {
    2d02:	62 30       	cpi	r22, 0x02	; 2
    2d04:	89 f4       	brne	.+34     	; 0x2d28 <_ZN2Ui15StateMenuHelper13handleButtonsE6ButtonN7Buttons9PressTypeE+0x2e>
    2d06:	41 30       	cpi	r20, 0x01	; 1
    2d08:	79 f4       	brne	.+30     	; 0x2d28 <_ZN2Ui15StateMenuHelper13handleButtonsE6ButtonN7Buttons9PressTypeE+0x2e>
        this->visible = !this->visible;
    2d0a:	8e 89       	ldd	r24, Y+22	; 0x16
    2d0c:	48 27       	eor	r20, r24
    2d0e:	4e 8b       	std	Y+22, r20	; 0x16
        if (!this->visible)
    2d10:	41 11       	cpse	r20, r1
    2d12:	02 c0       	rjmp	.+4      	; 0x2d18 <_ZN2Ui15StateMenuHelper13handleButtonsE6ButtonN7Buttons9PressTypeE+0x1e>
            Ui::needFullRedraw();
    2d14:	0e 94 12 15 	call	0x2a24	; 0x2a24 <_ZN2Ui14needFullRedrawEv>

        if (this->visible) {
    2d18:	1e 89       	ldd	r17, Y+22	; 0x16
    2d1a:	11 11       	cpse	r17, r1
    2d1c:	02 c0       	rjmp	.+4      	; 0x2d22 <_ZN2Ui15StateMenuHelper13handleButtonsE6ButtonN7Buttons9PressTypeE+0x28>
            this->slideX = MENU_W;
        }

        return true;
    2d1e:	11 e0       	ldi	r17, 0x01	; 1
    2d20:	33 c0       	rjmp	.+102    	; 0x2d88 <_ZN2Ui15StateMenuHelper13handleButtonsE6ButtonN7Buttons9PressTypeE+0x8e>
        this->visible = !this->visible;
        if (!this->visible)
            Ui::needFullRedraw();

        if (this->visible) {
            this->slideX = MENU_W;
    2d22:	80 e1       	ldi	r24, 0x10	; 16
    2d24:	8f 8b       	std	Y+23, r24	; 0x17
    2d26:	30 c0       	rjmp	.+96     	; 0x2d88 <_ZN2Ui15StateMenuHelper13handleButtonsE6ButtonN7Buttons9PressTypeE+0x8e>
    2d28:	1e 89       	ldd	r17, Y+22	; 0x16
        }

        return true;
    }

    if (!this->isVisible())
    2d2a:	11 23       	and	r17, r17
    2d2c:	69 f1       	breq	.+90     	; 0x2d88 <_ZN2Ui15StateMenuHelper13handleButtonsE6ButtonN7Buttons9PressTypeE+0x8e>
        return false;

    switch (button) {
    2d2e:	61 30       	cpi	r22, 0x01	; 1
    2d30:	f9 f0       	breq	.+62     	; 0x2d70 <_ZN2Ui15StateMenuHelper13handleButtonsE6ButtonN7Buttons9PressTypeE+0x76>
    2d32:	88 f0       	brcs	.+34     	; 0x2d56 <_ZN2Ui15StateMenuHelper13handleButtonsE6ButtonN7Buttons9PressTypeE+0x5c>
    2d34:	62 30       	cpi	r22, 0x02	; 2
    2d36:	41 f5       	brne	.+80     	; 0x2d88 <_ZN2Ui15StateMenuHelper13handleButtonsE6ButtonN7Buttons9PressTypeE+0x8e>
            if (++this->selectedItem >= this->activeItems)
                this->selectedItem = 0;
            break;

        case Button::MODE:
            this->menuItems[this->selectedItem].handler(this->state);
    2d38:	ec 89       	ldd	r30, Y+20	; 0x14
    2d3a:	fd 89       	ldd	r31, Y+21	; 0x15
    2d3c:	ee 0f       	add	r30, r30
    2d3e:	ff 1f       	adc	r31, r31
    2d40:	ee 0f       	add	r30, r30
    2d42:	ff 1f       	adc	r31, r31
    2d44:	ec 0f       	add	r30, r28
    2d46:	fd 1f       	adc	r31, r29
    2d48:	02 80       	ldd	r0, Z+2	; 0x02
    2d4a:	f3 81       	ldd	r31, Z+3	; 0x03
    2d4c:	e0 2d       	mov	r30, r0
    2d4e:	88 89       	ldd	r24, Y+16	; 0x10
    2d50:	99 89       	ldd	r25, Y+17	; 0x11
    2d52:	09 95       	icall
            break;
    2d54:	19 c0       	rjmp	.+50     	; 0x2d88 <_ZN2Ui15StateMenuHelper13handleButtonsE6ButtonN7Buttons9PressTypeE+0x8e>
    if (!this->isVisible())
        return false;

    switch (button) {
        case Button::UP:
            if (--this->selectedItem < 0)
    2d56:	8c 89       	ldd	r24, Y+20	; 0x14
    2d58:	9d 89       	ldd	r25, Y+21	; 0x15
    2d5a:	01 97       	sbiw	r24, 0x01	; 1
    2d5c:	9d 8b       	std	Y+21, r25	; 0x15
    2d5e:	8c 8b       	std	Y+20, r24	; 0x14
    2d60:	97 ff       	sbrs	r25, 7
    2d62:	dd cf       	rjmp	.-70     	; 0x2d1e <_ZN2Ui15StateMenuHelper13handleButtonsE6ButtonN7Buttons9PressTypeE+0x24>
                this->selectedItem = this->activeItems - 1;
    2d64:	8a 89       	ldd	r24, Y+18	; 0x12
    2d66:	9b 89       	ldd	r25, Y+19	; 0x13
    2d68:	01 97       	sbiw	r24, 0x01	; 1
    2d6a:	9d 8b       	std	Y+21, r25	; 0x15
    2d6c:	8c 8b       	std	Y+20, r24	; 0x14
    2d6e:	0c c0       	rjmp	.+24     	; 0x2d88 <_ZN2Ui15StateMenuHelper13handleButtonsE6ButtonN7Buttons9PressTypeE+0x8e>
            break;

        case Button::DOWN:
            if (++this->selectedItem >= this->activeItems)
    2d70:	8c 89       	ldd	r24, Y+20	; 0x14
    2d72:	9d 89       	ldd	r25, Y+21	; 0x15
    2d74:	01 96       	adiw	r24, 0x01	; 1
    2d76:	9d 8b       	std	Y+21, r25	; 0x15
    2d78:	8c 8b       	std	Y+20, r24	; 0x14
    2d7a:	2a 89       	ldd	r18, Y+18	; 0x12
    2d7c:	3b 89       	ldd	r19, Y+19	; 0x13
    2d7e:	82 17       	cp	r24, r18
    2d80:	93 07       	cpc	r25, r19
    2d82:	6c f2       	brlt	.-102    	; 0x2d1e <_ZN2Ui15StateMenuHelper13handleButtonsE6ButtonN7Buttons9PressTypeE+0x24>
                this->selectedItem = 0;
    2d84:	1d 8a       	std	Y+21, r1	; 0x15
    2d86:	1c 8a       	std	Y+20, r1	; 0x14
            this->menuItems[this->selectedItem].handler(this->state);
            break;
    }

    return true;
}
    2d88:	81 2f       	mov	r24, r17
    2d8a:	df 91       	pop	r29
    2d8c:	cf 91       	pop	r28
    2d8e:	1f 91       	pop	r17
    2d90:	08 95       	ret

00002d92 <_ZN2Ui15StateMenuHelper4drawEv>:

void StateMenuHelper::draw() {
    2d92:	7f 92       	push	r7
    2d94:	8f 92       	push	r8
    2d96:	9f 92       	push	r9
    2d98:	af 92       	push	r10
    2d9a:	bf 92       	push	r11
    2d9c:	cf 92       	push	r12
    2d9e:	df 92       	push	r13
    2da0:	ef 92       	push	r14
    2da2:	ff 92       	push	r15
    2da4:	0f 93       	push	r16
    2da6:	1f 93       	push	r17
    2da8:	cf 93       	push	r28
    2daa:	df 93       	push	r29
    2dac:	ec 01       	movw	r28, r24
    if (!this->isVisible())
    2dae:	8e 89       	ldd	r24, Y+22	; 0x16
    2db0:	88 23       	and	r24, r24
    2db2:	09 f4       	brne	.+2      	; 0x2db6 <_ZN2Ui15StateMenuHelper4drawEv+0x24>
    2db4:	8b c0       	rjmp	.+278    	; 0x2ecc <_ZN2Ui15StateMenuHelper4drawEv+0x13a>
        return;

    if (MENU_X != MENU_TARGET_X) {
    2db6:	8f 89       	ldd	r24, Y+23	; 0x17
    2db8:	88 23       	and	r24, r24
    2dba:	31 f0       	breq	.+12     	; 0x2dc8 <_ZN2Ui15StateMenuHelper4drawEv+0x36>
        this->slideX -= 4;
    2dbc:	84 50       	subi	r24, 0x04	; 4
        if (this->slideX < 0)
    2dbe:	87 fd       	sbrc	r24, 7
    2dc0:	02 c0       	rjmp	.+4      	; 0x2dc6 <_ZN2Ui15StateMenuHelper4drawEv+0x34>
void StateMenuHelper::draw() {
    if (!this->isVisible())
        return;

    if (MENU_X != MENU_TARGET_X) {
        this->slideX -= 4;
    2dc2:	8f 8b       	std	Y+23, r24	; 0x17
    2dc4:	01 c0       	rjmp	.+2      	; 0x2dc8 <_ZN2Ui15StateMenuHelper4drawEv+0x36>
        if (this->slideX < 0)
            this->slideX = 0;
    2dc6:	1f 8a       	std	Y+23, r1	; 0x17
        MENU_X,
        0,
        MENU_W,
        MENU_H,
        BLACK
    );
    2dc8:	6f 89       	ldd	r22, Y+23	; 0x17
    2dca:	06 2e       	mov	r0, r22
    2dcc:	00 0c       	add	r0, r0
    2dce:	77 0b       	sbc	r23, r23
    2dd0:	60 59       	subi	r22, 0x90	; 144
    2dd2:	7f 4f       	sbci	r23, 0xFF	; 255
    2dd4:	e1 2c       	mov	r14, r1
    2dd6:	f1 2c       	mov	r15, r1
    2dd8:	00 e4       	ldi	r16, 0x40	; 64
    2dda:	10 e0       	ldi	r17, 0x00	; 0
    2ddc:	20 e1       	ldi	r18, 0x10	; 16
    2dde:	30 e0       	ldi	r19, 0x00	; 0
    2de0:	40 e0       	ldi	r20, 0x00	; 0
    2de2:	50 e0       	ldi	r21, 0x00	; 0
    2de4:	8e e8       	ldi	r24, 0x8E	; 142
    2de6:	92 e0       	ldi	r25, 0x02	; 2
    2de8:	0e 94 93 1b 	call	0x3726	; 0x3726 <_ZN12Adafruit_GFX8fillRectEiiiij>
    display.drawFastVLine(
        MENU_X - 1,
        0,
        MENU_H,
        WHITE
    );
    2dec:	6f 89       	ldd	r22, Y+23	; 0x17
    2dee:	06 2e       	mov	r0, r22
    2df0:	00 0c       	add	r0, r0
    2df2:	77 0b       	sbc	r23, r23
    2df4:	61 59       	subi	r22, 0x91	; 145
    2df6:	7f 4f       	sbci	r23, 0xFF	; 255
    2df8:	01 e0       	ldi	r16, 0x01	; 1
    2dfa:	10 e0       	ldi	r17, 0x00	; 0
    2dfc:	20 e4       	ldi	r18, 0x40	; 64
    2dfe:	30 e0       	ldi	r19, 0x00	; 0
    2e00:	40 e0       	ldi	r20, 0x00	; 0
    2e02:	50 e0       	ldi	r21, 0x00	; 0
    2e04:	8e e8       	ldi	r24, 0x8E	; 142
    2e06:	92 e0       	ldi	r25, 0x02	; 2
    2e08:	0e 94 41 2a 	call	0x5482	; 0x5482 <_ZN16Adafruit_SSD130613drawFastVLineEiiij>

    const uint8_t yOffset =
        SCREEN_HEIGHT_MID - ((this->activeItems * MENU_ITEM_H) / 2);
    2e0c:	8a 89       	ldd	r24, Y+18	; 0x12
    2e0e:	9f e1       	ldi	r25, 0x1F	; 31
    2e10:	89 2e       	mov	r8, r25
    2e12:	28 e0       	ldi	r18, 0x08	; 8
    2e14:	82 9f       	mul	r24, r18
    2e16:	80 18       	sub	r8, r0
    2e18:	11 24       	eor	r1, r1

    for (uint8_t i = 0; i < this->activeItems; i++) {
    2e1a:	71 2c       	mov	r7, r1
    2e1c:	91 2c       	mov	r9, r1
    2e1e:	a7 2c       	mov	r10, r7
    2e20:	b1 2c       	mov	r11, r1
    2e22:	8a 89       	ldd	r24, Y+18	; 0x12
    2e24:	9b 89       	ldd	r25, Y+19	; 0x13
    2e26:	a8 16       	cp	r10, r24
    2e28:	b9 06       	cpc	r11, r25
    2e2a:	0c f0       	brlt	.+2      	; 0x2e2e <_ZN2Ui15StateMenuHelper4drawEv+0x9c>
    2e2c:	4f c0       	rjmp	.+158    	; 0x2ecc <_ZN2Ui15StateMenuHelper4drawEv+0x13a>
        if (this->selectedItem == i) {
    2e2e:	8c 89       	ldd	r24, Y+20	; 0x14
    2e30:	9d 89       	ldd	r25, Y+21	; 0x15
    2e32:	a8 16       	cp	r10, r24
    2e34:	b9 06       	cpc	r11, r25
    2e36:	c9 f4       	brne	.+50     	; 0x2e6a <_ZN2Ui15StateMenuHelper4drawEv+0xd8>
                MENU_X,
                MENU_ITEM_H * i + yOffset,
                MENU_ITEM_W,
                MENU_ITEM_H,
                WHITE
            );
    2e38:	a5 01       	movw	r20, r10
    2e3a:	64 e0       	ldi	r22, 0x04	; 4
    2e3c:	44 0f       	add	r20, r20
    2e3e:	55 1f       	adc	r21, r21
    2e40:	6a 95       	dec	r22
    2e42:	e1 f7       	brne	.-8      	; 0x2e3c <_ZN2Ui15StateMenuHelper4drawEv+0xaa>
    2e44:	48 0d       	add	r20, r8
    2e46:	59 1d       	adc	r21, r9
    2e48:	6f 89       	ldd	r22, Y+23	; 0x17
    2e4a:	06 2e       	mov	r0, r22
    2e4c:	00 0c       	add	r0, r0
    2e4e:	77 0b       	sbc	r23, r23
    2e50:	60 59       	subi	r22, 0x90	; 144
    2e52:	7f 4f       	sbci	r23, 0xFF	; 255
    2e54:	ee 24       	eor	r14, r14
    2e56:	e3 94       	inc	r14
    2e58:	f1 2c       	mov	r15, r1
    2e5a:	00 e1       	ldi	r16, 0x10	; 16
    2e5c:	10 e0       	ldi	r17, 0x00	; 0
    2e5e:	20 e1       	ldi	r18, 0x10	; 16
    2e60:	30 e0       	ldi	r19, 0x00	; 0
    2e62:	8e e8       	ldi	r24, 0x8E	; 142
    2e64:	92 e0       	ldi	r25, 0x02	; 2
    2e66:	0e 94 93 1b 	call	0x3726	; 0x3726 <_ZN12Adafruit_GFX8fillRectEiiiij>
        }

        display.drawBitmap(
    2e6a:	cc 24       	eor	r12, r12
    2e6c:	c3 94       	inc	r12
    2e6e:	d1 2c       	mov	r13, r1
    2e70:	8c 89       	ldd	r24, Y+20	; 0x14
    2e72:	9d 89       	ldd	r25, Y+21	; 0x15
    2e74:	8a 15       	cp	r24, r10
    2e76:	9b 05       	cpc	r25, r11
    2e78:	11 f4       	brne	.+4      	; 0x2e7e <_ZN2Ui15StateMenuHelper4drawEv+0xec>
    2e7a:	c1 2c       	mov	r12, r1
    2e7c:	d1 2c       	mov	r13, r1
            MENU_X,
            MENU_ITEM_H * i + yOffset,
            this->menuItems[i].icon(this->state),
    2e7e:	f5 01       	movw	r30, r10
    2e80:	ee 0f       	add	r30, r30
    2e82:	ff 1f       	adc	r31, r31
    2e84:	ee 0f       	add	r30, r30
    2e86:	ff 1f       	adc	r31, r31
    2e88:	ec 0f       	add	r30, r28
    2e8a:	fd 1f       	adc	r31, r29
                MENU_ITEM_H,
                WHITE
            );
        }

        display.drawBitmap(
    2e8c:	01 90       	ld	r0, Z+
    2e8e:	f0 81       	ld	r31, Z
    2e90:	e0 2d       	mov	r30, r0
    2e92:	88 89       	ldd	r24, Y+16	; 0x10
    2e94:	99 89       	ldd	r25, Y+17	; 0x11
    2e96:	09 95       	icall
            MENU_ITEM_H * i + yOffset,
            this->menuItems[i].icon(this->state),
            MENU_ITEM_W,
            MENU_ITEM_H,
            this->selectedItem == i ? BLACK : WHITE
        );
    2e98:	a5 01       	movw	r20, r10
    2e9a:	24 e0       	ldi	r18, 0x04	; 4
    2e9c:	44 0f       	add	r20, r20
    2e9e:	55 1f       	adc	r21, r21
    2ea0:	2a 95       	dec	r18
    2ea2:	e1 f7       	brne	.-8      	; 0x2e9c <_ZN2Ui15StateMenuHelper4drawEv+0x10a>
    2ea4:	48 0d       	add	r20, r8
    2ea6:	59 1d       	adc	r21, r9
    2ea8:	6f 89       	ldd	r22, Y+23	; 0x17
    2eaa:	06 2e       	mov	r0, r22
    2eac:	00 0c       	add	r0, r0
    2eae:	77 0b       	sbc	r23, r23
    2eb0:	60 59       	subi	r22, 0x90	; 144
    2eb2:	7f 4f       	sbci	r23, 0xFF	; 255
    2eb4:	30 e1       	ldi	r19, 0x10	; 16
    2eb6:	e3 2e       	mov	r14, r19
    2eb8:	f1 2c       	mov	r15, r1
    2eba:	00 e1       	ldi	r16, 0x10	; 16
    2ebc:	10 e0       	ldi	r17, 0x00	; 0
    2ebe:	9c 01       	movw	r18, r24
    2ec0:	8e e8       	ldi	r24, 0x8E	; 142
    2ec2:	92 e0       	ldi	r25, 0x02	; 2
    2ec4:	0e 94 c4 20 	call	0x4188	; 0x4188 <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij>
    );

    const uint8_t yOffset =
        SCREEN_HEIGHT_MID - ((this->activeItems * MENU_ITEM_H) / 2);

    for (uint8_t i = 0; i < this->activeItems; i++) {
    2ec8:	73 94       	inc	r7
    2eca:	a9 cf       	rjmp	.-174    	; 0x2e1e <_ZN2Ui15StateMenuHelper4drawEv+0x8c>
            MENU_ITEM_W,
            MENU_ITEM_H,
            this->selectedItem == i ? BLACK : WHITE
        );
    }
}
    2ecc:	df 91       	pop	r29
    2ece:	cf 91       	pop	r28
    2ed0:	1f 91       	pop	r17
    2ed2:	0f 91       	pop	r16
    2ed4:	ff 90       	pop	r15
    2ed6:	ef 90       	pop	r14
    2ed8:	df 90       	pop	r13
    2eda:	cf 90       	pop	r12
    2edc:	bf 90       	pop	r11
    2ede:	af 90       	pop	r10
    2ee0:	9f 90       	pop	r9
    2ee2:	8f 90       	pop	r8
    2ee4:	7f 90       	pop	r7
    2ee6:	08 95       	ret

00002ee8 <initVariant>:
    2ee8:	08 95       	ret

00002eea <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    2eea:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <init>

	initVariant();
    2eee:	0e 94 74 17 	call	0x2ee8	; 0x2ee8 <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    2ef2:	0e 94 ac 0c 	call	0x1958	; 0x1958 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    2ef6:	c0 e0       	ldi	r28, 0x00	; 0
    2ef8:	d0 e0       	ldi	r29, 0x00	; 0
#endif
	
	setup();
    
	for (;;) {
		loop();
    2efa:	0e 94 d0 0c 	call	0x19a0	; 0x19a0 <loop>
		if (serialEventRun) serialEventRun();
    2efe:	20 97       	sbiw	r28, 0x00	; 0
    2f00:	e1 f3       	breq	.-8      	; 0x2efa <main+0x10>
    2f02:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    2f06:	f9 cf       	rjmp	.-14     	; 0x2efa <main+0x10>

00002f08 <_Znwj>:
    2f08:	0c 94 42 30 	jmp	0x6084	; 0x6084 <malloc>

00002f0c <_ZN5Print17availableForWriteEv>:
size_t Print::println(unsigned char b, int base)
{
  size_t n = print(b, base);
  n += println();
  return n;
}
    2f0c:	80 e0       	ldi	r24, 0x00	; 0
    2f0e:	90 e0       	ldi	r25, 0x00	; 0
    2f10:	08 95       	ret

00002f12 <_ZN5Print5flushEv>:
    2f12:	08 95       	ret

00002f14 <_ZN5Print5writeEPKhj>:
    2f14:	cf 92       	push	r12
    2f16:	df 92       	push	r13
    2f18:	ef 92       	push	r14
    2f1a:	ff 92       	push	r15
    2f1c:	0f 93       	push	r16
    2f1e:	1f 93       	push	r17
    2f20:	cf 93       	push	r28
    2f22:	df 93       	push	r29
    2f24:	6c 01       	movw	r12, r24
    2f26:	7a 01       	movw	r14, r20
    2f28:	8b 01       	movw	r16, r22
    2f2a:	c0 e0       	ldi	r28, 0x00	; 0
    2f2c:	d0 e0       	ldi	r29, 0x00	; 0
    2f2e:	ce 15       	cp	r28, r14
    2f30:	df 05       	cpc	r29, r15
    2f32:	81 f0       	breq	.+32     	; 0x2f54 <_ZN5Print5writeEPKhj+0x40>
    2f34:	d8 01       	movw	r26, r16
    2f36:	6d 91       	ld	r22, X+
    2f38:	8d 01       	movw	r16, r26
    2f3a:	d6 01       	movw	r26, r12
    2f3c:	ed 91       	ld	r30, X+
    2f3e:	fc 91       	ld	r31, X
    2f40:	01 90       	ld	r0, Z+
    2f42:	f0 81       	ld	r31, Z
    2f44:	e0 2d       	mov	r30, r0
    2f46:	c6 01       	movw	r24, r12
    2f48:	09 95       	icall
    2f4a:	89 2b       	or	r24, r25
    2f4c:	11 f0       	breq	.+4      	; 0x2f52 <_ZN5Print5writeEPKhj+0x3e>
    2f4e:	21 96       	adiw	r28, 0x01	; 1
    2f50:	ee cf       	rjmp	.-36     	; 0x2f2e <_ZN5Print5writeEPKhj+0x1a>
    2f52:	7e 01       	movw	r14, r28
    2f54:	c7 01       	movw	r24, r14
    2f56:	df 91       	pop	r29
    2f58:	cf 91       	pop	r28
    2f5a:	1f 91       	pop	r17
    2f5c:	0f 91       	pop	r16
    2f5e:	ff 90       	pop	r15
    2f60:	ef 90       	pop	r14
    2f62:	df 90       	pop	r13
    2f64:	cf 90       	pop	r12
    2f66:	08 95       	ret

00002f68 <_ZN5Print5writeEPKc>:
    2f68:	61 15       	cp	r22, r1
    2f6a:	71 05       	cpc	r23, r1
    2f6c:	79 f0       	breq	.+30     	; 0x2f8c <_ZN5Print5writeEPKc+0x24>
    2f6e:	fb 01       	movw	r30, r22
    2f70:	01 90       	ld	r0, Z+
    2f72:	00 20       	and	r0, r0
    2f74:	e9 f7       	brne	.-6      	; 0x2f70 <_ZN5Print5writeEPKc+0x8>
    2f76:	31 97       	sbiw	r30, 0x01	; 1
    2f78:	af 01       	movw	r20, r30
    2f7a:	46 1b       	sub	r20, r22
    2f7c:	57 0b       	sbc	r21, r23
    2f7e:	dc 01       	movw	r26, r24
    2f80:	ed 91       	ld	r30, X+
    2f82:	fc 91       	ld	r31, X
    2f84:	02 80       	ldd	r0, Z+2	; 0x02
    2f86:	f3 81       	ldd	r31, Z+3	; 0x03
    2f88:	e0 2d       	mov	r30, r0
    2f8a:	09 94       	ijmp
    2f8c:	80 e0       	ldi	r24, 0x00	; 0
    2f8e:	90 e0       	ldi	r25, 0x00	; 0
    2f90:	08 95       	ret

00002f92 <_ZN5Print5printEPKc>:
    2f92:	0c 94 b4 17 	jmp	0x2f68	; 0x2f68 <_ZN5Print5writeEPKc>

00002f96 <_ZN5Print11printNumberEmh>:
    2f96:	8f 92       	push	r8
    2f98:	9f 92       	push	r9
    2f9a:	af 92       	push	r10
    2f9c:	bf 92       	push	r11
    2f9e:	ef 92       	push	r14
    2fa0:	ff 92       	push	r15
    2fa2:	0f 93       	push	r16
    2fa4:	1f 93       	push	r17
    2fa6:	cf 93       	push	r28
    2fa8:	df 93       	push	r29
    2faa:	cd b7       	in	r28, 0x3d	; 61
    2fac:	de b7       	in	r29, 0x3e	; 62
    2fae:	a1 97       	sbiw	r28, 0x21	; 33
    2fb0:	0f b6       	in	r0, 0x3f	; 63
    2fb2:	f8 94       	cli
    2fb4:	de bf       	out	0x3e, r29	; 62
    2fb6:	0f be       	out	0x3f, r0	; 63
    2fb8:	cd bf       	out	0x3d, r28	; 61
    2fba:	7c 01       	movw	r14, r24
    2fbc:	fa 01       	movw	r30, r20
    2fbe:	cb 01       	movw	r24, r22
    2fc0:	19 a2       	std	Y+33, r1	; 0x21
    2fc2:	22 30       	cpi	r18, 0x02	; 2
    2fc4:	08 f4       	brcc	.+2      	; 0x2fc8 <_ZN5Print11printNumberEmh+0x32>
    2fc6:	2a e0       	ldi	r18, 0x0A	; 10
    2fc8:	8e 01       	movw	r16, r28
    2fca:	0f 5d       	subi	r16, 0xDF	; 223
    2fcc:	1f 4f       	sbci	r17, 0xFF	; 255
    2fce:	82 2e       	mov	r8, r18
    2fd0:	91 2c       	mov	r9, r1
    2fd2:	a1 2c       	mov	r10, r1
    2fd4:	b1 2c       	mov	r11, r1
    2fd6:	bf 01       	movw	r22, r30
    2fd8:	a5 01       	movw	r20, r10
    2fda:	94 01       	movw	r18, r8
    2fdc:	0e 94 be 2f 	call	0x5f7c	; 0x5f7c <__udivmodsi4>
    2fe0:	f9 01       	movw	r30, r18
    2fe2:	ca 01       	movw	r24, r20
    2fe4:	01 50       	subi	r16, 0x01	; 1
    2fe6:	11 09       	sbc	r17, r1
    2fe8:	6a 30       	cpi	r22, 0x0A	; 10
    2fea:	10 f4       	brcc	.+4      	; 0x2ff0 <_ZN5Print11printNumberEmh+0x5a>
    2fec:	60 5d       	subi	r22, 0xD0	; 208
    2fee:	01 c0       	rjmp	.+2      	; 0x2ff2 <_ZN5Print11printNumberEmh+0x5c>
    2ff0:	69 5c       	subi	r22, 0xC9	; 201
    2ff2:	d8 01       	movw	r26, r16
    2ff4:	6c 93       	st	X, r22
    2ff6:	23 2b       	or	r18, r19
    2ff8:	24 2b       	or	r18, r20
    2ffa:	25 2b       	or	r18, r21
    2ffc:	61 f7       	brne	.-40     	; 0x2fd6 <_ZN5Print11printNumberEmh+0x40>
    2ffe:	b8 01       	movw	r22, r16
    3000:	c7 01       	movw	r24, r14
    3002:	0e 94 b4 17 	call	0x2f68	; 0x2f68 <_ZN5Print5writeEPKc>
    3006:	a1 96       	adiw	r28, 0x21	; 33
    3008:	0f b6       	in	r0, 0x3f	; 63
    300a:	f8 94       	cli
    300c:	de bf       	out	0x3e, r29	; 62
    300e:	0f be       	out	0x3f, r0	; 63
    3010:	cd bf       	out	0x3d, r28	; 61
    3012:	df 91       	pop	r29
    3014:	cf 91       	pop	r28
    3016:	1f 91       	pop	r17
    3018:	0f 91       	pop	r16
    301a:	ff 90       	pop	r15
    301c:	ef 90       	pop	r14
    301e:	bf 90       	pop	r11
    3020:	af 90       	pop	r10
    3022:	9f 90       	pop	r9
    3024:	8f 90       	pop	r8
    3026:	08 95       	ret

00003028 <_ZN5Print5printEmi>:
    3028:	21 15       	cp	r18, r1
    302a:	31 05       	cpc	r19, r1
    302c:	41 f4       	brne	.+16     	; 0x303e <_ZN5Print5printEmi+0x16>
    302e:	dc 01       	movw	r26, r24
    3030:	ed 91       	ld	r30, X+
    3032:	fc 91       	ld	r31, X
    3034:	01 90       	ld	r0, Z+
    3036:	f0 81       	ld	r31, Z
    3038:	e0 2d       	mov	r30, r0
    303a:	64 2f       	mov	r22, r20
    303c:	09 94       	ijmp
    303e:	0c 94 cb 17 	jmp	0x2f96	; 0x2f96 <_ZN5Print11printNumberEmh>

00003042 <_ZN5Print5printEji>:
{
  return print((long) n, base);
}

size_t Print::print(unsigned int n, int base)
{
    3042:	9a 01       	movw	r18, r20
  return print((unsigned long) n, base);
    3044:	ab 01       	movw	r20, r22
    3046:	60 e0       	ldi	r22, 0x00	; 0
    3048:	70 e0       	ldi	r23, 0x00	; 0
    304a:	0c 94 14 18 	jmp	0x3028	; 0x3028 <_ZN5Print5printEmi>

0000304e <__vector_16>:
#if defined(TIM0_OVF_vect)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    304e:	1f 92       	push	r1
    3050:	0f 92       	push	r0
    3052:	0f b6       	in	r0, 0x3f	; 63
    3054:	0f 92       	push	r0
    3056:	11 24       	eor	r1, r1
    3058:	2f 93       	push	r18
    305a:	3f 93       	push	r19
    305c:	8f 93       	push	r24
    305e:	9f 93       	push	r25
    3060:	af 93       	push	r26
    3062:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    3064:	80 91 cf 02 	lds	r24, 0x02CF	; 0x8002cf <timer0_millis>
    3068:	90 91 d0 02 	lds	r25, 0x02D0	; 0x8002d0 <timer0_millis+0x1>
    306c:	a0 91 d1 02 	lds	r26, 0x02D1	; 0x8002d1 <timer0_millis+0x2>
    3070:	b0 91 d2 02 	lds	r27, 0x02D2	; 0x8002d2 <timer0_millis+0x3>
	unsigned char f = timer0_fract;
    3074:	30 91 ce 02 	lds	r19, 0x02CE	; 0x8002ce <timer0_fract>

	m += MILLIS_INC;
	f += FRACT_INC;
    3078:	23 e0       	ldi	r18, 0x03	; 3
    307a:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
    307c:	2d 37       	cpi	r18, 0x7D	; 125
    307e:	20 f4       	brcc	.+8      	; 0x3088 <__vector_16+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
    3080:	01 96       	adiw	r24, 0x01	; 1
    3082:	a1 1d       	adc	r26, r1
    3084:	b1 1d       	adc	r27, r1
    3086:	05 c0       	rjmp	.+10     	; 0x3092 <__vector_16+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
    3088:	26 e8       	ldi	r18, 0x86	; 134
    308a:	23 0f       	add	r18, r19
		m += 1;
    308c:	02 96       	adiw	r24, 0x02	; 2
    308e:	a1 1d       	adc	r26, r1
    3090:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    3092:	20 93 ce 02 	sts	0x02CE, r18	; 0x8002ce <timer0_fract>
	timer0_millis = m;
    3096:	80 93 cf 02 	sts	0x02CF, r24	; 0x8002cf <timer0_millis>
    309a:	90 93 d0 02 	sts	0x02D0, r25	; 0x8002d0 <timer0_millis+0x1>
    309e:	a0 93 d1 02 	sts	0x02D1, r26	; 0x8002d1 <timer0_millis+0x2>
    30a2:	b0 93 d2 02 	sts	0x02D2, r27	; 0x8002d2 <timer0_millis+0x3>
	timer0_overflow_count++;
    30a6:	80 91 d3 02 	lds	r24, 0x02D3	; 0x8002d3 <timer0_overflow_count>
    30aa:	90 91 d4 02 	lds	r25, 0x02D4	; 0x8002d4 <timer0_overflow_count+0x1>
    30ae:	a0 91 d5 02 	lds	r26, 0x02D5	; 0x8002d5 <timer0_overflow_count+0x2>
    30b2:	b0 91 d6 02 	lds	r27, 0x02D6	; 0x8002d6 <timer0_overflow_count+0x3>
    30b6:	01 96       	adiw	r24, 0x01	; 1
    30b8:	a1 1d       	adc	r26, r1
    30ba:	b1 1d       	adc	r27, r1
    30bc:	80 93 d3 02 	sts	0x02D3, r24	; 0x8002d3 <timer0_overflow_count>
    30c0:	90 93 d4 02 	sts	0x02D4, r25	; 0x8002d4 <timer0_overflow_count+0x1>
    30c4:	a0 93 d5 02 	sts	0x02D5, r26	; 0x8002d5 <timer0_overflow_count+0x2>
    30c8:	b0 93 d6 02 	sts	0x02D6, r27	; 0x8002d6 <timer0_overflow_count+0x3>
}
    30cc:	bf 91       	pop	r27
    30ce:	af 91       	pop	r26
    30d0:	9f 91       	pop	r25
    30d2:	8f 91       	pop	r24
    30d4:	3f 91       	pop	r19
    30d6:	2f 91       	pop	r18
    30d8:	0f 90       	pop	r0
    30da:	0f be       	out	0x3f, r0	; 63
    30dc:	0f 90       	pop	r0
    30de:	1f 90       	pop	r1
    30e0:	18 95       	reti

000030e2 <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    30e2:	2f b7       	in	r18, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    30e4:	f8 94       	cli
	m = timer0_millis;
    30e6:	60 91 cf 02 	lds	r22, 0x02CF	; 0x8002cf <timer0_millis>
    30ea:	70 91 d0 02 	lds	r23, 0x02D0	; 0x8002d0 <timer0_millis+0x1>
    30ee:	80 91 d1 02 	lds	r24, 0x02D1	; 0x8002d1 <timer0_millis+0x2>
    30f2:	90 91 d2 02 	lds	r25, 0x02D2	; 0x8002d2 <timer0_millis+0x3>
	SREG = oldSREG;
    30f6:	2f bf       	out	0x3f, r18	; 63

	return m;
}
    30f8:	08 95       	ret

000030fa <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    30fa:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
    30fc:	f8 94       	cli
	m = timer0_overflow_count;
    30fe:	80 91 d3 02 	lds	r24, 0x02D3	; 0x8002d3 <timer0_overflow_count>
    3102:	90 91 d4 02 	lds	r25, 0x02D4	; 0x8002d4 <timer0_overflow_count+0x1>
    3106:	a0 91 d5 02 	lds	r26, 0x02D5	; 0x8002d5 <timer0_overflow_count+0x2>
    310a:	b0 91 d6 02 	lds	r27, 0x02D6	; 0x8002d6 <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
    310e:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    3110:	a8 9b       	sbis	0x15, 0	; 21
    3112:	05 c0       	rjmp	.+10     	; 0x311e <micros+0x24>
    3114:	2f 3f       	cpi	r18, 0xFF	; 255
    3116:	19 f0       	breq	.+6      	; 0x311e <micros+0x24>
		m++;
    3118:	01 96       	adiw	r24, 0x01	; 1
    311a:	a1 1d       	adc	r26, r1
    311c:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    311e:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    3120:	ba 2f       	mov	r27, r26
    3122:	a9 2f       	mov	r26, r25
    3124:	98 2f       	mov	r25, r24
    3126:	88 27       	eor	r24, r24
    3128:	82 0f       	add	r24, r18
    312a:	91 1d       	adc	r25, r1
    312c:	a1 1d       	adc	r26, r1
    312e:	b1 1d       	adc	r27, r1
    3130:	bc 01       	movw	r22, r24
    3132:	cd 01       	movw	r24, r26
    3134:	42 e0       	ldi	r20, 0x02	; 2
    3136:	66 0f       	add	r22, r22
    3138:	77 1f       	adc	r23, r23
    313a:	88 1f       	adc	r24, r24
    313c:	99 1f       	adc	r25, r25
    313e:	4a 95       	dec	r20
    3140:	d1 f7       	brne	.-12     	; 0x3136 <micros+0x3c>
}
    3142:	08 95       	ret

00003144 <delay>:

void delay(unsigned long ms)
{
    3144:	8f 92       	push	r8
    3146:	9f 92       	push	r9
    3148:	af 92       	push	r10
    314a:	bf 92       	push	r11
    314c:	cf 92       	push	r12
    314e:	df 92       	push	r13
    3150:	ef 92       	push	r14
    3152:	ff 92       	push	r15
    3154:	6b 01       	movw	r12, r22
    3156:	7c 01       	movw	r14, r24
	uint32_t start = micros();
    3158:	0e 94 7d 18 	call	0x30fa	; 0x30fa <micros>
    315c:	4b 01       	movw	r8, r22
    315e:	5c 01       	movw	r10, r24

	while (ms > 0) {
    3160:	c1 14       	cp	r12, r1
    3162:	d1 04       	cpc	r13, r1
    3164:	e1 04       	cpc	r14, r1
    3166:	f1 04       	cpc	r15, r1
    3168:	01 f1       	breq	.+64     	; 0x31aa <delay+0x66>
		yield();
    316a:	0e 94 b7 2c 	call	0x596e	; 0x596e <yield>
		while ( ms > 0 && (micros() - start) >= 1000) {
    316e:	0e 94 7d 18 	call	0x30fa	; 0x30fa <micros>
    3172:	dc 01       	movw	r26, r24
    3174:	cb 01       	movw	r24, r22
    3176:	88 19       	sub	r24, r8
    3178:	99 09       	sbc	r25, r9
    317a:	aa 09       	sbc	r26, r10
    317c:	bb 09       	sbc	r27, r11
    317e:	88 3e       	cpi	r24, 0xE8	; 232
    3180:	93 40       	sbci	r25, 0x03	; 3
    3182:	a1 05       	cpc	r26, r1
    3184:	b1 05       	cpc	r27, r1
    3186:	60 f3       	brcs	.-40     	; 0x3160 <delay+0x1c>
			ms--;
    3188:	21 e0       	ldi	r18, 0x01	; 1
    318a:	c2 1a       	sub	r12, r18
    318c:	d1 08       	sbc	r13, r1
    318e:	e1 08       	sbc	r14, r1
    3190:	f1 08       	sbc	r15, r1
			start += 1000;
    3192:	88 ee       	ldi	r24, 0xE8	; 232
    3194:	88 0e       	add	r8, r24
    3196:	83 e0       	ldi	r24, 0x03	; 3
    3198:	98 1e       	adc	r9, r24
    319a:	a1 1c       	adc	r10, r1
    319c:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
    319e:	c1 14       	cp	r12, r1
    31a0:	d1 04       	cpc	r13, r1
    31a2:	e1 04       	cpc	r14, r1
    31a4:	f1 04       	cpc	r15, r1
    31a6:	19 f7       	brne	.-58     	; 0x316e <delay+0x2a>
    31a8:	db cf       	rjmp	.-74     	; 0x3160 <delay+0x1c>
			ms--;
			start += 1000;
		}
	}
}
    31aa:	ff 90       	pop	r15
    31ac:	ef 90       	pop	r14
    31ae:	df 90       	pop	r13
    31b0:	cf 90       	pop	r12
    31b2:	bf 90       	pop	r11
    31b4:	af 90       	pop	r10
    31b6:	9f 90       	pop	r9
    31b8:	8f 90       	pop	r8
    31ba:	08 95       	ret

000031bc <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
    31bc:	82 30       	cpi	r24, 0x02	; 2
    31be:	91 05       	cpc	r25, r1
    31c0:	38 f0       	brcs	.+14     	; 0x31d0 <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
    31c2:	88 0f       	add	r24, r24
    31c4:	99 1f       	adc	r25, r25
    31c6:	88 0f       	add	r24, r24
    31c8:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
    31ca:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
    31cc:	01 97       	sbiw	r24, 0x01	; 1
    31ce:	f1 f7       	brne	.-4      	; 0x31cc <delayMicroseconds+0x10>
    31d0:	08 95       	ret

000031d2 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    31d2:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    31d4:	84 b5       	in	r24, 0x24	; 36
    31d6:	82 60       	ori	r24, 0x02	; 2
    31d8:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    31da:	84 b5       	in	r24, 0x24	; 36
    31dc:	81 60       	ori	r24, 0x01	; 1
    31de:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    31e0:	85 b5       	in	r24, 0x25	; 37
    31e2:	82 60       	ori	r24, 0x02	; 2
    31e4:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    31e6:	85 b5       	in	r24, 0x25	; 37
    31e8:	81 60       	ori	r24, 0x01	; 1
    31ea:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    31ec:	ee e6       	ldi	r30, 0x6E	; 110
    31ee:	f0 e0       	ldi	r31, 0x00	; 0
    31f0:	80 81       	ld	r24, Z
    31f2:	81 60       	ori	r24, 0x01	; 1
    31f4:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    31f6:	e1 e8       	ldi	r30, 0x81	; 129
    31f8:	f0 e0       	ldi	r31, 0x00	; 0
    31fa:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    31fc:	80 81       	ld	r24, Z
    31fe:	82 60       	ori	r24, 0x02	; 2
    3200:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    3202:	80 81       	ld	r24, Z
    3204:	81 60       	ori	r24, 0x01	; 1
    3206:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    3208:	e0 e8       	ldi	r30, 0x80	; 128
    320a:	f0 e0       	ldi	r31, 0x00	; 0
    320c:	80 81       	ld	r24, Z
    320e:	81 60       	ori	r24, 0x01	; 1
    3210:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    3212:	e1 eb       	ldi	r30, 0xB1	; 177
    3214:	f0 e0       	ldi	r31, 0x00	; 0
    3216:	80 81       	ld	r24, Z
    3218:	84 60       	ori	r24, 0x04	; 4
    321a:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    321c:	e0 eb       	ldi	r30, 0xB0	; 176
    321e:	f0 e0       	ldi	r31, 0x00	; 0
    3220:	80 81       	ld	r24, Z
    3222:	81 60       	ori	r24, 0x01	; 1
    3224:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    3226:	ea e7       	ldi	r30, 0x7A	; 122
    3228:	f0 e0       	ldi	r31, 0x00	; 0
    322a:	80 81       	ld	r24, Z
    322c:	84 60       	ori	r24, 0x04	; 4
    322e:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    3230:	80 81       	ld	r24, Z
    3232:	82 60       	ori	r24, 0x02	; 2
    3234:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    3236:	80 81       	ld	r24, Z
    3238:	81 60       	ori	r24, 0x01	; 1
    323a:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    323c:	80 81       	ld	r24, Z
    323e:	80 68       	ori	r24, 0x80	; 128
    3240:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    3242:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    3246:	08 95       	ret

00003248 <analogRead>:
#elif defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
#elif defined(__AVR_ATmega1284__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega644__) || defined(__AVR_ATmega644A__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__)
	if (pin >= 24) pin -= 24; // allow for channel or pin numbers
#else
	if (pin >= 14) pin -= 14; // allow for channel or pin numbers
    3248:	8e 30       	cpi	r24, 0x0E	; 14
    324a:	08 f0       	brcs	.+2      	; 0x324e <analogRead+0x6>
    324c:	8e 50       	subi	r24, 0x0E	; 14
	// to 0 (the default).
#if defined(ADMUX)
#if defined(__AVR_ATtiny25__) || defined(__AVR_ATtiny45__) || defined(__AVR_ATtiny85__)
	ADMUX = (analog_reference << 4) | (pin & 0x07);
#else
	ADMUX = (analog_reference << 6) | (pin & 0x07);
    324e:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <analog_reference>
    3252:	90 e4       	ldi	r25, 0x40	; 64
    3254:	29 9f       	mul	r18, r25
    3256:	90 01       	movw	r18, r0
    3258:	11 24       	eor	r1, r1
    325a:	87 70       	andi	r24, 0x07	; 7
    325c:	82 2b       	or	r24, r18
    325e:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
    3262:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    3266:	80 64       	ori	r24, 0x40	; 64
    3268:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
    326c:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    3270:	86 fd       	sbrc	r24, 6
    3272:	fc cf       	rjmp	.-8      	; 0x326c <analogRead+0x24>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
    3274:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
	high = ADCH;
    3278:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
	low  = 0;
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
    327c:	90 e0       	ldi	r25, 0x00	; 0
}
    327e:	92 2b       	or	r25, r18
    3280:	08 95       	ret

00003282 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    3282:	83 30       	cpi	r24, 0x03	; 3
    3284:	81 f0       	breq	.+32     	; 0x32a6 <turnOffPWM+0x24>
    3286:	28 f4       	brcc	.+10     	; 0x3292 <turnOffPWM+0x10>
    3288:	81 30       	cpi	r24, 0x01	; 1
    328a:	99 f0       	breq	.+38     	; 0x32b2 <turnOffPWM+0x30>
    328c:	82 30       	cpi	r24, 0x02	; 2
    328e:	a1 f0       	breq	.+40     	; 0x32b8 <turnOffPWM+0x36>
    3290:	08 95       	ret
    3292:	87 30       	cpi	r24, 0x07	; 7
    3294:	a9 f0       	breq	.+42     	; 0x32c0 <turnOffPWM+0x3e>
    3296:	88 30       	cpi	r24, 0x08	; 8
    3298:	b9 f0       	breq	.+46     	; 0x32c8 <turnOffPWM+0x46>
    329a:	84 30       	cpi	r24, 0x04	; 4
    329c:	d1 f4       	brne	.+52     	; 0x32d2 <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    329e:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    32a2:	8f 7d       	andi	r24, 0xDF	; 223
    32a4:	03 c0       	rjmp	.+6      	; 0x32ac <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    32a6:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    32aa:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    32ac:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    32b0:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    32b2:	84 b5       	in	r24, 0x24	; 36
    32b4:	8f 77       	andi	r24, 0x7F	; 127
    32b6:	02 c0       	rjmp	.+4      	; 0x32bc <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    32b8:	84 b5       	in	r24, 0x24	; 36
    32ba:	8f 7d       	andi	r24, 0xDF	; 223
    32bc:	84 bd       	out	0x24, r24	; 36
    32be:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    32c0:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    32c4:	8f 77       	andi	r24, 0x7F	; 127
    32c6:	03 c0       	rjmp	.+6      	; 0x32ce <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    32c8:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    32cc:	8f 7d       	andi	r24, 0xDF	; 223
    32ce:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    32d2:	08 95       	ret

000032d4 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    32d4:	cf 93       	push	r28
    32d6:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    32d8:	90 e0       	ldi	r25, 0x00	; 0
    32da:	fc 01       	movw	r30, r24
    32dc:	ec 54       	subi	r30, 0x4C	; 76
    32de:	f7 4f       	sbci	r31, 0xF7	; 247
    32e0:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    32e2:	fc 01       	movw	r30, r24
    32e4:	e8 53       	subi	r30, 0x38	; 56
    32e6:	f7 4f       	sbci	r31, 0xF7	; 247
    32e8:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    32ea:	88 23       	and	r24, r24
    32ec:	61 f1       	breq	.+88     	; 0x3346 <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    32ee:	90 e0       	ldi	r25, 0x00	; 0
    32f0:	88 0f       	add	r24, r24
    32f2:	99 1f       	adc	r25, r25
    32f4:	fc 01       	movw	r30, r24
    32f6:	e0 51       	subi	r30, 0x10	; 16
    32f8:	f7 4f       	sbci	r31, 0xF7	; 247
    32fa:	c5 91       	lpm	r28, Z+
    32fc:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    32fe:	fc 01       	movw	r30, r24
    3300:	ea 51       	subi	r30, 0x1A	; 26
    3302:	f7 4f       	sbci	r31, 0xF7	; 247
    3304:	a5 91       	lpm	r26, Z+
    3306:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    3308:	61 11       	cpse	r22, r1
    330a:	09 c0       	rjmp	.+18     	; 0x331e <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    330c:	9f b7       	in	r25, 0x3f	; 63
                cli();
    330e:	f8 94       	cli
		*reg &= ~bit;
    3310:	88 81       	ld	r24, Y
    3312:	20 95       	com	r18
    3314:	82 23       	and	r24, r18
    3316:	88 83       	st	Y, r24
		*out &= ~bit;
    3318:	ec 91       	ld	r30, X
    331a:	2e 23       	and	r18, r30
    331c:	0b c0       	rjmp	.+22     	; 0x3334 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    331e:	62 30       	cpi	r22, 0x02	; 2
    3320:	61 f4       	brne	.+24     	; 0x333a <pinMode+0x66>
		uint8_t oldSREG = SREG;
    3322:	9f b7       	in	r25, 0x3f	; 63
                cli();
    3324:	f8 94       	cli
		*reg &= ~bit;
    3326:	88 81       	ld	r24, Y
    3328:	32 2f       	mov	r19, r18
    332a:	30 95       	com	r19
    332c:	83 23       	and	r24, r19
    332e:	88 83       	st	Y, r24
		*out |= bit;
    3330:	ec 91       	ld	r30, X
    3332:	2e 2b       	or	r18, r30
    3334:	2c 93       	st	X, r18
		SREG = oldSREG;
    3336:	9f bf       	out	0x3f, r25	; 63
    3338:	06 c0       	rjmp	.+12     	; 0x3346 <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    333a:	8f b7       	in	r24, 0x3f	; 63
                cli();
    333c:	f8 94       	cli
		*reg |= bit;
    333e:	e8 81       	ld	r30, Y
    3340:	2e 2b       	or	r18, r30
    3342:	28 83       	st	Y, r18
		SREG = oldSREG;
    3344:	8f bf       	out	0x3f, r24	; 63
	}
}
    3346:	df 91       	pop	r29
    3348:	cf 91       	pop	r28
    334a:	08 95       	ret

0000334c <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    334c:	1f 93       	push	r17
    334e:	cf 93       	push	r28
    3350:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    3352:	28 2f       	mov	r18, r24
    3354:	30 e0       	ldi	r19, 0x00	; 0
    3356:	f9 01       	movw	r30, r18
    3358:	e0 56       	subi	r30, 0x60	; 96
    335a:	f7 4f       	sbci	r31, 0xF7	; 247
    335c:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    335e:	f9 01       	movw	r30, r18
    3360:	ec 54       	subi	r30, 0x4C	; 76
    3362:	f7 4f       	sbci	r31, 0xF7	; 247
    3364:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    3366:	f9 01       	movw	r30, r18
    3368:	e8 53       	subi	r30, 0x38	; 56
    336a:	f7 4f       	sbci	r31, 0xF7	; 247
    336c:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    336e:	cc 23       	and	r28, r28
    3370:	c1 f0       	breq	.+48     	; 0x33a2 <digitalWrite+0x56>
    3372:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    3374:	81 11       	cpse	r24, r1
    3376:	0e 94 41 19 	call	0x3282	; 0x3282 <turnOffPWM>

	out = portOutputRegister(port);
    337a:	ec 2f       	mov	r30, r28
    337c:	f0 e0       	ldi	r31, 0x00	; 0
    337e:	ee 0f       	add	r30, r30
    3380:	ff 1f       	adc	r31, r31
    3382:	ea 51       	subi	r30, 0x1A	; 26
    3384:	f7 4f       	sbci	r31, 0xF7	; 247
    3386:	a5 91       	lpm	r26, Z+
    3388:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    338a:	9f b7       	in	r25, 0x3f	; 63
	cli();
    338c:	f8 94       	cli

	if (val == LOW) {
    338e:	11 11       	cpse	r17, r1
    3390:	04 c0       	rjmp	.+8      	; 0x339a <digitalWrite+0x4e>
		*out &= ~bit;
    3392:	8c 91       	ld	r24, X
    3394:	d0 95       	com	r29
    3396:	d8 23       	and	r29, r24
    3398:	02 c0       	rjmp	.+4      	; 0x339e <digitalWrite+0x52>
	} else {
		*out |= bit;
    339a:	ec 91       	ld	r30, X
    339c:	de 2b       	or	r29, r30
    339e:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    33a0:	9f bf       	out	0x3f, r25	; 63
}
    33a2:	df 91       	pop	r29
    33a4:	cf 91       	pop	r28
    33a6:	1f 91       	pop	r17
    33a8:	08 95       	ret

000033aa <digitalRead>:

int digitalRead(uint8_t pin)
{
    33aa:	cf 93       	push	r28
    33ac:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    33ae:	28 2f       	mov	r18, r24
    33b0:	30 e0       	ldi	r19, 0x00	; 0
    33b2:	f9 01       	movw	r30, r18
    33b4:	e0 56       	subi	r30, 0x60	; 96
    33b6:	f7 4f       	sbci	r31, 0xF7	; 247
    33b8:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    33ba:	f9 01       	movw	r30, r18
    33bc:	ec 54       	subi	r30, 0x4C	; 76
    33be:	f7 4f       	sbci	r31, 0xF7	; 247
    33c0:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    33c2:	f9 01       	movw	r30, r18
    33c4:	e8 53       	subi	r30, 0x38	; 56
    33c6:	f7 4f       	sbci	r31, 0xF7	; 247
    33c8:	c4 91       	lpm	r28, Z

	if (port == NOT_A_PIN) return LOW;
    33ca:	cc 23       	and	r28, r28
    33cc:	91 f0       	breq	.+36     	; 0x33f2 <digitalRead+0x48>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    33ce:	81 11       	cpse	r24, r1
    33d0:	0e 94 41 19 	call	0x3282	; 0x3282 <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
    33d4:	ec 2f       	mov	r30, r28
    33d6:	f0 e0       	ldi	r31, 0x00	; 0
    33d8:	ee 0f       	add	r30, r30
    33da:	ff 1f       	adc	r31, r31
    33dc:	e4 52       	subi	r30, 0x24	; 36
    33de:	f7 4f       	sbci	r31, 0xF7	; 247
    33e0:	a5 91       	lpm	r26, Z+
    33e2:	b4 91       	lpm	r27, Z
    33e4:	ec 91       	ld	r30, X
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
    33e6:	ed 23       	and	r30, r29
    33e8:	81 e0       	ldi	r24, 0x01	; 1
    33ea:	90 e0       	ldi	r25, 0x00	; 0
    33ec:	21 f4       	brne	.+8      	; 0x33f6 <digitalRead+0x4c>
    33ee:	80 e0       	ldi	r24, 0x00	; 0
    33f0:	02 c0       	rjmp	.+4      	; 0x33f6 <digitalRead+0x4c>
    33f2:	80 e0       	ldi	r24, 0x00	; 0
    33f4:	90 e0       	ldi	r25, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
    33f6:	df 91       	pop	r29
    33f8:	cf 91       	pop	r28
    33fa:	08 95       	ret

000033fc <_Z3maplllll>:
  long diff = howbig - howsmall;
  return random(diff) + howsmall;
}

long map(long x, long in_min, long in_max, long out_min, long out_max)
{
    33fc:	4f 92       	push	r4
    33fe:	5f 92       	push	r5
    3400:	6f 92       	push	r6
    3402:	7f 92       	push	r7
    3404:	af 92       	push	r10
    3406:	bf 92       	push	r11
    3408:	cf 92       	push	r12
    340a:	df 92       	push	r13
    340c:	ef 92       	push	r14
    340e:	ff 92       	push	r15
    3410:	0f 93       	push	r16
    3412:	1f 93       	push	r17
    3414:	cf 93       	push	r28
    3416:	df 93       	push	r29
    3418:	cd b7       	in	r28, 0x3d	; 61
    341a:	de b7       	in	r29, 0x3e	; 62
    341c:	29 01       	movw	r4, r18
    341e:	3a 01       	movw	r6, r20
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    3420:	9b 01       	movw	r18, r22
    3422:	ac 01       	movw	r20, r24
    3424:	24 19       	sub	r18, r4
    3426:	35 09       	sbc	r19, r5
    3428:	46 09       	sbc	r20, r6
    342a:	57 09       	sbc	r21, r7
    342c:	89 89       	ldd	r24, Y+17	; 0x11
    342e:	9a 89       	ldd	r25, Y+18	; 0x12
    3430:	ab 89       	ldd	r26, Y+19	; 0x13
    3432:	bc 89       	ldd	r27, Y+20	; 0x14
    3434:	bc 01       	movw	r22, r24
    3436:	cd 01       	movw	r24, r26
    3438:	6a 19       	sub	r22, r10
    343a:	7b 09       	sbc	r23, r11
    343c:	8c 09       	sbc	r24, r12
    343e:	9d 09       	sbc	r25, r13
    3440:	0e 94 9a 2f 	call	0x5f34	; 0x5f34 <__mulsi3>
    3444:	a8 01       	movw	r20, r16
    3446:	97 01       	movw	r18, r14
    3448:	24 19       	sub	r18, r4
    344a:	35 09       	sbc	r19, r5
    344c:	46 09       	sbc	r20, r6
    344e:	57 09       	sbc	r21, r7
    3450:	0e 94 e0 2f 	call	0x5fc0	; 0x5fc0 <__divmodsi4>
    3454:	ca 01       	movw	r24, r20
    3456:	b9 01       	movw	r22, r18
    3458:	6a 0d       	add	r22, r10
    345a:	7b 1d       	adc	r23, r11
    345c:	8c 1d       	adc	r24, r12
    345e:	9d 1d       	adc	r25, r13
}
    3460:	df 91       	pop	r29
    3462:	cf 91       	pop	r28
    3464:	1f 91       	pop	r17
    3466:	0f 91       	pop	r16
    3468:	ff 90       	pop	r15
    346a:	ef 90       	pop	r14
    346c:	df 90       	pop	r13
    346e:	cf 90       	pop	r12
    3470:	bf 90       	pop	r11
    3472:	af 90       	pop	r10
    3474:	7f 90       	pop	r7
    3476:	6f 90       	pop	r6
    3478:	5f 90       	pop	r5
    347a:	4f 90       	pop	r4
    347c:	08 95       	ret

0000347e <_ZN12Adafruit_GFX9writeLineEiiiij>:
*/
/**************************************************************************/
void Adafruit_GFX::drawChar(int16_t x, int16_t y, unsigned char c,
                            uint16_t color, uint16_t bg, uint8_t size) {
  drawChar(x, y, c, color, bg, size, size);
}
    347e:	2f 92       	push	r2
    3480:	3f 92       	push	r3
    3482:	4f 92       	push	r4
    3484:	5f 92       	push	r5
    3486:	6f 92       	push	r6
    3488:	7f 92       	push	r7
    348a:	8f 92       	push	r8
    348c:	9f 92       	push	r9
    348e:	af 92       	push	r10
    3490:	bf 92       	push	r11
    3492:	cf 92       	push	r12
    3494:	df 92       	push	r13
    3496:	ef 92       	push	r14
    3498:	ff 92       	push	r15
    349a:	0f 93       	push	r16
    349c:	1f 93       	push	r17
    349e:	cf 93       	push	r28
    34a0:	df 93       	push	r29
    34a2:	00 d0       	rcall	.+0      	; 0x34a4 <_ZN12Adafruit_GFX9writeLineEiiiij+0x26>
    34a4:	00 d0       	rcall	.+0      	; 0x34a6 <_ZN12Adafruit_GFX9writeLineEiiiij+0x28>
    34a6:	00 d0       	rcall	.+0      	; 0x34a8 <_ZN12Adafruit_GFX9writeLineEiiiij+0x2a>
    34a8:	cd b7       	in	r28, 0x3d	; 61
    34aa:	de b7       	in	r29, 0x3e	; 62
    34ac:	2c 01       	movw	r4, r24
    34ae:	7e 83       	std	Y+6, r23	; 0x06
    34b0:	6d 83       	std	Y+5, r22	; 0x05
    34b2:	6a 01       	movw	r12, r20
    34b4:	59 01       	movw	r10, r18
    34b6:	c8 01       	movw	r24, r16
    34b8:	fc 82       	std	Y+4, r15	; 0x04
    34ba:	eb 82       	std	Y+3, r14	; 0x03
    34bc:	48 01       	movw	r8, r16
    34be:	84 1a       	sub	r8, r20
    34c0:	95 0a       	sbc	r9, r21
    34c2:	97 fe       	sbrs	r9, 7
    34c4:	03 c0       	rjmp	.+6      	; 0x34cc <_ZN12Adafruit_GFX9writeLineEiiiij+0x4e>
    34c6:	91 94       	neg	r9
    34c8:	81 94       	neg	r8
    34ca:	91 08       	sbc	r9, r1
    34cc:	35 01       	movw	r6, r10
    34ce:	2d 81       	ldd	r18, Y+5	; 0x05
    34d0:	3e 81       	ldd	r19, Y+6	; 0x06
    34d2:	62 1a       	sub	r6, r18
    34d4:	73 0a       	sbc	r7, r19
    34d6:	77 fe       	sbrs	r7, 7
    34d8:	03 c0       	rjmp	.+6      	; 0x34e0 <_ZN12Adafruit_GFX9writeLineEiiiij+0x62>
    34da:	71 94       	neg	r7
    34dc:	61 94       	neg	r6
    34de:	71 08       	sbc	r7, r1
    34e0:	68 14       	cp	r6, r8
    34e2:	79 04       	cpc	r7, r9
    34e4:	5c f4       	brge	.+22     	; 0x34fc <_ZN12Adafruit_GFX9writeLineEiiiij+0x7e>
    34e6:	3a 2d       	mov	r19, r10
    34e8:	2b 2d       	mov	r18, r11
    34ea:	5c 01       	movw	r10, r24
    34ec:	83 2f       	mov	r24, r19
    34ee:	92 2f       	mov	r25, r18
    34f0:	3d 81       	ldd	r19, Y+5	; 0x05
    34f2:	2e 81       	ldd	r18, Y+6	; 0x06
    34f4:	de 82       	std	Y+6, r13	; 0x06
    34f6:	cd 82       	std	Y+5, r12	; 0x05
    34f8:	c3 2e       	mov	r12, r19
    34fa:	d2 2e       	mov	r13, r18
    34fc:	ad 81       	ldd	r26, Y+5	; 0x05
    34fe:	be 81       	ldd	r27, Y+6	; 0x06
    3500:	aa 16       	cp	r10, r26
    3502:	bb 06       	cpc	r11, r27
    3504:	5c f4       	brge	.+22     	; 0x351c <_ZN12Adafruit_GFX9writeLineEiiiij+0x9e>
    3506:	3c 2d       	mov	r19, r12
    3508:	2d 2d       	mov	r18, r13
    350a:	6c 01       	movw	r12, r24
    350c:	83 2f       	mov	r24, r19
    350e:	92 2f       	mov	r25, r18
    3510:	3d 81       	ldd	r19, Y+5	; 0x05
    3512:	2e 81       	ldd	r18, Y+6	; 0x06
    3514:	be 82       	std	Y+6, r11	; 0x06
    3516:	ad 82       	std	Y+5, r10	; 0x05
    3518:	a3 2e       	mov	r10, r19
    351a:	b2 2e       	mov	r11, r18
    351c:	85 01       	movw	r16, r10
    351e:	2d 81       	ldd	r18, Y+5	; 0x05
    3520:	3e 81       	ldd	r19, Y+6	; 0x06
    3522:	02 1b       	sub	r16, r18
    3524:	13 0b       	sbc	r17, r19
    3526:	1c 01       	movw	r2, r24
    3528:	2c 18       	sub	r2, r12
    352a:	3d 08       	sbc	r3, r13
    352c:	37 fe       	sbrs	r3, 7
    352e:	03 c0       	rjmp	.+6      	; 0x3536 <_ZN12Adafruit_GFX9writeLineEiiiij+0xb8>
    3530:	31 94       	neg	r3
    3532:	21 94       	neg	r2
    3534:	31 08       	sbc	r3, r1
    3536:	78 01       	movw	r14, r16
    3538:	17 ff       	sbrs	r17, 7
    353a:	03 c0       	rjmp	.+6      	; 0x3542 <_ZN12Adafruit_GFX9writeLineEiiiij+0xc4>
    353c:	3f ef       	ldi	r19, 0xFF	; 255
    353e:	e3 1a       	sub	r14, r19
    3540:	f3 0a       	sbc	r15, r19
    3542:	f5 94       	asr	r15
    3544:	e7 94       	ror	r14
    3546:	c8 16       	cp	r12, r24
    3548:	d9 06       	cpc	r13, r25
    354a:	2c f0       	brlt	.+10     	; 0x3556 <_ZN12Adafruit_GFX9writeLineEiiiij+0xd8>
    354c:	8f ef       	ldi	r24, 0xFF	; 255
    354e:	9f ef       	ldi	r25, 0xFF	; 255
    3550:	9a 83       	std	Y+2, r25	; 0x02
    3552:	89 83       	std	Y+1, r24	; 0x01
    3554:	04 c0       	rjmp	.+8      	; 0x355e <_ZN12Adafruit_GFX9writeLineEiiiij+0xe0>
    3556:	a1 e0       	ldi	r26, 0x01	; 1
    3558:	b0 e0       	ldi	r27, 0x00	; 0
    355a:	ba 83       	std	Y+2, r27	; 0x02
    355c:	a9 83       	std	Y+1, r26	; 0x01
    355e:	2d 81       	ldd	r18, Y+5	; 0x05
    3560:	3e 81       	ldd	r19, Y+6	; 0x06
    3562:	a2 16       	cp	r10, r18
    3564:	b3 06       	cpc	r11, r19
    3566:	24 f1       	brlt	.+72     	; 0x35b0 <_ZN12Adafruit_GFX9writeLineEiiiij+0x132>
    3568:	d2 01       	movw	r26, r4
    356a:	ed 91       	ld	r30, X+
    356c:	fc 91       	ld	r31, X
    356e:	04 84       	ldd	r0, Z+12	; 0x0c
    3570:	f5 85       	ldd	r31, Z+13	; 0x0d
    3572:	e0 2d       	mov	r30, r0
    3574:	2b 81       	ldd	r18, Y+3	; 0x03
    3576:	3c 81       	ldd	r19, Y+4	; 0x04
    3578:	68 14       	cp	r6, r8
    357a:	79 04       	cpc	r7, r9
    357c:	24 f4       	brge	.+8      	; 0x3586 <_ZN12Adafruit_GFX9writeLineEiiiij+0x108>
    357e:	4d 81       	ldd	r20, Y+5	; 0x05
    3580:	5e 81       	ldd	r21, Y+6	; 0x06
    3582:	b6 01       	movw	r22, r12
    3584:	03 c0       	rjmp	.+6      	; 0x358c <_ZN12Adafruit_GFX9writeLineEiiiij+0x10e>
    3586:	a6 01       	movw	r20, r12
    3588:	6d 81       	ldd	r22, Y+5	; 0x05
    358a:	7e 81       	ldd	r23, Y+6	; 0x06
    358c:	c2 01       	movw	r24, r4
    358e:	09 95       	icall
    3590:	e2 18       	sub	r14, r2
    3592:	f3 08       	sbc	r15, r3
    3594:	f7 fe       	sbrs	r15, 7
    3596:	06 c0       	rjmp	.+12     	; 0x35a4 <_ZN12Adafruit_GFX9writeLineEiiiij+0x126>
    3598:	29 81       	ldd	r18, Y+1	; 0x01
    359a:	3a 81       	ldd	r19, Y+2	; 0x02
    359c:	c2 0e       	add	r12, r18
    359e:	d3 1e       	adc	r13, r19
    35a0:	e0 0e       	add	r14, r16
    35a2:	f1 1e       	adc	r15, r17
    35a4:	8d 81       	ldd	r24, Y+5	; 0x05
    35a6:	9e 81       	ldd	r25, Y+6	; 0x06
    35a8:	01 96       	adiw	r24, 0x01	; 1
    35aa:	9e 83       	std	Y+6, r25	; 0x06
    35ac:	8d 83       	std	Y+5, r24	; 0x05
    35ae:	d7 cf       	rjmp	.-82     	; 0x355e <_ZN12Adafruit_GFX9writeLineEiiiij+0xe0>
    35b0:	26 96       	adiw	r28, 0x06	; 6
    35b2:	0f b6       	in	r0, 0x3f	; 63
    35b4:	f8 94       	cli
    35b6:	de bf       	out	0x3e, r29	; 62
    35b8:	0f be       	out	0x3f, r0	; 63
    35ba:	cd bf       	out	0x3d, r28	; 61
    35bc:	df 91       	pop	r29
    35be:	cf 91       	pop	r28
    35c0:	1f 91       	pop	r17
    35c2:	0f 91       	pop	r16
    35c4:	ff 90       	pop	r15
    35c6:	ef 90       	pop	r14
    35c8:	df 90       	pop	r13
    35ca:	cf 90       	pop	r12
    35cc:	bf 90       	pop	r11
    35ce:	af 90       	pop	r10
    35d0:	9f 90       	pop	r9
    35d2:	8f 90       	pop	r8
    35d4:	7f 90       	pop	r7
    35d6:	6f 90       	pop	r6
    35d8:	5f 90       	pop	r5
    35da:	4f 90       	pop	r4
    35dc:	3f 90       	pop	r3
    35de:	2f 90       	pop	r2
    35e0:	08 95       	ret

000035e2 <_ZN12Adafruit_GFX10writePixelEiij>:
    35e2:	dc 01       	movw	r26, r24
    35e4:	ed 91       	ld	r30, X+
    35e6:	fc 91       	ld	r31, X
    35e8:	00 84       	ldd	r0, Z+8	; 0x08
    35ea:	f1 85       	ldd	r31, Z+9	; 0x09
    35ec:	e0 2d       	mov	r30, r0
    35ee:	09 94       	ijmp

000035f0 <_ZN12Adafruit_GFX14writeFastVLineEiiij>:
    35f0:	0f 93       	push	r16
    35f2:	1f 93       	push	r17
    35f4:	dc 01       	movw	r26, r24
    35f6:	ed 91       	ld	r30, X+
    35f8:	fc 91       	ld	r31, X
    35fa:	04 8c       	ldd	r0, Z+28	; 0x1c
    35fc:	f5 8d       	ldd	r31, Z+29	; 0x1d
    35fe:	e0 2d       	mov	r30, r0
    3600:	09 95       	icall
    3602:	1f 91       	pop	r17
    3604:	0f 91       	pop	r16
    3606:	08 95       	ret

00003608 <_ZN12Adafruit_GFX14writeFastHLineEiiij>:
    3608:	0f 93       	push	r16
    360a:	1f 93       	push	r17
    360c:	dc 01       	movw	r26, r24
    360e:	ed 91       	ld	r30, X+
    3610:	fc 91       	ld	r31, X
    3612:	06 8c       	ldd	r0, Z+30	; 0x1e
    3614:	f7 8d       	ldd	r31, Z+31	; 0x1f
    3616:	e0 2d       	mov	r30, r0
    3618:	09 95       	icall
    361a:	1f 91       	pop	r17
    361c:	0f 91       	pop	r16
    361e:	08 95       	ret

00003620 <_ZN12Adafruit_GFX13writeFillRectEiiiij>:
    3620:	ef 92       	push	r14
    3622:	ff 92       	push	r15
    3624:	0f 93       	push	r16
    3626:	1f 93       	push	r17
    3628:	dc 01       	movw	r26, r24
    362a:	ed 91       	ld	r30, X+
    362c:	fc 91       	ld	r31, X
    362e:	00 a0       	ldd	r0, Z+32	; 0x20
    3630:	f1 a1       	ldd	r31, Z+33	; 0x21
    3632:	e0 2d       	mov	r30, r0
    3634:	09 95       	icall
    3636:	1f 91       	pop	r17
    3638:	0f 91       	pop	r16
    363a:	ff 90       	pop	r15
    363c:	ef 90       	pop	r14
    363e:	08 95       	ret

00003640 <_ZN12Adafruit_GFX10startWriteEv>:
    3640:	08 95       	ret

00003642 <_ZN12Adafruit_GFX13drawFastVLineEiiij>:
    3642:	8f 92       	push	r8
    3644:	9f 92       	push	r9
    3646:	af 92       	push	r10
    3648:	bf 92       	push	r11
    364a:	cf 92       	push	r12
    364c:	df 92       	push	r13
    364e:	ef 92       	push	r14
    3650:	ff 92       	push	r15
    3652:	0f 93       	push	r16
    3654:	1f 93       	push	r17
    3656:	cf 93       	push	r28
    3658:	df 93       	push	r29
    365a:	ec 01       	movw	r28, r24
    365c:	5b 01       	movw	r10, r22
    365e:	4a 01       	movw	r8, r20
    3660:	69 01       	movw	r12, r18
    3662:	78 01       	movw	r14, r16
    3664:	e8 81       	ld	r30, Y
    3666:	f9 81       	ldd	r31, Y+1	; 0x01
    3668:	02 84       	ldd	r0, Z+10	; 0x0a
    366a:	f3 85       	ldd	r31, Z+11	; 0x0b
    366c:	e0 2d       	mov	r30, r0
    366e:	09 95       	icall
    3670:	c8 0c       	add	r12, r8
    3672:	d9 1c       	adc	r13, r9
    3674:	86 01       	movw	r16, r12
    3676:	01 50       	subi	r16, 0x01	; 1
    3678:	11 09       	sbc	r17, r1
    367a:	e8 81       	ld	r30, Y
    367c:	f9 81       	ldd	r31, Y+1	; 0x01
    367e:	04 88       	ldd	r0, Z+20	; 0x14
    3680:	f5 89       	ldd	r31, Z+21	; 0x15
    3682:	e0 2d       	mov	r30, r0
    3684:	95 01       	movw	r18, r10
    3686:	a4 01       	movw	r20, r8
    3688:	b5 01       	movw	r22, r10
    368a:	ce 01       	movw	r24, r28
    368c:	09 95       	icall
    368e:	e8 81       	ld	r30, Y
    3690:	f9 81       	ldd	r31, Y+1	; 0x01
    3692:	06 88       	ldd	r0, Z+22	; 0x16
    3694:	f7 89       	ldd	r31, Z+23	; 0x17
    3696:	e0 2d       	mov	r30, r0
    3698:	ce 01       	movw	r24, r28
    369a:	df 91       	pop	r29
    369c:	cf 91       	pop	r28
    369e:	1f 91       	pop	r17
    36a0:	0f 91       	pop	r16
    36a2:	ff 90       	pop	r15
    36a4:	ef 90       	pop	r14
    36a6:	df 90       	pop	r13
    36a8:	cf 90       	pop	r12
    36aa:	bf 90       	pop	r11
    36ac:	af 90       	pop	r10
    36ae:	9f 90       	pop	r9
    36b0:	8f 90       	pop	r8
    36b2:	09 94       	ijmp

000036b4 <_ZN12Adafruit_GFX13drawFastHLineEiiij>:
    36b4:	8f 92       	push	r8
    36b6:	9f 92       	push	r9
    36b8:	af 92       	push	r10
    36ba:	bf 92       	push	r11
    36bc:	cf 92       	push	r12
    36be:	df 92       	push	r13
    36c0:	ef 92       	push	r14
    36c2:	ff 92       	push	r15
    36c4:	0f 93       	push	r16
    36c6:	1f 93       	push	r17
    36c8:	cf 93       	push	r28
    36ca:	df 93       	push	r29
    36cc:	ec 01       	movw	r28, r24
    36ce:	5b 01       	movw	r10, r22
    36d0:	4a 01       	movw	r8, r20
    36d2:	69 01       	movw	r12, r18
    36d4:	e8 81       	ld	r30, Y
    36d6:	f9 81       	ldd	r31, Y+1	; 0x01
    36d8:	02 84       	ldd	r0, Z+10	; 0x0a
    36da:	f3 85       	ldd	r31, Z+11	; 0x0b
    36dc:	e0 2d       	mov	r30, r0
    36de:	09 95       	icall
    36e0:	95 01       	movw	r18, r10
    36e2:	2c 0d       	add	r18, r12
    36e4:	3d 1d       	adc	r19, r13
    36e6:	21 50       	subi	r18, 0x01	; 1
    36e8:	31 09       	sbc	r19, r1
    36ea:	e8 81       	ld	r30, Y
    36ec:	f9 81       	ldd	r31, Y+1	; 0x01
    36ee:	04 88       	ldd	r0, Z+20	; 0x14
    36f0:	f5 89       	ldd	r31, Z+21	; 0x15
    36f2:	e0 2d       	mov	r30, r0
    36f4:	78 01       	movw	r14, r16
    36f6:	84 01       	movw	r16, r8
    36f8:	a4 01       	movw	r20, r8
    36fa:	b5 01       	movw	r22, r10
    36fc:	ce 01       	movw	r24, r28
    36fe:	09 95       	icall
    3700:	e8 81       	ld	r30, Y
    3702:	f9 81       	ldd	r31, Y+1	; 0x01
    3704:	06 88       	ldd	r0, Z+22	; 0x16
    3706:	f7 89       	ldd	r31, Z+23	; 0x17
    3708:	e0 2d       	mov	r30, r0
    370a:	ce 01       	movw	r24, r28
    370c:	df 91       	pop	r29
    370e:	cf 91       	pop	r28
    3710:	1f 91       	pop	r17
    3712:	0f 91       	pop	r16
    3714:	ff 90       	pop	r15
    3716:	ef 90       	pop	r14
    3718:	df 90       	pop	r13
    371a:	cf 90       	pop	r12
    371c:	bf 90       	pop	r11
    371e:	af 90       	pop	r10
    3720:	9f 90       	pop	r9
    3722:	8f 90       	pop	r8
    3724:	09 94       	ijmp

00003726 <_ZN12Adafruit_GFX8fillRectEiiiij>:
    3726:	4f 92       	push	r4
    3728:	5f 92       	push	r5
    372a:	6f 92       	push	r6
    372c:	7f 92       	push	r7
    372e:	8f 92       	push	r8
    3730:	9f 92       	push	r9
    3732:	af 92       	push	r10
    3734:	bf 92       	push	r11
    3736:	cf 92       	push	r12
    3738:	df 92       	push	r13
    373a:	ef 92       	push	r14
    373c:	ff 92       	push	r15
    373e:	0f 93       	push	r16
    3740:	1f 93       	push	r17
    3742:	cf 93       	push	r28
    3744:	df 93       	push	r29
    3746:	6c 01       	movw	r12, r24
    3748:	2b 01       	movw	r4, r22
    374a:	5a 01       	movw	r10, r20
    374c:	39 01       	movw	r6, r18
    374e:	48 01       	movw	r8, r16
    3750:	dc 01       	movw	r26, r24
    3752:	ed 91       	ld	r30, X+
    3754:	fc 91       	ld	r31, X
    3756:	02 84       	ldd	r0, Z+10	; 0x0a
    3758:	f3 85       	ldd	r31, Z+11	; 0x0b
    375a:	e0 2d       	mov	r30, r0
    375c:	09 95       	icall
    375e:	e2 01       	movw	r28, r4
    3760:	64 0c       	add	r6, r4
    3762:	75 1c       	adc	r7, r5
    3764:	d6 01       	movw	r26, r12
    3766:	ed 91       	ld	r30, X+
    3768:	fc 91       	ld	r31, X
    376a:	c6 15       	cp	r28, r6
    376c:	d7 05       	cpc	r29, r7
    376e:	5c f4       	brge	.+22     	; 0x3786 <_ZN12Adafruit_GFX8fillRectEiiiij+0x60>
    3770:	00 88       	ldd	r0, Z+16	; 0x10
    3772:	f1 89       	ldd	r31, Z+17	; 0x11
    3774:	e0 2d       	mov	r30, r0
    3776:	87 01       	movw	r16, r14
    3778:	94 01       	movw	r18, r8
    377a:	a5 01       	movw	r20, r10
    377c:	be 01       	movw	r22, r28
    377e:	c6 01       	movw	r24, r12
    3780:	09 95       	icall
    3782:	21 96       	adiw	r28, 0x01	; 1
    3784:	ef cf       	rjmp	.-34     	; 0x3764 <_ZN12Adafruit_GFX8fillRectEiiiij+0x3e>
    3786:	06 88       	ldd	r0, Z+22	; 0x16
    3788:	f7 89       	ldd	r31, Z+23	; 0x17
    378a:	e0 2d       	mov	r30, r0
    378c:	c6 01       	movw	r24, r12
    378e:	df 91       	pop	r29
    3790:	cf 91       	pop	r28
    3792:	1f 91       	pop	r17
    3794:	0f 91       	pop	r16
    3796:	ff 90       	pop	r15
    3798:	ef 90       	pop	r14
    379a:	df 90       	pop	r13
    379c:	cf 90       	pop	r12
    379e:	bf 90       	pop	r11
    37a0:	af 90       	pop	r10
    37a2:	9f 90       	pop	r9
    37a4:	8f 90       	pop	r8
    37a6:	7f 90       	pop	r7
    37a8:	6f 90       	pop	r6
    37aa:	5f 90       	pop	r5
    37ac:	4f 90       	pop	r4
    37ae:	09 94       	ijmp

000037b0 <_ZN12Adafruit_GFX10fillScreenEj>:
    37b0:	ef 92       	push	r14
    37b2:	ff 92       	push	r15
    37b4:	0f 93       	push	r16
    37b6:	1f 93       	push	r17
    37b8:	dc 01       	movw	r26, r24
    37ba:	1a 96       	adiw	r26, 0x0a	; 10
    37bc:	0d 91       	ld	r16, X+
    37be:	1c 91       	ld	r17, X
    37c0:	1b 97       	sbiw	r26, 0x0b	; 11
    37c2:	18 96       	adiw	r26, 0x08	; 8
    37c4:	2d 91       	ld	r18, X+
    37c6:	3c 91       	ld	r19, X
    37c8:	19 97       	sbiw	r26, 0x09	; 9
    37ca:	ed 91       	ld	r30, X+
    37cc:	fc 91       	ld	r31, X
    37ce:	00 a0       	ldd	r0, Z+32	; 0x20
    37d0:	f1 a1       	ldd	r31, Z+33	; 0x21
    37d2:	e0 2d       	mov	r30, r0
    37d4:	7b 01       	movw	r14, r22
    37d6:	40 e0       	ldi	r20, 0x00	; 0
    37d8:	50 e0       	ldi	r21, 0x00	; 0
    37da:	60 e0       	ldi	r22, 0x00	; 0
    37dc:	70 e0       	ldi	r23, 0x00	; 0
    37de:	09 95       	icall
    37e0:	1f 91       	pop	r17
    37e2:	0f 91       	pop	r16
    37e4:	ff 90       	pop	r15
    37e6:	ef 90       	pop	r14
    37e8:	08 95       	ret

000037ea <_ZN12Adafruit_GFX8drawLineEiiiij>:
    37ea:	8f 92       	push	r8
    37ec:	9f 92       	push	r9
    37ee:	af 92       	push	r10
    37f0:	bf 92       	push	r11
    37f2:	cf 92       	push	r12
    37f4:	df 92       	push	r13
    37f6:	ef 92       	push	r14
    37f8:	ff 92       	push	r15
    37fa:	0f 93       	push	r16
    37fc:	1f 93       	push	r17
    37fe:	cf 93       	push	r28
    3800:	df 93       	push	r29
    3802:	4c 01       	movw	r8, r24
    3804:	6b 01       	movw	r12, r22
    3806:	5a 01       	movw	r10, r20
    3808:	e9 01       	movw	r28, r18
    380a:	dc 01       	movw	r26, r24
    380c:	ed 91       	ld	r30, X+
    380e:	fc 91       	ld	r31, X
    3810:	62 17       	cp	r22, r18
    3812:	73 07       	cpc	r23, r19
    3814:	81 f4       	brne	.+32     	; 0x3836 <_ZN12Adafruit_GFX8drawLineEiiiij+0x4c>
    3816:	04 17       	cp	r16, r20
    3818:	15 07       	cpc	r17, r21
    381a:	24 f4       	brge	.+8      	; 0x3824 <_ZN12Adafruit_GFX8drawLineEiiiij+0x3a>
    381c:	8b 2d       	mov	r24, r11
    381e:	58 01       	movw	r10, r16
    3820:	04 2f       	mov	r16, r20
    3822:	18 2f       	mov	r17, r24
    3824:	0a 19       	sub	r16, r10
    3826:	1b 09       	sbc	r17, r11
    3828:	98 01       	movw	r18, r16
    382a:	2f 5f       	subi	r18, 0xFF	; 255
    382c:	3f 4f       	sbci	r19, 0xFF	; 255
    382e:	04 8c       	ldd	r0, Z+28	; 0x1c
    3830:	f5 8d       	ldd	r31, Z+29	; 0x1d
    3832:	e0 2d       	mov	r30, r0
    3834:	12 c0       	rjmp	.+36     	; 0x385a <_ZN12Adafruit_GFX8drawLineEiiiij+0x70>
    3836:	40 17       	cp	r20, r16
    3838:	51 07       	cpc	r21, r17
    383a:	09 f5       	brne	.+66     	; 0x387e <_ZN12Adafruit_GFX8drawLineEiiiij+0x94>
    383c:	26 17       	cp	r18, r22
    383e:	37 07       	cpc	r19, r23
    3840:	24 f4       	brge	.+8      	; 0x384a <_ZN12Adafruit_GFX8drawLineEiiiij+0x60>
    3842:	8d 2d       	mov	r24, r13
    3844:	69 01       	movw	r12, r18
    3846:	c6 2f       	mov	r28, r22
    3848:	d8 2f       	mov	r29, r24
    384a:	9e 01       	movw	r18, r28
    384c:	2c 19       	sub	r18, r12
    384e:	3d 09       	sbc	r19, r13
    3850:	2f 5f       	subi	r18, 0xFF	; 255
    3852:	3f 4f       	sbci	r19, 0xFF	; 255
    3854:	06 8c       	ldd	r0, Z+30	; 0x1e
    3856:	f7 8d       	ldd	r31, Z+31	; 0x1f
    3858:	e0 2d       	mov	r30, r0
    385a:	87 01       	movw	r16, r14
    385c:	a5 01       	movw	r20, r10
    385e:	b6 01       	movw	r22, r12
    3860:	c4 01       	movw	r24, r8
    3862:	09 95       	icall
    3864:	df 91       	pop	r29
    3866:	cf 91       	pop	r28
    3868:	1f 91       	pop	r17
    386a:	0f 91       	pop	r16
    386c:	ff 90       	pop	r15
    386e:	ef 90       	pop	r14
    3870:	df 90       	pop	r13
    3872:	cf 90       	pop	r12
    3874:	bf 90       	pop	r11
    3876:	af 90       	pop	r10
    3878:	9f 90       	pop	r9
    387a:	8f 90       	pop	r8
    387c:	08 95       	ret
    387e:	02 84       	ldd	r0, Z+10	; 0x0a
    3880:	f3 85       	ldd	r31, Z+11	; 0x0b
    3882:	e0 2d       	mov	r30, r0
    3884:	09 95       	icall
    3886:	d4 01       	movw	r26, r8
    3888:	ed 91       	ld	r30, X+
    388a:	fc 91       	ld	r31, X
    388c:	04 88       	ldd	r0, Z+20	; 0x14
    388e:	f5 89       	ldd	r31, Z+21	; 0x15
    3890:	e0 2d       	mov	r30, r0
    3892:	9e 01       	movw	r18, r28
    3894:	a5 01       	movw	r20, r10
    3896:	b6 01       	movw	r22, r12
    3898:	c4 01       	movw	r24, r8
    389a:	09 95       	icall
    389c:	d4 01       	movw	r26, r8
    389e:	ed 91       	ld	r30, X+
    38a0:	fc 91       	ld	r31, X
    38a2:	06 88       	ldd	r0, Z+22	; 0x16
    38a4:	f7 89       	ldd	r31, Z+23	; 0x17
    38a6:	e0 2d       	mov	r30, r0
    38a8:	c4 01       	movw	r24, r8
    38aa:	df 91       	pop	r29
    38ac:	cf 91       	pop	r28
    38ae:	1f 91       	pop	r17
    38b0:	0f 91       	pop	r16
    38b2:	ff 90       	pop	r15
    38b4:	ef 90       	pop	r14
    38b6:	df 90       	pop	r13
    38b8:	cf 90       	pop	r12
    38ba:	bf 90       	pop	r11
    38bc:	af 90       	pop	r10
    38be:	9f 90       	pop	r9
    38c0:	8f 90       	pop	r8
    38c2:	09 94       	ijmp

000038c4 <_ZN12Adafruit_GFX8drawRectEiiiij>:
    38c4:	6f 92       	push	r6
    38c6:	7f 92       	push	r7
    38c8:	8f 92       	push	r8
    38ca:	9f 92       	push	r9
    38cc:	af 92       	push	r10
    38ce:	bf 92       	push	r11
    38d0:	cf 92       	push	r12
    38d2:	df 92       	push	r13
    38d4:	ef 92       	push	r14
    38d6:	ff 92       	push	r15
    38d8:	0f 93       	push	r16
    38da:	1f 93       	push	r17
    38dc:	cf 93       	push	r28
    38de:	df 93       	push	r29
    38e0:	ec 01       	movw	r28, r24
    38e2:	4b 01       	movw	r8, r22
    38e4:	5a 01       	movw	r10, r20
    38e6:	69 01       	movw	r12, r18
    38e8:	38 01       	movw	r6, r16
    38ea:	e8 81       	ld	r30, Y
    38ec:	f9 81       	ldd	r31, Y+1	; 0x01
    38ee:	02 84       	ldd	r0, Z+10	; 0x0a
    38f0:	f3 85       	ldd	r31, Z+11	; 0x0b
    38f2:	e0 2d       	mov	r30, r0
    38f4:	09 95       	icall
    38f6:	e8 81       	ld	r30, Y
    38f8:	f9 81       	ldd	r31, Y+1	; 0x01
    38fa:	02 88       	ldd	r0, Z+18	; 0x12
    38fc:	f3 89       	ldd	r31, Z+19	; 0x13
    38fe:	e0 2d       	mov	r30, r0
    3900:	87 01       	movw	r16, r14
    3902:	96 01       	movw	r18, r12
    3904:	a5 01       	movw	r20, r10
    3906:	b4 01       	movw	r22, r8
    3908:	ce 01       	movw	r24, r28
    390a:	09 95       	icall
    390c:	a5 01       	movw	r20, r10
    390e:	46 0d       	add	r20, r6
    3910:	57 1d       	adc	r21, r7
    3912:	41 50       	subi	r20, 0x01	; 1
    3914:	51 09       	sbc	r21, r1
    3916:	e8 81       	ld	r30, Y
    3918:	f9 81       	ldd	r31, Y+1	; 0x01
    391a:	02 88       	ldd	r0, Z+18	; 0x12
    391c:	f3 89       	ldd	r31, Z+19	; 0x13
    391e:	e0 2d       	mov	r30, r0
    3920:	96 01       	movw	r18, r12
    3922:	b4 01       	movw	r22, r8
    3924:	ce 01       	movw	r24, r28
    3926:	09 95       	icall
    3928:	e8 81       	ld	r30, Y
    392a:	f9 81       	ldd	r31, Y+1	; 0x01
    392c:	00 88       	ldd	r0, Z+16	; 0x10
    392e:	f1 89       	ldd	r31, Z+17	; 0x11
    3930:	e0 2d       	mov	r30, r0
    3932:	93 01       	movw	r18, r6
    3934:	a5 01       	movw	r20, r10
    3936:	b4 01       	movw	r22, r8
    3938:	ce 01       	movw	r24, r28
    393a:	09 95       	icall
    393c:	c8 0c       	add	r12, r8
    393e:	d9 1c       	adc	r13, r9
    3940:	b6 01       	movw	r22, r12
    3942:	61 50       	subi	r22, 0x01	; 1
    3944:	71 09       	sbc	r23, r1
    3946:	e8 81       	ld	r30, Y
    3948:	f9 81       	ldd	r31, Y+1	; 0x01
    394a:	00 88       	ldd	r0, Z+16	; 0x10
    394c:	f1 89       	ldd	r31, Z+17	; 0x11
    394e:	e0 2d       	mov	r30, r0
    3950:	93 01       	movw	r18, r6
    3952:	a5 01       	movw	r20, r10
    3954:	ce 01       	movw	r24, r28
    3956:	09 95       	icall
    3958:	e8 81       	ld	r30, Y
    395a:	f9 81       	ldd	r31, Y+1	; 0x01
    395c:	06 88       	ldd	r0, Z+22	; 0x16
    395e:	f7 89       	ldd	r31, Z+23	; 0x17
    3960:	e0 2d       	mov	r30, r0
    3962:	ce 01       	movw	r24, r28
    3964:	df 91       	pop	r29
    3966:	cf 91       	pop	r28
    3968:	1f 91       	pop	r17
    396a:	0f 91       	pop	r16
    396c:	ff 90       	pop	r15
    396e:	ef 90       	pop	r14
    3970:	df 90       	pop	r13
    3972:	cf 90       	pop	r12
    3974:	bf 90       	pop	r11
    3976:	af 90       	pop	r10
    3978:	9f 90       	pop	r9
    397a:	8f 90       	pop	r8
    397c:	7f 90       	pop	r7
    397e:	6f 90       	pop	r6
    3980:	09 94       	ijmp

00003982 <_ZN12Adafruit_GFX13invertDisplayEb>:
    3982:	08 95       	ret

00003984 <_ZN12Adafruit_GFX11setRotationEh>:
    3984:	fc 01       	movw	r30, r24
    3986:	63 70       	andi	r22, 0x03	; 3
    3988:	66 8b       	std	Z+22, r22	; 0x16
    398a:	84 81       	ldd	r24, Z+4	; 0x04
    398c:	95 81       	ldd	r25, Z+5	; 0x05
    398e:	26 81       	ldd	r18, Z+6	; 0x06
    3990:	37 81       	ldd	r19, Z+7	; 0x07
    3992:	61 30       	cpi	r22, 0x01	; 1
    3994:	39 f0       	breq	.+14     	; 0x39a4 <_ZN12Adafruit_GFX11setRotationEh+0x20>
    3996:	63 30       	cpi	r22, 0x03	; 3
    3998:	29 f0       	breq	.+10     	; 0x39a4 <_ZN12Adafruit_GFX11setRotationEh+0x20>
    399a:	91 87       	std	Z+9, r25	; 0x09
    399c:	80 87       	std	Z+8, r24	; 0x08
    399e:	33 87       	std	Z+11, r19	; 0x0b
    39a0:	22 87       	std	Z+10, r18	; 0x0a
    39a2:	08 95       	ret
    39a4:	31 87       	std	Z+9, r19	; 0x09
    39a6:	20 87       	std	Z+8, r18	; 0x08
    39a8:	93 87       	std	Z+11, r25	; 0x0b
    39aa:	82 87       	std	Z+10, r24	; 0x0a
    39ac:	08 95       	ret

000039ae <_ZN12Adafruit_GFXC1Eii>:
    39ae:	fc 01       	movw	r30, r24
    39b0:	13 82       	std	Z+3, r1	; 0x03
    39b2:	12 82       	std	Z+2, r1	; 0x02
    39b4:	8b e6       	ldi	r24, 0x6B	; 107
    39b6:	91 e0       	ldi	r25, 0x01	; 1
    39b8:	91 83       	std	Z+1, r25	; 0x01
    39ba:	80 83       	st	Z, r24
    39bc:	75 83       	std	Z+5, r23	; 0x05
    39be:	64 83       	std	Z+4, r22	; 0x04
    39c0:	57 83       	std	Z+7, r21	; 0x07
    39c2:	46 83       	std	Z+6, r20	; 0x06
    39c4:	71 87       	std	Z+9, r23	; 0x09
    39c6:	60 87       	std	Z+8, r22	; 0x08
    39c8:	53 87       	std	Z+11, r21	; 0x0b
    39ca:	42 87       	std	Z+10, r20	; 0x0a
    39cc:	16 8a       	std	Z+22, r1	; 0x16
    39ce:	15 86       	std	Z+13, r1	; 0x0d
    39d0:	14 86       	std	Z+12, r1	; 0x0c
    39d2:	17 86       	std	Z+15, r1	; 0x0f
    39d4:	16 86       	std	Z+14, r1	; 0x0e
    39d6:	81 e0       	ldi	r24, 0x01	; 1
    39d8:	85 8b       	std	Z+21, r24	; 0x15
    39da:	84 8b       	std	Z+20, r24	; 0x14
    39dc:	2f ef       	ldi	r18, 0xFF	; 255
    39de:	3f ef       	ldi	r19, 0xFF	; 255
    39e0:	33 8b       	std	Z+19, r19	; 0x13
    39e2:	22 8b       	std	Z+18, r18	; 0x12
    39e4:	31 8b       	std	Z+17, r19	; 0x11
    39e6:	20 8b       	std	Z+16, r18	; 0x10
    39e8:	87 8b       	std	Z+23, r24	; 0x17
    39ea:	10 8e       	std	Z+24, r1	; 0x18
    39ec:	12 8e       	std	Z+26, r1	; 0x1a
    39ee:	11 8e       	std	Z+25, r1	; 0x19
    39f0:	08 95       	ret

000039f2 <_ZN12Adafruit_GFX16drawCircleHelperEiiihj>:
    39f2:	2f 92       	push	r2
    39f4:	3f 92       	push	r3
    39f6:	4f 92       	push	r4
    39f8:	5f 92       	push	r5
    39fa:	6f 92       	push	r6
    39fc:	7f 92       	push	r7
    39fe:	8f 92       	push	r8
    3a00:	9f 92       	push	r9
    3a02:	af 92       	push	r10
    3a04:	bf 92       	push	r11
    3a06:	cf 92       	push	r12
    3a08:	df 92       	push	r13
    3a0a:	ef 92       	push	r14
    3a0c:	ff 92       	push	r15
    3a0e:	0f 93       	push	r16
    3a10:	1f 93       	push	r17
    3a12:	cf 93       	push	r28
    3a14:	df 93       	push	r29
    3a16:	00 d0       	rcall	.+0      	; 0x3a18 <_ZN12Adafruit_GFX16drawCircleHelperEiiihj+0x26>
    3a18:	00 d0       	rcall	.+0      	; 0x3a1a <_ZN12Adafruit_GFX16drawCircleHelperEiiihj+0x28>
    3a1a:	00 d0       	rcall	.+0      	; 0x3a1c <_ZN12Adafruit_GFX16drawCircleHelperEiiihj+0x2a>
    3a1c:	cd b7       	in	r28, 0x3d	; 61
    3a1e:	de b7       	in	r29, 0x3e	; 62
    3a20:	9e 83       	std	Y+6, r25	; 0x06
    3a22:	8d 83       	std	Y+5, r24	; 0x05
    3a24:	4b 01       	movw	r8, r22
    3a26:	3a 01       	movw	r6, r20
    3a28:	69 01       	movw	r12, r18
    3a2a:	80 2f       	mov	r24, r16
    3a2c:	21 e0       	ldi	r18, 0x01	; 1
    3a2e:	30 e0       	ldi	r19, 0x00	; 0
    3a30:	29 01       	movw	r4, r18
    3a32:	4c 18       	sub	r4, r12
    3a34:	5d 08       	sbc	r5, r13
    3a36:	22 24       	eor	r2, r2
    3a38:	33 24       	eor	r3, r3
    3a3a:	2c 18       	sub	r2, r12
    3a3c:	3d 08       	sbc	r3, r13
    3a3e:	22 0c       	add	r2, r2
    3a40:	33 1c       	adc	r3, r3
    3a42:	aa 24       	eor	r10, r10
    3a44:	a3 94       	inc	r10
    3a46:	b1 2c       	mov	r11, r1
    3a48:	01 e0       	ldi	r16, 0x01	; 1
    3a4a:	10 e0       	ldi	r17, 0x00	; 0
    3a4c:	98 2f       	mov	r25, r24
    3a4e:	94 70       	andi	r25, 0x04	; 4
    3a50:	99 83       	std	Y+1, r25	; 0x01
    3a52:	a8 2f       	mov	r26, r24
    3a54:	a2 70       	andi	r26, 0x02	; 2
    3a56:	aa 83       	std	Y+2, r26	; 0x02
    3a58:	b8 2f       	mov	r27, r24
    3a5a:	b8 70       	andi	r27, 0x08	; 8
    3a5c:	bb 83       	std	Y+3, r27	; 0x03
    3a5e:	81 70       	andi	r24, 0x01	; 1
    3a60:	8c 83       	std	Y+4, r24	; 0x04
    3a62:	c5 01       	movw	r24, r10
    3a64:	01 97       	sbiw	r24, 0x01	; 1
    3a66:	8c 15       	cp	r24, r12
    3a68:	9d 05       	cpc	r25, r13
    3a6a:	0c f0       	brlt	.+2      	; 0x3a6e <_ZN12Adafruit_GFX16drawCircleHelperEiiihj+0x7c>
    3a6c:	a7 c0       	rjmp	.+334    	; 0x3bbc <_ZN12Adafruit_GFX16drawCircleHelperEiiihj+0x1ca>
    3a6e:	57 fc       	sbrc	r5, 7
    3a70:	08 c0       	rjmp	.+16     	; 0x3a82 <_ZN12Adafruit_GFX16drawCircleHelperEiiihj+0x90>
    3a72:	91 e0       	ldi	r25, 0x01	; 1
    3a74:	c9 1a       	sub	r12, r25
    3a76:	d1 08       	sbc	r13, r1
    3a78:	a2 e0       	ldi	r26, 0x02	; 2
    3a7a:	2a 0e       	add	r2, r26
    3a7c:	31 1c       	adc	r3, r1
    3a7e:	42 0c       	add	r4, r2
    3a80:	53 1c       	adc	r5, r3
    3a82:	0e 5f       	subi	r16, 0xFE	; 254
    3a84:	1f 4f       	sbci	r17, 0xFF	; 255
    3a86:	40 0e       	add	r4, r16
    3a88:	51 1e       	adc	r5, r17
    3a8a:	b9 81       	ldd	r27, Y+1	; 0x01
    3a8c:	bb 23       	and	r27, r27
    3a8e:	11 f1       	breq	.+68     	; 0x3ad4 <_ZN12Adafruit_GFX16drawCircleHelperEiiihj+0xe2>
    3a90:	ad 81       	ldd	r26, Y+5	; 0x05
    3a92:	be 81       	ldd	r27, Y+6	; 0x06
    3a94:	ed 91       	ld	r30, X+
    3a96:	fc 91       	ld	r31, X
    3a98:	11 97       	sbiw	r26, 0x01	; 1
    3a9a:	04 84       	ldd	r0, Z+12	; 0x0c
    3a9c:	f5 85       	ldd	r31, Z+13	; 0x0d
    3a9e:	e0 2d       	mov	r30, r0
    3aa0:	97 01       	movw	r18, r14
    3aa2:	a6 01       	movw	r20, r12
    3aa4:	46 0d       	add	r20, r6
    3aa6:	57 1d       	adc	r21, r7
    3aa8:	b4 01       	movw	r22, r8
    3aaa:	6a 0d       	add	r22, r10
    3aac:	7b 1d       	adc	r23, r11
    3aae:	cd 01       	movw	r24, r26
    3ab0:	09 95       	icall
    3ab2:	ad 81       	ldd	r26, Y+5	; 0x05
    3ab4:	be 81       	ldd	r27, Y+6	; 0x06
    3ab6:	ed 91       	ld	r30, X+
    3ab8:	fc 91       	ld	r31, X
    3aba:	11 97       	sbiw	r26, 0x01	; 1
    3abc:	04 84       	ldd	r0, Z+12	; 0x0c
    3abe:	f5 85       	ldd	r31, Z+13	; 0x0d
    3ac0:	e0 2d       	mov	r30, r0
    3ac2:	97 01       	movw	r18, r14
    3ac4:	a3 01       	movw	r20, r6
    3ac6:	4a 0d       	add	r20, r10
    3ac8:	5b 1d       	adc	r21, r11
    3aca:	b6 01       	movw	r22, r12
    3acc:	68 0d       	add	r22, r8
    3ace:	79 1d       	adc	r23, r9
    3ad0:	cd 01       	movw	r24, r26
    3ad2:	09 95       	icall
    3ad4:	ba 81       	ldd	r27, Y+2	; 0x02
    3ad6:	bb 23       	and	r27, r27
    3ad8:	11 f1       	breq	.+68     	; 0x3b1e <_ZN12Adafruit_GFX16drawCircleHelperEiiihj+0x12c>
    3ada:	ad 81       	ldd	r26, Y+5	; 0x05
    3adc:	be 81       	ldd	r27, Y+6	; 0x06
    3ade:	ed 91       	ld	r30, X+
    3ae0:	fc 91       	ld	r31, X
    3ae2:	11 97       	sbiw	r26, 0x01	; 1
    3ae4:	04 84       	ldd	r0, Z+12	; 0x0c
    3ae6:	f5 85       	ldd	r31, Z+13	; 0x0d
    3ae8:	e0 2d       	mov	r30, r0
    3aea:	97 01       	movw	r18, r14
    3aec:	a3 01       	movw	r20, r6
    3aee:	4c 19       	sub	r20, r12
    3af0:	5d 09       	sbc	r21, r13
    3af2:	b4 01       	movw	r22, r8
    3af4:	6a 0d       	add	r22, r10
    3af6:	7b 1d       	adc	r23, r11
    3af8:	cd 01       	movw	r24, r26
    3afa:	09 95       	icall
    3afc:	ad 81       	ldd	r26, Y+5	; 0x05
    3afe:	be 81       	ldd	r27, Y+6	; 0x06
    3b00:	ed 91       	ld	r30, X+
    3b02:	fc 91       	ld	r31, X
    3b04:	11 97       	sbiw	r26, 0x01	; 1
    3b06:	04 84       	ldd	r0, Z+12	; 0x0c
    3b08:	f5 85       	ldd	r31, Z+13	; 0x0d
    3b0a:	e0 2d       	mov	r30, r0
    3b0c:	97 01       	movw	r18, r14
    3b0e:	a3 01       	movw	r20, r6
    3b10:	4a 19       	sub	r20, r10
    3b12:	5b 09       	sbc	r21, r11
    3b14:	b6 01       	movw	r22, r12
    3b16:	68 0d       	add	r22, r8
    3b18:	79 1d       	adc	r23, r9
    3b1a:	cd 01       	movw	r24, r26
    3b1c:	09 95       	icall
    3b1e:	bb 81       	ldd	r27, Y+3	; 0x03
    3b20:	bb 23       	and	r27, r27
    3b22:	11 f1       	breq	.+68     	; 0x3b68 <_ZN12Adafruit_GFX16drawCircleHelperEiiihj+0x176>
    3b24:	ad 81       	ldd	r26, Y+5	; 0x05
    3b26:	be 81       	ldd	r27, Y+6	; 0x06
    3b28:	ed 91       	ld	r30, X+
    3b2a:	fc 91       	ld	r31, X
    3b2c:	11 97       	sbiw	r26, 0x01	; 1
    3b2e:	04 84       	ldd	r0, Z+12	; 0x0c
    3b30:	f5 85       	ldd	r31, Z+13	; 0x0d
    3b32:	e0 2d       	mov	r30, r0
    3b34:	97 01       	movw	r18, r14
    3b36:	a3 01       	movw	r20, r6
    3b38:	4a 0d       	add	r20, r10
    3b3a:	5b 1d       	adc	r21, r11
    3b3c:	b4 01       	movw	r22, r8
    3b3e:	6c 19       	sub	r22, r12
    3b40:	7d 09       	sbc	r23, r13
    3b42:	cd 01       	movw	r24, r26
    3b44:	09 95       	icall
    3b46:	ad 81       	ldd	r26, Y+5	; 0x05
    3b48:	be 81       	ldd	r27, Y+6	; 0x06
    3b4a:	ed 91       	ld	r30, X+
    3b4c:	fc 91       	ld	r31, X
    3b4e:	11 97       	sbiw	r26, 0x01	; 1
    3b50:	04 84       	ldd	r0, Z+12	; 0x0c
    3b52:	f5 85       	ldd	r31, Z+13	; 0x0d
    3b54:	e0 2d       	mov	r30, r0
    3b56:	97 01       	movw	r18, r14
    3b58:	a6 01       	movw	r20, r12
    3b5a:	46 0d       	add	r20, r6
    3b5c:	57 1d       	adc	r21, r7
    3b5e:	b4 01       	movw	r22, r8
    3b60:	6a 19       	sub	r22, r10
    3b62:	7b 09       	sbc	r23, r11
    3b64:	cd 01       	movw	r24, r26
    3b66:	09 95       	icall
    3b68:	bc 81       	ldd	r27, Y+4	; 0x04
    3b6a:	b1 11       	cpse	r27, r1
    3b6c:	04 c0       	rjmp	.+8      	; 0x3b76 <_ZN12Adafruit_GFX16drawCircleHelperEiiihj+0x184>
    3b6e:	8f ef       	ldi	r24, 0xFF	; 255
    3b70:	a8 1a       	sub	r10, r24
    3b72:	b8 0a       	sbc	r11, r24
    3b74:	76 cf       	rjmp	.-276    	; 0x3a62 <_ZN12Adafruit_GFX16drawCircleHelperEiiihj+0x70>
    3b76:	ad 81       	ldd	r26, Y+5	; 0x05
    3b78:	be 81       	ldd	r27, Y+6	; 0x06
    3b7a:	ed 91       	ld	r30, X+
    3b7c:	fc 91       	ld	r31, X
    3b7e:	11 97       	sbiw	r26, 0x01	; 1
    3b80:	04 84       	ldd	r0, Z+12	; 0x0c
    3b82:	f5 85       	ldd	r31, Z+13	; 0x0d
    3b84:	e0 2d       	mov	r30, r0
    3b86:	97 01       	movw	r18, r14
    3b88:	a3 01       	movw	r20, r6
    3b8a:	4a 19       	sub	r20, r10
    3b8c:	5b 09       	sbc	r21, r11
    3b8e:	b4 01       	movw	r22, r8
    3b90:	6c 19       	sub	r22, r12
    3b92:	7d 09       	sbc	r23, r13
    3b94:	cd 01       	movw	r24, r26
    3b96:	09 95       	icall
    3b98:	ad 81       	ldd	r26, Y+5	; 0x05
    3b9a:	be 81       	ldd	r27, Y+6	; 0x06
    3b9c:	ed 91       	ld	r30, X+
    3b9e:	fc 91       	ld	r31, X
    3ba0:	11 97       	sbiw	r26, 0x01	; 1
    3ba2:	04 84       	ldd	r0, Z+12	; 0x0c
    3ba4:	f5 85       	ldd	r31, Z+13	; 0x0d
    3ba6:	e0 2d       	mov	r30, r0
    3ba8:	97 01       	movw	r18, r14
    3baa:	a3 01       	movw	r20, r6
    3bac:	4c 19       	sub	r20, r12
    3bae:	5d 09       	sbc	r21, r13
    3bb0:	b4 01       	movw	r22, r8
    3bb2:	6a 19       	sub	r22, r10
    3bb4:	7b 09       	sbc	r23, r11
    3bb6:	cd 01       	movw	r24, r26
    3bb8:	09 95       	icall
    3bba:	d9 cf       	rjmp	.-78     	; 0x3b6e <_ZN12Adafruit_GFX16drawCircleHelperEiiihj+0x17c>
    3bbc:	26 96       	adiw	r28, 0x06	; 6
    3bbe:	0f b6       	in	r0, 0x3f	; 63
    3bc0:	f8 94       	cli
    3bc2:	de bf       	out	0x3e, r29	; 62
    3bc4:	0f be       	out	0x3f, r0	; 63
    3bc6:	cd bf       	out	0x3d, r28	; 61
    3bc8:	df 91       	pop	r29
    3bca:	cf 91       	pop	r28
    3bcc:	1f 91       	pop	r17
    3bce:	0f 91       	pop	r16
    3bd0:	ff 90       	pop	r15
    3bd2:	ef 90       	pop	r14
    3bd4:	df 90       	pop	r13
    3bd6:	cf 90       	pop	r12
    3bd8:	bf 90       	pop	r11
    3bda:	af 90       	pop	r10
    3bdc:	9f 90       	pop	r9
    3bde:	8f 90       	pop	r8
    3be0:	7f 90       	pop	r7
    3be2:	6f 90       	pop	r6
    3be4:	5f 90       	pop	r5
    3be6:	4f 90       	pop	r4
    3be8:	3f 90       	pop	r3
    3bea:	2f 90       	pop	r2
    3bec:	08 95       	ret

00003bee <_ZN12Adafruit_GFX13drawRoundRectEiiiiij>:
    3bee:	2f 92       	push	r2
    3bf0:	3f 92       	push	r3
    3bf2:	4f 92       	push	r4
    3bf4:	5f 92       	push	r5
    3bf6:	6f 92       	push	r6
    3bf8:	7f 92       	push	r7
    3bfa:	8f 92       	push	r8
    3bfc:	9f 92       	push	r9
    3bfe:	af 92       	push	r10
    3c00:	bf 92       	push	r11
    3c02:	cf 92       	push	r12
    3c04:	df 92       	push	r13
    3c06:	ef 92       	push	r14
    3c08:	ff 92       	push	r15
    3c0a:	0f 93       	push	r16
    3c0c:	1f 93       	push	r17
    3c0e:	cf 93       	push	r28
    3c10:	df 93       	push	r29
    3c12:	cd b7       	in	r28, 0x3d	; 61
    3c14:	de b7       	in	r29, 0x3e	; 62
    3c16:	28 97       	sbiw	r28, 0x08	; 8
    3c18:	0f b6       	in	r0, 0x3f	; 63
    3c1a:	f8 94       	cli
    3c1c:	de bf       	out	0x3e, r29	; 62
    3c1e:	0f be       	out	0x3f, r0	; 63
    3c20:	cd bf       	out	0x3d, r28	; 61
    3c22:	5c 01       	movw	r10, r24
    3c24:	7a 83       	std	Y+2, r23	; 0x02
    3c26:	69 83       	std	Y+1, r22	; 0x01
    3c28:	2a 01       	movw	r4, r20
    3c2a:	39 01       	movw	r6, r18
    3c2c:	48 01       	movw	r8, r16
    3c2e:	20 17       	cp	r18, r16
    3c30:	31 07       	cpc	r19, r17
    3c32:	34 f4       	brge	.+12     	; 0x3c40 <_ZN12Adafruit_GFX13drawRoundRectEiiiiij+0x52>
    3c34:	3c 83       	std	Y+4, r19	; 0x04
    3c36:	2b 83       	std	Y+3, r18	; 0x03
    3c38:	37 ff       	sbrs	r19, 7
    3c3a:	0a c0       	rjmp	.+20     	; 0x3c50 <_ZN12Adafruit_GFX13drawRoundRectEiiiiij+0x62>
    3c3c:	c9 01       	movw	r24, r18
    3c3e:	05 c0       	rjmp	.+10     	; 0x3c4a <_ZN12Adafruit_GFX13drawRoundRectEiiiiij+0x5c>
    3c40:	1c 83       	std	Y+4, r17	; 0x04
    3c42:	0b 83       	std	Y+3, r16	; 0x03
    3c44:	17 ff       	sbrs	r17, 7
    3c46:	04 c0       	rjmp	.+8      	; 0x3c50 <_ZN12Adafruit_GFX13drawRoundRectEiiiiij+0x62>
    3c48:	c8 01       	movw	r24, r16
    3c4a:	01 96       	adiw	r24, 0x01	; 1
    3c4c:	9c 83       	std	Y+4, r25	; 0x04
    3c4e:	8b 83       	std	Y+3, r24	; 0x03
    3c50:	ab 81       	ldd	r26, Y+3	; 0x03
    3c52:	bc 81       	ldd	r27, Y+4	; 0x04
    3c54:	b5 95       	asr	r27
    3c56:	a7 95       	ror	r26
    3c58:	bc 83       	std	Y+4, r27	; 0x04
    3c5a:	ab 83       	std	Y+3, r26	; 0x03
    3c5c:	8b 81       	ldd	r24, Y+3	; 0x03
    3c5e:	9c 81       	ldd	r25, Y+4	; 0x04
    3c60:	98 87       	std	Y+8, r25	; 0x08
    3c62:	8f 83       	std	Y+7, r24	; 0x07
    3c64:	e8 16       	cp	r14, r24
    3c66:	f9 06       	cpc	r15, r25
    3c68:	14 f4       	brge	.+4      	; 0x3c6e <_ZN12Adafruit_GFX13drawRoundRectEiiiiij+0x80>
    3c6a:	f8 86       	std	Y+8, r15	; 0x08
    3c6c:	ef 82       	std	Y+7, r14	; 0x07
    3c6e:	d5 01       	movw	r26, r10
    3c70:	ed 91       	ld	r30, X+
    3c72:	fc 91       	ld	r31, X
    3c74:	02 84       	ldd	r0, Z+10	; 0x0a
    3c76:	f3 85       	ldd	r31, Z+11	; 0x0b
    3c78:	e0 2d       	mov	r30, r0
    3c7a:	c5 01       	movw	r24, r10
    3c7c:	09 95       	icall
    3c7e:	8f 81       	ldd	r24, Y+7	; 0x07
    3c80:	98 85       	ldd	r25, Y+8	; 0x08
    3c82:	88 0f       	add	r24, r24
    3c84:	99 1f       	adc	r25, r25
    3c86:	9c 83       	std	Y+4, r25	; 0x04
    3c88:	8b 83       	std	Y+3, r24	; 0x03
    3c8a:	73 01       	movw	r14, r6
    3c8c:	e8 1a       	sub	r14, r24
    3c8e:	f9 0a       	sbc	r15, r25
    3c90:	29 80       	ldd	r2, Y+1	; 0x01
    3c92:	3a 80       	ldd	r3, Y+2	; 0x02
    3c94:	af 81       	ldd	r26, Y+7	; 0x07
    3c96:	b8 85       	ldd	r27, Y+8	; 0x08
    3c98:	2a 0e       	add	r2, r26
    3c9a:	3b 1e       	adc	r3, r27
    3c9c:	d5 01       	movw	r26, r10
    3c9e:	ed 91       	ld	r30, X+
    3ca0:	fc 91       	ld	r31, X
    3ca2:	02 88       	ldd	r0, Z+18	; 0x12
    3ca4:	f3 89       	ldd	r31, Z+19	; 0x13
    3ca6:	e0 2d       	mov	r30, r0
    3ca8:	86 01       	movw	r16, r12
    3caa:	97 01       	movw	r18, r14
    3cac:	a2 01       	movw	r20, r4
    3cae:	b1 01       	movw	r22, r2
    3cb0:	c5 01       	movw	r24, r10
    3cb2:	09 95       	icall
    3cb4:	c4 01       	movw	r24, r8
    3cb6:	84 0d       	add	r24, r4
    3cb8:	95 1d       	adc	r25, r5
    3cba:	9e 83       	std	Y+6, r25	; 0x06
    3cbc:	8d 83       	std	Y+5, r24	; 0x05
    3cbe:	ac 01       	movw	r20, r24
    3cc0:	41 50       	subi	r20, 0x01	; 1
    3cc2:	51 09       	sbc	r21, r1
    3cc4:	d5 01       	movw	r26, r10
    3cc6:	ed 91       	ld	r30, X+
    3cc8:	fc 91       	ld	r31, X
    3cca:	02 88       	ldd	r0, Z+18	; 0x12
    3ccc:	f3 89       	ldd	r31, Z+19	; 0x13
    3cce:	e0 2d       	mov	r30, r0
    3cd0:	97 01       	movw	r18, r14
    3cd2:	b1 01       	movw	r22, r2
    3cd4:	c5 01       	movw	r24, r10
    3cd6:	09 95       	icall
    3cd8:	8b 81       	ldd	r24, Y+3	; 0x03
    3cda:	9c 81       	ldd	r25, Y+4	; 0x04
    3cdc:	88 1a       	sub	r8, r24
    3cde:	99 0a       	sbc	r9, r25
    3ce0:	af 81       	ldd	r26, Y+7	; 0x07
    3ce2:	b8 85       	ldd	r27, Y+8	; 0x08
    3ce4:	4a 0e       	add	r4, r26
    3ce6:	5b 1e       	adc	r5, r27
    3ce8:	d5 01       	movw	r26, r10
    3cea:	ed 91       	ld	r30, X+
    3cec:	fc 91       	ld	r31, X
    3cee:	00 88       	ldd	r0, Z+16	; 0x10
    3cf0:	f1 89       	ldd	r31, Z+17	; 0x11
    3cf2:	e0 2d       	mov	r30, r0
    3cf4:	94 01       	movw	r18, r8
    3cf6:	a2 01       	movw	r20, r4
    3cf8:	69 81       	ldd	r22, Y+1	; 0x01
    3cfa:	7a 81       	ldd	r23, Y+2	; 0x02
    3cfc:	c5 01       	movw	r24, r10
    3cfe:	09 95       	icall
    3d00:	89 81       	ldd	r24, Y+1	; 0x01
    3d02:	9a 81       	ldd	r25, Y+2	; 0x02
    3d04:	68 0e       	add	r6, r24
    3d06:	79 1e       	adc	r7, r25
    3d08:	b3 01       	movw	r22, r6
    3d0a:	61 50       	subi	r22, 0x01	; 1
    3d0c:	71 09       	sbc	r23, r1
    3d0e:	d5 01       	movw	r26, r10
    3d10:	ed 91       	ld	r30, X+
    3d12:	fc 91       	ld	r31, X
    3d14:	00 88       	ldd	r0, Z+16	; 0x10
    3d16:	f1 89       	ldd	r31, Z+17	; 0x11
    3d18:	e0 2d       	mov	r30, r0
    3d1a:	94 01       	movw	r18, r8
    3d1c:	a2 01       	movw	r20, r4
    3d1e:	c5 01       	movw	r24, r10
    3d20:	09 95       	icall
    3d22:	76 01       	movw	r14, r12
    3d24:	01 e0       	ldi	r16, 0x01	; 1
    3d26:	2f 81       	ldd	r18, Y+7	; 0x07
    3d28:	38 85       	ldd	r19, Y+8	; 0x08
    3d2a:	a2 01       	movw	r20, r4
    3d2c:	b1 01       	movw	r22, r2
    3d2e:	c5 01       	movw	r24, r10
    3d30:	0e 94 f9 1c 	call	0x39f2	; 0x39f2 <_ZN12Adafruit_GFX16drawCircleHelperEiiihj>
    3d34:	8f 81       	ldd	r24, Y+7	; 0x07
    3d36:	98 85       	ldd	r25, Y+8	; 0x08
    3d38:	68 1a       	sub	r6, r24
    3d3a:	79 0a       	sbc	r7, r25
    3d3c:	91 e0       	ldi	r25, 0x01	; 1
    3d3e:	69 1a       	sub	r6, r25
    3d40:	71 08       	sbc	r7, r1
    3d42:	02 e0       	ldi	r16, 0x02	; 2
    3d44:	2f 81       	ldd	r18, Y+7	; 0x07
    3d46:	38 85       	ldd	r19, Y+8	; 0x08
    3d48:	a2 01       	movw	r20, r4
    3d4a:	b3 01       	movw	r22, r6
    3d4c:	c5 01       	movw	r24, r10
    3d4e:	0e 94 f9 1c 	call	0x39f2	; 0x39f2 <_ZN12Adafruit_GFX16drawCircleHelperEiiihj>
    3d52:	8d 80       	ldd	r8, Y+5	; 0x05
    3d54:	9e 80       	ldd	r9, Y+6	; 0x06
    3d56:	af 81       	ldd	r26, Y+7	; 0x07
    3d58:	b8 85       	ldd	r27, Y+8	; 0x08
    3d5a:	8a 1a       	sub	r8, r26
    3d5c:	9b 0a       	sbc	r9, r27
    3d5e:	b1 e0       	ldi	r27, 0x01	; 1
    3d60:	8b 1a       	sub	r8, r27
    3d62:	91 08       	sbc	r9, r1
    3d64:	04 e0       	ldi	r16, 0x04	; 4
    3d66:	2f 81       	ldd	r18, Y+7	; 0x07
    3d68:	38 85       	ldd	r19, Y+8	; 0x08
    3d6a:	a4 01       	movw	r20, r8
    3d6c:	b3 01       	movw	r22, r6
    3d6e:	c5 01       	movw	r24, r10
    3d70:	0e 94 f9 1c 	call	0x39f2	; 0x39f2 <_ZN12Adafruit_GFX16drawCircleHelperEiiihj>
    3d74:	08 e0       	ldi	r16, 0x08	; 8
    3d76:	2f 81       	ldd	r18, Y+7	; 0x07
    3d78:	38 85       	ldd	r19, Y+8	; 0x08
    3d7a:	a4 01       	movw	r20, r8
    3d7c:	b1 01       	movw	r22, r2
    3d7e:	c5 01       	movw	r24, r10
    3d80:	0e 94 f9 1c 	call	0x39f2	; 0x39f2 <_ZN12Adafruit_GFX16drawCircleHelperEiiihj>
    3d84:	d5 01       	movw	r26, r10
    3d86:	ed 91       	ld	r30, X+
    3d88:	fc 91       	ld	r31, X
    3d8a:	06 88       	ldd	r0, Z+22	; 0x16
    3d8c:	f7 89       	ldd	r31, Z+23	; 0x17
    3d8e:	e0 2d       	mov	r30, r0
    3d90:	c5 01       	movw	r24, r10
    3d92:	28 96       	adiw	r28, 0x08	; 8
    3d94:	0f b6       	in	r0, 0x3f	; 63
    3d96:	f8 94       	cli
    3d98:	de bf       	out	0x3e, r29	; 62
    3d9a:	0f be       	out	0x3f, r0	; 63
    3d9c:	cd bf       	out	0x3d, r28	; 61
    3d9e:	df 91       	pop	r29
    3da0:	cf 91       	pop	r28
    3da2:	1f 91       	pop	r17
    3da4:	0f 91       	pop	r16
    3da6:	ff 90       	pop	r15
    3da8:	ef 90       	pop	r14
    3daa:	df 90       	pop	r13
    3dac:	cf 90       	pop	r12
    3dae:	bf 90       	pop	r11
    3db0:	af 90       	pop	r10
    3db2:	9f 90       	pop	r9
    3db4:	8f 90       	pop	r8
    3db6:	7f 90       	pop	r7
    3db8:	6f 90       	pop	r6
    3dba:	5f 90       	pop	r5
    3dbc:	4f 90       	pop	r4
    3dbe:	3f 90       	pop	r3
    3dc0:	2f 90       	pop	r2
    3dc2:	09 94       	ijmp

00003dc4 <_ZN12Adafruit_GFX12fillTriangleEiiiiiij>:
    3dc4:	2f 92       	push	r2
    3dc6:	3f 92       	push	r3
    3dc8:	4f 92       	push	r4
    3dca:	5f 92       	push	r5
    3dcc:	6f 92       	push	r6
    3dce:	7f 92       	push	r7
    3dd0:	8f 92       	push	r8
    3dd2:	9f 92       	push	r9
    3dd4:	af 92       	push	r10
    3dd6:	bf 92       	push	r11
    3dd8:	cf 92       	push	r12
    3dda:	df 92       	push	r13
    3ddc:	ef 92       	push	r14
    3dde:	ff 92       	push	r15
    3de0:	0f 93       	push	r16
    3de2:	1f 93       	push	r17
    3de4:	cf 93       	push	r28
    3de6:	df 93       	push	r29
    3de8:	cd b7       	in	r28, 0x3d	; 61
    3dea:	de b7       	in	r29, 0x3e	; 62
    3dec:	aa 97       	sbiw	r28, 0x2a	; 42
    3dee:	0f b6       	in	r0, 0x3f	; 63
    3df0:	f8 94       	cli
    3df2:	de bf       	out	0x3e, r29	; 62
    3df4:	0f be       	out	0x3f, r0	; 63
    3df6:	cd bf       	out	0x3d, r28	; 61
    3df8:	9a 83       	std	Y+2, r25	; 0x02
    3dfa:	89 83       	std	Y+1, r24	; 0x01
    3dfc:	7a a7       	std	Y+42, r23	; 0x2a
    3dfe:	69 a7       	std	Y+41, r22	; 0x29
    3e00:	4a 01       	movw	r8, r20
    3e02:	19 01       	movw	r2, r18
    3e04:	38 01       	movw	r6, r16
    3e06:	ba 8a       	std	Y+18, r11	; 0x12
    3e08:	a9 8a       	std	Y+17, r10	; 0x11
    3e0a:	04 17       	cp	r16, r20
    3e0c:	15 07       	cpc	r17, r21
    3e0e:	54 f4       	brge	.+20     	; 0x3e24 <_ZN12Adafruit_GFX12fillTriangleEiiiiiij+0x60>
    3e10:	c4 16       	cp	r12, r20
    3e12:	d5 06       	cpc	r13, r21
    3e14:	a4 f4       	brge	.+40     	; 0x3e3e <_ZN12Adafruit_GFX12fillTriangleEiiiiiij+0x7a>
    3e16:	5c 83       	std	Y+4, r21	; 0x04
    3e18:	4b 83       	std	Y+3, r20	; 0x03
    3e1a:	48 01       	movw	r8, r16
    3e1c:	5b 01       	movw	r10, r22
    3e1e:	3a a7       	std	Y+42, r19	; 0x2a
    3e20:	29 a7       	std	Y+41, r18	; 0x29
    3e22:	07 c0       	rjmp	.+14     	; 0x3e32 <_ZN12Adafruit_GFX12fillTriangleEiiiiiij+0x6e>
    3e24:	c0 16       	cp	r12, r16
    3e26:	d1 06       	cpc	r13, r17
    3e28:	0c f0       	brlt	.+2      	; 0x3e2c <_ZN12Adafruit_GFX12fillTriangleEiiiiiij+0x68>
    3e2a:	aa c1       	rjmp	.+852    	; 0x4180 <_ZN12Adafruit_GFX12fillTriangleEiiiiiij+0x3bc>
    3e2c:	7c 82       	std	Y+4, r7	; 0x04
    3e2e:	6b 82       	std	Y+3, r6	; 0x03
    3e30:	51 01       	movw	r10, r2
    3e32:	c8 14       	cp	r12, r8
    3e34:	d9 04       	cpc	r13, r9
    3e36:	84 f0       	brlt	.+32     	; 0x3e58 <_ZN12Adafruit_GFX12fillTriangleEiiiiiij+0x94>
    3e38:	36 01       	movw	r6, r12
    3e3a:	17 01       	movw	r2, r14
    3e3c:	13 c0       	rjmp	.+38     	; 0x3e64 <_ZN12Adafruit_GFX12fillTriangleEiiiiiij+0xa0>
    3e3e:	dc 82       	std	Y+4, r13	; 0x04
    3e40:	cb 82       	std	Y+3, r12	; 0x03
    3e42:	57 01       	movw	r10, r14
    3e44:	87 2d       	mov	r24, r7
    3e46:	3a 01       	movw	r6, r20
    3e48:	80 2e       	mov	r8, r16
    3e4a:	98 2e       	mov	r9, r24
    3e4c:	83 2d       	mov	r24, r3
    3e4e:	29 a4       	ldd	r2, Y+41	; 0x29
    3e50:	3a a4       	ldd	r3, Y+42	; 0x2a
    3e52:	29 a7       	std	Y+41, r18	; 0x29
    3e54:	8a a7       	std	Y+42, r24	; 0x2a
    3e56:	06 c0       	rjmp	.+12     	; 0x3e64 <_ZN12Adafruit_GFX12fillTriangleEiiiiiij+0xa0>
    3e58:	34 01       	movw	r6, r8
    3e5a:	29 a4       	ldd	r2, Y+41	; 0x29
    3e5c:	3a a4       	ldd	r3, Y+42	; 0x2a
    3e5e:	46 01       	movw	r8, r12
    3e60:	e9 a6       	std	Y+41, r14	; 0x29
    3e62:	fa a6       	std	Y+42, r15	; 0x2a
    3e64:	a9 81       	ldd	r26, Y+1	; 0x01
    3e66:	ba 81       	ldd	r27, Y+2	; 0x02
    3e68:	ed 91       	ld	r30, X+
    3e6a:	fc 91       	ld	r31, X
    3e6c:	11 97       	sbiw	r26, 0x01	; 1
    3e6e:	02 84       	ldd	r0, Z+10	; 0x0a
    3e70:	f3 85       	ldd	r31, Z+11	; 0x0b
    3e72:	e0 2d       	mov	r30, r0
    3e74:	cd 01       	movw	r24, r26
    3e76:	09 95       	icall
    3e78:	2b 81       	ldd	r18, Y+3	; 0x03
    3e7a:	3c 81       	ldd	r19, Y+4	; 0x04
    3e7c:	82 16       	cp	r8, r18
    3e7e:	93 06       	cpc	r9, r19
    3e80:	81 f5       	brne	.+96     	; 0x3ee2 <_ZN12Adafruit_GFX12fillTriangleEiiiiiij+0x11e>
    3e82:	49 a5       	ldd	r20, Y+41	; 0x29
    3e84:	5a a5       	ldd	r21, Y+42	; 0x2a
    3e86:	24 16       	cp	r2, r20
    3e88:	35 06       	cpc	r3, r21
    3e8a:	5c f0       	brlt	.+22     	; 0x3ea2 <_ZN12Adafruit_GFX12fillTriangleEiiiiiij+0xde>
    3e8c:	99 a5       	ldd	r25, Y+41	; 0x29
    3e8e:	8a a5       	ldd	r24, Y+42	; 0x2a
    3e90:	42 15       	cp	r20, r2
    3e92:	53 05       	cpc	r21, r3
    3e94:	14 f4       	brge	.+4      	; 0x3e9a <_ZN12Adafruit_GFX12fillTriangleEiiiiiij+0xd6>
    3e96:	92 2d       	mov	r25, r2
    3e98:	83 2d       	mov	r24, r3
    3e9a:	29 a4       	ldd	r2, Y+41	; 0x29
    3e9c:	3a a4       	ldd	r3, Y+42	; 0x2a
    3e9e:	99 a7       	std	Y+41, r25	; 0x29
    3ea0:	8a a7       	std	Y+42, r24	; 0x2a
    3ea2:	a2 14       	cp	r10, r2
    3ea4:	b3 04       	cpc	r11, r3
    3ea6:	44 f0       	brlt	.+16     	; 0x3eb8 <_ZN12Adafruit_GFX12fillTriangleEiiiiiij+0xf4>
    3ea8:	69 a5       	ldd	r22, Y+41	; 0x29
    3eaa:	7a a5       	ldd	r23, Y+42	; 0x2a
    3eac:	6a 15       	cp	r22, r10
    3eae:	7b 05       	cpc	r23, r11
    3eb0:	14 f4       	brge	.+4      	; 0x3eb6 <_ZN12Adafruit_GFX12fillTriangleEiiiiiij+0xf2>
    3eb2:	ba a6       	std	Y+42, r11	; 0x2a
    3eb4:	a9 a6       	std	Y+41, r10	; 0x29
    3eb6:	51 01       	movw	r10, r2
    3eb8:	29 a5       	ldd	r18, Y+41	; 0x29
    3eba:	3a a5       	ldd	r19, Y+42	; 0x2a
    3ebc:	2a 19       	sub	r18, r10
    3ebe:	3b 09       	sbc	r19, r11
    3ec0:	2f 5f       	subi	r18, 0xFF	; 255
    3ec2:	3f 4f       	sbci	r19, 0xFF	; 255
    3ec4:	a9 81       	ldd	r26, Y+1	; 0x01
    3ec6:	ba 81       	ldd	r27, Y+2	; 0x02
    3ec8:	ed 91       	ld	r30, X+
    3eca:	fc 91       	ld	r31, X
    3ecc:	11 97       	sbiw	r26, 0x01	; 1
    3ece:	02 88       	ldd	r0, Z+18	; 0x12
    3ed0:	f3 89       	ldd	r31, Z+19	; 0x13
    3ed2:	e0 2d       	mov	r30, r0
    3ed4:	09 89       	ldd	r16, Y+17	; 0x11
    3ed6:	1a 89       	ldd	r17, Y+18	; 0x12
    3ed8:	a4 01       	movw	r20, r8
    3eda:	b5 01       	movw	r22, r10
    3edc:	cd 01       	movw	r24, r26
    3ede:	09 95       	icall
    3ee0:	2d c1       	rjmp	.+602    	; 0x413c <_ZN12Adafruit_GFX12fillTriangleEiiiiiij+0x378>
    3ee2:	c1 01       	movw	r24, r2
    3ee4:	29 a5       	ldd	r18, Y+41	; 0x29
    3ee6:	3a a5       	ldd	r19, Y+42	; 0x2a
    3ee8:	82 1b       	sub	r24, r18
    3eea:	93 0b       	sbc	r25, r19
    3eec:	93 01       	movw	r18, r6
    3eee:	28 19       	sub	r18, r8
    3ef0:	39 09       	sbc	r19, r9
    3ef2:	65 01       	movw	r12, r10
    3ef4:	49 a5       	ldd	r20, Y+41	; 0x29
    3ef6:	5a a5       	ldd	r21, Y+42	; 0x2a
    3ef8:	c4 1a       	sub	r12, r20
    3efa:	d5 0a       	sbc	r13, r21
    3efc:	6b 81       	ldd	r22, Y+3	; 0x03
    3efe:	7c 81       	ldd	r23, Y+4	; 0x04
    3f00:	68 19       	sub	r22, r8
    3f02:	79 09       	sbc	r23, r9
    3f04:	7a 87       	std	Y+10, r23	; 0x0a
    3f06:	69 87       	std	Y+9, r22	; 0x09
    3f08:	25 01       	movw	r4, r10
    3f0a:	42 18       	sub	r4, r2
    3f0c:	53 08       	sbc	r5, r3
    3f0e:	ab 81       	ldd	r26, Y+3	; 0x03
    3f10:	bc 81       	ldd	r27, Y+4	; 0x04
    3f12:	a6 19       	sub	r26, r6
    3f14:	b7 09       	sbc	r27, r7
    3f16:	bc 8b       	std	Y+20, r27	; 0x14
    3f18:	ab 8b       	std	Y+19, r26	; 0x13
    3f1a:	4b 81       	ldd	r20, Y+3	; 0x03
    3f1c:	5c 81       	ldd	r21, Y+4	; 0x04
    3f1e:	64 16       	cp	r6, r20
    3f20:	75 06       	cpc	r7, r21
    3f22:	31 f0       	breq	.+12     	; 0x3f30 <_ZN12Adafruit_GFX12fillTriangleEiiiiiij+0x16c>
    3f24:	b3 01       	movw	r22, r6
    3f26:	61 50       	subi	r22, 0x01	; 1
    3f28:	71 09       	sbc	r23, r1
    3f2a:	78 8f       	std	Y+24, r23	; 0x18
    3f2c:	6f 8b       	std	Y+23, r22	; 0x17
    3f2e:	02 c0       	rjmp	.+4      	; 0x3f34 <_ZN12Adafruit_GFX12fillTriangleEiiiiiij+0x170>
    3f30:	78 8e       	std	Y+24, r7	; 0x18
    3f32:	6f 8a       	std	Y+23, r6	; 0x17
    3f34:	54 01       	movw	r10, r8
    3f36:	1d 86       	std	Y+13, r1	; 0x0d
    3f38:	1e 86       	std	Y+14, r1	; 0x0e
    3f3a:	1f 86       	std	Y+15, r1	; 0x0f
    3f3c:	18 8a       	std	Y+16, r1	; 0x10
    3f3e:	1d 82       	std	Y+5, r1	; 0x05
    3f40:	1e 82       	std	Y+6, r1	; 0x06
    3f42:	1f 82       	std	Y+7, r1	; 0x07
    3f44:	18 86       	std	Y+8, r1	; 0x08
    3f46:	a6 01       	movw	r20, r12
    3f48:	0d 2c       	mov	r0, r13
    3f4a:	00 0c       	add	r0, r0
    3f4c:	66 0b       	sbc	r22, r22
    3f4e:	77 0b       	sbc	r23, r23
    3f50:	49 8f       	std	Y+25, r20	; 0x19
    3f52:	5a 8f       	std	Y+26, r21	; 0x1a
    3f54:	6b 8f       	std	Y+27, r22	; 0x1b
    3f56:	7c 8f       	std	Y+28, r23	; 0x1c
    3f58:	a9 01       	movw	r20, r18
    3f5a:	33 0f       	add	r19, r19
    3f5c:	66 0b       	sbc	r22, r22
    3f5e:	77 0b       	sbc	r23, r23
    3f60:	4d 8f       	std	Y+29, r20	; 0x1d
    3f62:	5e 8f       	std	Y+30, r21	; 0x1e
    3f64:	6f 8f       	std	Y+31, r22	; 0x1f
    3f66:	78 a3       	std	Y+32, r23	; 0x20
    3f68:	29 85       	ldd	r18, Y+9	; 0x09
    3f6a:	3a 85       	ldd	r19, Y+10	; 0x0a
    3f6c:	03 2e       	mov	r0, r19
    3f6e:	00 0c       	add	r0, r0
    3f70:	44 0b       	sbc	r20, r20
    3f72:	55 0b       	sbc	r21, r21
    3f74:	29 a3       	std	Y+33, r18	; 0x21
    3f76:	3a a3       	std	Y+34, r19	; 0x22
    3f78:	4b a3       	std	Y+35, r20	; 0x23
    3f7a:	5c a3       	std	Y+36, r21	; 0x24
    3f7c:	ac 01       	movw	r20, r24
    3f7e:	99 0f       	add	r25, r25
    3f80:	66 0b       	sbc	r22, r22
    3f82:	77 0b       	sbc	r23, r23
    3f84:	4d a3       	std	Y+37, r20	; 0x25
    3f86:	5e a3       	std	Y+38, r21	; 0x26
    3f88:	6f a3       	std	Y+39, r22	; 0x27
    3f8a:	78 a7       	std	Y+40, r23	; 0x28
    3f8c:	6f 89       	ldd	r22, Y+23	; 0x17
    3f8e:	78 8d       	ldd	r23, Y+24	; 0x18
    3f90:	6a 15       	cp	r22, r10
    3f92:	7b 05       	cpc	r23, r11
    3f94:	0c f4       	brge	.+2      	; 0x3f98 <_ZN12Adafruit_GFX12fillTriangleEiiiiiij+0x1d4>
    3f96:	5a c0       	rjmp	.+180    	; 0x404c <_ZN12Adafruit_GFX12fillTriangleEiiiiiij+0x288>
    3f98:	6d 81       	ldd	r22, Y+5	; 0x05
    3f9a:	7e 81       	ldd	r23, Y+6	; 0x06
    3f9c:	8f 81       	ldd	r24, Y+7	; 0x07
    3f9e:	98 85       	ldd	r25, Y+8	; 0x08
    3fa0:	2d 8d       	ldd	r18, Y+29	; 0x1d
    3fa2:	3e 8d       	ldd	r19, Y+30	; 0x1e
    3fa4:	4f 8d       	ldd	r20, Y+31	; 0x1f
    3fa6:	58 a1       	ldd	r21, Y+32	; 0x20
    3fa8:	0e 94 e0 2f 	call	0x5fc0	; 0x5fc0 <__divmodsi4>
    3fac:	e9 a4       	ldd	r14, Y+41	; 0x29
    3fae:	fa a4       	ldd	r15, Y+42	; 0x2a
    3fb0:	e2 0e       	add	r14, r18
    3fb2:	f3 1e       	adc	r15, r19
    3fb4:	6d 85       	ldd	r22, Y+13	; 0x0d
    3fb6:	7e 85       	ldd	r23, Y+14	; 0x0e
    3fb8:	8f 85       	ldd	r24, Y+15	; 0x0f
    3fba:	98 89       	ldd	r25, Y+16	; 0x10
    3fbc:	29 a1       	ldd	r18, Y+33	; 0x21
    3fbe:	3a a1       	ldd	r19, Y+34	; 0x22
    3fc0:	4b a1       	ldd	r20, Y+35	; 0x23
    3fc2:	5c a1       	ldd	r21, Y+36	; 0x24
    3fc4:	0e 94 e0 2f 	call	0x5fc0	; 0x5fc0 <__divmodsi4>
    3fc8:	89 a5       	ldd	r24, Y+41	; 0x29
    3fca:	9a a5       	ldd	r25, Y+42	; 0x2a
    3fcc:	28 0f       	add	r18, r24
    3fce:	39 1f       	adc	r19, r25
    3fd0:	4d 81       	ldd	r20, Y+5	; 0x05
    3fd2:	5e 81       	ldd	r21, Y+6	; 0x06
    3fd4:	6f 81       	ldd	r22, Y+7	; 0x07
    3fd6:	78 85       	ldd	r23, Y+8	; 0x08
    3fd8:	8d a1       	ldd	r24, Y+37	; 0x25
    3fda:	9e a1       	ldd	r25, Y+38	; 0x26
    3fdc:	af a1       	ldd	r26, Y+39	; 0x27
    3fde:	b8 a5       	ldd	r27, Y+40	; 0x28
    3fe0:	48 0f       	add	r20, r24
    3fe2:	59 1f       	adc	r21, r25
    3fe4:	6a 1f       	adc	r22, r26
    3fe6:	7b 1f       	adc	r23, r27
    3fe8:	4d 83       	std	Y+5, r20	; 0x05
    3fea:	5e 83       	std	Y+6, r21	; 0x06
    3fec:	6f 83       	std	Y+7, r22	; 0x07
    3fee:	78 87       	std	Y+8, r23	; 0x08
    3ff0:	4d 85       	ldd	r20, Y+13	; 0x0d
    3ff2:	5e 85       	ldd	r21, Y+14	; 0x0e
    3ff4:	6f 85       	ldd	r22, Y+15	; 0x0f
    3ff6:	78 89       	ldd	r23, Y+16	; 0x10
    3ff8:	89 8d       	ldd	r24, Y+25	; 0x19
    3ffa:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3ffc:	ab 8d       	ldd	r26, Y+27	; 0x1b
    3ffe:	bc 8d       	ldd	r27, Y+28	; 0x1c
    4000:	48 0f       	add	r20, r24
    4002:	59 1f       	adc	r21, r25
    4004:	6a 1f       	adc	r22, r26
    4006:	7b 1f       	adc	r23, r27
    4008:	4d 87       	std	Y+13, r20	; 0x0d
    400a:	5e 87       	std	Y+14, r21	; 0x0e
    400c:	6f 87       	std	Y+15, r22	; 0x0f
    400e:	78 8b       	std	Y+16, r23	; 0x10
    4010:	2e 15       	cp	r18, r14
    4012:	3f 05       	cpc	r19, r15
    4014:	2c f4       	brge	.+10     	; 0x4020 <_ZN12Adafruit_GFX12fillTriangleEiiiiiij+0x25c>
    4016:	9e 2d       	mov	r25, r14
    4018:	8f 2d       	mov	r24, r15
    401a:	79 01       	movw	r14, r18
    401c:	29 2f       	mov	r18, r25
    401e:	38 2f       	mov	r19, r24
    4020:	2e 19       	sub	r18, r14
    4022:	3f 09       	sbc	r19, r15
    4024:	2f 5f       	subi	r18, 0xFF	; 255
    4026:	3f 4f       	sbci	r19, 0xFF	; 255
    4028:	a9 81       	ldd	r26, Y+1	; 0x01
    402a:	ba 81       	ldd	r27, Y+2	; 0x02
    402c:	ed 91       	ld	r30, X+
    402e:	fc 91       	ld	r31, X
    4030:	11 97       	sbiw	r26, 0x01	; 1
    4032:	02 88       	ldd	r0, Z+18	; 0x12
    4034:	f3 89       	ldd	r31, Z+19	; 0x13
    4036:	e0 2d       	mov	r30, r0
    4038:	09 89       	ldd	r16, Y+17	; 0x11
    403a:	1a 89       	ldd	r17, Y+18	; 0x12
    403c:	a5 01       	movw	r20, r10
    403e:	b7 01       	movw	r22, r14
    4040:	cd 01       	movw	r24, r26
    4042:	09 95       	icall
    4044:	bf ef       	ldi	r27, 0xFF	; 255
    4046:	ab 1a       	sub	r10, r27
    4048:	bb 0a       	sbc	r11, r27
    404a:	a0 cf       	rjmp	.-192    	; 0x3f8c <_ZN12Adafruit_GFX12fillTriangleEiiiiiij+0x1c8>
    404c:	92 01       	movw	r18, r4
    404e:	05 2c       	mov	r0, r5
    4050:	00 0c       	add	r0, r0
    4052:	44 0b       	sbc	r20, r20
    4054:	55 0b       	sbc	r21, r21
    4056:	2d 83       	std	Y+5, r18	; 0x05
    4058:	3e 83       	std	Y+6, r19	; 0x06
    405a:	4f 83       	std	Y+7, r20	; 0x07
    405c:	58 87       	std	Y+8, r21	; 0x08
    405e:	d5 01       	movw	r26, r10
    4060:	a6 19       	sub	r26, r6
    4062:	b7 09       	sbc	r27, r7
    4064:	92 01       	movw	r18, r4
    4066:	0e 94 ff 2f 	call	0x5ffe	; 0x5ffe <__mulhisi3>
    406a:	2b 01       	movw	r4, r22
    406c:	3c 01       	movw	r6, r24
    406e:	d5 01       	movw	r26, r10
    4070:	a8 19       	sub	r26, r8
    4072:	b9 09       	sbc	r27, r9
    4074:	96 01       	movw	r18, r12
    4076:	0e 94 ff 2f 	call	0x5ffe	; 0x5ffe <__mulhisi3>
    407a:	6b 01       	movw	r12, r22
    407c:	7c 01       	movw	r14, r24
    407e:	4b 89       	ldd	r20, Y+19	; 0x13
    4080:	5c 89       	ldd	r21, Y+20	; 0x14
    4082:	05 2e       	mov	r0, r21
    4084:	00 0c       	add	r0, r0
    4086:	66 0b       	sbc	r22, r22
    4088:	77 0b       	sbc	r23, r23
    408a:	4b 8b       	std	Y+19, r20	; 0x13
    408c:	5c 8b       	std	Y+20, r21	; 0x14
    408e:	6d 8b       	std	Y+21, r22	; 0x15
    4090:	7e 8b       	std	Y+22, r23	; 0x16
    4092:	69 85       	ldd	r22, Y+9	; 0x09
    4094:	7a 85       	ldd	r23, Y+10	; 0x0a
    4096:	07 2e       	mov	r0, r23
    4098:	00 0c       	add	r0, r0
    409a:	88 0b       	sbc	r24, r24
    409c:	99 0b       	sbc	r25, r25
    409e:	69 87       	std	Y+9, r22	; 0x09
    40a0:	7a 87       	std	Y+10, r23	; 0x0a
    40a2:	8b 87       	std	Y+11, r24	; 0x0b
    40a4:	9c 87       	std	Y+12, r25	; 0x0c
    40a6:	8b 81       	ldd	r24, Y+3	; 0x03
    40a8:	9c 81       	ldd	r25, Y+4	; 0x04
    40aa:	8a 15       	cp	r24, r10
    40ac:	9b 05       	cpc	r25, r11
    40ae:	0c f4       	brge	.+2      	; 0x40b2 <_ZN12Adafruit_GFX12fillTriangleEiiiiiij+0x2ee>
    40b0:	45 c0       	rjmp	.+138    	; 0x413c <_ZN12Adafruit_GFX12fillTriangleEiiiiiij+0x378>
    40b2:	c3 01       	movw	r24, r6
    40b4:	b2 01       	movw	r22, r4
    40b6:	2b 89       	ldd	r18, Y+19	; 0x13
    40b8:	3c 89       	ldd	r19, Y+20	; 0x14
    40ba:	4d 89       	ldd	r20, Y+21	; 0x15
    40bc:	5e 89       	ldd	r21, Y+22	; 0x16
    40be:	0e 94 e0 2f 	call	0x5fc0	; 0x5fc0 <__divmodsi4>
    40c2:	41 01       	movw	r8, r2
    40c4:	82 0e       	add	r8, r18
    40c6:	93 1e       	adc	r9, r19
    40c8:	c7 01       	movw	r24, r14
    40ca:	b6 01       	movw	r22, r12
    40cc:	29 85       	ldd	r18, Y+9	; 0x09
    40ce:	3a 85       	ldd	r19, Y+10	; 0x0a
    40d0:	4b 85       	ldd	r20, Y+11	; 0x0b
    40d2:	5c 85       	ldd	r21, Y+12	; 0x0c
    40d4:	0e 94 e0 2f 	call	0x5fc0	; 0x5fc0 <__divmodsi4>
    40d8:	a9 a5       	ldd	r26, Y+41	; 0x29
    40da:	ba a5       	ldd	r27, Y+42	; 0x2a
    40dc:	2a 0f       	add	r18, r26
    40de:	3b 1f       	adc	r19, r27
    40e0:	4d 81       	ldd	r20, Y+5	; 0x05
    40e2:	5e 81       	ldd	r21, Y+6	; 0x06
    40e4:	6f 81       	ldd	r22, Y+7	; 0x07
    40e6:	78 85       	ldd	r23, Y+8	; 0x08
    40e8:	44 0e       	add	r4, r20
    40ea:	55 1e       	adc	r5, r21
    40ec:	66 1e       	adc	r6, r22
    40ee:	77 1e       	adc	r7, r23
    40f0:	69 8d       	ldd	r22, Y+25	; 0x19
    40f2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    40f4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    40f6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    40f8:	c6 0e       	add	r12, r22
    40fa:	d7 1e       	adc	r13, r23
    40fc:	e8 1e       	adc	r14, r24
    40fe:	f9 1e       	adc	r15, r25
    4100:	28 15       	cp	r18, r8
    4102:	39 05       	cpc	r19, r9
    4104:	2c f4       	brge	.+10     	; 0x4110 <_ZN12Adafruit_GFX12fillTriangleEiiiiiij+0x34c>
    4106:	98 2d       	mov	r25, r8
    4108:	89 2d       	mov	r24, r9
    410a:	49 01       	movw	r8, r18
    410c:	29 2f       	mov	r18, r25
    410e:	38 2f       	mov	r19, r24
    4110:	28 19       	sub	r18, r8
    4112:	39 09       	sbc	r19, r9
    4114:	2f 5f       	subi	r18, 0xFF	; 255
    4116:	3f 4f       	sbci	r19, 0xFF	; 255
    4118:	a9 81       	ldd	r26, Y+1	; 0x01
    411a:	ba 81       	ldd	r27, Y+2	; 0x02
    411c:	ed 91       	ld	r30, X+
    411e:	fc 91       	ld	r31, X
    4120:	11 97       	sbiw	r26, 0x01	; 1
    4122:	02 88       	ldd	r0, Z+18	; 0x12
    4124:	f3 89       	ldd	r31, Z+19	; 0x13
    4126:	e0 2d       	mov	r30, r0
    4128:	09 89       	ldd	r16, Y+17	; 0x11
    412a:	1a 89       	ldd	r17, Y+18	; 0x12
    412c:	a5 01       	movw	r20, r10
    412e:	b4 01       	movw	r22, r8
    4130:	cd 01       	movw	r24, r26
    4132:	09 95       	icall
    4134:	bf ef       	ldi	r27, 0xFF	; 255
    4136:	ab 1a       	sub	r10, r27
    4138:	bb 0a       	sbc	r11, r27
    413a:	b5 cf       	rjmp	.-150    	; 0x40a6 <_ZN12Adafruit_GFX12fillTriangleEiiiiiij+0x2e2>
    413c:	a9 81       	ldd	r26, Y+1	; 0x01
    413e:	ba 81       	ldd	r27, Y+2	; 0x02
    4140:	ed 91       	ld	r30, X+
    4142:	fc 91       	ld	r31, X
    4144:	11 97       	sbiw	r26, 0x01	; 1
    4146:	06 88       	ldd	r0, Z+22	; 0x16
    4148:	f7 89       	ldd	r31, Z+23	; 0x17
    414a:	e0 2d       	mov	r30, r0
    414c:	cd 01       	movw	r24, r26
    414e:	aa 96       	adiw	r28, 0x2a	; 42
    4150:	0f b6       	in	r0, 0x3f	; 63
    4152:	f8 94       	cli
    4154:	de bf       	out	0x3e, r29	; 62
    4156:	0f be       	out	0x3f, r0	; 63
    4158:	cd bf       	out	0x3d, r28	; 61
    415a:	df 91       	pop	r29
    415c:	cf 91       	pop	r28
    415e:	1f 91       	pop	r17
    4160:	0f 91       	pop	r16
    4162:	ff 90       	pop	r15
    4164:	ef 90       	pop	r14
    4166:	df 90       	pop	r13
    4168:	cf 90       	pop	r12
    416a:	bf 90       	pop	r11
    416c:	af 90       	pop	r10
    416e:	9f 90       	pop	r9
    4170:	8f 90       	pop	r8
    4172:	7f 90       	pop	r7
    4174:	6f 90       	pop	r6
    4176:	5f 90       	pop	r5
    4178:	4f 90       	pop	r4
    417a:	3f 90       	pop	r3
    417c:	2f 90       	pop	r2
    417e:	09 94       	ijmp
    4180:	dc 82       	std	Y+4, r13	; 0x04
    4182:	cb 82       	std	Y+3, r12	; 0x03
    4184:	57 01       	movw	r10, r14
    4186:	6e ce       	rjmp	.-804    	; 0x3e64 <_ZN12Adafruit_GFX12fillTriangleEiiiiiij+0xa0>

00004188 <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij>:
    4188:	3f 92       	push	r3
    418a:	4f 92       	push	r4
    418c:	5f 92       	push	r5
    418e:	6f 92       	push	r6
    4190:	7f 92       	push	r7
    4192:	8f 92       	push	r8
    4194:	9f 92       	push	r9
    4196:	af 92       	push	r10
    4198:	bf 92       	push	r11
    419a:	cf 92       	push	r12
    419c:	df 92       	push	r13
    419e:	ef 92       	push	r14
    41a0:	ff 92       	push	r15
    41a2:	0f 93       	push	r16
    41a4:	1f 93       	push	r17
    41a6:	cf 93       	push	r28
    41a8:	df 93       	push	r29
    41aa:	cd b7       	in	r28, 0x3d	; 61
    41ac:	de b7       	in	r29, 0x3e	; 62
    41ae:	2a 97       	sbiw	r28, 0x0a	; 10
    41b0:	0f b6       	in	r0, 0x3f	; 63
    41b2:	f8 94       	cli
    41b4:	de bf       	out	0x3e, r29	; 62
    41b6:	0f be       	out	0x3f, r0	; 63
    41b8:	cd bf       	out	0x3d, r28	; 61
    41ba:	5c 01       	movw	r10, r24
    41bc:	7e 83       	std	Y+6, r23	; 0x06
    41be:	6d 83       	std	Y+5, r22	; 0x05
    41c0:	58 87       	std	Y+8, r21	; 0x08
    41c2:	4f 83       	std	Y+7, r20	; 0x07
    41c4:	29 01       	movw	r4, r18
    41c6:	37 01       	movw	r6, r14
    41c8:	dc 01       	movw	r26, r24
    41ca:	ed 91       	ld	r30, X+
    41cc:	fc 91       	ld	r31, X
    41ce:	02 84       	ldd	r0, Z+10	; 0x0a
    41d0:	f3 85       	ldd	r31, Z+11	; 0x0b
    41d2:	e0 2d       	mov	r30, r0
    41d4:	09 95       	icall
    41d6:	c8 01       	movw	r24, r16
    41d8:	07 96       	adiw	r24, 0x07	; 7
    41da:	97 fd       	sbrc	r25, 7
    41dc:	07 96       	adiw	r24, 0x07	; 7
    41de:	9c 01       	movw	r18, r24
    41e0:	93 e0       	ldi	r25, 0x03	; 3
    41e2:	35 95       	asr	r19
    41e4:	27 95       	ror	r18
    41e6:	9a 95       	dec	r25
    41e8:	e1 f7       	brne	.-8      	; 0x41e2 <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij+0x5a>
    41ea:	3a 83       	std	Y+2, r19	; 0x02
    41ec:	29 83       	std	Y+1, r18	; 0x01
    41ee:	81 2c       	mov	r8, r1
    41f0:	91 2c       	mov	r9, r1
    41f2:	e1 2c       	mov	r14, r1
    41f4:	f1 2c       	mov	r15, r1
    41f6:	31 2c       	mov	r3, r1
    41f8:	8f 81       	ldd	r24, Y+7	; 0x07
    41fa:	98 85       	ldd	r25, Y+8	; 0x08
    41fc:	8e 0d       	add	r24, r14
    41fe:	9f 1d       	adc	r25, r15
    4200:	9c 83       	std	Y+4, r25	; 0x04
    4202:	8b 83       	std	Y+3, r24	; 0x03
    4204:	e6 14       	cp	r14, r6
    4206:	f7 04       	cpc	r15, r7
    4208:	0c f0       	brlt	.+2      	; 0x420c <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij+0x84>
    420a:	3d c0       	rjmp	.+122    	; 0x4286 <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij+0xfe>
    420c:	1a 86       	std	Y+10, r1	; 0x0a
    420e:	19 86       	std	Y+9, r1	; 0x09
    4210:	a9 85       	ldd	r26, Y+9	; 0x09
    4212:	ba 85       	ldd	r27, Y+10	; 0x0a
    4214:	a0 17       	cp	r26, r16
    4216:	b1 07       	cpc	r27, r17
    4218:	74 f5       	brge	.+92     	; 0x4276 <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij+0xee>
    421a:	cd 01       	movw	r24, r26
    421c:	87 70       	andi	r24, 0x07	; 7
    421e:	99 27       	eor	r25, r25
    4220:	89 2b       	or	r24, r25
    4222:	11 f0       	breq	.+4      	; 0x4228 <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij+0xa0>
    4224:	33 0c       	add	r3, r3
    4226:	0e c0       	rjmp	.+28     	; 0x4244 <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij+0xbc>
    4228:	e9 85       	ldd	r30, Y+9	; 0x09
    422a:	fa 85       	ldd	r31, Y+10	; 0x0a
    422c:	f7 fd       	sbrc	r31, 7
    422e:	37 96       	adiw	r30, 0x07	; 7
    4230:	83 e0       	ldi	r24, 0x03	; 3
    4232:	f5 95       	asr	r31
    4234:	e7 95       	ror	r30
    4236:	8a 95       	dec	r24
    4238:	e1 f7       	brne	.-8      	; 0x4232 <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij+0xaa>
    423a:	e8 0d       	add	r30, r8
    423c:	f9 1d       	adc	r31, r9
    423e:	e4 0d       	add	r30, r4
    4240:	f5 1d       	adc	r31, r5
    4242:	34 90       	lpm	r3, Z
    4244:	37 fe       	sbrs	r3, 7
    4246:	11 c0       	rjmp	.+34     	; 0x426a <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij+0xe2>
    4248:	d5 01       	movw	r26, r10
    424a:	ed 91       	ld	r30, X+
    424c:	fc 91       	ld	r31, X
    424e:	04 84       	ldd	r0, Z+12	; 0x0c
    4250:	f5 85       	ldd	r31, Z+13	; 0x0d
    4252:	e0 2d       	mov	r30, r0
    4254:	96 01       	movw	r18, r12
    4256:	4b 81       	ldd	r20, Y+3	; 0x03
    4258:	5c 81       	ldd	r21, Y+4	; 0x04
    425a:	6d 81       	ldd	r22, Y+5	; 0x05
    425c:	7e 81       	ldd	r23, Y+6	; 0x06
    425e:	89 85       	ldd	r24, Y+9	; 0x09
    4260:	9a 85       	ldd	r25, Y+10	; 0x0a
    4262:	68 0f       	add	r22, r24
    4264:	79 1f       	adc	r23, r25
    4266:	c5 01       	movw	r24, r10
    4268:	09 95       	icall
    426a:	a9 85       	ldd	r26, Y+9	; 0x09
    426c:	ba 85       	ldd	r27, Y+10	; 0x0a
    426e:	11 96       	adiw	r26, 0x01	; 1
    4270:	ba 87       	std	Y+10, r27	; 0x0a
    4272:	a9 87       	std	Y+9, r26	; 0x09
    4274:	cd cf       	rjmp	.-102    	; 0x4210 <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij+0x88>
    4276:	bf ef       	ldi	r27, 0xFF	; 255
    4278:	eb 1a       	sub	r14, r27
    427a:	fb 0a       	sbc	r15, r27
    427c:	29 81       	ldd	r18, Y+1	; 0x01
    427e:	3a 81       	ldd	r19, Y+2	; 0x02
    4280:	82 0e       	add	r8, r18
    4282:	93 1e       	adc	r9, r19
    4284:	b9 cf       	rjmp	.-142    	; 0x41f8 <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij+0x70>
    4286:	d5 01       	movw	r26, r10
    4288:	ed 91       	ld	r30, X+
    428a:	fc 91       	ld	r31, X
    428c:	06 88       	ldd	r0, Z+22	; 0x16
    428e:	f7 89       	ldd	r31, Z+23	; 0x17
    4290:	e0 2d       	mov	r30, r0
    4292:	c5 01       	movw	r24, r10
    4294:	2a 96       	adiw	r28, 0x0a	; 10
    4296:	0f b6       	in	r0, 0x3f	; 63
    4298:	f8 94       	cli
    429a:	de bf       	out	0x3e, r29	; 62
    429c:	0f be       	out	0x3f, r0	; 63
    429e:	cd bf       	out	0x3d, r28	; 61
    42a0:	df 91       	pop	r29
    42a2:	cf 91       	pop	r28
    42a4:	1f 91       	pop	r17
    42a6:	0f 91       	pop	r16
    42a8:	ff 90       	pop	r15
    42aa:	ef 90       	pop	r14
    42ac:	df 90       	pop	r13
    42ae:	cf 90       	pop	r12
    42b0:	bf 90       	pop	r11
    42b2:	af 90       	pop	r10
    42b4:	9f 90       	pop	r9
    42b6:	8f 90       	pop	r8
    42b8:	7f 90       	pop	r7
    42ba:	6f 90       	pop	r6
    42bc:	5f 90       	pop	r5
    42be:	4f 90       	pop	r4
    42c0:	3f 90       	pop	r3
    42c2:	09 94       	ijmp

000042c4 <_ZN12Adafruit_GFX8drawCharEiihjjhh>:
    42c4:	2f 92       	push	r2
    42c6:	3f 92       	push	r3
    42c8:	4f 92       	push	r4
    42ca:	5f 92       	push	r5
    42cc:	6f 92       	push	r6
    42ce:	7f 92       	push	r7
    42d0:	8f 92       	push	r8
    42d2:	9f 92       	push	r9
    42d4:	af 92       	push	r10
    42d6:	bf 92       	push	r11
    42d8:	cf 92       	push	r12
    42da:	df 92       	push	r13
    42dc:	ef 92       	push	r14
    42de:	ff 92       	push	r15
    42e0:	0f 93       	push	r16
    42e2:	1f 93       	push	r17
    42e4:	cf 93       	push	r28
    42e6:	df 93       	push	r29
    42e8:	cd b7       	in	r28, 0x3d	; 61
    42ea:	de b7       	in	r29, 0x3e	; 62
    42ec:	6b 97       	sbiw	r28, 0x1b	; 27
    42ee:	0f b6       	in	r0, 0x3f	; 63
    42f0:	f8 94       	cli
    42f2:	de bf       	out	0x3e, r29	; 62
    42f4:	0f be       	out	0x3f, r0	; 63
    42f6:	cd bf       	out	0x3d, r28	; 61
    42f8:	9b 8f       	std	Y+27, r25	; 0x1b
    42fa:	8a 8f       	std	Y+26, r24	; 0x1a
    42fc:	2b 01       	movw	r4, r22
    42fe:	5a 83       	std	Y+2, r21	; 0x02
    4300:	49 83       	std	Y+1, r20	; 0x01
    4302:	d2 2e       	mov	r13, r18
    4304:	19 87       	std	Y+9, r17	; 0x09
    4306:	08 87       	std	Y+8, r16	; 0x08
    4308:	47 01       	movw	r8, r14
    430a:	ab 82       	std	Y+3, r10	; 0x03
    430c:	dc 01       	movw	r26, r24
    430e:	59 96       	adiw	r26, 0x19	; 25
    4310:	2d 91       	ld	r18, X+
    4312:	3c 91       	ld	r19, X
    4314:	5a 97       	sbiw	r26, 0x1a	; 26
    4316:	21 15       	cp	r18, r1
    4318:	31 05       	cpc	r19, r1
    431a:	09 f0       	breq	.+2      	; 0x431e <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x5a>
    431c:	00 c1       	rjmp	.+512    	; 0x451e <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x25a>
    431e:	18 96       	adiw	r26, 0x08	; 8
    4320:	8d 91       	ld	r24, X+
    4322:	9c 91       	ld	r25, X
    4324:	19 97       	sbiw	r26, 0x09	; 9
    4326:	68 17       	cp	r22, r24
    4328:	79 07       	cpc	r23, r25
    432a:	0c f0       	brlt	.+2      	; 0x432e <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x6a>
    432c:	e7 c1       	rjmp	.+974    	; 0x46fc <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x438>
    432e:	1a 96       	adiw	r26, 0x0a	; 10
    4330:	8d 91       	ld	r24, X+
    4332:	9c 91       	ld	r25, X
    4334:	1b 97       	sbiw	r26, 0x0b	; 11
    4336:	48 17       	cp	r20, r24
    4338:	59 07       	cpc	r21, r25
    433a:	0c f0       	brlt	.+2      	; 0x433e <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x7a>
    433c:	df c1       	rjmp	.+958    	; 0x46fc <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x438>
    433e:	2c 2c       	mov	r2, r12
    4340:	31 2c       	mov	r3, r1
    4342:	fb 01       	movw	r30, r22
    4344:	26 e0       	ldi	r18, 0x06	; 6
    4346:	c2 9e       	mul	r12, r18
    4348:	e0 0d       	add	r30, r0
    434a:	f1 1d       	adc	r31, r1
    434c:	11 24       	eor	r1, r1
    434e:	fd 87       	std	Y+13, r31	; 0x0d
    4350:	ec 87       	std	Y+12, r30	; 0x0c
    4352:	1e 16       	cp	r1, r30
    4354:	1f 06       	cpc	r1, r31
    4356:	0c f0       	brlt	.+2      	; 0x435a <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x96>
    4358:	d1 c1       	rjmp	.+930    	; 0x46fc <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x438>
    435a:	4a 2d       	mov	r20, r10
    435c:	50 e0       	ldi	r21, 0x00	; 0
    435e:	5b 87       	std	Y+11, r21	; 0x0b
    4360:	4a 87       	std	Y+10, r20	; 0x0a
    4362:	83 e0       	ldi	r24, 0x03	; 3
    4364:	44 0f       	add	r20, r20
    4366:	55 1f       	adc	r21, r21
    4368:	8a 95       	dec	r24
    436a:	e1 f7       	brne	.-8      	; 0x4364 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0xa0>
    436c:	5f 87       	std	Y+15, r21	; 0x0f
    436e:	4e 87       	std	Y+14, r20	; 0x0e
    4370:	89 81       	ldd	r24, Y+1	; 0x01
    4372:	9a 81       	ldd	r25, Y+2	; 0x02
    4374:	84 0f       	add	r24, r20
    4376:	95 1f       	adc	r25, r21
    4378:	18 16       	cp	r1, r24
    437a:	19 06       	cpc	r1, r25
    437c:	0c f0       	brlt	.+2      	; 0x4380 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0xbc>
    437e:	be c1       	rjmp	.+892    	; 0x46fc <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x438>
    4380:	58 96       	adiw	r26, 0x18	; 24
    4382:	8c 91       	ld	r24, X
    4384:	81 11       	cpse	r24, r1
    4386:	04 c0       	rjmp	.+8      	; 0x4390 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0xcc>
    4388:	6f ea       	ldi	r22, 0xAF	; 175
    438a:	6d 15       	cp	r22, r13
    438c:	08 f4       	brcc	.+2      	; 0x4390 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0xcc>
    438e:	d3 94       	inc	r13
    4390:	aa 8d       	ldd	r26, Y+26	; 0x1a
    4392:	bb 8d       	ldd	r27, Y+27	; 0x1b
    4394:	ed 91       	ld	r30, X+
    4396:	fc 91       	ld	r31, X
    4398:	11 97       	sbiw	r26, 0x01	; 1
    439a:	02 84       	ldd	r0, Z+10	; 0x0a
    439c:	f3 85       	ldd	r31, Z+11	; 0x0b
    439e:	e0 2d       	mov	r30, r0
    43a0:	cd 01       	movw	r24, r26
    43a2:	09 95       	icall
    43a4:	b5 e0       	ldi	r27, 0x05	; 5
    43a6:	db 9e       	mul	r13, r27
    43a8:	c0 01       	movw	r24, r0
    43aa:	11 24       	eor	r1, r1
    43ac:	ec 2d       	mov	r30, r12
    43ae:	f0 e0       	ldi	r31, 0x00	; 0
    43b0:	f9 8b       	std	Y+17, r31	; 0x11
    43b2:	e8 8b       	std	Y+16, r30	; 0x10
    43b4:	92 01       	movw	r18, r4
    43b6:	2b 5f       	subi	r18, 0xFB	; 251
    43b8:	3f 4f       	sbci	r19, 0xFF	; 255
    43ba:	3b 8b       	std	Y+19, r19	; 0x13
    43bc:	2a 8b       	std	Y+18, r18	; 0x12
    43be:	32 01       	movw	r6, r4
    43c0:	5d 82       	std	Y+5, r5	; 0x05
    43c2:	4c 82       	std	Y+4, r4	; 0x04
    43c4:	ac 01       	movw	r20, r24
    43c6:	44 19       	sub	r20, r4
    43c8:	55 09       	sbc	r21, r5
    43ca:	5d 8b       	std	Y+21, r21	; 0x15
    43cc:	4c 8b       	std	Y+20, r20	; 0x14
    43ce:	7b 81       	ldd	r23, Y+3	; 0x03
    43d0:	67 2f       	mov	r22, r23
    43d2:	70 e0       	ldi	r23, 0x00	; 0
    43d4:	7f 8b       	std	Y+23, r23	; 0x17
    43d6:	6e 8b       	std	Y+22, r22	; 0x16
    43d8:	89 81       	ldd	r24, Y+1	; 0x01
    43da:	9a 81       	ldd	r25, Y+2	; 0x02
    43dc:	08 96       	adiw	r24, 0x08	; 8
    43de:	99 8f       	std	Y+25, r25	; 0x19
    43e0:	88 8f       	std	Y+24, r24	; 0x18
    43e2:	ec 89       	ldd	r30, Y+20	; 0x14
    43e4:	fd 89       	ldd	r31, Y+21	; 0x15
    43e6:	e6 0d       	add	r30, r6
    43e8:	f7 1d       	adc	r31, r7
    43ea:	e6 50       	subi	r30, 0x06	; 6
    43ec:	f7 4f       	sbci	r31, 0xF7	; 247
    43ee:	d4 90       	lpm	r13, Z
    43f0:	a9 81       	ldd	r26, Y+1	; 0x01
    43f2:	ba 81       	ldd	r27, Y+2	; 0x02
    43f4:	bf 83       	std	Y+7, r27	; 0x07
    43f6:	ae 83       	std	Y+6, r26	; 0x06
    43f8:	5d 01       	movw	r10, r26
    43fa:	d0 fe       	sbrs	r13, 0
    43fc:	16 c0       	rjmp	.+44     	; 0x442a <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x166>
    43fe:	aa 8d       	ldd	r26, Y+26	; 0x1a
    4400:	bb 8d       	ldd	r27, Y+27	; 0x1b
    4402:	ed 91       	ld	r30, X+
    4404:	fc 91       	ld	r31, X
    4406:	b1 e0       	ldi	r27, 0x01	; 1
    4408:	cb 12       	cpse	r12, r27
    440a:	09 c0       	rjmp	.+18     	; 0x441e <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x15a>
    440c:	2b 81       	ldd	r18, Y+3	; 0x03
    440e:	21 30       	cpi	r18, 0x01	; 1
    4410:	31 f4       	brne	.+12     	; 0x441e <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x15a>
    4412:	04 84       	ldd	r0, Z+12	; 0x0c
    4414:	f5 85       	ldd	r31, Z+13	; 0x0d
    4416:	e0 2d       	mov	r30, r0
    4418:	28 85       	ldd	r18, Y+8	; 0x08
    441a:	39 85       	ldd	r19, Y+9	; 0x09
    441c:	19 c0       	rjmp	.+50     	; 0x4450 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x18c>
    441e:	06 84       	ldd	r0, Z+14	; 0x0e
    4420:	f7 85       	ldd	r31, Z+15	; 0x0f
    4422:	e0 2d       	mov	r30, r0
    4424:	e8 84       	ldd	r14, Y+8	; 0x08
    4426:	f9 84       	ldd	r15, Y+9	; 0x09
    4428:	1d c0       	rjmp	.+58     	; 0x4464 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x1a0>
    442a:	48 85       	ldd	r20, Y+8	; 0x08
    442c:	59 85       	ldd	r21, Y+9	; 0x09
    442e:	48 15       	cp	r20, r8
    4430:	59 05       	cpc	r21, r9
    4432:	11 f1       	breq	.+68     	; 0x4478 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x1b4>
    4434:	aa 8d       	ldd	r26, Y+26	; 0x1a
    4436:	bb 8d       	ldd	r27, Y+27	; 0x1b
    4438:	ed 91       	ld	r30, X+
    443a:	fc 91       	ld	r31, X
    443c:	b1 e0       	ldi	r27, 0x01	; 1
    443e:	cb 12       	cpse	r12, r27
    4440:	0d c0       	rjmp	.+26     	; 0x445c <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x198>
    4442:	2b 81       	ldd	r18, Y+3	; 0x03
    4444:	21 30       	cpi	r18, 0x01	; 1
    4446:	51 f4       	brne	.+20     	; 0x445c <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x198>
    4448:	04 84       	ldd	r0, Z+12	; 0x0c
    444a:	f5 85       	ldd	r31, Z+13	; 0x0d
    444c:	e0 2d       	mov	r30, r0
    444e:	94 01       	movw	r18, r8
    4450:	a5 01       	movw	r20, r10
    4452:	b3 01       	movw	r22, r6
    4454:	8a 8d       	ldd	r24, Y+26	; 0x1a
    4456:	9b 8d       	ldd	r25, Y+27	; 0x1b
    4458:	09 95       	icall
    445a:	0e c0       	rjmp	.+28     	; 0x4478 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x1b4>
    445c:	06 84       	ldd	r0, Z+14	; 0x0e
    445e:	f7 85       	ldd	r31, Z+15	; 0x0f
    4460:	e0 2d       	mov	r30, r0
    4462:	74 01       	movw	r14, r8
    4464:	0a 85       	ldd	r16, Y+10	; 0x0a
    4466:	1b 85       	ldd	r17, Y+11	; 0x0b
    4468:	91 01       	movw	r18, r2
    446a:	4e 81       	ldd	r20, Y+6	; 0x06
    446c:	5f 81       	ldd	r21, Y+7	; 0x07
    446e:	6c 81       	ldd	r22, Y+4	; 0x04
    4470:	7d 81       	ldd	r23, Y+5	; 0x05
    4472:	8a 8d       	ldd	r24, Y+26	; 0x1a
    4474:	9b 8d       	ldd	r25, Y+27	; 0x1b
    4476:	09 95       	icall
    4478:	d6 94       	lsr	r13
    447a:	4e 81       	ldd	r20, Y+6	; 0x06
    447c:	5f 81       	ldd	r21, Y+7	; 0x07
    447e:	6e 89       	ldd	r22, Y+22	; 0x16
    4480:	7f 89       	ldd	r23, Y+23	; 0x17
    4482:	46 0f       	add	r20, r22
    4484:	57 1f       	adc	r21, r23
    4486:	5f 83       	std	Y+7, r21	; 0x07
    4488:	4e 83       	std	Y+6, r20	; 0x06
    448a:	7f ef       	ldi	r23, 0xFF	; 255
    448c:	a7 1a       	sub	r10, r23
    448e:	b7 0a       	sbc	r11, r23
    4490:	88 8d       	ldd	r24, Y+24	; 0x18
    4492:	99 8d       	ldd	r25, Y+25	; 0x19
    4494:	a8 16       	cp	r10, r24
    4496:	b9 06       	cpc	r11, r25
    4498:	09 f0       	breq	.+2      	; 0x449c <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x1d8>
    449a:	af cf       	rjmp	.-162    	; 0x43fa <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x136>
    449c:	ac 81       	ldd	r26, Y+4	; 0x04
    449e:	bd 81       	ldd	r27, Y+5	; 0x05
    44a0:	e8 89       	ldd	r30, Y+16	; 0x10
    44a2:	f9 89       	ldd	r31, Y+17	; 0x11
    44a4:	ae 0f       	add	r26, r30
    44a6:	bf 1f       	adc	r27, r31
    44a8:	bd 83       	std	Y+5, r27	; 0x05
    44aa:	ac 83       	std	Y+4, r26	; 0x04
    44ac:	ff ef       	ldi	r31, 0xFF	; 255
    44ae:	6f 1a       	sub	r6, r31
    44b0:	7f 0a       	sbc	r7, r31
    44b2:	2a 89       	ldd	r18, Y+18	; 0x12
    44b4:	3b 89       	ldd	r19, Y+19	; 0x13
    44b6:	62 16       	cp	r6, r18
    44b8:	73 06       	cpc	r7, r19
    44ba:	09 f0       	breq	.+2      	; 0x44be <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x1fa>
    44bc:	92 cf       	rjmp	.-220    	; 0x43e2 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x11e>
    44be:	48 85       	ldd	r20, Y+8	; 0x08
    44c0:	59 85       	ldd	r21, Y+9	; 0x09
    44c2:	48 15       	cp	r20, r8
    44c4:	59 05       	cpc	r21, r9
    44c6:	09 f4       	brne	.+2      	; 0x44ca <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x206>
    44c8:	f7 c0       	rjmp	.+494    	; 0x46b8 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x3f4>
    44ca:	aa 8d       	ldd	r26, Y+26	; 0x1a
    44cc:	bb 8d       	ldd	r27, Y+27	; 0x1b
    44ce:	ed 91       	ld	r30, X+
    44d0:	fc 91       	ld	r31, X
    44d2:	b1 e0       	ldi	r27, 0x01	; 1
    44d4:	cb 12       	cpse	r12, r27
    44d6:	12 c0       	rjmp	.+36     	; 0x44fc <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x238>
    44d8:	2b 81       	ldd	r18, Y+3	; 0x03
    44da:	21 30       	cpi	r18, 0x01	; 1
    44dc:	79 f4       	brne	.+30     	; 0x44fc <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x238>
    44de:	b2 01       	movw	r22, r4
    44e0:	6b 5f       	subi	r22, 0xFB	; 251
    44e2:	7f 4f       	sbci	r23, 0xFF	; 255
    44e4:	00 88       	ldd	r0, Z+16	; 0x10
    44e6:	f1 89       	ldd	r31, Z+17	; 0x11
    44e8:	e0 2d       	mov	r30, r0
    44ea:	84 01       	movw	r16, r8
    44ec:	28 e0       	ldi	r18, 0x08	; 8
    44ee:	30 e0       	ldi	r19, 0x00	; 0
    44f0:	49 81       	ldd	r20, Y+1	; 0x01
    44f2:	5a 81       	ldd	r21, Y+2	; 0x02
    44f4:	8a 8d       	ldd	r24, Y+26	; 0x1a
    44f6:	9b 8d       	ldd	r25, Y+27	; 0x1b
    44f8:	09 95       	icall
    44fa:	de c0       	rjmp	.+444    	; 0x46b8 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x3f4>
    44fc:	6c 85       	ldd	r22, Y+12	; 0x0c
    44fe:	7d 85       	ldd	r23, Y+13	; 0x0d
    4500:	62 19       	sub	r22, r2
    4502:	73 09       	sbc	r23, r3
    4504:	06 84       	ldd	r0, Z+14	; 0x0e
    4506:	f7 85       	ldd	r31, Z+15	; 0x0f
    4508:	e0 2d       	mov	r30, r0
    450a:	74 01       	movw	r14, r8
    450c:	0e 85       	ldd	r16, Y+14	; 0x0e
    450e:	1f 85       	ldd	r17, Y+15	; 0x0f
    4510:	91 01       	movw	r18, r2
    4512:	49 81       	ldd	r20, Y+1	; 0x01
    4514:	5a 81       	ldd	r21, Y+2	; 0x02
    4516:	8a 8d       	ldd	r24, Y+26	; 0x1a
    4518:	9b 8d       	ldd	r25, Y+27	; 0x1b
    451a:	09 95       	icall
    451c:	cd c0       	rjmp	.+410    	; 0x46b8 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x3f4>
    451e:	f9 01       	movw	r30, r18
    4520:	34 96       	adiw	r30, 0x04	; 4
    4522:	e4 91       	lpm	r30, Z
    4524:	de 1a       	sub	r13, r30
    4526:	f9 01       	movw	r30, r18
    4528:	32 96       	adiw	r30, 0x02	; 2
    452a:	85 91       	lpm	r24, Z+
    452c:	94 91       	lpm	r25, Z
    452e:	b7 e0       	ldi	r27, 0x07	; 7
    4530:	db 9e       	mul	r13, r27
    4532:	80 0d       	add	r24, r0
    4534:	91 1d       	adc	r25, r1
    4536:	11 24       	eor	r1, r1
    4538:	f9 01       	movw	r30, r18
    453a:	25 91       	lpm	r18, Z+
    453c:	34 91       	lpm	r19, Z
    453e:	39 8b       	std	Y+17, r19	; 0x11
    4540:	28 8b       	std	Y+16, r18	; 0x10
    4542:	fc 01       	movw	r30, r24
    4544:	25 90       	lpm	r2, Z+
    4546:	34 90       	lpm	r3, Z
    4548:	fc 01       	movw	r30, r24
    454a:	32 96       	adiw	r30, 0x02	; 2
    454c:	74 90       	lpm	r7, Z
    454e:	31 96       	adiw	r30, 0x01	; 1
    4550:	a4 90       	lpm	r10, Z
    4552:	32 96       	adiw	r30, 0x02	; 2
    4554:	94 90       	lpm	r9, Z
    4556:	31 96       	adiw	r30, 0x01	; 1
    4558:	b4 90       	lpm	r11, Z
    455a:	31 e0       	ldi	r19, 0x01	; 1
    455c:	3c 15       	cp	r19, r12
    455e:	18 f0       	brcs	.+6      	; 0x4566 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x2a2>
    4560:	4b 81       	ldd	r20, Y+3	; 0x03
    4562:	42 30       	cpi	r20, 0x02	; 2
    4564:	68 f0       	brcs	.+26     	; 0x4580 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x2bc>
    4566:	69 2d       	mov	r22, r9
    4568:	09 2c       	mov	r0, r9
    456a:	00 0c       	add	r0, r0
    456c:	77 0b       	sbc	r23, r23
    456e:	7d 83       	std	Y+5, r23	; 0x05
    4570:	6c 83       	std	Y+4, r22	; 0x04
    4572:	8b 2d       	mov	r24, r11
    4574:	0b 2c       	mov	r0, r11
    4576:	00 0c       	add	r0, r0
    4578:	99 0b       	sbc	r25, r25
    457a:	9f 83       	std	Y+7, r25	; 0x07
    457c:	8e 83       	std	Y+6, r24	; 0x06
    457e:	04 c0       	rjmp	.+8      	; 0x4588 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x2c4>
    4580:	1f 82       	std	Y+7, r1	; 0x07
    4582:	1e 82       	std	Y+6, r1	; 0x06
    4584:	1d 82       	std	Y+5, r1	; 0x05
    4586:	1c 82       	std	Y+4, r1	; 0x04
    4588:	aa 8d       	ldd	r26, Y+26	; 0x1a
    458a:	bb 8d       	ldd	r27, Y+27	; 0x1b
    458c:	ed 91       	ld	r30, X+
    458e:	fc 91       	ld	r31, X
    4590:	11 97       	sbiw	r26, 0x01	; 1
    4592:	02 84       	ldd	r0, Z+10	; 0x0a
    4594:	f3 85       	ldd	r31, Z+11	; 0x0b
    4596:	e0 2d       	mov	r30, r0
    4598:	cd 01       	movw	r24, r26
    459a:	09 95       	icall
    459c:	61 2c       	mov	r6, r1
    459e:	d1 2c       	mov	r13, r1
    45a0:	81 2c       	mov	r8, r1
    45a2:	fb 81       	ldd	r31, Y+3	; 0x03
    45a4:	ef 2f       	mov	r30, r31
    45a6:	f0 e0       	ldi	r31, 0x00	; 0
    45a8:	fb 87       	std	Y+11, r31	; 0x0b
    45aa:	ea 87       	std	Y+10, r30	; 0x0a
    45ac:	2c 2d       	mov	r18, r12
    45ae:	30 e0       	ldi	r19, 0x00	; 0
    45b0:	3d 87       	std	Y+13, r19	; 0x0d
    45b2:	2c 87       	std	Y+12, r18	; 0x0c
    45b4:	49 81       	ldd	r20, Y+1	; 0x01
    45b6:	5a 81       	ldd	r21, Y+2	; 0x02
    45b8:	4b 0d       	add	r20, r11
    45ba:	51 1d       	adc	r21, r1
    45bc:	b7 fc       	sbrc	r11, 7
    45be:	5a 95       	dec	r21
    45c0:	5d 8b       	std	Y+21, r21	; 0x15
    45c2:	4c 8b       	std	Y+20, r20	; 0x14
    45c4:	b2 01       	movw	r22, r4
    45c6:	69 0d       	add	r22, r9
    45c8:	71 1d       	adc	r23, r1
    45ca:	97 fc       	sbrc	r9, 7
    45cc:	7a 95       	dec	r23
    45ce:	7f 8b       	std	Y+23, r23	; 0x17
    45d0:	6e 8b       	std	Y+22, r22	; 0x16
    45d2:	8a 14       	cp	r8, r10
    45d4:	08 f0       	brcs	.+2      	; 0x45d8 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x314>
    45d6:	70 c0       	rjmp	.+224    	; 0x46b8 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x3f4>
    45d8:	28 2d       	mov	r18, r8
    45da:	30 e0       	ldi	r19, 0x00	; 0
    45dc:	4e 81       	ldd	r20, Y+6	; 0x06
    45de:	5f 81       	ldd	r21, Y+7	; 0x07
    45e0:	42 0f       	add	r20, r18
    45e2:	53 1f       	adc	r21, r19
    45e4:	aa 85       	ldd	r26, Y+10	; 0x0a
    45e6:	bb 85       	ldd	r27, Y+11	; 0x0b
    45e8:	a4 9f       	mul	r26, r20
    45ea:	c0 01       	movw	r24, r0
    45ec:	a5 9f       	mul	r26, r21
    45ee:	90 0d       	add	r25, r0
    45f0:	b4 9f       	mul	r27, r20
    45f2:	90 0d       	add	r25, r0
    45f4:	11 24       	eor	r1, r1
    45f6:	e9 81       	ldd	r30, Y+1	; 0x01
    45f8:	fa 81       	ldd	r31, Y+2	; 0x02
    45fa:	e8 0f       	add	r30, r24
    45fc:	f9 1f       	adc	r31, r25
    45fe:	ff 87       	std	Y+15, r31	; 0x0f
    4600:	ee 87       	std	Y+14, r30	; 0x0e
    4602:	86 2d       	mov	r24, r6
    4604:	91 2c       	mov	r9, r1
    4606:	4c 89       	ldd	r20, Y+20	; 0x14
    4608:	5d 89       	ldd	r21, Y+21	; 0x15
    460a:	42 0f       	add	r20, r18
    460c:	53 1f       	adc	r21, r19
    460e:	5b 8b       	std	Y+19, r21	; 0x13
    4610:	4a 8b       	std	Y+18, r20	; 0x12
    4612:	97 14       	cp	r9, r7
    4614:	08 f0       	brcs	.+2      	; 0x4618 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x354>
    4616:	4d c0       	rjmp	.+154    	; 0x46b2 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x3ee>
    4618:	bb 24       	eor	r11, r11
    461a:	b3 94       	inc	r11
    461c:	b8 0e       	add	r11, r24
    461e:	87 70       	andi	r24, 0x07	; 7
    4620:	41 f4       	brne	.+16     	; 0x4632 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x36e>
    4622:	c1 01       	movw	r24, r2
    4624:	01 96       	adiw	r24, 0x01	; 1
    4626:	e8 89       	ldd	r30, Y+16	; 0x10
    4628:	f9 89       	ldd	r31, Y+17	; 0x11
    462a:	e2 0d       	add	r30, r2
    462c:	f3 1d       	adc	r31, r3
    462e:	d4 90       	lpm	r13, Z
    4630:	1c 01       	movw	r2, r24
    4632:	d7 fe       	sbrs	r13, 7
    4634:	3a c0       	rjmp	.+116    	; 0x46aa <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x3e6>
    4636:	51 e0       	ldi	r21, 0x01	; 1
    4638:	c5 12       	cpse	r12, r21
    463a:	16 c0       	rjmp	.+44     	; 0x4668 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x3a4>
    463c:	6b 81       	ldd	r22, Y+3	; 0x03
    463e:	61 30       	cpi	r22, 0x01	; 1
    4640:	99 f4       	brne	.+38     	; 0x4668 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x3a4>
    4642:	aa 8d       	ldd	r26, Y+26	; 0x1a
    4644:	bb 8d       	ldd	r27, Y+27	; 0x1b
    4646:	ed 91       	ld	r30, X+
    4648:	fc 91       	ld	r31, X
    464a:	11 97       	sbiw	r26, 0x01	; 1
    464c:	04 84       	ldd	r0, Z+12	; 0x0c
    464e:	f5 85       	ldd	r31, Z+13	; 0x0d
    4650:	e0 2d       	mov	r30, r0
    4652:	28 85       	ldd	r18, Y+8	; 0x08
    4654:	39 85       	ldd	r19, Y+9	; 0x09
    4656:	4a 89       	ldd	r20, Y+18	; 0x12
    4658:	5b 89       	ldd	r21, Y+19	; 0x13
    465a:	6e 89       	ldd	r22, Y+22	; 0x16
    465c:	7f 89       	ldd	r23, Y+23	; 0x17
    465e:	69 0d       	add	r22, r9
    4660:	71 1d       	adc	r23, r1
    4662:	cd 01       	movw	r24, r26
    4664:	09 95       	icall
    4666:	21 c0       	rjmp	.+66     	; 0x46aa <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x3e6>
    4668:	8c 81       	ldd	r24, Y+4	; 0x04
    466a:	9d 81       	ldd	r25, Y+5	; 0x05
    466c:	89 0d       	add	r24, r9
    466e:	91 1d       	adc	r25, r1
    4670:	ec 85       	ldd	r30, Y+12	; 0x0c
    4672:	fd 85       	ldd	r31, Y+13	; 0x0d
    4674:	8e 9f       	mul	r24, r30
    4676:	b0 01       	movw	r22, r0
    4678:	8f 9f       	mul	r24, r31
    467a:	70 0d       	add	r23, r0
    467c:	9e 9f       	mul	r25, r30
    467e:	70 0d       	add	r23, r0
    4680:	11 24       	eor	r1, r1
    4682:	64 0d       	add	r22, r4
    4684:	75 1d       	adc	r23, r5
    4686:	aa 8d       	ldd	r26, Y+26	; 0x1a
    4688:	bb 8d       	ldd	r27, Y+27	; 0x1b
    468a:	ed 91       	ld	r30, X+
    468c:	fc 91       	ld	r31, X
    468e:	11 97       	sbiw	r26, 0x01	; 1
    4690:	06 84       	ldd	r0, Z+14	; 0x0e
    4692:	f7 85       	ldd	r31, Z+15	; 0x0f
    4694:	e0 2d       	mov	r30, r0
    4696:	e8 84       	ldd	r14, Y+8	; 0x08
    4698:	f9 84       	ldd	r15, Y+9	; 0x09
    469a:	0a 85       	ldd	r16, Y+10	; 0x0a
    469c:	1b 85       	ldd	r17, Y+11	; 0x0b
    469e:	2c 85       	ldd	r18, Y+12	; 0x0c
    46a0:	3d 85       	ldd	r19, Y+13	; 0x0d
    46a2:	4e 85       	ldd	r20, Y+14	; 0x0e
    46a4:	5f 85       	ldd	r21, Y+15	; 0x0f
    46a6:	cd 01       	movw	r24, r26
    46a8:	09 95       	icall
    46aa:	dd 0c       	add	r13, r13
    46ac:	93 94       	inc	r9
    46ae:	8b 2d       	mov	r24, r11
    46b0:	b0 cf       	rjmp	.-160    	; 0x4612 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x34e>
    46b2:	67 0c       	add	r6, r7
    46b4:	83 94       	inc	r8
    46b6:	8d cf       	rjmp	.-230    	; 0x45d2 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x30e>
    46b8:	aa 8d       	ldd	r26, Y+26	; 0x1a
    46ba:	bb 8d       	ldd	r27, Y+27	; 0x1b
    46bc:	ed 91       	ld	r30, X+
    46be:	fc 91       	ld	r31, X
    46c0:	11 97       	sbiw	r26, 0x01	; 1
    46c2:	06 88       	ldd	r0, Z+22	; 0x16
    46c4:	f7 89       	ldd	r31, Z+23	; 0x17
    46c6:	e0 2d       	mov	r30, r0
    46c8:	cd 01       	movw	r24, r26
    46ca:	6b 96       	adiw	r28, 0x1b	; 27
    46cc:	0f b6       	in	r0, 0x3f	; 63
    46ce:	f8 94       	cli
    46d0:	de bf       	out	0x3e, r29	; 62
    46d2:	0f be       	out	0x3f, r0	; 63
    46d4:	cd bf       	out	0x3d, r28	; 61
    46d6:	df 91       	pop	r29
    46d8:	cf 91       	pop	r28
    46da:	1f 91       	pop	r17
    46dc:	0f 91       	pop	r16
    46de:	ff 90       	pop	r15
    46e0:	ef 90       	pop	r14
    46e2:	df 90       	pop	r13
    46e4:	cf 90       	pop	r12
    46e6:	bf 90       	pop	r11
    46e8:	af 90       	pop	r10
    46ea:	9f 90       	pop	r9
    46ec:	8f 90       	pop	r8
    46ee:	7f 90       	pop	r7
    46f0:	6f 90       	pop	r6
    46f2:	5f 90       	pop	r5
    46f4:	4f 90       	pop	r4
    46f6:	3f 90       	pop	r3
    46f8:	2f 90       	pop	r2
    46fa:	09 94       	ijmp
    46fc:	6b 96       	adiw	r28, 0x1b	; 27
    46fe:	0f b6       	in	r0, 0x3f	; 63
    4700:	f8 94       	cli
    4702:	de bf       	out	0x3e, r29	; 62
    4704:	0f be       	out	0x3f, r0	; 63
    4706:	cd bf       	out	0x3d, r28	; 61
    4708:	df 91       	pop	r29
    470a:	cf 91       	pop	r28
    470c:	1f 91       	pop	r17
    470e:	0f 91       	pop	r16
    4710:	ff 90       	pop	r15
    4712:	ef 90       	pop	r14
    4714:	df 90       	pop	r13
    4716:	cf 90       	pop	r12
    4718:	bf 90       	pop	r11
    471a:	af 90       	pop	r10
    471c:	9f 90       	pop	r9
    471e:	8f 90       	pop	r8
    4720:	7f 90       	pop	r7
    4722:	6f 90       	pop	r6
    4724:	5f 90       	pop	r5
    4726:	4f 90       	pop	r4
    4728:	3f 90       	pop	r3
    472a:	2f 90       	pop	r2
    472c:	08 95       	ret

0000472e <_ZN12Adafruit_GFX5writeEh>:
/*!
    @brief  Print one byte/character of data, used to support print()
    @param  c  The 8-bit ascii character to write
*/
/**************************************************************************/
size_t Adafruit_GFX::write(uint8_t c) {
    472e:	8f 92       	push	r8
    4730:	9f 92       	push	r9
    4732:	af 92       	push	r10
    4734:	cf 92       	push	r12
    4736:	ef 92       	push	r14
    4738:	ff 92       	push	r15
    473a:	0f 93       	push	r16
    473c:	1f 93       	push	r17
    473e:	cf 93       	push	r28
    4740:	df 93       	push	r29
    4742:	ec 01       	movw	r28, r24
    4744:	26 2f       	mov	r18, r22
  if (!gfxFont) { // 'Classic' built-in font
    4746:	89 8d       	ldd	r24, Y+25	; 0x19
    4748:	9a 8d       	ldd	r25, Y+26	; 0x1a
    474a:	00 97       	sbiw	r24, 0x00	; 0
    474c:	09 f0       	breq	.+2      	; 0x4750 <_ZN12Adafruit_GFX5writeEh+0x22>
    474e:	42 c0       	rjmp	.+132    	; 0x47d4 <_ZN12Adafruit_GFX5writeEh+0xa6>

    if (c == '\n') {              // Newline?
    4750:	6a 30       	cpi	r22, 0x0A	; 10
    4752:	59 f4       	brne	.+22     	; 0x476a <_ZN12Adafruit_GFX5writeEh+0x3c>
      cursor_x = 0;               // Reset x to zero,
    4754:	1d 86       	std	Y+13, r1	; 0x0d
    4756:	1c 86       	std	Y+12, r1	; 0x0c
      cursor_y += textsize_y * 8; // advance y one line
    4758:	2d 89       	ldd	r18, Y+21	; 0x15
    475a:	8e 85       	ldd	r24, Y+14	; 0x0e
    475c:	9f 85       	ldd	r25, Y+15	; 0x0f
    475e:	38 e0       	ldi	r19, 0x08	; 8
    4760:	23 9f       	mul	r18, r19
    4762:	80 0d       	add	r24, r0
    4764:	91 1d       	adc	r25, r1
    4766:	11 24       	eor	r1, r1
    4768:	43 c0       	rjmp	.+134    	; 0x47f0 <_ZN12Adafruit_GFX5writeEh+0xc2>
    } else if (c != '\r') {       // Ignore carriage returns
    476a:	6d 30       	cpi	r22, 0x0D	; 13
    476c:	09 f4       	brne	.+2      	; 0x4770 <_ZN12Adafruit_GFX5writeEh+0x42>
    476e:	aa c0       	rjmp	.+340    	; 0x48c4 <_ZN12Adafruit_GFX5writeEh+0x196>
      if (wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
    4770:	8f 89       	ldd	r24, Y+23	; 0x17
    4772:	88 23       	and	r24, r24
    4774:	c9 f0       	breq	.+50     	; 0x47a8 <_ZN12Adafruit_GFX5writeEh+0x7a>
    4776:	3c 89       	ldd	r19, Y+20	; 0x14
    4778:	8c 85       	ldd	r24, Y+12	; 0x0c
    477a:	9d 85       	ldd	r25, Y+13	; 0x0d
    477c:	46 e0       	ldi	r20, 0x06	; 6
    477e:	34 9f       	mul	r19, r20
    4780:	80 0d       	add	r24, r0
    4782:	91 1d       	adc	r25, r1
    4784:	11 24       	eor	r1, r1
    4786:	48 85       	ldd	r20, Y+8	; 0x08
    4788:	59 85       	ldd	r21, Y+9	; 0x09
    478a:	48 17       	cp	r20, r24
    478c:	59 07       	cpc	r21, r25
    478e:	64 f4       	brge	.+24     	; 0x47a8 <_ZN12Adafruit_GFX5writeEh+0x7a>
        cursor_x = 0;                                       // Reset x to zero,
    4790:	1d 86       	std	Y+13, r1	; 0x0d
    4792:	1c 86       	std	Y+12, r1	; 0x0c
        cursor_y += textsize_y * 8; // advance y one line
    4794:	3d 89       	ldd	r19, Y+21	; 0x15
    4796:	8e 85       	ldd	r24, Y+14	; 0x0e
    4798:	9f 85       	ldd	r25, Y+15	; 0x0f
    479a:	48 e0       	ldi	r20, 0x08	; 8
    479c:	34 9f       	mul	r19, r20
    479e:	80 0d       	add	r24, r0
    47a0:	91 1d       	adc	r25, r1
    47a2:	11 24       	eor	r1, r1
    47a4:	9f 87       	std	Y+15, r25	; 0x0f
    47a6:	8e 87       	std	Y+14, r24	; 0x0e
      }
      drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x,
               textsize_y);
    47a8:	ea 88       	ldd	r14, Y+18	; 0x12
    47aa:	fb 88       	ldd	r15, Y+19	; 0x13
    47ac:	08 89       	ldd	r16, Y+16	; 0x10
    47ae:	19 89       	ldd	r17, Y+17	; 0x11
    47b0:	4e 85       	ldd	r20, Y+14	; 0x0e
    47b2:	5f 85       	ldd	r21, Y+15	; 0x0f
    47b4:	6c 85       	ldd	r22, Y+12	; 0x0c
    47b6:	7d 85       	ldd	r23, Y+13	; 0x0d
    47b8:	ad 88       	ldd	r10, Y+21	; 0x15
    47ba:	cc 88       	ldd	r12, Y+20	; 0x14
    47bc:	ce 01       	movw	r24, r28
    47be:	0e 94 62 21 	call	0x42c4	; 0x42c4 <_ZN12Adafruit_GFX8drawCharEiihjjhh>
      cursor_x += textsize_x * 6; // Advance x one char
    47c2:	2c 89       	ldd	r18, Y+20	; 0x14
    47c4:	8c 85       	ldd	r24, Y+12	; 0x0c
    47c6:	9d 85       	ldd	r25, Y+13	; 0x0d
    47c8:	36 e0       	ldi	r19, 0x06	; 6
    47ca:	23 9f       	mul	r18, r19
    47cc:	80 0d       	add	r24, r0
    47ce:	91 1d       	adc	r25, r1
    47d0:	11 24       	eor	r1, r1
    47d2:	3e c0       	rjmp	.+124    	; 0x4850 <_ZN12Adafruit_GFX5writeEh+0x122>
    }

  } else { // Custom font

    if (c == '\n') {
    47d4:	6a 30       	cpi	r22, 0x0A	; 10
    47d6:	79 f4       	brne	.+30     	; 0x47f6 <_ZN12Adafruit_GFX5writeEh+0xc8>
      cursor_x = 0;
    47d8:	1d 86       	std	Y+13, r1	; 0x0d
    47da:	1c 86       	std	Y+12, r1	; 0x0c
      cursor_y +=
          (int16_t)textsize_y * (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
    47dc:	2d 89       	ldd	r18, Y+21	; 0x15
    47de:	fc 01       	movw	r30, r24
    47e0:	38 96       	adiw	r30, 0x08	; 8
    47e2:	e4 91       	lpm	r30, Z
    47e4:	8e 85       	ldd	r24, Y+14	; 0x0e
    47e6:	9f 85       	ldd	r25, Y+15	; 0x0f
    47e8:	2e 9f       	mul	r18, r30
    47ea:	80 0d       	add	r24, r0
    47ec:	91 1d       	adc	r25, r1
    47ee:	11 24       	eor	r1, r1
    47f0:	9f 87       	std	Y+15, r25	; 0x0f
    47f2:	8e 87       	std	Y+14, r24	; 0x0e
    47f4:	67 c0       	rjmp	.+206    	; 0x48c4 <_ZN12Adafruit_GFX5writeEh+0x196>
    } else if (c != '\r') {
    47f6:	6d 30       	cpi	r22, 0x0D	; 13
    47f8:	09 f4       	brne	.+2      	; 0x47fc <_ZN12Adafruit_GFX5writeEh+0xce>
    47fa:	64 c0       	rjmp	.+200    	; 0x48c4 <_ZN12Adafruit_GFX5writeEh+0x196>
      uint8_t first = pgm_read_byte(&gfxFont->first);
    47fc:	fc 01       	movw	r30, r24
    47fe:	34 96       	adiw	r30, 0x04	; 4
    4800:	34 91       	lpm	r19, Z
      if ((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
    4802:	63 17       	cp	r22, r19
    4804:	08 f4       	brcc	.+2      	; 0x4808 <_ZN12Adafruit_GFX5writeEh+0xda>
    4806:	5e c0       	rjmp	.+188    	; 0x48c4 <_ZN12Adafruit_GFX5writeEh+0x196>
    4808:	32 96       	adiw	r30, 0x02	; 2
    480a:	e4 91       	lpm	r30, Z
    480c:	e6 17       	cp	r30, r22
    480e:	08 f4       	brcc	.+2      	; 0x4812 <_ZN12Adafruit_GFX5writeEh+0xe4>
    4810:	59 c0       	rjmp	.+178    	; 0x48c4 <_ZN12Adafruit_GFX5writeEh+0x196>
        GFXglyph *glyph = pgm_read_glyph_ptr(gfxFont, c - first);
    4812:	46 2f       	mov	r20, r22
    4814:	43 1b       	sub	r20, r19
    4816:	34 2f       	mov	r19, r20
#define pgm_read_pointer(addr) ((void *)pgm_read_word(addr))
#endif

inline GFXglyph *pgm_read_glyph_ptr(const GFXfont *gfxFont, uint8_t c) {
#ifdef __AVR__
  return &(((GFXglyph *)pgm_read_pointer(&gfxFont->glyph))[c]);
    4818:	fc 01       	movw	r30, r24
    481a:	32 96       	adiw	r30, 0x02	; 2
    481c:	85 90       	lpm	r8, Z+
    481e:	94 90       	lpm	r9, Z
    4820:	47 e0       	ldi	r20, 0x07	; 7
    4822:	34 9f       	mul	r19, r20
    4824:	80 0c       	add	r8, r0
    4826:	91 1c       	adc	r9, r1
    4828:	11 24       	eor	r1, r1
          (int16_t)textsize_y * (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
    } else if (c != '\r') {
      uint8_t first = pgm_read_byte(&gfxFont->first);
      if ((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
        GFXglyph *glyph = pgm_read_glyph_ptr(gfxFont, c - first);
        uint8_t w = pgm_read_byte(&glyph->width),
    482a:	f4 01       	movw	r30, r8
    482c:	32 96       	adiw	r30, 0x02	; 2
    482e:	34 91       	lpm	r19, Z
                h = pgm_read_byte(&glyph->height);
    4830:	31 96       	adiw	r30, 0x01	; 1
    4832:	e4 91       	lpm	r30, Z
        if ((w > 0) && (h > 0)) { // Is there an associated bitmap?
    4834:	33 23       	and	r19, r19
    4836:	11 f0       	breq	.+4      	; 0x483c <_ZN12Adafruit_GFX5writeEh+0x10e>
    4838:	e1 11       	cpse	r30, r1
    483a:	0d c0       	rjmp	.+26     	; 0x4856 <_ZN12Adafruit_GFX5writeEh+0x128>
          }
          drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x,
                   textsize_y);
        }
        cursor_x +=
            (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
    483c:	f4 01       	movw	r30, r8
    483e:	34 96       	adiw	r30, 0x04	; 4
    4840:	e4 91       	lpm	r30, Z
    4842:	2c 89       	ldd	r18, Y+20	; 0x14
    4844:	8c 85       	ldd	r24, Y+12	; 0x0c
    4846:	9d 85       	ldd	r25, Y+13	; 0x0d
    4848:	e2 9f       	mul	r30, r18
    484a:	80 0d       	add	r24, r0
    484c:	91 1d       	adc	r25, r1
    484e:	11 24       	eor	r1, r1
    4850:	9d 87       	std	Y+13, r25	; 0x0d
    4852:	8c 87       	std	Y+12, r24	; 0x0c
      }
    }
  }
  return 1;
    4854:	37 c0       	rjmp	.+110    	; 0x48c4 <_ZN12Adafruit_GFX5writeEh+0x196>
      if ((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
        GFXglyph *glyph = pgm_read_glyph_ptr(gfxFont, c - first);
        uint8_t w = pgm_read_byte(&glyph->width),
                h = pgm_read_byte(&glyph->height);
        if ((w > 0) && (h > 0)) { // Is there an associated bitmap?
          int16_t xo = (int8_t)pgm_read_byte(&glyph->xOffset); // sic
    4856:	f4 01       	movw	r30, r8
    4858:	35 96       	adiw	r30, 0x05	; 5
    485a:	44 91       	lpm	r20, Z
          if (wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
    485c:	5f 89       	ldd	r21, Y+23	; 0x17
    485e:	55 23       	and	r21, r21
    4860:	19 f1       	breq	.+70     	; 0x48a8 <_ZN12Adafruit_GFX5writeEh+0x17a>
    4862:	5c 89       	ldd	r21, Y+20	; 0x14
    4864:	e3 2f       	mov	r30, r19
    4866:	f0 e0       	ldi	r31, 0x00	; 0
    4868:	e4 0f       	add	r30, r20
    486a:	f1 1d       	adc	r31, r1
    486c:	47 fd       	sbrc	r20, 7
    486e:	fa 95       	dec	r31
    4870:	5e 9f       	mul	r21, r30
    4872:	b0 01       	movw	r22, r0
    4874:	5f 9f       	mul	r21, r31
    4876:	70 0d       	add	r23, r0
    4878:	11 24       	eor	r1, r1
    487a:	4c 85       	ldd	r20, Y+12	; 0x0c
    487c:	5d 85       	ldd	r21, Y+13	; 0x0d
    487e:	46 0f       	add	r20, r22
    4880:	57 1f       	adc	r21, r23
    4882:	68 85       	ldd	r22, Y+8	; 0x08
    4884:	79 85       	ldd	r23, Y+9	; 0x09
    4886:	64 17       	cp	r22, r20
    4888:	75 07       	cpc	r23, r21
    488a:	74 f4       	brge	.+28     	; 0x48a8 <_ZN12Adafruit_GFX5writeEh+0x17a>
            cursor_x = 0;
    488c:	1d 86       	std	Y+13, r1	; 0x0d
    488e:	1c 86       	std	Y+12, r1	; 0x0c
            cursor_y += (int16_t)textsize_y *
    4890:	3d 89       	ldd	r19, Y+21	; 0x15
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
    4892:	fc 01       	movw	r30, r24
    4894:	38 96       	adiw	r30, 0x08	; 8
    4896:	e4 91       	lpm	r30, Z
    4898:	8e 85       	ldd	r24, Y+14	; 0x0e
    489a:	9f 85       	ldd	r25, Y+15	; 0x0f
    489c:	3e 9f       	mul	r19, r30
    489e:	80 0d       	add	r24, r0
    48a0:	91 1d       	adc	r25, r1
    48a2:	11 24       	eor	r1, r1
    48a4:	9f 87       	std	Y+15, r25	; 0x0f
    48a6:	8e 87       	std	Y+14, r24	; 0x0e
          }
          drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x,
                   textsize_y);
    48a8:	ea 88       	ldd	r14, Y+18	; 0x12
    48aa:	fb 88       	ldd	r15, Y+19	; 0x13
    48ac:	08 89       	ldd	r16, Y+16	; 0x10
    48ae:	19 89       	ldd	r17, Y+17	; 0x11
    48b0:	4e 85       	ldd	r20, Y+14	; 0x0e
    48b2:	5f 85       	ldd	r21, Y+15	; 0x0f
    48b4:	6c 85       	ldd	r22, Y+12	; 0x0c
    48b6:	7d 85       	ldd	r23, Y+13	; 0x0d
    48b8:	ad 88       	ldd	r10, Y+21	; 0x15
    48ba:	cc 88       	ldd	r12, Y+20	; 0x14
    48bc:	ce 01       	movw	r24, r28
    48be:	0e 94 62 21 	call	0x42c4	; 0x42c4 <_ZN12Adafruit_GFX8drawCharEiihjjhh>
    48c2:	bc cf       	rjmp	.-136    	; 0x483c <_ZN12Adafruit_GFX5writeEh+0x10e>
            (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
      }
    }
  }
  return 1;
}
    48c4:	81 e0       	ldi	r24, 0x01	; 1
    48c6:	90 e0       	ldi	r25, 0x00	; 0
    48c8:	df 91       	pop	r29
    48ca:	cf 91       	pop	r28
    48cc:	1f 91       	pop	r17
    48ce:	0f 91       	pop	r16
    48d0:	ff 90       	pop	r15
    48d2:	ef 90       	pop	r14
    48d4:	cf 90       	pop	r12
    48d6:	af 90       	pop	r10
    48d8:	9f 90       	pop	r9
    48da:	8f 90       	pop	r8
    48dc:	08 95       	ret

000048de <_ZN12Adafruit_GFX11setTextSizeEhh>:
    @param  s_x  Desired text width magnification level in X-axis. 1 is default
    @param  s_y  Desired text width magnification level in Y-axis. 1 is default
*/
/**************************************************************************/
void Adafruit_GFX::setTextSize(uint8_t s_x, uint8_t s_y) {
  textsize_x = (s_x > 0) ? s_x : 1;
    48de:	61 11       	cpse	r22, r1
    48e0:	01 c0       	rjmp	.+2      	; 0x48e4 <_ZN12Adafruit_GFX11setTextSizeEhh+0x6>
    48e2:	61 e0       	ldi	r22, 0x01	; 1
    48e4:	fc 01       	movw	r30, r24
    48e6:	64 8b       	std	Z+20, r22	; 0x14
  textsize_y = (s_y > 0) ? s_y : 1;
    48e8:	41 11       	cpse	r20, r1
    48ea:	01 c0       	rjmp	.+2      	; 0x48ee <_ZN12Adafruit_GFX11setTextSizeEhh+0x10>
    48ec:	41 e0       	ldi	r20, 0x01	; 1
    48ee:	fc 01       	movw	r30, r24
    48f0:	45 8b       	std	Z+21, r20	; 0x15
    48f2:	08 95       	ret

000048f4 <_ZN12Adafruit_GFX11setTextSizeEh>:
    @brief   Set text 'magnification' size. Each increase in s makes 1 pixel
   that much bigger.
    @param  s  Desired text size. 1 is default 6x8, 2 is 12x16, 3 is 18x24, etc
*/
/**************************************************************************/
void Adafruit_GFX::setTextSize(uint8_t s) { setTextSize(s, s); }
    48f4:	46 2f       	mov	r20, r22
    48f6:	0c 94 6f 24 	jmp	0x48de	; 0x48de <_ZN12Adafruit_GFX11setTextSizeEhh>

000048fa <_ZN16Adafruit_SSD13069drawPixelEiij>:
/*!
    @brief  Get base address of display buffer for direct reading or writing.
    @return Pointer to an unsigned 8-bit array, column-major, columns padded
            to full byte boundary if needed.
*/
uint8_t *Adafruit_SSD1306::getBuffer(void) { return buffer; }
    48fa:	fc 01       	movw	r30, r24
    48fc:	77 fd       	sbrc	r23, 7
    48fe:	b9 c0       	rjmp	.+370    	; 0x4a72 <_ZN16Adafruit_SSD13069drawPixelEiij+0x178>
    4900:	80 85       	ldd	r24, Z+8	; 0x08
    4902:	91 85       	ldd	r25, Z+9	; 0x09
    4904:	68 17       	cp	r22, r24
    4906:	79 07       	cpc	r23, r25
    4908:	0c f0       	brlt	.+2      	; 0x490c <_ZN16Adafruit_SSD13069drawPixelEiij+0x12>
    490a:	b3 c0       	rjmp	.+358    	; 0x4a72 <_ZN16Adafruit_SSD13069drawPixelEiij+0x178>
    490c:	57 fd       	sbrc	r21, 7
    490e:	b1 c0       	rjmp	.+354    	; 0x4a72 <_ZN16Adafruit_SSD13069drawPixelEiij+0x178>
    4910:	82 85       	ldd	r24, Z+10	; 0x0a
    4912:	93 85       	ldd	r25, Z+11	; 0x0b
    4914:	48 17       	cp	r20, r24
    4916:	59 07       	cpc	r21, r25
    4918:	0c f0       	brlt	.+2      	; 0x491c <_ZN16Adafruit_SSD13069drawPixelEiij+0x22>
    491a:	08 95       	ret
    491c:	86 89       	ldd	r24, Z+22	; 0x16
    491e:	82 30       	cpi	r24, 0x02	; 2
    4920:	79 f4       	brne	.+30     	; 0x4940 <_ZN16Adafruit_SSD13069drawPixelEiij+0x46>
    4922:	84 81       	ldd	r24, Z+4	; 0x04
    4924:	95 81       	ldd	r25, Z+5	; 0x05
    4926:	dc 01       	movw	r26, r24
    4928:	a6 1b       	sub	r26, r22
    492a:	b7 0b       	sbc	r27, r23
    492c:	bd 01       	movw	r22, r26
    492e:	61 50       	subi	r22, 0x01	; 1
    4930:	71 09       	sbc	r23, r1
    4932:	86 81       	ldd	r24, Z+6	; 0x06
    4934:	97 81       	ldd	r25, Z+7	; 0x07
    4936:	dc 01       	movw	r26, r24
    4938:	a4 1b       	sub	r26, r20
    493a:	b5 0b       	sbc	r27, r21
    493c:	ad 01       	movw	r20, r26
    493e:	0e c0       	rjmp	.+28     	; 0x495c <_ZN16Adafruit_SSD13069drawPixelEiij+0x62>
    4940:	83 30       	cpi	r24, 0x03	; 3
    4942:	09 f0       	breq	.+2      	; 0x4946 <_ZN16Adafruit_SSD13069drawPixelEiij+0x4c>
    4944:	84 c0       	rjmp	.+264    	; 0x4a4e <_ZN16Adafruit_SSD13069drawPixelEiij+0x154>
    4946:	64 27       	eor	r22, r20
    4948:	75 27       	eor	r23, r21
    494a:	ca 01       	movw	r24, r20
    494c:	86 27       	eor	r24, r22
    494e:	97 27       	eor	r25, r23
    4950:	68 27       	eor	r22, r24
    4952:	79 27       	eor	r23, r25
    4954:	46 81       	ldd	r20, Z+6	; 0x06
    4956:	57 81       	ldd	r21, Z+7	; 0x07
    4958:	48 1b       	sub	r20, r24
    495a:	59 0b       	sbc	r21, r25
    495c:	41 50       	subi	r20, 0x01	; 1
    495e:	51 09       	sbc	r21, r1
    4960:	21 30       	cpi	r18, 0x01	; 1
    4962:	31 05       	cpc	r19, r1
    4964:	31 f0       	breq	.+12     	; 0x4972 <_ZN16Adafruit_SSD13069drawPixelEiij+0x78>
    4966:	48 f1       	brcs	.+82     	; 0x49ba <_ZN16Adafruit_SSD13069drawPixelEiij+0xc0>
    4968:	22 30       	cpi	r18, 0x02	; 2
    496a:	31 05       	cpc	r19, r1
    496c:	09 f4       	brne	.+2      	; 0x4970 <_ZN16Adafruit_SSD13069drawPixelEiij+0x76>
    496e:	4a c0       	rjmp	.+148    	; 0x4a04 <_ZN16Adafruit_SSD13069drawPixelEiij+0x10a>
    4970:	08 95       	ret
    4972:	ca 01       	movw	r24, r20
    4974:	57 fd       	sbrc	r21, 7
    4976:	07 96       	adiw	r24, 0x07	; 7
    4978:	9c 01       	movw	r18, r24
    497a:	a3 e0       	ldi	r26, 0x03	; 3
    497c:	35 95       	asr	r19
    497e:	27 95       	ror	r18
    4980:	aa 95       	dec	r26
    4982:	e1 f7       	brne	.-8      	; 0x497c <_ZN16Adafruit_SSD13069drawPixelEiij+0x82>
    4984:	a4 81       	ldd	r26, Z+4	; 0x04
    4986:	b5 81       	ldd	r27, Z+5	; 0x05
    4988:	2a 9f       	mul	r18, r26
    498a:	c0 01       	movw	r24, r0
    498c:	2b 9f       	mul	r18, r27
    498e:	90 0d       	add	r25, r0
    4990:	3a 9f       	mul	r19, r26
    4992:	90 0d       	add	r25, r0
    4994:	11 24       	eor	r1, r1
    4996:	68 0f       	add	r22, r24
    4998:	79 1f       	adc	r23, r25
    499a:	07 8c       	ldd	r0, Z+31	; 0x1f
    499c:	f0 a1       	ldd	r31, Z+32	; 0x20
    499e:	e0 2d       	mov	r30, r0
    49a0:	e6 0f       	add	r30, r22
    49a2:	f7 1f       	adc	r31, r23
    49a4:	47 70       	andi	r20, 0x07	; 7
    49a6:	55 27       	eor	r21, r21
    49a8:	81 e0       	ldi	r24, 0x01	; 1
    49aa:	90 e0       	ldi	r25, 0x00	; 0
    49ac:	01 c0       	rjmp	.+2      	; 0x49b0 <_ZN16Adafruit_SSD13069drawPixelEiij+0xb6>
    49ae:	88 0f       	add	r24, r24
    49b0:	4a 95       	dec	r20
    49b2:	ea f7       	brpl	.-6      	; 0x49ae <_ZN16Adafruit_SSD13069drawPixelEiij+0xb4>
    49b4:	90 81       	ld	r25, Z
    49b6:	89 2b       	or	r24, r25
    49b8:	48 c0       	rjmp	.+144    	; 0x4a4a <_ZN16Adafruit_SSD13069drawPixelEiij+0x150>
    49ba:	ca 01       	movw	r24, r20
    49bc:	57 fd       	sbrc	r21, 7
    49be:	07 96       	adiw	r24, 0x07	; 7
    49c0:	9c 01       	movw	r18, r24
    49c2:	93 e0       	ldi	r25, 0x03	; 3
    49c4:	35 95       	asr	r19
    49c6:	27 95       	ror	r18
    49c8:	9a 95       	dec	r25
    49ca:	e1 f7       	brne	.-8      	; 0x49c4 <_ZN16Adafruit_SSD13069drawPixelEiij+0xca>
    49cc:	a4 81       	ldd	r26, Z+4	; 0x04
    49ce:	b5 81       	ldd	r27, Z+5	; 0x05
    49d0:	2a 9f       	mul	r18, r26
    49d2:	c0 01       	movw	r24, r0
    49d4:	2b 9f       	mul	r18, r27
    49d6:	90 0d       	add	r25, r0
    49d8:	3a 9f       	mul	r19, r26
    49da:	90 0d       	add	r25, r0
    49dc:	11 24       	eor	r1, r1
    49de:	68 0f       	add	r22, r24
    49e0:	79 1f       	adc	r23, r25
    49e2:	07 8c       	ldd	r0, Z+31	; 0x1f
    49e4:	f0 a1       	ldd	r31, Z+32	; 0x20
    49e6:	e0 2d       	mov	r30, r0
    49e8:	e6 0f       	add	r30, r22
    49ea:	f7 1f       	adc	r31, r23
    49ec:	47 70       	andi	r20, 0x07	; 7
    49ee:	55 27       	eor	r21, r21
    49f0:	81 e0       	ldi	r24, 0x01	; 1
    49f2:	90 e0       	ldi	r25, 0x00	; 0
    49f4:	01 c0       	rjmp	.+2      	; 0x49f8 <_ZN16Adafruit_SSD13069drawPixelEiij+0xfe>
    49f6:	88 0f       	add	r24, r24
    49f8:	4a 95       	dec	r20
    49fa:	ea f7       	brpl	.-6      	; 0x49f6 <_ZN16Adafruit_SSD13069drawPixelEiij+0xfc>
    49fc:	80 95       	com	r24
    49fe:	90 81       	ld	r25, Z
    4a00:	89 23       	and	r24, r25
    4a02:	23 c0       	rjmp	.+70     	; 0x4a4a <_ZN16Adafruit_SSD13069drawPixelEiij+0x150>
    4a04:	ca 01       	movw	r24, r20
    4a06:	57 fd       	sbrc	r21, 7
    4a08:	07 96       	adiw	r24, 0x07	; 7
    4a0a:	9c 01       	movw	r18, r24
    4a0c:	83 e0       	ldi	r24, 0x03	; 3
    4a0e:	35 95       	asr	r19
    4a10:	27 95       	ror	r18
    4a12:	8a 95       	dec	r24
    4a14:	e1 f7       	brne	.-8      	; 0x4a0e <_ZN16Adafruit_SSD13069drawPixelEiij+0x114>
    4a16:	a4 81       	ldd	r26, Z+4	; 0x04
    4a18:	b5 81       	ldd	r27, Z+5	; 0x05
    4a1a:	2a 9f       	mul	r18, r26
    4a1c:	c0 01       	movw	r24, r0
    4a1e:	2b 9f       	mul	r18, r27
    4a20:	90 0d       	add	r25, r0
    4a22:	3a 9f       	mul	r19, r26
    4a24:	90 0d       	add	r25, r0
    4a26:	11 24       	eor	r1, r1
    4a28:	68 0f       	add	r22, r24
    4a2a:	79 1f       	adc	r23, r25
    4a2c:	07 8c       	ldd	r0, Z+31	; 0x1f
    4a2e:	f0 a1       	ldd	r31, Z+32	; 0x20
    4a30:	e0 2d       	mov	r30, r0
    4a32:	e6 0f       	add	r30, r22
    4a34:	f7 1f       	adc	r31, r23
    4a36:	47 70       	andi	r20, 0x07	; 7
    4a38:	55 27       	eor	r21, r21
    4a3a:	81 e0       	ldi	r24, 0x01	; 1
    4a3c:	90 e0       	ldi	r25, 0x00	; 0
    4a3e:	01 c0       	rjmp	.+2      	; 0x4a42 <_ZN16Adafruit_SSD13069drawPixelEiij+0x148>
    4a40:	88 0f       	add	r24, r24
    4a42:	4a 95       	dec	r20
    4a44:	ea f7       	brpl	.-6      	; 0x4a40 <_ZN16Adafruit_SSD13069drawPixelEiij+0x146>
    4a46:	90 81       	ld	r25, Z
    4a48:	89 27       	eor	r24, r25
    4a4a:	80 83       	st	Z, r24
    4a4c:	08 95       	ret
    4a4e:	81 30       	cpi	r24, 0x01	; 1
    4a50:	09 f0       	breq	.+2      	; 0x4a54 <_ZN16Adafruit_SSD13069drawPixelEiij+0x15a>
    4a52:	86 cf       	rjmp	.-244    	; 0x4960 <_ZN16Adafruit_SSD13069drawPixelEiij+0x66>
    4a54:	64 27       	eor	r22, r20
    4a56:	75 27       	eor	r23, r21
    4a58:	46 27       	eor	r20, r22
    4a5a:	57 27       	eor	r21, r23
    4a5c:	64 27       	eor	r22, r20
    4a5e:	75 27       	eor	r23, r21
    4a60:	84 81       	ldd	r24, Z+4	; 0x04
    4a62:	95 81       	ldd	r25, Z+5	; 0x05
    4a64:	dc 01       	movw	r26, r24
    4a66:	a6 1b       	sub	r26, r22
    4a68:	b7 0b       	sbc	r27, r23
    4a6a:	bd 01       	movw	r22, r26
    4a6c:	61 50       	subi	r22, 0x01	; 1
    4a6e:	71 09       	sbc	r23, r1
    4a70:	77 cf       	rjmp	.-274    	; 0x4960 <_ZN16Adafruit_SSD13069drawPixelEiij+0x66>
    4a72:	08 95       	ret

00004a74 <_ZN8SPIClass16beginTransactionE11SPISettings>:
    4a74:	20 91 d9 02 	lds	r18, 0x02D9	; 0x8002d9 <_ZN8SPIClass13interruptModeE>
    4a78:	22 23       	and	r18, r18
    4a7a:	99 f0       	breq	.+38     	; 0x4aa2 <_ZN8SPIClass16beginTransactionE11SPISettings+0x2e>
    4a7c:	4f b7       	in	r20, 0x3f	; 63
    4a7e:	f8 94       	cli
    4a80:	20 91 d9 02 	lds	r18, 0x02D9	; 0x8002d9 <_ZN8SPIClass13interruptModeE>
    4a84:	21 30       	cpi	r18, 0x01	; 1
    4a86:	59 f4       	brne	.+22     	; 0x4a9e <_ZN8SPIClass16beginTransactionE11SPISettings+0x2a>
    4a88:	2d b3       	in	r18, 0x1d	; 29
    4a8a:	20 93 d7 02 	sts	0x02D7, r18	; 0x8002d7 <_ZN8SPIClass13interruptSaveE>
    4a8e:	3d b3       	in	r19, 0x1d	; 29
    4a90:	20 91 d8 02 	lds	r18, 0x02D8	; 0x8002d8 <_ZN8SPIClass13interruptMaskE>
    4a94:	20 95       	com	r18
    4a96:	23 23       	and	r18, r19
    4a98:	2d bb       	out	0x1d, r18	; 29
    4a9a:	4f bf       	out	0x3f, r20	; 63
    4a9c:	02 c0       	rjmp	.+4      	; 0x4aa2 <_ZN8SPIClass16beginTransactionE11SPISettings+0x2e>
    4a9e:	40 93 d7 02 	sts	0x02D7, r20	; 0x8002d7 <_ZN8SPIClass13interruptSaveE>
    4aa2:	8c bd       	out	0x2c, r24	; 44
    4aa4:	9d bd       	out	0x2d, r25	; 45
    4aa6:	08 95       	ret

00004aa8 <_ZN8SPIClass8transferEh>:
    4aa8:	8e bd       	out	0x2e, r24	; 46
    4aaa:	00 00       	nop
    4aac:	0d b4       	in	r0, 0x2d	; 45
    4aae:	07 fe       	sbrs	r0, 7
    4ab0:	fd cf       	rjmp	.-6      	; 0x4aac <_ZN8SPIClass8transferEh+0x4>
    4ab2:	8e b5       	in	r24, 0x2e	; 46
    4ab4:	08 95       	ret

00004ab6 <_ZN8SPIClass14endTransactionEv>:
    4ab6:	80 91 d9 02 	lds	r24, 0x02D9	; 0x8002d9 <_ZN8SPIClass13interruptModeE>
    4aba:	88 23       	and	r24, r24
    4abc:	61 f0       	breq	.+24     	; 0x4ad6 <_ZN8SPIClass14endTransactionEv+0x20>
    4abe:	9f b7       	in	r25, 0x3f	; 63
    4ac0:	f8 94       	cli
    4ac2:	20 91 d9 02 	lds	r18, 0x02D9	; 0x8002d9 <_ZN8SPIClass13interruptModeE>
    4ac6:	80 91 d7 02 	lds	r24, 0x02D7	; 0x8002d7 <_ZN8SPIClass13interruptSaveE>
    4aca:	21 30       	cpi	r18, 0x01	; 1
    4acc:	19 f4       	brne	.+6      	; 0x4ad4 <_ZN8SPIClass14endTransactionEv+0x1e>
    4ace:	8d bb       	out	0x1d, r24	; 29
    4ad0:	9f bf       	out	0x3f, r25	; 63
    4ad2:	08 95       	ret
    4ad4:	8f bf       	out	0x3f, r24	; 63
    4ad6:	08 95       	ret

00004ad8 <_ZN16Adafruit_SSD1306C1Ea>:
    4ad8:	1f 93       	push	r17
    4ada:	cf 93       	push	r28
    4adc:	df 93       	push	r29
    4ade:	ec 01       	movw	r28, r24
    4ae0:	16 2f       	mov	r17, r22
    4ae2:	40 e4       	ldi	r20, 0x40	; 64
    4ae4:	50 e0       	ldi	r21, 0x00	; 0
    4ae6:	60 e8       	ldi	r22, 0x80	; 128
    4ae8:	70 e0       	ldi	r23, 0x00	; 0
    4aea:	0e 94 d7 1c 	call	0x39ae	; 0x39ae <_ZN12Adafruit_GFXC1Eii>
    4aee:	87 e9       	ldi	r24, 0x97	; 151
    4af0:	91 e0       	ldi	r25, 0x01	; 1
    4af2:	99 83       	std	Y+1, r25	; 0x01
    4af4:	88 83       	st	Y, r24
    4af6:	1c 8e       	std	Y+28, r1	; 0x1c
    4af8:	1b 8e       	std	Y+27, r1	; 0x1b
    4afa:	8b ed       	ldi	r24, 0xDB	; 219
    4afc:	92 e0       	ldi	r25, 0x02	; 2
    4afe:	9e 8f       	std	Y+30, r25	; 0x1e
    4b00:	8d 8f       	std	Y+29, r24	; 0x1d
    4b02:	18 a2       	std	Y+32, r1	; 0x20
    4b04:	1f 8e       	std	Y+31, r1	; 0x1f
    4b06:	8f ef       	ldi	r24, 0xFF	; 255
    4b08:	8c a3       	std	Y+36, r24	; 0x24
    4b0a:	8d a3       	std	Y+37, r24	; 0x25
    4b0c:	8e a3       	std	Y+38, r24	; 0x26
    4b0e:	8f a3       	std	Y+39, r24	; 0x27
    4b10:	18 a7       	std	Y+40, r17	; 0x28
    4b12:	80 e5       	ldi	r24, 0x50	; 80
    4b14:	8e af       	std	Y+62, r24	; 0x3e
    4b16:	1f ae       	std	Y+63, r1	; 0x3f
    4b18:	df 91       	pop	r29
    4b1a:	cf 91       	pop	r28
    4b1c:	1f 91       	pop	r17
    4b1e:	08 95       	ret

00004b20 <_ZN16Adafruit_SSD1306D1Ev>:
    4b20:	27 e9       	ldi	r18, 0x97	; 151
    4b22:	31 e0       	ldi	r19, 0x01	; 1
    4b24:	fc 01       	movw	r30, r24
    4b26:	31 83       	std	Z+1, r19	; 0x01
    4b28:	20 83       	st	Z, r18
    4b2a:	87 8d       	ldd	r24, Z+31	; 0x1f
    4b2c:	90 a1       	ldd	r25, Z+32	; 0x20
    4b2e:	00 97       	sbiw	r24, 0x00	; 0
    4b30:	11 f0       	breq	.+4      	; 0x4b36 <_ZN16Adafruit_SSD1306D1Ev+0x16>
    4b32:	0c 94 da 30 	jmp	0x61b4	; 0x61b4 <free>
    4b36:	08 95       	ret

00004b38 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>:
    4b38:	1f 93       	push	r17
    4b3a:	cf 93       	push	r28
    4b3c:	df 93       	push	r29
    4b3e:	fc 01       	movw	r30, r24
    4b40:	85 8d       	ldd	r24, Z+29	; 0x1d
    4b42:	96 8d       	ldd	r25, Z+30	; 0x1e
    4b44:	00 97       	sbiw	r24, 0x00	; 0
    4b46:	19 f1       	breq	.+70     	; 0x4b8e <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x56>
    4b48:	16 2f       	mov	r17, r22
    4b4a:	ef 01       	movw	r28, r30
    4b4c:	61 a1       	ldd	r22, Z+33	; 0x21
    4b4e:	06 2e       	mov	r0, r22
    4b50:	00 0c       	add	r0, r0
    4b52:	77 0b       	sbc	r23, r23
    4b54:	0e 94 99 2c 	call	0x5932	; 0x5932 <_ZN7TwoWire17beginTransmissionEi>
    4b58:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4b5a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4b5c:	dc 01       	movw	r26, r24
    4b5e:	ed 91       	ld	r30, X+
    4b60:	fc 91       	ld	r31, X
    4b62:	01 90       	ld	r0, Z+
    4b64:	f0 81       	ld	r31, Z
    4b66:	e0 2d       	mov	r30, r0
    4b68:	60 e0       	ldi	r22, 0x00	; 0
    4b6a:	09 95       	icall
    4b6c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4b6e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4b70:	dc 01       	movw	r26, r24
    4b72:	ed 91       	ld	r30, X+
    4b74:	fc 91       	ld	r31, X
    4b76:	01 90       	ld	r0, Z+
    4b78:	f0 81       	ld	r31, Z
    4b7a:	e0 2d       	mov	r30, r0
    4b7c:	61 2f       	mov	r22, r17
    4b7e:	09 95       	icall
    4b80:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4b82:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4b84:	df 91       	pop	r29
    4b86:	cf 91       	pop	r28
    4b88:	1f 91       	pop	r17
    4b8a:	0c 94 ae 2c 	jmp	0x595c	; 0x595c <_ZN7TwoWire15endTransmissionEv>
    4b8e:	a5 a5       	ldd	r26, Z+45	; 0x2d
    4b90:	b6 a5       	ldd	r27, Z+46	; 0x2e
    4b92:	9c 91       	ld	r25, X
    4b94:	83 a9       	ldd	r24, Z+51	; 0x33
    4b96:	80 95       	com	r24
    4b98:	89 23       	and	r24, r25
    4b9a:	8c 93       	st	X, r24
    4b9c:	83 8d       	ldd	r24, Z+27	; 0x1b
    4b9e:	94 8d       	ldd	r25, Z+28	; 0x1c
    4ba0:	89 2b       	or	r24, r25
    4ba2:	31 f0       	breq	.+12     	; 0x4bb0 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x78>
    4ba4:	86 2f       	mov	r24, r22
    4ba6:	df 91       	pop	r29
    4ba8:	cf 91       	pop	r28
    4baa:	1f 91       	pop	r17
    4bac:	0c 94 54 25 	jmp	0x4aa8	; 0x4aa8 <_ZN8SPIClass8transferEh>
    4bb0:	28 e0       	ldi	r18, 0x08	; 8
    4bb2:	30 e0       	ldi	r19, 0x00	; 0
    4bb4:	80 e8       	ldi	r24, 0x80	; 128
    4bb6:	a1 a5       	ldd	r26, Z+41	; 0x29
    4bb8:	b2 a5       	ldd	r27, Z+42	; 0x2a
    4bba:	91 a9       	ldd	r25, Z+49	; 0x31
    4bbc:	46 2f       	mov	r20, r22
    4bbe:	48 23       	and	r20, r24
    4bc0:	19 f0       	breq	.+6      	; 0x4bc8 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x90>
    4bc2:	4c 91       	ld	r20, X
    4bc4:	94 2b       	or	r25, r20
    4bc6:	03 c0       	rjmp	.+6      	; 0x4bce <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x96>
    4bc8:	4c 91       	ld	r20, X
    4bca:	90 95       	com	r25
    4bcc:	94 23       	and	r25, r20
    4bce:	9c 93       	st	X, r25
    4bd0:	a3 a5       	ldd	r26, Z+43	; 0x2b
    4bd2:	b4 a5       	ldd	r27, Z+44	; 0x2c
    4bd4:	4c 91       	ld	r20, X
    4bd6:	92 a9       	ldd	r25, Z+50	; 0x32
    4bd8:	94 2b       	or	r25, r20
    4bda:	9c 93       	st	X, r25
    4bdc:	a3 a5       	ldd	r26, Z+43	; 0x2b
    4bde:	b4 a5       	ldd	r27, Z+44	; 0x2c
    4be0:	4c 91       	ld	r20, X
    4be2:	92 a9       	ldd	r25, Z+50	; 0x32
    4be4:	90 95       	com	r25
    4be6:	94 23       	and	r25, r20
    4be8:	9c 93       	st	X, r25
    4bea:	86 95       	lsr	r24
    4bec:	21 50       	subi	r18, 0x01	; 1
    4bee:	31 09       	sbc	r19, r1
    4bf0:	11 f7       	brne	.-60     	; 0x4bb6 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x7e>
    4bf2:	df 91       	pop	r29
    4bf4:	cf 91       	pop	r28
    4bf6:	1f 91       	pop	r17
    4bf8:	08 95       	ret

00004bfa <_ZN16Adafruit_SSD130613invertDisplayEb>:
    4bfa:	1f 93       	push	r17
    4bfc:	cf 93       	push	r28
    4bfe:	df 93       	push	r29
    4c00:	ec 01       	movw	r28, r24
    4c02:	16 2f       	mov	r17, r22
    4c04:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4c06:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4c08:	00 97       	sbiw	r24, 0x00	; 0
    4c0a:	39 f0       	breq	.+14     	; 0x4c1a <_ZN16Adafruit_SSD130613invertDisplayEb+0x20>
    4c0c:	4d a9       	ldd	r20, Y+53	; 0x35
    4c0e:	5e a9       	ldd	r21, Y+54	; 0x36
    4c10:	6f a9       	ldd	r22, Y+55	; 0x37
    4c12:	78 ad       	ldd	r23, Y+56	; 0x38
    4c14:	0e 94 8b 2c 	call	0x5916	; 0x5916 <_ZN7TwoWire8setClockEm>
    4c18:	0f c0       	rjmp	.+30     	; 0x4c38 <_ZN16Adafruit_SSD130613invertDisplayEb+0x3e>
    4c1a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4c1c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4c1e:	89 2b       	or	r24, r25
    4c20:	21 f0       	breq	.+8      	; 0x4c2a <_ZN16Adafruit_SSD130613invertDisplayEb+0x30>
    4c22:	8e ad       	ldd	r24, Y+62	; 0x3e
    4c24:	9f ad       	ldd	r25, Y+63	; 0x3f
    4c26:	0e 94 3a 25 	call	0x4a74	; 0x4a74 <_ZN8SPIClass16beginTransactionE11SPISettings>
    4c2a:	ef a5       	ldd	r30, Y+47	; 0x2f
    4c2c:	f8 a9       	ldd	r31, Y+48	; 0x30
    4c2e:	90 81       	ld	r25, Z
    4c30:	8c a9       	ldd	r24, Y+52	; 0x34
    4c32:	80 95       	com	r24
    4c34:	89 23       	and	r24, r25
    4c36:	80 83       	st	Z, r24
    4c38:	11 11       	cpse	r17, r1
    4c3a:	02 c0       	rjmp	.+4      	; 0x4c40 <_ZN16Adafruit_SSD130613invertDisplayEb+0x46>
    4c3c:	66 ea       	ldi	r22, 0xA6	; 166
    4c3e:	01 c0       	rjmp	.+2      	; 0x4c42 <_ZN16Adafruit_SSD130613invertDisplayEb+0x48>
    4c40:	67 ea       	ldi	r22, 0xA7	; 167
    4c42:	ce 01       	movw	r24, r28
    4c44:	0e 94 9c 25 	call	0x4b38	; 0x4b38 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
    4c48:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4c4a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4c4c:	00 97       	sbiw	r24, 0x00	; 0
    4c4e:	49 f0       	breq	.+18     	; 0x4c62 <_ZN16Adafruit_SSD130613invertDisplayEb+0x68>
    4c50:	49 ad       	ldd	r20, Y+57	; 0x39
    4c52:	5a ad       	ldd	r21, Y+58	; 0x3a
    4c54:	6b ad       	ldd	r22, Y+59	; 0x3b
    4c56:	7c ad       	ldd	r23, Y+60	; 0x3c
    4c58:	df 91       	pop	r29
    4c5a:	cf 91       	pop	r28
    4c5c:	1f 91       	pop	r17
    4c5e:	0c 94 8b 2c 	jmp	0x5916	; 0x5916 <_ZN7TwoWire8setClockEm>
    4c62:	ef a5       	ldd	r30, Y+47	; 0x2f
    4c64:	f8 a9       	ldd	r31, Y+48	; 0x30
    4c66:	90 81       	ld	r25, Z
    4c68:	8c a9       	ldd	r24, Y+52	; 0x34
    4c6a:	89 2b       	or	r24, r25
    4c6c:	80 83       	st	Z, r24
    4c6e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4c70:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4c72:	89 2b       	or	r24, r25
    4c74:	29 f0       	breq	.+10     	; 0x4c80 <_ZN16Adafruit_SSD130613invertDisplayEb+0x86>
    4c76:	df 91       	pop	r29
    4c78:	cf 91       	pop	r28
    4c7a:	1f 91       	pop	r17
    4c7c:	0c 94 5b 25 	jmp	0x4ab6	; 0x4ab6 <_ZN8SPIClass14endTransactionEv>
    4c80:	df 91       	pop	r29
    4c82:	cf 91       	pop	r28
    4c84:	1f 91       	pop	r17
    4c86:	08 95       	ret

00004c88 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>:
    4c88:	bf 92       	push	r11
    4c8a:	cf 92       	push	r12
    4c8c:	df 92       	push	r13
    4c8e:	ef 92       	push	r14
    4c90:	ff 92       	push	r15
    4c92:	0f 93       	push	r16
    4c94:	1f 93       	push	r17
    4c96:	cf 93       	push	r28
    4c98:	df 93       	push	r29
    4c9a:	ec 01       	movw	r28, r24
    4c9c:	b6 2e       	mov	r11, r22
    4c9e:	07 2f       	mov	r16, r23
    4ca0:	14 2f       	mov	r17, r20
    4ca2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4ca4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4ca6:	00 97       	sbiw	r24, 0x00	; 0
    4ca8:	09 f4       	brne	.+2      	; 0x4cac <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x24>
    4caa:	52 c0       	rjmp	.+164    	; 0x4d50 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0xc8>
    4cac:	69 a1       	ldd	r22, Y+33	; 0x21
    4cae:	06 2e       	mov	r0, r22
    4cb0:	00 0c       	add	r0, r0
    4cb2:	77 0b       	sbc	r23, r23
    4cb4:	0e 94 99 2c 	call	0x5932	; 0x5932 <_ZN7TwoWire17beginTransmissionEi>
    4cb8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4cba:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4cbc:	dc 01       	movw	r26, r24
    4cbe:	ed 91       	ld	r30, X+
    4cc0:	fc 91       	ld	r31, X
    4cc2:	01 90       	ld	r0, Z+
    4cc4:	f0 81       	ld	r31, Z
    4cc6:	e0 2d       	mov	r30, r0
    4cc8:	60 e0       	ldi	r22, 0x00	; 0
    4cca:	09 95       	icall
    4ccc:	cb 2c       	mov	r12, r11
    4cce:	d0 2e       	mov	r13, r16
    4cd0:	ee 24       	eor	r14, r14
    4cd2:	e3 94       	inc	r14
    4cd4:	f1 2c       	mov	r15, r1
    4cd6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4cd8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4cda:	11 23       	and	r17, r17
    4cdc:	71 f1       	breq	.+92     	; 0x4d3a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0xb2>
    4cde:	b0 e2       	ldi	r27, 0x20	; 32
    4ce0:	eb 16       	cp	r14, r27
    4ce2:	f1 04       	cpc	r15, r1
    4ce4:	b8 f0       	brcs	.+46     	; 0x4d14 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x8c>
    4ce6:	0e 94 ae 2c 	call	0x595c	; 0x595c <_ZN7TwoWire15endTransmissionEv>
    4cea:	69 a1       	ldd	r22, Y+33	; 0x21
    4cec:	06 2e       	mov	r0, r22
    4cee:	00 0c       	add	r0, r0
    4cf0:	77 0b       	sbc	r23, r23
    4cf2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4cf4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4cf6:	0e 94 99 2c 	call	0x5932	; 0x5932 <_ZN7TwoWire17beginTransmissionEi>
    4cfa:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4cfc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4cfe:	dc 01       	movw	r26, r24
    4d00:	ed 91       	ld	r30, X+
    4d02:	fc 91       	ld	r31, X
    4d04:	01 90       	ld	r0, Z+
    4d06:	f0 81       	ld	r31, Z
    4d08:	e0 2d       	mov	r30, r0
    4d0a:	60 e0       	ldi	r22, 0x00	; 0
    4d0c:	09 95       	icall
    4d0e:	ee 24       	eor	r14, r14
    4d10:	e3 94       	inc	r14
    4d12:	f1 2c       	mov	r15, r1
    4d14:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4d16:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4d18:	f6 01       	movw	r30, r12
    4d1a:	64 91       	lpm	r22, Z
    4d1c:	dc 01       	movw	r26, r24
    4d1e:	ed 91       	ld	r30, X+
    4d20:	fc 91       	ld	r31, X
    4d22:	01 90       	ld	r0, Z+
    4d24:	f0 81       	ld	r31, Z
    4d26:	e0 2d       	mov	r30, r0
    4d28:	09 95       	icall
    4d2a:	bf ef       	ldi	r27, 0xFF	; 255
    4d2c:	eb 1a       	sub	r14, r27
    4d2e:	fb 0a       	sbc	r15, r27
    4d30:	11 50       	subi	r17, 0x01	; 1
    4d32:	f6 01       	movw	r30, r12
    4d34:	31 96       	adiw	r30, 0x01	; 1
    4d36:	6f 01       	movw	r12, r30
    4d38:	ce cf       	rjmp	.-100    	; 0x4cd6 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x4e>
    4d3a:	df 91       	pop	r29
    4d3c:	cf 91       	pop	r28
    4d3e:	1f 91       	pop	r17
    4d40:	0f 91       	pop	r16
    4d42:	ff 90       	pop	r15
    4d44:	ef 90       	pop	r14
    4d46:	df 90       	pop	r13
    4d48:	cf 90       	pop	r12
    4d4a:	bf 90       	pop	r11
    4d4c:	0c 94 ae 2c 	jmp	0x595c	; 0x595c <_ZN7TwoWire15endTransmissionEv>
    4d50:	ed a5       	ldd	r30, Y+45	; 0x2d
    4d52:	fe a5       	ldd	r31, Y+46	; 0x2e
    4d54:	90 81       	ld	r25, Z
    4d56:	8b a9       	ldd	r24, Y+51	; 0x33
    4d58:	80 95       	com	r24
    4d5a:	89 23       	and	r24, r25
    4d5c:	80 83       	st	Z, r24
    4d5e:	e6 2e       	mov	r14, r22
    4d60:	f7 2e       	mov	r15, r23
    4d62:	11 23       	and	r17, r17
    4d64:	79 f1       	breq	.+94     	; 0x4dc4 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x13c>
    4d66:	f7 01       	movw	r30, r14
    4d68:	84 91       	lpm	r24, Z
    4d6a:	2b 8d       	ldd	r18, Y+27	; 0x1b
    4d6c:	3c 8d       	ldd	r19, Y+28	; 0x1c
    4d6e:	23 2b       	or	r18, r19
    4d70:	39 f0       	breq	.+14     	; 0x4d80 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0xf8>
    4d72:	0e 94 54 25 	call	0x4aa8	; 0x4aa8 <_ZN8SPIClass8transferEh>
    4d76:	11 50       	subi	r17, 0x01	; 1
    4d78:	c7 01       	movw	r24, r14
    4d7a:	01 96       	adiw	r24, 0x01	; 1
    4d7c:	7c 01       	movw	r14, r24
    4d7e:	f1 cf       	rjmp	.-30     	; 0x4d62 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0xda>
    4d80:	28 e0       	ldi	r18, 0x08	; 8
    4d82:	30 e0       	ldi	r19, 0x00	; 0
    4d84:	40 e8       	ldi	r20, 0x80	; 128
    4d86:	e9 a5       	ldd	r30, Y+41	; 0x29
    4d88:	fa a5       	ldd	r31, Y+42	; 0x2a
    4d8a:	99 a9       	ldd	r25, Y+49	; 0x31
    4d8c:	58 2f       	mov	r21, r24
    4d8e:	54 23       	and	r21, r20
    4d90:	19 f0       	breq	.+6      	; 0x4d98 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x110>
    4d92:	50 81       	ld	r21, Z
    4d94:	95 2b       	or	r25, r21
    4d96:	03 c0       	rjmp	.+6      	; 0x4d9e <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x116>
    4d98:	50 81       	ld	r21, Z
    4d9a:	90 95       	com	r25
    4d9c:	95 23       	and	r25, r21
    4d9e:	90 83       	st	Z, r25
    4da0:	eb a5       	ldd	r30, Y+43	; 0x2b
    4da2:	fc a5       	ldd	r31, Y+44	; 0x2c
    4da4:	50 81       	ld	r21, Z
    4da6:	9a a9       	ldd	r25, Y+50	; 0x32
    4da8:	95 2b       	or	r25, r21
    4daa:	90 83       	st	Z, r25
    4dac:	eb a5       	ldd	r30, Y+43	; 0x2b
    4dae:	fc a5       	ldd	r31, Y+44	; 0x2c
    4db0:	50 81       	ld	r21, Z
    4db2:	9a a9       	ldd	r25, Y+50	; 0x32
    4db4:	90 95       	com	r25
    4db6:	95 23       	and	r25, r21
    4db8:	90 83       	st	Z, r25
    4dba:	46 95       	lsr	r20
    4dbc:	21 50       	subi	r18, 0x01	; 1
    4dbe:	31 09       	sbc	r19, r1
    4dc0:	11 f7       	brne	.-60     	; 0x4d86 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0xfe>
    4dc2:	d9 cf       	rjmp	.-78     	; 0x4d76 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0xee>
    4dc4:	df 91       	pop	r29
    4dc6:	cf 91       	pop	r28
    4dc8:	1f 91       	pop	r17
    4dca:	0f 91       	pop	r16
    4dcc:	ff 90       	pop	r15
    4dce:	ef 90       	pop	r14
    4dd0:	df 90       	pop	r13
    4dd2:	cf 90       	pop	r12
    4dd4:	bf 90       	pop	r11
    4dd6:	08 95       	ret

00004dd8 <_ZN16Adafruit_SSD130612clearDisplayEv>:
    4dd8:	fc 01       	movw	r30, r24
    4dda:	86 81       	ldd	r24, Z+6	; 0x06
    4ddc:	97 81       	ldd	r25, Z+7	; 0x07
    4dde:	9c 01       	movw	r18, r24
    4de0:	29 5f       	subi	r18, 0xF9	; 249
    4de2:	3f 4f       	sbci	r19, 0xFF	; 255
    4de4:	37 ff       	sbrs	r19, 7
    4de6:	02 c0       	rjmp	.+4      	; 0x4dec <_ZN16Adafruit_SSD130612clearDisplayEv+0x14>
    4de8:	29 5f       	subi	r18, 0xF9	; 249
    4dea:	3f 4f       	sbci	r19, 0xFF	; 255
    4dec:	83 e0       	ldi	r24, 0x03	; 3
    4dee:	35 95       	asr	r19
    4df0:	27 95       	ror	r18
    4df2:	8a 95       	dec	r24
    4df4:	e1 f7       	brne	.-8      	; 0x4dee <_ZN16Adafruit_SSD130612clearDisplayEv+0x16>
    4df6:	84 81       	ldd	r24, Z+4	; 0x04
    4df8:	95 81       	ldd	r25, Z+5	; 0x05
    4dfa:	28 9f       	mul	r18, r24
    4dfc:	a0 01       	movw	r20, r0
    4dfe:	29 9f       	mul	r18, r25
    4e00:	50 0d       	add	r21, r0
    4e02:	38 9f       	mul	r19, r24
    4e04:	50 0d       	add	r21, r0
    4e06:	11 24       	eor	r1, r1
    4e08:	60 e0       	ldi	r22, 0x00	; 0
    4e0a:	70 e0       	ldi	r23, 0x00	; 0
    4e0c:	87 8d       	ldd	r24, Z+31	; 0x1f
    4e0e:	90 a1       	ldd	r25, Z+32	; 0x20
    4e10:	0c 94 71 31 	jmp	0x62e2	; 0x62e2 <memset>

00004e14 <_ZN16Adafruit_SSD13065beginEhhbb>:
    4e14:	8f 92       	push	r8
    4e16:	9f 92       	push	r9
    4e18:	af 92       	push	r10
    4e1a:	bf 92       	push	r11
    4e1c:	cf 92       	push	r12
    4e1e:	df 92       	push	r13
    4e20:	ef 92       	push	r14
    4e22:	ff 92       	push	r15
    4e24:	0f 93       	push	r16
    4e26:	1f 93       	push	r17
    4e28:	cf 93       	push	r28
    4e2a:	df 93       	push	r29
    4e2c:	ec 01       	movw	r28, r24
    4e2e:	86 2e       	mov	r8, r22
    4e30:	b4 2e       	mov	r11, r20
    4e32:	a2 2e       	mov	r10, r18
    4e34:	90 2e       	mov	r9, r16
    4e36:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4e38:	98 a1       	ldd	r25, Y+32	; 0x20
    4e3a:	89 2b       	or	r24, r25
    4e3c:	e9 f4       	brne	.+58     	; 0x4e78 <_ZN16Adafruit_SSD13065beginEhhbb+0x64>
    4e3e:	2e 81       	ldd	r18, Y+6	; 0x06
    4e40:	3f 81       	ldd	r19, Y+7	; 0x07
    4e42:	c9 01       	movw	r24, r18
    4e44:	07 96       	adiw	r24, 0x07	; 7
    4e46:	97 fd       	sbrc	r25, 7
    4e48:	07 96       	adiw	r24, 0x07	; 7
    4e4a:	23 e0       	ldi	r18, 0x03	; 3
    4e4c:	95 95       	asr	r25
    4e4e:	87 95       	ror	r24
    4e50:	2a 95       	dec	r18
    4e52:	e1 f7       	brne	.-8      	; 0x4e4c <_ZN16Adafruit_SSD13065beginEhhbb+0x38>
    4e54:	2c 81       	ldd	r18, Y+4	; 0x04
    4e56:	3d 81       	ldd	r19, Y+5	; 0x05
    4e58:	ac 01       	movw	r20, r24
    4e5a:	42 9f       	mul	r20, r18
    4e5c:	c0 01       	movw	r24, r0
    4e5e:	43 9f       	mul	r20, r19
    4e60:	90 0d       	add	r25, r0
    4e62:	52 9f       	mul	r21, r18
    4e64:	90 0d       	add	r25, r0
    4e66:	11 24       	eor	r1, r1
    4e68:	0e 94 42 30 	call	0x6084	; 0x6084 <malloc>
    4e6c:	98 a3       	std	Y+32, r25	; 0x20
    4e6e:	8f 8f       	std	Y+31, r24	; 0x1f
    4e70:	89 2b       	or	r24, r25
    4e72:	11 f4       	brne	.+4      	; 0x4e78 <_ZN16Adafruit_SSD13065beginEhhbb+0x64>
    4e74:	80 e0       	ldi	r24, 0x00	; 0
    4e76:	92 c1       	rjmp	.+804    	; 0x519c <_ZN16Adafruit_SSD13065beginEhhbb+0x388>
    4e78:	ce 01       	movw	r24, r28
    4e7a:	0e 94 ec 26 	call	0x4dd8	; 0x4dd8 <_ZN16Adafruit_SSD130612clearDisplayEv>
    4e7e:	8e 81       	ldd	r24, Y+6	; 0x06
    4e80:	9f 81       	ldd	r25, Y+7	; 0x07
    4e82:	6c 81       	ldd	r22, Y+4	; 0x04
    4e84:	7d 81       	ldd	r23, Y+5	; 0x05
    4e86:	81 32       	cpi	r24, 0x21	; 33
    4e88:	91 05       	cpc	r25, r1
    4e8a:	e4 f0       	brlt	.+56     	; 0x4ec4 <_ZN16Adafruit_SSD13065beginEhhbb+0xb0>
    4e8c:	ac 01       	movw	r20, r24
    4e8e:	40 54       	subi	r20, 0x40	; 64
    4e90:	51 09       	sbc	r21, r1
    4e92:	57 ff       	sbrs	r21, 7
    4e94:	02 c0       	rjmp	.+4      	; 0x4e9a <_ZN16Adafruit_SSD13065beginEhhbb+0x86>
    4e96:	4f 5f       	subi	r20, 0xFF	; 255
    4e98:	5f 4f       	sbci	r21, 0xFF	; 255
    4e9a:	55 95       	asr	r21
    4e9c:	47 95       	ror	r20
    4e9e:	62 55       	subi	r22, 0x52	; 82
    4ea0:	71 09       	sbc	r23, r1
    4ea2:	77 ff       	sbrs	r23, 7
    4ea4:	02 c0       	rjmp	.+4      	; 0x4eaa <_ZN16Adafruit_SSD13065beginEhhbb+0x96>
    4ea6:	6f 5f       	subi	r22, 0xFF	; 255
    4ea8:	7f 4f       	sbci	r23, 0xFF	; 255
    4eaa:	75 95       	asr	r23
    4eac:	67 95       	ror	r22
    4eae:	cc 24       	eor	r12, r12
    4eb0:	c3 94       	inc	r12
    4eb2:	d1 2c       	mov	r13, r1
    4eb4:	80 e4       	ldi	r24, 0x40	; 64
    4eb6:	e8 2e       	mov	r14, r24
    4eb8:	f1 2c       	mov	r15, r1
    4eba:	02 e5       	ldi	r16, 0x52	; 82
    4ebc:	10 e0       	ldi	r17, 0x00	; 0
    4ebe:	21 e0       	ldi	r18, 0x01	; 1
    4ec0:	30 e1       	ldi	r19, 0x10	; 16
    4ec2:	1b c0       	rjmp	.+54     	; 0x4efa <_ZN16Adafruit_SSD13065beginEhhbb+0xe6>
    4ec4:	ac 01       	movw	r20, r24
    4ec6:	40 52       	subi	r20, 0x20	; 32
    4ec8:	51 09       	sbc	r21, r1
    4eca:	57 ff       	sbrs	r21, 7
    4ecc:	02 c0       	rjmp	.+4      	; 0x4ed2 <_ZN16Adafruit_SSD13065beginEhhbb+0xbe>
    4ece:	4f 5f       	subi	r20, 0xFF	; 255
    4ed0:	5f 4f       	sbci	r21, 0xFF	; 255
    4ed2:	55 95       	asr	r21
    4ed4:	47 95       	ror	r20
    4ed6:	63 57       	subi	r22, 0x73	; 115
    4ed8:	71 09       	sbc	r23, r1
    4eda:	77 ff       	sbrs	r23, 7
    4edc:	02 c0       	rjmp	.+4      	; 0x4ee2 <_ZN16Adafruit_SSD13065beginEhhbb+0xce>
    4ede:	6f 5f       	subi	r22, 0xFF	; 255
    4ee0:	7f 4f       	sbci	r23, 0xFF	; 255
    4ee2:	75 95       	asr	r23
    4ee4:	67 95       	ror	r22
    4ee6:	cc 24       	eor	r12, r12
    4ee8:	c3 94       	inc	r12
    4eea:	d1 2c       	mov	r13, r1
    4eec:	a0 e2       	ldi	r26, 0x20	; 32
    4eee:	ea 2e       	mov	r14, r26
    4ef0:	f1 2c       	mov	r15, r1
    4ef2:	03 e7       	ldi	r16, 0x73	; 115
    4ef4:	10 e0       	ldi	r17, 0x00	; 0
    4ef6:	21 e2       	ldi	r18, 0x21	; 33
    4ef8:	3e e0       	ldi	r19, 0x0E	; 14
    4efa:	ce 01       	movw	r24, r28
    4efc:	0e 94 c4 20 	call	0x4188	; 0x4188 <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij>
    4f00:	8a a2       	std	Y+34, r8	; 0x22
    4f02:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4f04:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4f06:	00 97       	sbiw	r24, 0x00	; 0
    4f08:	99 f0       	breq	.+38     	; 0x4f30 <_ZN16Adafruit_SSD13065beginEhhbb+0x11c>
    4f0a:	b1 10       	cpse	r11, r1
    4f0c:	07 c0       	rjmp	.+14     	; 0x4f1c <_ZN16Adafruit_SSD13065beginEhhbb+0x108>
    4f0e:	2e 81       	ldd	r18, Y+6	; 0x06
    4f10:	3f 81       	ldd	r19, Y+7	; 0x07
    4f12:	20 32       	cpi	r18, 0x20	; 32
    4f14:	31 05       	cpc	r19, r1
    4f16:	21 f4       	brne	.+8      	; 0x4f20 <_ZN16Adafruit_SSD13065beginEhhbb+0x10c>
    4f18:	2c e3       	ldi	r18, 0x3C	; 60
    4f1a:	03 c0       	rjmp	.+6      	; 0x4f22 <_ZN16Adafruit_SSD13065beginEhhbb+0x10e>
    4f1c:	2b 2d       	mov	r18, r11
    4f1e:	01 c0       	rjmp	.+2      	; 0x4f22 <_ZN16Adafruit_SSD13065beginEhhbb+0x10e>
    4f20:	2d e3       	ldi	r18, 0x3D	; 61
    4f22:	29 a3       	std	Y+33, r18	; 0x21
    4f24:	99 20       	and	r9, r9
    4f26:	09 f4       	brne	.+2      	; 0x4f2a <_ZN16Adafruit_SSD13065beginEhhbb+0x116>
    4f28:	36 c1       	rjmp	.+620    	; 0x5196 <_ZN16Adafruit_SSD13065beginEhhbb+0x382>
    4f2a:	0e 94 79 2c 	call	0x58f2	; 0x58f2 <_ZN7TwoWire5beginEv>
    4f2e:	79 c0       	rjmp	.+242    	; 0x5022 <_ZN16Adafruit_SSD13065beginEhhbb+0x20e>
    4f30:	61 e0       	ldi	r22, 0x01	; 1
    4f32:	8e a1       	ldd	r24, Y+38	; 0x26
    4f34:	0e 94 6a 19 	call	0x32d4	; 0x32d4 <pinMode>
    4f38:	61 e0       	ldi	r22, 0x01	; 1
    4f3a:	8f a1       	ldd	r24, Y+39	; 0x27
    4f3c:	0e 94 6a 19 	call	0x32d4	; 0x32d4 <pinMode>
    4f40:	8e a1       	ldd	r24, Y+38	; 0x26
    4f42:	08 2e       	mov	r0, r24
    4f44:	00 0c       	add	r0, r0
    4f46:	99 0b       	sbc	r25, r25
    4f48:	fc 01       	movw	r30, r24
    4f4a:	e8 53       	subi	r30, 0x38	; 56
    4f4c:	f7 4f       	sbci	r31, 0xF7	; 247
    4f4e:	e4 91       	lpm	r30, Z
    4f50:	f0 e0       	ldi	r31, 0x00	; 0
    4f52:	ee 0f       	add	r30, r30
    4f54:	ff 1f       	adc	r31, r31
    4f56:	ea 51       	subi	r30, 0x1A	; 26
    4f58:	f7 4f       	sbci	r31, 0xF7	; 247
    4f5a:	25 91       	lpm	r18, Z+
    4f5c:	34 91       	lpm	r19, Z
    4f5e:	3e a7       	std	Y+46, r19	; 0x2e
    4f60:	2d a7       	std	Y+45, r18	; 0x2d
    4f62:	fc 01       	movw	r30, r24
    4f64:	ec 54       	subi	r30, 0x4C	; 76
    4f66:	f7 4f       	sbci	r31, 0xF7	; 247
    4f68:	e4 91       	lpm	r30, Z
    4f6a:	eb ab       	std	Y+51, r30	; 0x33
    4f6c:	8f a1       	ldd	r24, Y+39	; 0x27
    4f6e:	08 2e       	mov	r0, r24
    4f70:	00 0c       	add	r0, r0
    4f72:	99 0b       	sbc	r25, r25
    4f74:	fc 01       	movw	r30, r24
    4f76:	e8 53       	subi	r30, 0x38	; 56
    4f78:	f7 4f       	sbci	r31, 0xF7	; 247
    4f7a:	e4 91       	lpm	r30, Z
    4f7c:	f0 e0       	ldi	r31, 0x00	; 0
    4f7e:	ee 0f       	add	r30, r30
    4f80:	ff 1f       	adc	r31, r31
    4f82:	ea 51       	subi	r30, 0x1A	; 26
    4f84:	f7 4f       	sbci	r31, 0xF7	; 247
    4f86:	a5 91       	lpm	r26, Z+
    4f88:	b4 91       	lpm	r27, Z
    4f8a:	b8 ab       	std	Y+48, r27	; 0x30
    4f8c:	af a7       	std	Y+47, r26	; 0x2f
    4f8e:	fc 01       	movw	r30, r24
    4f90:	ec 54       	subi	r30, 0x4C	; 76
    4f92:	f7 4f       	sbci	r31, 0xF7	; 247
    4f94:	e4 91       	lpm	r30, Z
    4f96:	ec ab       	std	Y+52, r30	; 0x34
    4f98:	8c 91       	ld	r24, X
    4f9a:	e8 2b       	or	r30, r24
    4f9c:	ec 93       	st	X, r30
    4f9e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4fa0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4fa2:	89 2b       	or	r24, r25
    4fa4:	31 f0       	breq	.+12     	; 0x4fb2 <_ZN16Adafruit_SSD13065beginEhhbb+0x19e>
    4fa6:	99 20       	and	r9, r9
    4fa8:	09 f4       	brne	.+2      	; 0x4fac <_ZN16Adafruit_SSD13065beginEhhbb+0x198>
    4faa:	3b c0       	rjmp	.+118    	; 0x5022 <_ZN16Adafruit_SSD13065beginEhhbb+0x20e>
    4fac:	0e 94 75 2b 	call	0x56ea	; 0x56ea <_ZN8SPIClass5beginEv>
    4fb0:	38 c0       	rjmp	.+112    	; 0x5022 <_ZN16Adafruit_SSD13065beginEhhbb+0x20e>
    4fb2:	61 e0       	ldi	r22, 0x01	; 1
    4fb4:	8c a1       	ldd	r24, Y+36	; 0x24
    4fb6:	0e 94 6a 19 	call	0x32d4	; 0x32d4 <pinMode>
    4fba:	61 e0       	ldi	r22, 0x01	; 1
    4fbc:	8d a1       	ldd	r24, Y+37	; 0x25
    4fbe:	0e 94 6a 19 	call	0x32d4	; 0x32d4 <pinMode>
    4fc2:	8c a1       	ldd	r24, Y+36	; 0x24
    4fc4:	08 2e       	mov	r0, r24
    4fc6:	00 0c       	add	r0, r0
    4fc8:	99 0b       	sbc	r25, r25
    4fca:	fc 01       	movw	r30, r24
    4fcc:	e8 53       	subi	r30, 0x38	; 56
    4fce:	f7 4f       	sbci	r31, 0xF7	; 247
    4fd0:	e4 91       	lpm	r30, Z
    4fd2:	f0 e0       	ldi	r31, 0x00	; 0
    4fd4:	ee 0f       	add	r30, r30
    4fd6:	ff 1f       	adc	r31, r31
    4fd8:	ea 51       	subi	r30, 0x1A	; 26
    4fda:	f7 4f       	sbci	r31, 0xF7	; 247
    4fdc:	25 91       	lpm	r18, Z+
    4fde:	34 91       	lpm	r19, Z
    4fe0:	3a a7       	std	Y+42, r19	; 0x2a
    4fe2:	29 a7       	std	Y+41, r18	; 0x29
    4fe4:	fc 01       	movw	r30, r24
    4fe6:	ec 54       	subi	r30, 0x4C	; 76
    4fe8:	f7 4f       	sbci	r31, 0xF7	; 247
    4fea:	e4 91       	lpm	r30, Z
    4fec:	e9 ab       	std	Y+49, r30	; 0x31
    4fee:	8d a1       	ldd	r24, Y+37	; 0x25
    4ff0:	08 2e       	mov	r0, r24
    4ff2:	00 0c       	add	r0, r0
    4ff4:	99 0b       	sbc	r25, r25
    4ff6:	fc 01       	movw	r30, r24
    4ff8:	e8 53       	subi	r30, 0x38	; 56
    4ffa:	f7 4f       	sbci	r31, 0xF7	; 247
    4ffc:	e4 91       	lpm	r30, Z
    4ffe:	f0 e0       	ldi	r31, 0x00	; 0
    5000:	ee 0f       	add	r30, r30
    5002:	ff 1f       	adc	r31, r31
    5004:	ea 51       	subi	r30, 0x1A	; 26
    5006:	f7 4f       	sbci	r31, 0xF7	; 247
    5008:	a5 91       	lpm	r26, Z+
    500a:	b4 91       	lpm	r27, Z
    500c:	bc a7       	std	Y+44, r27	; 0x2c
    500e:	ab a7       	std	Y+43, r26	; 0x2b
    5010:	fc 01       	movw	r30, r24
    5012:	ec 54       	subi	r30, 0x4C	; 76
    5014:	f7 4f       	sbci	r31, 0xF7	; 247
    5016:	e4 91       	lpm	r30, Z
    5018:	ea ab       	std	Y+50, r30	; 0x32
    501a:	8c 91       	ld	r24, X
    501c:	e0 95       	com	r30
    501e:	e8 23       	and	r30, r24
    5020:	ec 93       	st	X, r30
    5022:	aa 20       	and	r10, r10
    5024:	f1 f0       	breq	.+60     	; 0x5062 <_ZN16Adafruit_SSD13065beginEhhbb+0x24e>
    5026:	88 a5       	ldd	r24, Y+40	; 0x28
    5028:	87 fd       	sbrc	r24, 7
    502a:	1b c0       	rjmp	.+54     	; 0x5062 <_ZN16Adafruit_SSD13065beginEhhbb+0x24e>
    502c:	61 e0       	ldi	r22, 0x01	; 1
    502e:	0e 94 6a 19 	call	0x32d4	; 0x32d4 <pinMode>
    5032:	61 e0       	ldi	r22, 0x01	; 1
    5034:	88 a5       	ldd	r24, Y+40	; 0x28
    5036:	0e 94 a6 19 	call	0x334c	; 0x334c <digitalWrite>
    503a:	61 e0       	ldi	r22, 0x01	; 1
    503c:	70 e0       	ldi	r23, 0x00	; 0
    503e:	80 e0       	ldi	r24, 0x00	; 0
    5040:	90 e0       	ldi	r25, 0x00	; 0
    5042:	0e 94 a2 18 	call	0x3144	; 0x3144 <delay>
    5046:	60 e0       	ldi	r22, 0x00	; 0
    5048:	88 a5       	ldd	r24, Y+40	; 0x28
    504a:	0e 94 a6 19 	call	0x334c	; 0x334c <digitalWrite>
    504e:	6a e0       	ldi	r22, 0x0A	; 10
    5050:	70 e0       	ldi	r23, 0x00	; 0
    5052:	80 e0       	ldi	r24, 0x00	; 0
    5054:	90 e0       	ldi	r25, 0x00	; 0
    5056:	0e 94 a2 18 	call	0x3144	; 0x3144 <delay>
    505a:	61 e0       	ldi	r22, 0x01	; 1
    505c:	88 a5       	ldd	r24, Y+40	; 0x28
    505e:	0e 94 a6 19 	call	0x334c	; 0x334c <digitalWrite>
    5062:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5064:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5066:	00 97       	sbiw	r24, 0x00	; 0
    5068:	39 f0       	breq	.+14     	; 0x5078 <_ZN16Adafruit_SSD13065beginEhhbb+0x264>
    506a:	4d a9       	ldd	r20, Y+53	; 0x35
    506c:	5e a9       	ldd	r21, Y+54	; 0x36
    506e:	6f a9       	ldd	r22, Y+55	; 0x37
    5070:	78 ad       	ldd	r23, Y+56	; 0x38
    5072:	0e 94 8b 2c 	call	0x5916	; 0x5916 <_ZN7TwoWire8setClockEm>
    5076:	0f c0       	rjmp	.+30     	; 0x5096 <_ZN16Adafruit_SSD13065beginEhhbb+0x282>
    5078:	8b 8d       	ldd	r24, Y+27	; 0x1b
    507a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    507c:	89 2b       	or	r24, r25
    507e:	21 f0       	breq	.+8      	; 0x5088 <_ZN16Adafruit_SSD13065beginEhhbb+0x274>
    5080:	8e ad       	ldd	r24, Y+62	; 0x3e
    5082:	9f ad       	ldd	r25, Y+63	; 0x3f
    5084:	0e 94 3a 25 	call	0x4a74	; 0x4a74 <_ZN8SPIClass16beginTransactionE11SPISettings>
    5088:	ef a5       	ldd	r30, Y+47	; 0x2f
    508a:	f8 a9       	ldd	r31, Y+48	; 0x30
    508c:	90 81       	ld	r25, Z
    508e:	8c a9       	ldd	r24, Y+52	; 0x34
    5090:	80 95       	com	r24
    5092:	89 23       	and	r24, r25
    5094:	80 83       	st	Z, r24
    5096:	44 e0       	ldi	r20, 0x04	; 4
    5098:	6d e1       	ldi	r22, 0x1D	; 29
    509a:	7e e0       	ldi	r23, 0x0E	; 14
    509c:	ce 01       	movw	r24, r28
    509e:	0e 94 44 26 	call	0x4c88	; 0x4c88 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    50a2:	6e 81       	ldd	r22, Y+6	; 0x06
    50a4:	61 50       	subi	r22, 0x01	; 1
    50a6:	ce 01       	movw	r24, r28
    50a8:	0e 94 9c 25 	call	0x4b38	; 0x4b38 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
    50ac:	44 e0       	ldi	r20, 0x04	; 4
    50ae:	69 e1       	ldi	r22, 0x19	; 25
    50b0:	7e e0       	ldi	r23, 0x0E	; 14
    50b2:	ce 01       	movw	r24, r28
    50b4:	0e 94 44 26 	call	0x4c88	; 0x4c88 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    50b8:	8a a1       	ldd	r24, Y+34	; 0x22
    50ba:	81 30       	cpi	r24, 0x01	; 1
    50bc:	11 f4       	brne	.+4      	; 0x50c2 <_ZN16Adafruit_SSD13065beginEhhbb+0x2ae>
    50be:	60 e1       	ldi	r22, 0x10	; 16
    50c0:	01 c0       	rjmp	.+2      	; 0x50c4 <_ZN16Adafruit_SSD13065beginEhhbb+0x2b0>
    50c2:	64 e1       	ldi	r22, 0x14	; 20
    50c4:	ce 01       	movw	r24, r28
    50c6:	0e 94 9c 25 	call	0x4b38	; 0x4b38 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
    50ca:	44 e0       	ldi	r20, 0x04	; 4
    50cc:	65 e1       	ldi	r22, 0x15	; 21
    50ce:	7e e0       	ldi	r23, 0x0E	; 14
    50d0:	ce 01       	movw	r24, r28
    50d2:	0e 94 44 26 	call	0x4c88	; 0x4c88 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    50d6:	8f e8       	ldi	r24, 0x8F	; 143
    50d8:	8d af       	std	Y+61, r24	; 0x3d
    50da:	8c 81       	ldd	r24, Y+4	; 0x04
    50dc:	9d 81       	ldd	r25, Y+5	; 0x05
    50de:	80 38       	cpi	r24, 0x80	; 128
    50e0:	91 05       	cpc	r25, r1
    50e2:	71 f4       	brne	.+28     	; 0x5100 <_ZN16Adafruit_SSD13065beginEhhbb+0x2ec>
    50e4:	8e 81       	ldd	r24, Y+6	; 0x06
    50e6:	9f 81       	ldd	r25, Y+7	; 0x07
    50e8:	80 34       	cpi	r24, 0x40	; 64
    50ea:	91 05       	cpc	r25, r1
    50ec:	b9 f4       	brne	.+46     	; 0x511c <_ZN16Adafruit_SSD13065beginEhhbb+0x308>
    50ee:	8a a1       	ldd	r24, Y+34	; 0x22
    50f0:	81 30       	cpi	r24, 0x01	; 1
    50f2:	11 f4       	brne	.+4      	; 0x50f8 <_ZN16Adafruit_SSD13065beginEhhbb+0x2e4>
    50f4:	8f e9       	ldi	r24, 0x9F	; 159
    50f6:	01 c0       	rjmp	.+2      	; 0x50fa <_ZN16Adafruit_SSD13065beginEhhbb+0x2e6>
    50f8:	8f ec       	ldi	r24, 0xCF	; 207
    50fa:	8d af       	std	Y+61, r24	; 0x3d
    50fc:	12 e1       	ldi	r17, 0x12	; 18
    50fe:	0f c0       	rjmp	.+30     	; 0x511e <_ZN16Adafruit_SSD13065beginEhhbb+0x30a>
    5100:	80 36       	cpi	r24, 0x60	; 96
    5102:	91 05       	cpc	r25, r1
    5104:	59 f4       	brne	.+22     	; 0x511c <_ZN16Adafruit_SSD13065beginEhhbb+0x308>
    5106:	8e 81       	ldd	r24, Y+6	; 0x06
    5108:	9f 81       	ldd	r25, Y+7	; 0x07
    510a:	40 97       	sbiw	r24, 0x10	; 16
    510c:	39 f4       	brne	.+14     	; 0x511c <_ZN16Adafruit_SSD13065beginEhhbb+0x308>
    510e:	8a a1       	ldd	r24, Y+34	; 0x22
    5110:	81 30       	cpi	r24, 0x01	; 1
    5112:	11 f4       	brne	.+4      	; 0x5118 <_ZN16Adafruit_SSD13065beginEhhbb+0x304>
    5114:	80 e1       	ldi	r24, 0x10	; 16
    5116:	01 c0       	rjmp	.+2      	; 0x511a <_ZN16Adafruit_SSD13065beginEhhbb+0x306>
    5118:	8f ea       	ldi	r24, 0xAF	; 175
    511a:	8d af       	std	Y+61, r24	; 0x3d
    511c:	12 e0       	ldi	r17, 0x02	; 2
    511e:	6a ed       	ldi	r22, 0xDA	; 218
    5120:	ce 01       	movw	r24, r28
    5122:	0e 94 9c 25 	call	0x4b38	; 0x4b38 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
    5126:	61 2f       	mov	r22, r17
    5128:	ce 01       	movw	r24, r28
    512a:	0e 94 9c 25 	call	0x4b38	; 0x4b38 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
    512e:	61 e8       	ldi	r22, 0x81	; 129
    5130:	ce 01       	movw	r24, r28
    5132:	0e 94 9c 25 	call	0x4b38	; 0x4b38 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
    5136:	6d ad       	ldd	r22, Y+61	; 0x3d
    5138:	ce 01       	movw	r24, r28
    513a:	0e 94 9c 25 	call	0x4b38	; 0x4b38 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
    513e:	69 ed       	ldi	r22, 0xD9	; 217
    5140:	ce 01       	movw	r24, r28
    5142:	0e 94 9c 25 	call	0x4b38	; 0x4b38 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
    5146:	8a a1       	ldd	r24, Y+34	; 0x22
    5148:	81 30       	cpi	r24, 0x01	; 1
    514a:	11 f4       	brne	.+4      	; 0x5150 <_ZN16Adafruit_SSD13065beginEhhbb+0x33c>
    514c:	62 e2       	ldi	r22, 0x22	; 34
    514e:	01 c0       	rjmp	.+2      	; 0x5152 <_ZN16Adafruit_SSD13065beginEhhbb+0x33e>
    5150:	61 ef       	ldi	r22, 0xF1	; 241
    5152:	ce 01       	movw	r24, r28
    5154:	0e 94 9c 25 	call	0x4b38	; 0x4b38 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
    5158:	46 e0       	ldi	r20, 0x06	; 6
    515a:	6f e0       	ldi	r22, 0x0F	; 15
    515c:	7e e0       	ldi	r23, 0x0E	; 14
    515e:	ce 01       	movw	r24, r28
    5160:	0e 94 44 26 	call	0x4c88	; 0x4c88 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    5164:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5166:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5168:	00 97       	sbiw	r24, 0x00	; 0
    516a:	39 f0       	breq	.+14     	; 0x517a <_ZN16Adafruit_SSD13065beginEhhbb+0x366>
    516c:	49 ad       	ldd	r20, Y+57	; 0x39
    516e:	5a ad       	ldd	r21, Y+58	; 0x3a
    5170:	6b ad       	ldd	r22, Y+59	; 0x3b
    5172:	7c ad       	ldd	r23, Y+60	; 0x3c
    5174:	0e 94 8b 2c 	call	0x5916	; 0x5916 <_ZN7TwoWire8setClockEm>
    5178:	0c c0       	rjmp	.+24     	; 0x5192 <_ZN16Adafruit_SSD13065beginEhhbb+0x37e>
    517a:	ef a5       	ldd	r30, Y+47	; 0x2f
    517c:	f8 a9       	ldd	r31, Y+48	; 0x30
    517e:	90 81       	ld	r25, Z
    5180:	8c a9       	ldd	r24, Y+52	; 0x34
    5182:	89 2b       	or	r24, r25
    5184:	80 83       	st	Z, r24
    5186:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5188:	9c 8d       	ldd	r25, Y+28	; 0x1c
    518a:	89 2b       	or	r24, r25
    518c:	11 f0       	breq	.+4      	; 0x5192 <_ZN16Adafruit_SSD13065beginEhhbb+0x37e>
    518e:	0e 94 5b 25 	call	0x4ab6	; 0x4ab6 <_ZN8SPIClass14endTransactionEv>
    5192:	81 e0       	ldi	r24, 0x01	; 1
    5194:	03 c0       	rjmp	.+6      	; 0x519c <_ZN16Adafruit_SSD13065beginEhhbb+0x388>
    5196:	a1 10       	cpse	r10, r1
    5198:	46 cf       	rjmp	.-372    	; 0x5026 <_ZN16Adafruit_SSD13065beginEhhbb+0x212>
    519a:	67 cf       	rjmp	.-306    	; 0x506a <_ZN16Adafruit_SSD13065beginEhhbb+0x256>
    519c:	df 91       	pop	r29
    519e:	cf 91       	pop	r28
    51a0:	1f 91       	pop	r17
    51a2:	0f 91       	pop	r16
    51a4:	ff 90       	pop	r15
    51a6:	ef 90       	pop	r14
    51a8:	df 90       	pop	r13
    51aa:	cf 90       	pop	r12
    51ac:	bf 90       	pop	r11
    51ae:	af 90       	pop	r10
    51b0:	9f 90       	pop	r9
    51b2:	8f 90       	pop	r8
    51b4:	08 95       	ret

000051b6 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij>:
    51b6:	0f 93       	push	r16
    51b8:	1f 93       	push	r17
    51ba:	cf 93       	push	r28
    51bc:	df 93       	push	r29
    51be:	dc 01       	movw	r26, r24
    51c0:	57 fd       	sbrc	r21, 7
    51c2:	64 c0       	rjmp	.+200    	; 0x528c <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xd6>
    51c4:	16 96       	adiw	r26, 0x06	; 6
    51c6:	8d 91       	ld	r24, X+
    51c8:	9c 91       	ld	r25, X
    51ca:	17 97       	sbiw	r26, 0x07	; 7
    51cc:	48 17       	cp	r20, r24
    51ce:	59 07       	cpc	r21, r25
    51d0:	0c f0       	brlt	.+2      	; 0x51d4 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0x1e>
    51d2:	5c c0       	rjmp	.+184    	; 0x528c <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xd6>
    51d4:	77 ff       	sbrs	r23, 7
    51d6:	04 c0       	rjmp	.+8      	; 0x51e0 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0x2a>
    51d8:	26 0f       	add	r18, r22
    51da:	37 1f       	adc	r19, r23
    51dc:	60 e0       	ldi	r22, 0x00	; 0
    51de:	70 e0       	ldi	r23, 0x00	; 0
    51e0:	14 96       	adiw	r26, 0x04	; 4
    51e2:	cd 91       	ld	r28, X+
    51e4:	dc 91       	ld	r29, X
    51e6:	15 97       	sbiw	r26, 0x05	; 5
    51e8:	cb 01       	movw	r24, r22
    51ea:	82 0f       	add	r24, r18
    51ec:	93 1f       	adc	r25, r19
    51ee:	c8 17       	cp	r28, r24
    51f0:	d9 07       	cpc	r29, r25
    51f2:	1c f4       	brge	.+6      	; 0x51fa <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0x44>
    51f4:	9e 01       	movw	r18, r28
    51f6:	26 1b       	sub	r18, r22
    51f8:	37 0b       	sbc	r19, r23
    51fa:	12 16       	cp	r1, r18
    51fc:	13 06       	cpc	r1, r19
    51fe:	0c f0       	brlt	.+2      	; 0x5202 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0x4c>
    5200:	45 c0       	rjmp	.+138    	; 0x528c <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xd6>
    5202:	fa 01       	movw	r30, r20
    5204:	57 fd       	sbrc	r21, 7
    5206:	37 96       	adiw	r30, 0x07	; 7
    5208:	cf 01       	movw	r24, r30
    520a:	e3 e0       	ldi	r30, 0x03	; 3
    520c:	95 95       	asr	r25
    520e:	87 95       	ror	r24
    5210:	ea 95       	dec	r30
    5212:	e1 f7       	brne	.-8      	; 0x520c <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0x56>
    5214:	8c 9f       	mul	r24, r28
    5216:	f0 01       	movw	r30, r0
    5218:	8d 9f       	mul	r24, r29
    521a:	f0 0d       	add	r31, r0
    521c:	9c 9f       	mul	r25, r28
    521e:	f0 0d       	add	r31, r0
    5220:	11 24       	eor	r1, r1
    5222:	6e 0f       	add	r22, r30
    5224:	7f 1f       	adc	r23, r31
    5226:	5f 96       	adiw	r26, 0x1f	; 31
    5228:	ed 91       	ld	r30, X+
    522a:	fc 91       	ld	r31, X
    522c:	90 97       	sbiw	r26, 0x20	; 32
    522e:	e6 0f       	add	r30, r22
    5230:	f7 1f       	adc	r31, r23
    5232:	47 70       	andi	r20, 0x07	; 7
    5234:	55 27       	eor	r21, r21
    5236:	81 e0       	ldi	r24, 0x01	; 1
    5238:	90 e0       	ldi	r25, 0x00	; 0
    523a:	01 c0       	rjmp	.+2      	; 0x523e <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0x88>
    523c:	88 0f       	add	r24, r24
    523e:	4a 95       	dec	r20
    5240:	ea f7       	brpl	.-6      	; 0x523c <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0x86>
    5242:	48 2f       	mov	r20, r24
    5244:	01 30       	cpi	r16, 0x01	; 1
    5246:	11 05       	cpc	r17, r1
    5248:	39 f0       	breq	.+14     	; 0x5258 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xa2>
    524a:	78 f0       	brcs	.+30     	; 0x526a <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xb4>
    524c:	02 30       	cpi	r16, 0x02	; 2
    524e:	11 05       	cpc	r17, r1
    5250:	e9 f4       	brne	.+58     	; 0x528c <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xd6>
    5252:	2e 0f       	add	r18, r30
    5254:	3f 1f       	adc	r19, r31
    5256:	13 c0       	rjmp	.+38     	; 0x527e <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xc8>
    5258:	2e 0f       	add	r18, r30
    525a:	3f 1f       	adc	r19, r31
    525c:	e2 17       	cp	r30, r18
    525e:	f3 07       	cpc	r31, r19
    5260:	a9 f0       	breq	.+42     	; 0x528c <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xd6>
    5262:	80 81       	ld	r24, Z
    5264:	84 2b       	or	r24, r20
    5266:	81 93       	st	Z+, r24
    5268:	f9 cf       	rjmp	.-14     	; 0x525c <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xa6>
    526a:	80 95       	com	r24
    526c:	2e 0f       	add	r18, r30
    526e:	3f 1f       	adc	r19, r31
    5270:	e2 17       	cp	r30, r18
    5272:	f3 07       	cpc	r31, r19
    5274:	59 f0       	breq	.+22     	; 0x528c <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xd6>
    5276:	90 81       	ld	r25, Z
    5278:	98 23       	and	r25, r24
    527a:	91 93       	st	Z+, r25
    527c:	f9 cf       	rjmp	.-14     	; 0x5270 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xba>
    527e:	e2 17       	cp	r30, r18
    5280:	f3 07       	cpc	r31, r19
    5282:	21 f0       	breq	.+8      	; 0x528c <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xd6>
    5284:	80 81       	ld	r24, Z
    5286:	84 27       	eor	r24, r20
    5288:	81 93       	st	Z+, r24
    528a:	f9 cf       	rjmp	.-14     	; 0x527e <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xc8>
    528c:	df 91       	pop	r29
    528e:	cf 91       	pop	r28
    5290:	1f 91       	pop	r17
    5292:	0f 91       	pop	r16
    5294:	08 95       	ret

00005296 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij>:
    5296:	ef 92       	push	r14
    5298:	ff 92       	push	r15
    529a:	0f 93       	push	r16
    529c:	1f 93       	push	r17
    529e:	cf 93       	push	r28
    52a0:	df 93       	push	r29
    52a2:	ec 01       	movw	r28, r24
    52a4:	77 fd       	sbrc	r23, 7
    52a6:	a5 c0       	rjmp	.+330    	; 0x53f2 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x15c>
    52a8:	ec 80       	ldd	r14, Y+4	; 0x04
    52aa:	fd 80       	ldd	r15, Y+5	; 0x05
    52ac:	6e 15       	cp	r22, r14
    52ae:	7f 05       	cpc	r23, r15
    52b0:	0c f0       	brlt	.+2      	; 0x52b4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x1e>
    52b2:	9f c0       	rjmp	.+318    	; 0x53f2 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x15c>
    52b4:	57 ff       	sbrs	r21, 7
    52b6:	04 c0       	rjmp	.+8      	; 0x52c0 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x2a>
    52b8:	24 0f       	add	r18, r20
    52ba:	35 1f       	adc	r19, r21
    52bc:	40 e0       	ldi	r20, 0x00	; 0
    52be:	50 e0       	ldi	r21, 0x00	; 0
    52c0:	8e 81       	ldd	r24, Y+6	; 0x06
    52c2:	9f 81       	ldd	r25, Y+7	; 0x07
    52c4:	fa 01       	movw	r30, r20
    52c6:	e2 0f       	add	r30, r18
    52c8:	f3 1f       	adc	r31, r19
    52ca:	8e 17       	cp	r24, r30
    52cc:	9f 07       	cpc	r25, r31
    52ce:	1c f4       	brge	.+6      	; 0x52d6 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x40>
    52d0:	9c 01       	movw	r18, r24
    52d2:	24 1b       	sub	r18, r20
    52d4:	35 0b       	sbc	r19, r21
    52d6:	12 16       	cp	r1, r18
    52d8:	13 06       	cpc	r1, r19
    52da:	0c f0       	brlt	.+2      	; 0x52de <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x48>
    52dc:	8a c0       	rjmp	.+276    	; 0x53f2 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x15c>
    52de:	92 2f       	mov	r25, r18
    52e0:	84 2f       	mov	r24, r20
    52e2:	86 95       	lsr	r24
    52e4:	86 95       	lsr	r24
    52e6:	86 95       	lsr	r24
    52e8:	8e 9d       	mul	r24, r14
    52ea:	d0 01       	movw	r26, r0
    52ec:	8f 9d       	mul	r24, r15
    52ee:	b0 0d       	add	r27, r0
    52f0:	11 24       	eor	r1, r1
    52f2:	6a 0f       	add	r22, r26
    52f4:	7b 1f       	adc	r23, r27
    52f6:	af 8d       	ldd	r26, Y+31	; 0x1f
    52f8:	b8 a1       	ldd	r27, Y+32	; 0x20
    52fa:	a6 0f       	add	r26, r22
    52fc:	b7 1f       	adc	r27, r23
    52fe:	47 70       	andi	r20, 0x07	; 7
    5300:	b1 f1       	breq	.+108    	; 0x536e <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xd8>
    5302:	88 e0       	ldi	r24, 0x08	; 8
    5304:	84 1b       	sub	r24, r20
    5306:	48 2f       	mov	r20, r24
    5308:	68 2f       	mov	r22, r24
    530a:	70 e0       	ldi	r23, 0x00	; 0
    530c:	fb 01       	movw	r30, r22
    530e:	e9 5f       	subi	r30, 0xF9	; 249
    5310:	f1 4f       	sbci	r31, 0xF1	; 241
    5312:	e4 91       	lpm	r30, Z
    5314:	28 17       	cp	r18, r24
    5316:	98 f4       	brcc	.+38     	; 0x533e <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xa8>
    5318:	62 1b       	sub	r22, r18
    531a:	71 09       	sbc	r23, r1
    531c:	2f ef       	ldi	r18, 0xFF	; 255
    531e:	30 e0       	ldi	r19, 0x00	; 0
    5320:	02 c0       	rjmp	.+4      	; 0x5326 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x90>
    5322:	35 95       	asr	r19
    5324:	27 95       	ror	r18
    5326:	6a 95       	dec	r22
    5328:	e2 f7       	brpl	.-8      	; 0x5322 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x8c>
    532a:	e2 23       	and	r30, r18
    532c:	01 30       	cpi	r16, 0x01	; 1
    532e:	11 05       	cpc	r17, r1
    5330:	49 f0       	breq	.+18     	; 0x5344 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xae>
    5332:	78 f0       	brcs	.+30     	; 0x5352 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xbc>
    5334:	02 30       	cpi	r16, 0x02	; 2
    5336:	11 05       	cpc	r17, r1
    5338:	09 f0       	breq	.+2      	; 0x533c <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xa6>
    533a:	5b c0       	rjmp	.+182    	; 0x53f2 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x15c>
    533c:	0e c0       	rjmp	.+28     	; 0x535a <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xc4>
    533e:	01 30       	cpi	r16, 0x01	; 1
    5340:	11 05       	cpc	r17, r1
    5342:	19 f4       	brne	.+6      	; 0x534a <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xb4>
    5344:	8c 91       	ld	r24, X
    5346:	e8 2b       	or	r30, r24
    5348:	0a c0       	rjmp	.+20     	; 0x535e <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xc8>
    534a:	01 30       	cpi	r16, 0x01	; 1
    534c:	11 05       	cpc	r17, r1
    534e:	08 f0       	brcs	.+2      	; 0x5352 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xbc>
    5350:	49 c0       	rjmp	.+146    	; 0x53e4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x14e>
    5352:	e0 95       	com	r30
    5354:	8c 91       	ld	r24, X
    5356:	e8 23       	and	r30, r24
    5358:	02 c0       	rjmp	.+4      	; 0x535e <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xc8>
    535a:	8c 91       	ld	r24, X
    535c:	e8 27       	eor	r30, r24
    535e:	ec 93       	st	X, r30
    5360:	94 17       	cp	r25, r20
    5362:	08 f4       	brcc	.+2      	; 0x5366 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xd0>
    5364:	46 c0       	rjmp	.+140    	; 0x53f2 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x15c>
    5366:	2c 81       	ldd	r18, Y+4	; 0x04
    5368:	3d 81       	ldd	r19, Y+5	; 0x05
    536a:	a2 0f       	add	r26, r18
    536c:	b3 1f       	adc	r27, r19
    536e:	e9 2f       	mov	r30, r25
    5370:	e4 1b       	sub	r30, r20
    5372:	e8 30       	cpi	r30, 0x08	; 8
    5374:	f8 f0       	brcs	.+62     	; 0x53b4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x11e>
    5376:	02 30       	cpi	r16, 0x02	; 2
    5378:	11 05       	cpc	r17, r1
    537a:	61 f4       	brne	.+24     	; 0x5394 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xfe>
    537c:	8e 2f       	mov	r24, r30
    537e:	9c 91       	ld	r25, X
    5380:	90 95       	com	r25
    5382:	9c 93       	st	X, r25
    5384:	2c 81       	ldd	r18, Y+4	; 0x04
    5386:	3d 81       	ldd	r19, Y+5	; 0x05
    5388:	a2 0f       	add	r26, r18
    538a:	b3 1f       	adc	r27, r19
    538c:	88 50       	subi	r24, 0x08	; 8
    538e:	88 30       	cpi	r24, 0x08	; 8
    5390:	b0 f7       	brcc	.-20     	; 0x537e <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xe8>
    5392:	0f c0       	rjmp	.+30     	; 0x53b2 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x11c>
    5394:	81 e0       	ldi	r24, 0x01	; 1
    5396:	01 15       	cp	r16, r1
    5398:	11 05       	cpc	r17, r1
    539a:	09 f4       	brne	.+2      	; 0x539e <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x108>
    539c:	80 e0       	ldi	r24, 0x00	; 0
    539e:	81 95       	neg	r24
    53a0:	9e 2f       	mov	r25, r30
    53a2:	8c 93       	st	X, r24
    53a4:	2c 81       	ldd	r18, Y+4	; 0x04
    53a6:	3d 81       	ldd	r19, Y+5	; 0x05
    53a8:	a2 0f       	add	r26, r18
    53aa:	b3 1f       	adc	r27, r19
    53ac:	98 50       	subi	r25, 0x08	; 8
    53ae:	98 30       	cpi	r25, 0x08	; 8
    53b0:	c0 f7       	brcc	.-16     	; 0x53a2 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x10c>
    53b2:	e7 70       	andi	r30, 0x07	; 7
    53b4:	ee 23       	and	r30, r30
    53b6:	e9 f0       	breq	.+58     	; 0x53f2 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x15c>
    53b8:	f0 e0       	ldi	r31, 0x00	; 0
    53ba:	e1 50       	subi	r30, 0x01	; 1
    53bc:	f2 4f       	sbci	r31, 0xF2	; 242
    53be:	e4 91       	lpm	r30, Z
    53c0:	01 30       	cpi	r16, 0x01	; 1
    53c2:	11 05       	cpc	r17, r1
    53c4:	39 f0       	breq	.+14     	; 0x53d4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x13e>
    53c6:	48 f0       	brcs	.+18     	; 0x53da <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x144>
    53c8:	02 30       	cpi	r16, 0x02	; 2
    53ca:	11 05       	cpc	r17, r1
    53cc:	91 f4       	brne	.+36     	; 0x53f2 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x15c>
    53ce:	8c 91       	ld	r24, X
    53d0:	e8 27       	eor	r30, r24
    53d2:	06 c0       	rjmp	.+12     	; 0x53e0 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x14a>
    53d4:	8c 91       	ld	r24, X
    53d6:	e8 2b       	or	r30, r24
    53d8:	03 c0       	rjmp	.+6      	; 0x53e0 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x14a>
    53da:	e0 95       	com	r30
    53dc:	8c 91       	ld	r24, X
    53de:	e8 23       	and	r30, r24
    53e0:	ec 93       	st	X, r30
    53e2:	07 c0       	rjmp	.+14     	; 0x53f2 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x15c>
    53e4:	02 30       	cpi	r16, 0x02	; 2
    53e6:	11 05       	cpc	r17, r1
    53e8:	09 f4       	brne	.+2      	; 0x53ec <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x156>
    53ea:	b7 cf       	rjmp	.-146    	; 0x535a <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xc4>
    53ec:	ae 0d       	add	r26, r14
    53ee:	bf 1d       	adc	r27, r15
    53f0:	be cf       	rjmp	.-132    	; 0x536e <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xd8>
    53f2:	df 91       	pop	r29
    53f4:	cf 91       	pop	r28
    53f6:	1f 91       	pop	r17
    53f8:	0f 91       	pop	r16
    53fa:	ff 90       	pop	r15
    53fc:	ef 90       	pop	r14
    53fe:	08 95       	ret

00005400 <_ZN16Adafruit_SSD130613drawFastHLineEiiij>:
    5400:	0f 93       	push	r16
    5402:	1f 93       	push	r17
    5404:	dc 01       	movw	r26, r24
    5406:	56 96       	adiw	r26, 0x16	; 22
    5408:	ec 91       	ld	r30, X
    540a:	56 97       	sbiw	r26, 0x16	; 22
    540c:	e2 30       	cpi	r30, 0x02	; 2
    540e:	61 f0       	breq	.+24     	; 0x5428 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x28>
    5410:	e3 30       	cpi	r30, 0x03	; 3
    5412:	09 f1       	breq	.+66     	; 0x5456 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x56>
    5414:	e1 30       	cpi	r30, 0x01	; 1
    5416:	81 f5       	brne	.+96     	; 0x5478 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x78>
    5418:	14 96       	adiw	r26, 0x04	; 4
    541a:	ed 91       	ld	r30, X+
    541c:	fc 91       	ld	r31, X
    541e:	15 97       	sbiw	r26, 0x05	; 5
    5420:	e4 1b       	sub	r30, r20
    5422:	f5 0b       	sbc	r31, r21
    5424:	31 97       	sbiw	r30, 0x01	; 1
    5426:	23 c0       	rjmp	.+70     	; 0x546e <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x6e>
    5428:	dc 01       	movw	r26, r24
    542a:	14 96       	adiw	r26, 0x04	; 4
    542c:	ed 91       	ld	r30, X+
    542e:	fc 91       	ld	r31, X
    5430:	15 97       	sbiw	r26, 0x05	; 5
    5432:	df 01       	movw	r26, r30
    5434:	a6 1b       	sub	r26, r22
    5436:	b7 0b       	sbc	r27, r23
    5438:	bd 01       	movw	r22, r26
    543a:	dc 01       	movw	r26, r24
    543c:	16 96       	adiw	r26, 0x06	; 6
    543e:	ed 91       	ld	r30, X+
    5440:	fc 91       	ld	r31, X
    5442:	17 97       	sbiw	r26, 0x07	; 7
    5444:	df 01       	movw	r26, r30
    5446:	a4 1b       	sub	r26, r20
    5448:	b5 0b       	sbc	r27, r21
    544a:	ad 01       	movw	r20, r26
    544c:	41 50       	subi	r20, 0x01	; 1
    544e:	51 09       	sbc	r21, r1
    5450:	62 1b       	sub	r22, r18
    5452:	73 0b       	sbc	r23, r19
    5454:	11 c0       	rjmp	.+34     	; 0x5478 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x78>
    5456:	fa 01       	movw	r30, r20
    5458:	dc 01       	movw	r26, r24
    545a:	16 96       	adiw	r26, 0x06	; 6
    545c:	4d 91       	ld	r20, X+
    545e:	5c 91       	ld	r21, X
    5460:	17 97       	sbiw	r26, 0x07	; 7
    5462:	da 01       	movw	r26, r20
    5464:	a6 1b       	sub	r26, r22
    5466:	b7 0b       	sbc	r27, r23
    5468:	bd 01       	movw	r22, r26
    546a:	62 1b       	sub	r22, r18
    546c:	73 0b       	sbc	r23, r19
    546e:	ab 01       	movw	r20, r22
    5470:	bf 01       	movw	r22, r30
    5472:	0e 94 4b 29 	call	0x5296	; 0x5296 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij>
    5476:	02 c0       	rjmp	.+4      	; 0x547c <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x7c>
    5478:	0e 94 db 28 	call	0x51b6	; 0x51b6 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij>
    547c:	1f 91       	pop	r17
    547e:	0f 91       	pop	r16
    5480:	08 95       	ret

00005482 <_ZN16Adafruit_SSD130613drawFastVLineEiiij>:
    5482:	0f 93       	push	r16
    5484:	1f 93       	push	r17
    5486:	dc 01       	movw	r26, r24
    5488:	56 96       	adiw	r26, 0x16	; 22
    548a:	ec 91       	ld	r30, X
    548c:	56 97       	sbiw	r26, 0x16	; 22
    548e:	e2 30       	cpi	r30, 0x02	; 2
    5490:	69 f0       	breq	.+26     	; 0x54ac <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x2a>
    5492:	e3 30       	cpi	r30, 0x03	; 3
    5494:	11 f1       	breq	.+68     	; 0x54da <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x58>
    5496:	e1 30       	cpi	r30, 0x01	; 1
    5498:	89 f5       	brne	.+98     	; 0x54fc <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x7a>
    549a:	14 96       	adiw	r26, 0x04	; 4
    549c:	ed 91       	ld	r30, X+
    549e:	fc 91       	ld	r31, X
    54a0:	15 97       	sbiw	r26, 0x05	; 5
    54a2:	e4 1b       	sub	r30, r20
    54a4:	f5 0b       	sbc	r31, r21
    54a6:	e2 1b       	sub	r30, r18
    54a8:	f3 0b       	sbc	r31, r19
    54aa:	23 c0       	rjmp	.+70     	; 0x54f2 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x70>
    54ac:	dc 01       	movw	r26, r24
    54ae:	14 96       	adiw	r26, 0x04	; 4
    54b0:	ed 91       	ld	r30, X+
    54b2:	fc 91       	ld	r31, X
    54b4:	15 97       	sbiw	r26, 0x05	; 5
    54b6:	df 01       	movw	r26, r30
    54b8:	a6 1b       	sub	r26, r22
    54ba:	b7 0b       	sbc	r27, r23
    54bc:	bd 01       	movw	r22, r26
    54be:	61 50       	subi	r22, 0x01	; 1
    54c0:	71 09       	sbc	r23, r1
    54c2:	dc 01       	movw	r26, r24
    54c4:	16 96       	adiw	r26, 0x06	; 6
    54c6:	ed 91       	ld	r30, X+
    54c8:	fc 91       	ld	r31, X
    54ca:	17 97       	sbiw	r26, 0x07	; 7
    54cc:	df 01       	movw	r26, r30
    54ce:	a4 1b       	sub	r26, r20
    54d0:	b5 0b       	sbc	r27, r21
    54d2:	ad 01       	movw	r20, r26
    54d4:	42 1b       	sub	r20, r18
    54d6:	53 0b       	sbc	r21, r19
    54d8:	11 c0       	rjmp	.+34     	; 0x54fc <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x7a>
    54da:	fa 01       	movw	r30, r20
    54dc:	dc 01       	movw	r26, r24
    54de:	16 96       	adiw	r26, 0x06	; 6
    54e0:	4d 91       	ld	r20, X+
    54e2:	5c 91       	ld	r21, X
    54e4:	17 97       	sbiw	r26, 0x07	; 7
    54e6:	da 01       	movw	r26, r20
    54e8:	a6 1b       	sub	r26, r22
    54ea:	b7 0b       	sbc	r27, r23
    54ec:	bd 01       	movw	r22, r26
    54ee:	61 50       	subi	r22, 0x01	; 1
    54f0:	71 09       	sbc	r23, r1
    54f2:	ab 01       	movw	r20, r22
    54f4:	bf 01       	movw	r22, r30
    54f6:	0e 94 db 28 	call	0x51b6	; 0x51b6 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij>
    54fa:	02 c0       	rjmp	.+4      	; 0x5500 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x7e>
    54fc:	0e 94 4b 29 	call	0x5296	; 0x5296 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij>
    5500:	1f 91       	pop	r17
    5502:	0f 91       	pop	r16
    5504:	08 95       	ret

00005506 <_ZN16Adafruit_SSD13067displayEv>:
    @return None (void).
    @note   Drawing operations are not visible until this function is
            called. Call after each graphics command, or after a whole set
            of graphics commands, as best needed by one's own application.
*/
void Adafruit_SSD1306::display(void) {
    5506:	cf 92       	push	r12
    5508:	df 92       	push	r13
    550a:	ef 92       	push	r14
    550c:	ff 92       	push	r15
    550e:	0f 93       	push	r16
    5510:	1f 93       	push	r17
    5512:	cf 93       	push	r28
    5514:	df 93       	push	r29
    5516:	ec 01       	movw	r28, r24
  TRANSACTION_START
    5518:	8d 8d       	ldd	r24, Y+29	; 0x1d
    551a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    551c:	00 97       	sbiw	r24, 0x00	; 0
    551e:	39 f0       	breq	.+14     	; 0x552e <_ZN16Adafruit_SSD13067displayEv+0x28>
    5520:	4d a9       	ldd	r20, Y+53	; 0x35
    5522:	5e a9       	ldd	r21, Y+54	; 0x36
    5524:	6f a9       	ldd	r22, Y+55	; 0x37
    5526:	78 ad       	ldd	r23, Y+56	; 0x38
    5528:	0e 94 8b 2c 	call	0x5916	; 0x5916 <_ZN7TwoWire8setClockEm>
    552c:	0f c0       	rjmp	.+30     	; 0x554c <_ZN16Adafruit_SSD13067displayEv+0x46>
    552e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5530:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5532:	89 2b       	or	r24, r25
    5534:	21 f0       	breq	.+8      	; 0x553e <_ZN16Adafruit_SSD13067displayEv+0x38>
    5536:	8e ad       	ldd	r24, Y+62	; 0x3e
    5538:	9f ad       	ldd	r25, Y+63	; 0x3f
    553a:	0e 94 3a 25 	call	0x4a74	; 0x4a74 <_ZN8SPIClass16beginTransactionE11SPISettings>
    553e:	ef a5       	ldd	r30, Y+47	; 0x2f
    5540:	f8 a9       	ldd	r31, Y+48	; 0x30
    5542:	90 81       	ld	r25, Z
    5544:	8c a9       	ldd	r24, Y+52	; 0x34
    5546:	80 95       	com	r24
    5548:	89 23       	and	r24, r25
    554a:	80 83       	st	Z, r24
  static const uint8_t PROGMEM dlist1[] = {
      SSD1306_PAGEADDR,
      0,                      // Page start address
      0xFF,                   // Page end (not really, but works here)
      SSD1306_COLUMNADDR, 0}; // Column start address
  ssd1306_commandList(dlist1, sizeof(dlist1));
    554c:	45 e0       	ldi	r20, 0x05	; 5
    554e:	6a ef       	ldi	r22, 0xFA	; 250
    5550:	7d e0       	ldi	r23, 0x0D	; 13
    5552:	ce 01       	movw	r24, r28
    5554:	0e 94 44 26 	call	0x4c88	; 0x4c88 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(WIDTH - 1); // Column end address
    5558:	6c 81       	ldd	r22, Y+4	; 0x04
    555a:	61 50       	subi	r22, 0x01	; 1
    555c:	ce 01       	movw	r24, r28
    555e:	0e 94 9c 25 	call	0x4b38	; 0x4b38 <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  // a screen write and one immediately after should cover it.  But if
  // not, if this becomes a problem, yields() might be added in the
  // 32-byte transfer condition below.
  yield();
#endif
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
    5562:	2e 81       	ldd	r18, Y+6	; 0x06
    5564:	3f 81       	ldd	r19, Y+7	; 0x07
    5566:	c9 01       	movw	r24, r18
    5568:	07 96       	adiw	r24, 0x07	; 7
    556a:	97 fd       	sbrc	r25, 7
    556c:	07 96       	adiw	r24, 0x07	; 7
    556e:	23 e0       	ldi	r18, 0x03	; 3
    5570:	95 95       	asr	r25
    5572:	87 95       	ror	r24
    5574:	2a 95       	dec	r18
    5576:	e1 f7       	brne	.-8      	; 0x5570 <_ZN16Adafruit_SSD13067displayEv+0x6a>
    5578:	2c 81       	ldd	r18, Y+4	; 0x04
    557a:	3d 81       	ldd	r19, Y+5	; 0x05
    557c:	82 9f       	mul	r24, r18
    557e:	70 01       	movw	r14, r0
    5580:	83 9f       	mul	r24, r19
    5582:	f0 0c       	add	r15, r0
    5584:	92 9f       	mul	r25, r18
    5586:	f0 0c       	add	r15, r0
    5588:	11 24       	eor	r1, r1
  uint8_t *ptr = buffer;
    558a:	0f 8d       	ldd	r16, Y+31	; 0x1f
    558c:	18 a1       	ldd	r17, Y+32	; 0x20
  if (wire) { // I2C
    558e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5590:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5592:	e0 0e       	add	r14, r16
    5594:	f1 1e       	adc	r15, r17
    5596:	00 97       	sbiw	r24, 0x00	; 0
    5598:	09 f4       	brne	.+2      	; 0x559c <_ZN16Adafruit_SSD13067displayEv+0x96>
    559a:	43 c0       	rjmp	.+134    	; 0x5622 <_ZN16Adafruit_SSD13067displayEv+0x11c>
    wire->beginTransmission(i2caddr);
    559c:	69 a1       	ldd	r22, Y+33	; 0x21
    559e:	06 2e       	mov	r0, r22
    55a0:	00 0c       	add	r0, r0
    55a2:	77 0b       	sbc	r23, r23
    55a4:	0e 94 99 2c 	call	0x5932	; 0x5932 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x40);
    55a8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    55aa:	9e 8d       	ldd	r25, Y+30	; 0x1e
    55ac:	dc 01       	movw	r26, r24
    55ae:	ed 91       	ld	r30, X+
    55b0:	fc 91       	ld	r31, X
    55b2:	01 90       	ld	r0, Z+
    55b4:	f0 81       	ld	r31, Z
    55b6:	e0 2d       	mov	r30, r0
    55b8:	60 e4       	ldi	r22, 0x40	; 64
    55ba:	09 95       	icall
    55bc:	68 01       	movw	r12, r16
    uint16_t bytesOut = 1;
    55be:	01 e0       	ldi	r16, 0x01	; 1
    55c0:	10 e0       	ldi	r17, 0x00	; 0
    55c2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    55c4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    while (count--) {
    55c6:	ec 14       	cp	r14, r12
    55c8:	fd 04       	cpc	r15, r13
    55ca:	41 f1       	breq	.+80     	; 0x561c <_ZN16Adafruit_SSD13067displayEv+0x116>
      if (bytesOut >= WIRE_MAX) {
    55cc:	00 32       	cpi	r16, 0x20	; 32
    55ce:	11 05       	cpc	r17, r1
    55d0:	b0 f0       	brcs	.+44     	; 0x55fe <_ZN16Adafruit_SSD13067displayEv+0xf8>
        wire->endTransmission();
    55d2:	0e 94 ae 2c 	call	0x595c	; 0x595c <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
    55d6:	69 a1       	ldd	r22, Y+33	; 0x21
    55d8:	06 2e       	mov	r0, r22
    55da:	00 0c       	add	r0, r0
    55dc:	77 0b       	sbc	r23, r23
    55de:	8d 8d       	ldd	r24, Y+29	; 0x1d
    55e0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    55e2:	0e 94 99 2c 	call	0x5932	; 0x5932 <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x40);
    55e6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    55e8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    55ea:	dc 01       	movw	r26, r24
    55ec:	ed 91       	ld	r30, X+
    55ee:	fc 91       	ld	r31, X
    55f0:	01 90       	ld	r0, Z+
    55f2:	f0 81       	ld	r31, Z
    55f4:	e0 2d       	mov	r30, r0
    55f6:	60 e4       	ldi	r22, 0x40	; 64
    55f8:	09 95       	icall
        bytesOut = 1;
    55fa:	01 e0       	ldi	r16, 0x01	; 1
    55fc:	10 e0       	ldi	r17, 0x00	; 0
      }
      WIRE_WRITE(*ptr++);
    55fe:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5600:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5602:	f6 01       	movw	r30, r12
    5604:	61 91       	ld	r22, Z+
    5606:	6f 01       	movw	r12, r30
    5608:	dc 01       	movw	r26, r24
    560a:	ed 91       	ld	r30, X+
    560c:	fc 91       	ld	r31, X
    560e:	01 90       	ld	r0, Z+
    5610:	f0 81       	ld	r31, Z
    5612:	e0 2d       	mov	r30, r0
    5614:	09 95       	icall
      bytesOut++;
    5616:	0f 5f       	subi	r16, 0xFF	; 255
    5618:	1f 4f       	sbci	r17, 0xFF	; 255
  uint8_t *ptr = buffer;
  if (wire) { // I2C
    wire->beginTransmission(i2caddr);
    WIRE_WRITE((uint8_t)0x40);
    uint16_t bytesOut = 1;
    while (count--) {
    561a:	d3 cf       	rjmp	.-90     	; 0x55c2 <_ZN16Adafruit_SSD13067displayEv+0xbc>
        bytesOut = 1;
      }
      WIRE_WRITE(*ptr++);
      bytesOut++;
    }
    wire->endTransmission();
    561c:	0e 94 ae 2c 	call	0x595c	; 0x595c <_ZN7TwoWire15endTransmissionEv>
    5620:	35 c0       	rjmp	.+106    	; 0x568c <_ZN16Adafruit_SSD13067displayEv+0x186>
  } else { // SPI
    SSD1306_MODE_DATA
    5622:	ed a5       	ldd	r30, Y+45	; 0x2d
    5624:	fe a5       	ldd	r31, Y+46	; 0x2e
    5626:	90 81       	ld	r25, Z
    5628:	8b a9       	ldd	r24, Y+51	; 0x33
    562a:	89 2b       	or	r24, r25
    562c:	80 83       	st	Z, r24
    while (count--)
    562e:	0e 15       	cp	r16, r14
    5630:	1f 05       	cpc	r17, r15
    5632:	61 f1       	breq	.+88     	; 0x568c <_ZN16Adafruit_SSD13067displayEv+0x186>
      SPIwrite(*ptr++);
    5634:	f8 01       	movw	r30, r16
    5636:	81 91       	ld	r24, Z+
    5638:	8f 01       	movw	r16, r30
    @return void
    @note   See HAVE_PORTREG which defines if the method uses a port or bit-bang
   method
*/
inline void Adafruit_SSD1306::SPIwrite(uint8_t d) {
  if (spi) {
    563a:	2b 8d       	ldd	r18, Y+27	; 0x1b
    563c:	3c 8d       	ldd	r19, Y+28	; 0x1c
    563e:	23 2b       	or	r18, r19
    5640:	19 f0       	breq	.+6      	; 0x5648 <_ZN16Adafruit_SSD13067displayEv+0x142>
    (void)spi->transfer(d);
    5642:	0e 94 54 25 	call	0x4aa8	; 0x4aa8 <_ZN8SPIClass8transferEh>
    5646:	f3 cf       	rjmp	.-26     	; 0x562e <_ZN16Adafruit_SSD13067displayEv+0x128>
    @return void
    @note   See HAVE_PORTREG which defines if the method uses a port or bit-bang
   method
*/
inline void Adafruit_SSD1306::SPIwrite(uint8_t d) {
  if (spi) {
    5648:	28 e0       	ldi	r18, 0x08	; 8
    564a:	30 e0       	ldi	r19, 0x00	; 0
    564c:	40 e8       	ldi	r20, 0x80	; 128
    564e:	e9 a5       	ldd	r30, Y+41	; 0x29
    5650:	fa a5       	ldd	r31, Y+42	; 0x2a
    5652:	99 a9       	ldd	r25, Y+49	; 0x31
    (void)spi->transfer(d);
  } else {
    for (uint8_t bit = 0x80; bit; bit >>= 1) {
#ifdef HAVE_PORTREG
      if (d & bit)
    5654:	58 2f       	mov	r21, r24
    5656:	54 23       	and	r21, r20
    5658:	19 f0       	breq	.+6      	; 0x5660 <_ZN16Adafruit_SSD13067displayEv+0x15a>
        *mosiPort |= mosiPinMask;
    565a:	50 81       	ld	r21, Z
    565c:	95 2b       	or	r25, r21
    565e:	03 c0       	rjmp	.+6      	; 0x5666 <_ZN16Adafruit_SSD13067displayEv+0x160>
      else
        *mosiPort &= ~mosiPinMask;
    5660:	50 81       	ld	r21, Z
    5662:	90 95       	com	r25
    5664:	95 23       	and	r25, r21
    5666:	90 83       	st	Z, r25
      *clkPort |= clkPinMask;  // Clock high
    5668:	eb a5       	ldd	r30, Y+43	; 0x2b
    566a:	fc a5       	ldd	r31, Y+44	; 0x2c
    566c:	50 81       	ld	r21, Z
    566e:	9a a9       	ldd	r25, Y+50	; 0x32
    5670:	95 2b       	or	r25, r21
    5672:	90 83       	st	Z, r25
      *clkPort &= ~clkPinMask; // Clock low
    5674:	eb a5       	ldd	r30, Y+43	; 0x2b
    5676:	fc a5       	ldd	r31, Y+44	; 0x2c
    5678:	50 81       	ld	r21, Z
    567a:	9a a9       	ldd	r25, Y+50	; 0x32
    567c:	90 95       	com	r25
    567e:	95 23       	and	r25, r21
    5680:	90 83       	st	Z, r25
*/
inline void Adafruit_SSD1306::SPIwrite(uint8_t d) {
  if (spi) {
    (void)spi->transfer(d);
  } else {
    for (uint8_t bit = 0x80; bit; bit >>= 1) {
    5682:	46 95       	lsr	r20
    5684:	21 50       	subi	r18, 0x01	; 1
    5686:	31 09       	sbc	r19, r1
    5688:	11 f7       	brne	.-60     	; 0x564e <_ZN16Adafruit_SSD13067displayEv+0x148>
    568a:	d1 cf       	rjmp	.-94     	; 0x562e <_ZN16Adafruit_SSD13067displayEv+0x128>
  } else { // SPI
    SSD1306_MODE_DATA
    while (count--)
      SPIwrite(*ptr++);
  }
  TRANSACTION_END
    568c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    568e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5690:	00 97       	sbiw	r24, 0x00	; 0
    5692:	71 f0       	breq	.+28     	; 0x56b0 <_ZN16Adafruit_SSD13067displayEv+0x1aa>
    5694:	49 ad       	ldd	r20, Y+57	; 0x39
    5696:	5a ad       	ldd	r21, Y+58	; 0x3a
    5698:	6b ad       	ldd	r22, Y+59	; 0x3b
    569a:	7c ad       	ldd	r23, Y+60	; 0x3c
#if defined(ESP8266)
  yield();
#endif
}
    569c:	df 91       	pop	r29
    569e:	cf 91       	pop	r28
    56a0:	1f 91       	pop	r17
    56a2:	0f 91       	pop	r16
    56a4:	ff 90       	pop	r15
    56a6:	ef 90       	pop	r14
    56a8:	df 90       	pop	r13
    56aa:	cf 90       	pop	r12
  } else { // SPI
    SSD1306_MODE_DATA
    while (count--)
      SPIwrite(*ptr++);
  }
  TRANSACTION_END
    56ac:	0c 94 8b 2c 	jmp	0x5916	; 0x5916 <_ZN7TwoWire8setClockEm>
    56b0:	ef a5       	ldd	r30, Y+47	; 0x2f
    56b2:	f8 a9       	ldd	r31, Y+48	; 0x30
    56b4:	90 81       	ld	r25, Z
    56b6:	8c a9       	ldd	r24, Y+52	; 0x34
    56b8:	89 2b       	or	r24, r25
    56ba:	80 83       	st	Z, r24
    56bc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    56be:	9c 8d       	ldd	r25, Y+28	; 0x1c
    56c0:	89 2b       	or	r24, r25
    56c2:	51 f0       	breq	.+20     	; 0x56d8 <_ZN16Adafruit_SSD13067displayEv+0x1d2>
#if defined(ESP8266)
  yield();
#endif
}
    56c4:	df 91       	pop	r29
    56c6:	cf 91       	pop	r28
    56c8:	1f 91       	pop	r17
    56ca:	0f 91       	pop	r16
    56cc:	ff 90       	pop	r15
    56ce:	ef 90       	pop	r14
    56d0:	df 90       	pop	r13
    56d2:	cf 90       	pop	r12
  } else { // SPI
    SSD1306_MODE_DATA
    while (count--)
      SPIwrite(*ptr++);
  }
  TRANSACTION_END
    56d4:	0c 94 5b 25 	jmp	0x4ab6	; 0x4ab6 <_ZN8SPIClass14endTransactionEv>
#if defined(ESP8266)
  yield();
#endif
}
    56d8:	df 91       	pop	r29
    56da:	cf 91       	pop	r28
    56dc:	1f 91       	pop	r17
    56de:	0f 91       	pop	r16
    56e0:	ff 90       	pop	r15
    56e2:	ef 90       	pop	r14
    56e4:	df 90       	pop	r13
    56e6:	cf 90       	pop	r12
    56e8:	08 95       	ret

000056ea <_ZN8SPIClass5beginEv>:
#ifdef SPI_TRANSACTION_MISMATCH_LED
uint8_t SPIClass::inTransactionFlag = 0;
#endif

void SPIClass::begin()
{
    56ea:	cf 93       	push	r28
  uint8_t sreg = SREG;
    56ec:	cf b7       	in	r28, 0x3f	; 63
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
    56ee:	f8 94       	cli
  if (!initialized) {
    56f0:	80 91 da 02 	lds	r24, 0x02DA	; 0x8002da <_ZN8SPIClass11initializedE>
    56f4:	81 11       	cpse	r24, r1
    56f6:	27 c0       	rjmp	.+78     	; 0x5746 <_ZN8SPIClass5beginEv+0x5c>
    // Set SS to high so a connected chip will be "deselected" by default
    uint8_t port = digitalPinToPort(SS);
    56f8:	e2 ed       	ldi	r30, 0xD2	; 210
    56fa:	f8 e0       	ldi	r31, 0x08	; 8
    56fc:	84 91       	lpm	r24, Z
    uint8_t bit = digitalPinToBitMask(SS);
    56fe:	ee eb       	ldi	r30, 0xBE	; 190
    5700:	f8 e0       	ldi	r31, 0x08	; 8
    5702:	94 91       	lpm	r25, Z
    volatile uint8_t *reg = portModeRegister(port);
    5704:	e8 2f       	mov	r30, r24
    5706:	f0 e0       	ldi	r31, 0x00	; 0
    5708:	ee 0f       	add	r30, r30
    570a:	ff 1f       	adc	r31, r31
    570c:	e0 51       	subi	r30, 0x10	; 16
    570e:	f7 4f       	sbci	r31, 0xF7	; 247
    5710:	a5 91       	lpm	r26, Z+
    5712:	b4 91       	lpm	r27, Z

    // if the SS pin is not already configured as an output
    // then set it high (to enable the internal pull-up resistor)
    if(!(*reg & bit)){
    5714:	ec 91       	ld	r30, X
    5716:	e9 23       	and	r30, r25
    5718:	21 f4       	brne	.+8      	; 0x5722 <_ZN8SPIClass5beginEv+0x38>
      digitalWrite(SS, HIGH);
    571a:	61 e0       	ldi	r22, 0x01	; 1
    571c:	8a e0       	ldi	r24, 0x0A	; 10
    571e:	0e 94 a6 19 	call	0x334c	; 0x334c <digitalWrite>
    }

    // When the SS pin is set as OUTPUT, it can be used as
    // a general purpose output port (it doesn't influence
    // SPI operations).
    pinMode(SS, OUTPUT);
    5722:	61 e0       	ldi	r22, 0x01	; 1
    5724:	8a e0       	ldi	r24, 0x0A	; 10
    5726:	0e 94 6a 19 	call	0x32d4	; 0x32d4 <pinMode>

    // Warning: if the SS pin ever becomes a LOW INPUT then SPI
    // automatically switches to Slave, so the data direction of
    // the SS pin MUST be kept as OUTPUT.
    SPCR |= _BV(MSTR);
    572a:	8c b5       	in	r24, 0x2c	; 44
    572c:	80 61       	ori	r24, 0x10	; 16
    572e:	8c bd       	out	0x2c, r24	; 44
    SPCR |= _BV(SPE);
    5730:	8c b5       	in	r24, 0x2c	; 44
    5732:	80 64       	ori	r24, 0x40	; 64
    5734:	8c bd       	out	0x2c, r24	; 44
    // MISO pin automatically overrides to INPUT.
    // By doing this AFTER enabling SPI, we avoid accidentally
    // clocking in a single bit since the lines go directly
    // from "input" to SPI control.
    // http://code.google.com/p/arduino/issues/detail?id=888
    pinMode(SCK, OUTPUT);
    5736:	61 e0       	ldi	r22, 0x01	; 1
    5738:	8d e0       	ldi	r24, 0x0D	; 13
    573a:	0e 94 6a 19 	call	0x32d4	; 0x32d4 <pinMode>
    pinMode(MOSI, OUTPUT);
    573e:	61 e0       	ldi	r22, 0x01	; 1
    5740:	8b e0       	ldi	r24, 0x0B	; 11
    5742:	0e 94 6a 19 	call	0x32d4	; 0x32d4 <pinMode>
  }
  initialized++; // reference count
    5746:	80 91 da 02 	lds	r24, 0x02DA	; 0x8002da <_ZN8SPIClass11initializedE>
    574a:	8f 5f       	subi	r24, 0xFF	; 255
    574c:	80 93 da 02 	sts	0x02DA, r24	; 0x8002da <_ZN8SPIClass11initializedE>
  SREG = sreg;
    5750:	cf bf       	out	0x3f, r28	; 63
}
    5752:	cf 91       	pop	r28
    5754:	08 95       	ret

00005756 <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    5756:	80 91 0f 03 	lds	r24, 0x030F	; 0x80030f <_ZN7TwoWire14rxBufferLengthE>
    575a:	90 e0       	ldi	r25, 0x00	; 0
    575c:	20 91 10 03 	lds	r18, 0x0310	; 0x800310 <_ZN7TwoWire13rxBufferIndexE>
    5760:	82 1b       	sub	r24, r18
    5762:	91 09       	sbc	r25, r1
    5764:	08 95       	ret

00005766 <_ZN7TwoWire4readEv>:
    5766:	90 91 10 03 	lds	r25, 0x0310	; 0x800310 <_ZN7TwoWire13rxBufferIndexE>
    576a:	80 91 0f 03 	lds	r24, 0x030F	; 0x80030f <_ZN7TwoWire14rxBufferLengthE>
    576e:	98 17       	cp	r25, r24
    5770:	50 f4       	brcc	.+20     	; 0x5786 <_ZN7TwoWire4readEv+0x20>
    5772:	e9 2f       	mov	r30, r25
    5774:	f0 e0       	ldi	r31, 0x00	; 0
    5776:	ef 5e       	subi	r30, 0xEF	; 239
    5778:	fc 4f       	sbci	r31, 0xFC	; 252
    577a:	20 81       	ld	r18, Z
    577c:	30 e0       	ldi	r19, 0x00	; 0
    577e:	9f 5f       	subi	r25, 0xFF	; 255
    5780:	90 93 10 03 	sts	0x0310, r25	; 0x800310 <_ZN7TwoWire13rxBufferIndexE>
    5784:	02 c0       	rjmp	.+4      	; 0x578a <_ZN7TwoWire4readEv+0x24>
    5786:	2f ef       	ldi	r18, 0xFF	; 255
    5788:	3f ef       	ldi	r19, 0xFF	; 255
    578a:	c9 01       	movw	r24, r18
    578c:	08 95       	ret

0000578e <_ZN7TwoWire4peekEv>:
    578e:	e0 91 10 03 	lds	r30, 0x0310	; 0x800310 <_ZN7TwoWire13rxBufferIndexE>
    5792:	80 91 0f 03 	lds	r24, 0x030F	; 0x80030f <_ZN7TwoWire14rxBufferLengthE>
    5796:	e8 17       	cp	r30, r24
    5798:	30 f4       	brcc	.+12     	; 0x57a6 <_ZN7TwoWire4peekEv+0x18>
    579a:	f0 e0       	ldi	r31, 0x00	; 0
    579c:	ef 5e       	subi	r30, 0xEF	; 239
    579e:	fc 4f       	sbci	r31, 0xFC	; 252
    57a0:	80 81       	ld	r24, Z
    57a2:	90 e0       	ldi	r25, 0x00	; 0
    57a4:	08 95       	ret
    57a6:	8f ef       	ldi	r24, 0xFF	; 255
    57a8:	9f ef       	ldi	r25, 0xFF	; 255
    57aa:	08 95       	ret

000057ac <_ZN7TwoWire5flushEv>:
    57ac:	08 95       	ret

000057ae <_ZN7TwoWire16onReceiveServiceEPhi>:
    57ae:	cf 93       	push	r28
    57b0:	df 93       	push	r29
    57b2:	ec 01       	movw	r28, r24
    57b4:	e0 91 e7 02 	lds	r30, 0x02E7	; 0x8002e7 <_ZN7TwoWire14user_onReceiveE>
    57b8:	f0 91 e8 02 	lds	r31, 0x02E8	; 0x8002e8 <_ZN7TwoWire14user_onReceiveE+0x1>
    57bc:	30 97       	sbiw	r30, 0x00	; 0
    57be:	f1 f0       	breq	.+60     	; 0x57fc <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    57c0:	90 91 10 03 	lds	r25, 0x0310	; 0x800310 <_ZN7TwoWire13rxBufferIndexE>
    57c4:	80 91 0f 03 	lds	r24, 0x030F	; 0x80030f <_ZN7TwoWire14rxBufferLengthE>
    57c8:	98 17       	cp	r25, r24
    57ca:	c0 f0       	brcs	.+48     	; 0x57fc <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    57cc:	90 e0       	ldi	r25, 0x00	; 0
    57ce:	29 2f       	mov	r18, r25
    57d0:	30 e0       	ldi	r19, 0x00	; 0
    57d2:	26 17       	cp	r18, r22
    57d4:	37 07       	cpc	r19, r23
    57d6:	54 f4       	brge	.+20     	; 0x57ec <_ZN7TwoWire16onReceiveServiceEPhi+0x3e>
    57d8:	de 01       	movw	r26, r28
    57da:	a2 0f       	add	r26, r18
    57dc:	b3 1f       	adc	r27, r19
    57de:	4c 91       	ld	r20, X
    57e0:	d9 01       	movw	r26, r18
    57e2:	af 5e       	subi	r26, 0xEF	; 239
    57e4:	bc 4f       	sbci	r27, 0xFC	; 252
    57e6:	4c 93       	st	X, r20
    57e8:	9f 5f       	subi	r25, 0xFF	; 255
    57ea:	f1 cf       	rjmp	.-30     	; 0x57ce <_ZN7TwoWire16onReceiveServiceEPhi+0x20>
    57ec:	10 92 10 03 	sts	0x0310, r1	; 0x800310 <_ZN7TwoWire13rxBufferIndexE>
    57f0:	60 93 0f 03 	sts	0x030F, r22	; 0x80030f <_ZN7TwoWire14rxBufferLengthE>
    57f4:	cb 01       	movw	r24, r22
    57f6:	df 91       	pop	r29
    57f8:	cf 91       	pop	r28
    57fa:	09 94       	ijmp
    57fc:	df 91       	pop	r29
    57fe:	cf 91       	pop	r28
    5800:	08 95       	ret

00005802 <_ZN7TwoWire16onRequestServiceEv>:
    5802:	e0 91 e9 02 	lds	r30, 0x02E9	; 0x8002e9 <_ZN7TwoWire14user_onRequestE>
    5806:	f0 91 ea 02 	lds	r31, 0x02EA	; 0x8002ea <_ZN7TwoWire14user_onRequestE+0x1>
    580a:	30 97       	sbiw	r30, 0x00	; 0
    580c:	29 f0       	breq	.+10     	; 0x5818 <_ZN7TwoWire16onRequestServiceEv+0x16>
    580e:	10 92 ed 02 	sts	0x02ED, r1	; 0x8002ed <_ZN7TwoWire13txBufferIndexE>
    5812:	10 92 ec 02 	sts	0x02EC, r1	; 0x8002ec <_ZN7TwoWire14txBufferLengthE>
    5816:	09 94       	ijmp
    5818:	08 95       	ret

0000581a <_ZN7TwoWire5writeEPKhj>:
    581a:	cf 92       	push	r12
    581c:	df 92       	push	r13
    581e:	ef 92       	push	r14
    5820:	ff 92       	push	r15
    5822:	0f 93       	push	r16
    5824:	1f 93       	push	r17
    5826:	cf 93       	push	r28
    5828:	df 93       	push	r29
    582a:	7c 01       	movw	r14, r24
    582c:	cb 01       	movw	r24, r22
    582e:	8a 01       	movw	r16, r20
    5830:	20 91 eb 02 	lds	r18, 0x02EB	; 0x8002eb <_ZN7TwoWire12transmittingE>
    5834:	22 23       	and	r18, r18
    5836:	89 f0       	breq	.+34     	; 0x585a <_ZN7TwoWire5writeEPKhj+0x40>
    5838:	eb 01       	movw	r28, r22
    583a:	6b 01       	movw	r12, r22
    583c:	c4 0e       	add	r12, r20
    583e:	d5 1e       	adc	r13, r21
    5840:	cc 15       	cp	r28, r12
    5842:	dd 05       	cpc	r29, r13
    5844:	69 f0       	breq	.+26     	; 0x5860 <_ZN7TwoWire5writeEPKhj+0x46>
    5846:	69 91       	ld	r22, Y+
    5848:	d7 01       	movw	r26, r14
    584a:	ed 91       	ld	r30, X+
    584c:	fc 91       	ld	r31, X
    584e:	01 90       	ld	r0, Z+
    5850:	f0 81       	ld	r31, Z
    5852:	e0 2d       	mov	r30, r0
    5854:	c7 01       	movw	r24, r14
    5856:	09 95       	icall
    5858:	f3 cf       	rjmp	.-26     	; 0x5840 <_ZN7TwoWire5writeEPKhj+0x26>
    585a:	64 2f       	mov	r22, r20
    585c:	0e 94 f7 2c 	call	0x59ee	; 0x59ee <twi_transmit>
    5860:	c8 01       	movw	r24, r16
    5862:	df 91       	pop	r29
    5864:	cf 91       	pop	r28
    5866:	1f 91       	pop	r17
    5868:	0f 91       	pop	r16
    586a:	ff 90       	pop	r15
    586c:	ef 90       	pop	r14
    586e:	df 90       	pop	r13
    5870:	cf 90       	pop	r12
    5872:	08 95       	ret

00005874 <_ZN7TwoWire5writeEh>:
    5874:	cf 93       	push	r28
    5876:	df 93       	push	r29
    5878:	1f 92       	push	r1
    587a:	cd b7       	in	r28, 0x3d	; 61
    587c:	de b7       	in	r29, 0x3e	; 62
    587e:	69 83       	std	Y+1, r22	; 0x01
    5880:	20 91 eb 02 	lds	r18, 0x02EB	; 0x8002eb <_ZN7TwoWire12transmittingE>
    5884:	22 23       	and	r18, r18
    5886:	d1 f0       	breq	.+52     	; 0x58bc <_ZN7TwoWire5writeEh+0x48>
    5888:	20 91 ec 02 	lds	r18, 0x02EC	; 0x8002ec <_ZN7TwoWire14txBufferLengthE>
    588c:	20 32       	cpi	r18, 0x20	; 32
    588e:	40 f0       	brcs	.+16     	; 0x58a0 <_ZN7TwoWire5writeEh+0x2c>
    5890:	21 e0       	ldi	r18, 0x01	; 1
    5892:	30 e0       	ldi	r19, 0x00	; 0
    5894:	fc 01       	movw	r30, r24
    5896:	33 83       	std	Z+3, r19	; 0x03
    5898:	22 83       	std	Z+2, r18	; 0x02
    589a:	80 e0       	ldi	r24, 0x00	; 0
    589c:	90 e0       	ldi	r25, 0x00	; 0
    589e:	15 c0       	rjmp	.+42     	; 0x58ca <_ZN7TwoWire5writeEh+0x56>
    58a0:	80 91 ed 02 	lds	r24, 0x02ED	; 0x8002ed <_ZN7TwoWire13txBufferIndexE>
    58a4:	e8 2f       	mov	r30, r24
    58a6:	f0 e0       	ldi	r31, 0x00	; 0
    58a8:	e2 51       	subi	r30, 0x12	; 18
    58aa:	fd 4f       	sbci	r31, 0xFD	; 253
    58ac:	99 81       	ldd	r25, Y+1	; 0x01
    58ae:	90 83       	st	Z, r25
    58b0:	8f 5f       	subi	r24, 0xFF	; 255
    58b2:	80 93 ed 02 	sts	0x02ED, r24	; 0x8002ed <_ZN7TwoWire13txBufferIndexE>
    58b6:	80 93 ec 02 	sts	0x02EC, r24	; 0x8002ec <_ZN7TwoWire14txBufferLengthE>
    58ba:	05 c0       	rjmp	.+10     	; 0x58c6 <_ZN7TwoWire5writeEh+0x52>
    58bc:	61 e0       	ldi	r22, 0x01	; 1
    58be:	ce 01       	movw	r24, r28
    58c0:	01 96       	adiw	r24, 0x01	; 1
    58c2:	0e 94 f7 2c 	call	0x59ee	; 0x59ee <twi_transmit>
    58c6:	81 e0       	ldi	r24, 0x01	; 1
    58c8:	90 e0       	ldi	r25, 0x00	; 0
    58ca:	0f 90       	pop	r0
    58cc:	df 91       	pop	r29
    58ce:	cf 91       	pop	r28
    58d0:	08 95       	ret

000058d2 <_ZN7TwoWireC1Ev>:
    58d2:	fc 01       	movw	r30, r24
    58d4:	13 82       	std	Z+3, r1	; 0x03
    58d6:	12 82       	std	Z+2, r1	; 0x02
    58d8:	88 ee       	ldi	r24, 0xE8	; 232
    58da:	93 e0       	ldi	r25, 0x03	; 3
    58dc:	a0 e0       	ldi	r26, 0x00	; 0
    58de:	b0 e0       	ldi	r27, 0x00	; 0
    58e0:	84 83       	std	Z+4, r24	; 0x04
    58e2:	95 83       	std	Z+5, r25	; 0x05
    58e4:	a6 83       	std	Z+6, r26	; 0x06
    58e6:	b7 83       	std	Z+7, r27	; 0x07
    58e8:	83 ec       	ldi	r24, 0xC3	; 195
    58ea:	91 e0       	ldi	r25, 0x01	; 1
    58ec:	91 83       	std	Z+1, r25	; 0x01
    58ee:	80 83       	st	Z, r24
    58f0:	08 95       	ret

000058f2 <_ZN7TwoWire5beginEv>:
    58f2:	10 92 10 03 	sts	0x0310, r1	; 0x800310 <_ZN7TwoWire13rxBufferIndexE>
    58f6:	10 92 0f 03 	sts	0x030F, r1	; 0x80030f <_ZN7TwoWire14rxBufferLengthE>
    58fa:	10 92 ed 02 	sts	0x02ED, r1	; 0x8002ed <_ZN7TwoWire13txBufferIndexE>
    58fe:	10 92 ec 02 	sts	0x02EC, r1	; 0x8002ec <_ZN7TwoWire14txBufferLengthE>
    5902:	0e 94 b8 2c 	call	0x5970	; 0x5970 <twi_init>
    5906:	81 e0       	ldi	r24, 0x01	; 1
    5908:	9c e2       	ldi	r25, 0x2C	; 44
    590a:	0e 94 24 2d 	call	0x5a48	; 0x5a48 <twi_attachSlaveTxEvent>
    590e:	87 ed       	ldi	r24, 0xD7	; 215
    5910:	9b e2       	ldi	r25, 0x2B	; 43
    5912:	0c 94 1f 2d 	jmp	0x5a3e	; 0x5a3e <twi_attachSlaveRxEvent>

00005916 <_ZN7TwoWire8setClockEm>:
    5916:	cb 01       	movw	r24, r22
    5918:	ba 01       	movw	r22, r20
    591a:	0c 94 e3 2c 	jmp	0x59c6	; 0x59c6 <twi_setFrequency>

0000591e <_ZN7TwoWire17beginTransmissionEh>:
    591e:	81 e0       	ldi	r24, 0x01	; 1
    5920:	80 93 eb 02 	sts	0x02EB, r24	; 0x8002eb <_ZN7TwoWire12transmittingE>
    5924:	60 93 0e 03 	sts	0x030E, r22	; 0x80030e <_ZN7TwoWire9txAddressE>
    5928:	10 92 ed 02 	sts	0x02ED, r1	; 0x8002ed <_ZN7TwoWire13txBufferIndexE>
    592c:	10 92 ec 02 	sts	0x02EC, r1	; 0x8002ec <_ZN7TwoWire14txBufferLengthE>
    5930:	08 95       	ret

00005932 <_ZN7TwoWire17beginTransmissionEi>:
    5932:	0c 94 8f 2c 	jmp	0x591e	; 0x591e <_ZN7TwoWire17beginTransmissionEh>

00005936 <_ZN7TwoWire15endTransmissionEh>:
    5936:	0f 93       	push	r16
    5938:	06 2f       	mov	r16, r22
    593a:	21 e0       	ldi	r18, 0x01	; 1
    593c:	40 91 ec 02 	lds	r20, 0x02EC	; 0x8002ec <_ZN7TwoWire14txBufferLengthE>
    5940:	6e ee       	ldi	r22, 0xEE	; 238
    5942:	72 e0       	ldi	r23, 0x02	; 2
    5944:	80 91 0e 03 	lds	r24, 0x030E	; 0x80030e <_ZN7TwoWire9txAddressE>
    5948:	0e 94 45 2d 	call	0x5a8a	; 0x5a8a <twi_writeTo>
    594c:	10 92 ed 02 	sts	0x02ED, r1	; 0x8002ed <_ZN7TwoWire13txBufferIndexE>
    5950:	10 92 ec 02 	sts	0x02EC, r1	; 0x8002ec <_ZN7TwoWire14txBufferLengthE>
    5954:	10 92 eb 02 	sts	0x02EB, r1	; 0x8002eb <_ZN7TwoWire12transmittingE>
    5958:	0f 91       	pop	r16
    595a:	08 95       	ret

0000595c <_ZN7TwoWire15endTransmissionEv>:
    595c:	61 e0       	ldi	r22, 0x01	; 1
    595e:	0c 94 9b 2c 	jmp	0x5936	; 0x5936 <_ZN7TwoWire15endTransmissionEh>

00005962 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    5962:	8b ed       	ldi	r24, 0xDB	; 219
    5964:	92 e0       	ldi	r25, 0x02	; 2
    5966:	0c 94 69 2c 	jmp	0x58d2	; 0x58d2 <_ZN7TwoWireC1Ev>

0000596a <__cxa_pure_virtual>:
    596a:	0e 94 63 31 	call	0x62c6	; 0x62c6 <abort>

0000596e <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    596e:	08 95       	ret

00005970 <twi_init>:
  bool flag = twi_timed_out_flag;
  if (clear_flag){
    twi_timed_out_flag = false;
  }
  return(flag);
}
    5970:	10 92 a4 03 	sts	0x03A4, r1	; 0x8003a4 <twi_state>
    5974:	81 e0       	ldi	r24, 0x01	; 1
    5976:	80 93 a2 03 	sts	0x03A2, r24	; 0x8003a2 <twi_sendStop>
    597a:	10 92 a1 03 	sts	0x03A1, r1	; 0x8003a1 <twi_inRepStart>
    597e:	61 e0       	ldi	r22, 0x01	; 1
    5980:	82 e1       	ldi	r24, 0x12	; 18
    5982:	0e 94 a6 19 	call	0x334c	; 0x334c <digitalWrite>
    5986:	61 e0       	ldi	r22, 0x01	; 1
    5988:	83 e1       	ldi	r24, 0x13	; 19
    598a:	0e 94 a6 19 	call	0x334c	; 0x334c <digitalWrite>
    598e:	e9 eb       	ldi	r30, 0xB9	; 185
    5990:	f0 e0       	ldi	r31, 0x00	; 0
    5992:	80 81       	ld	r24, Z
    5994:	8e 7f       	andi	r24, 0xFE	; 254
    5996:	80 83       	st	Z, r24
    5998:	80 81       	ld	r24, Z
    599a:	8d 7f       	andi	r24, 0xFD	; 253
    599c:	80 83       	st	Z, r24
    599e:	88 e4       	ldi	r24, 0x48	; 72
    59a0:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
    59a4:	85 e4       	ldi	r24, 0x45	; 69
    59a6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    59aa:	08 95       	ret

000059ac <twi_disable>:
    59ac:	ec eb       	ldi	r30, 0xBC	; 188
    59ae:	f0 e0       	ldi	r31, 0x00	; 0
    59b0:	80 81       	ld	r24, Z
    59b2:	8a 7b       	andi	r24, 0xBA	; 186
    59b4:	80 83       	st	Z, r24
    59b6:	60 e0       	ldi	r22, 0x00	; 0
    59b8:	82 e1       	ldi	r24, 0x12	; 18
    59ba:	0e 94 a6 19 	call	0x334c	; 0x334c <digitalWrite>
    59be:	60 e0       	ldi	r22, 0x00	; 0
    59c0:	83 e1       	ldi	r24, 0x13	; 19
    59c2:	0c 94 a6 19 	jmp	0x334c	; 0x334c <digitalWrite>

000059c6 <twi_setFrequency>:
    59c6:	9b 01       	movw	r18, r22
    59c8:	ac 01       	movw	r20, r24
    59ca:	60 e0       	ldi	r22, 0x00	; 0
    59cc:	74 e2       	ldi	r23, 0x24	; 36
    59ce:	84 ef       	ldi	r24, 0xF4	; 244
    59d0:	90 e0       	ldi	r25, 0x00	; 0
    59d2:	0e 94 be 2f 	call	0x5f7c	; 0x5f7c <__udivmodsi4>
    59d6:	da 01       	movw	r26, r20
    59d8:	c9 01       	movw	r24, r18
    59da:	40 97       	sbiw	r24, 0x10	; 16
    59dc:	a1 09       	sbc	r26, r1
    59de:	b1 09       	sbc	r27, r1
    59e0:	b6 95       	lsr	r27
    59e2:	a7 95       	ror	r26
    59e4:	97 95       	ror	r25
    59e6:	87 95       	ror	r24
    59e8:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
    59ec:	08 95       	ret

000059ee <twi_transmit>:
    59ee:	40 91 53 03 	lds	r20, 0x0353	; 0x800353 <twi_txBufferLength>
    59f2:	26 2f       	mov	r18, r22
    59f4:	30 e0       	ldi	r19, 0x00	; 0
    59f6:	24 0f       	add	r18, r20
    59f8:	31 1d       	adc	r19, r1
    59fa:	21 32       	cpi	r18, 0x21	; 33
    59fc:	31 05       	cpc	r19, r1
    59fe:	dc f4       	brge	.+54     	; 0x5a36 <twi_transmit+0x48>
    5a00:	20 91 a4 03 	lds	r18, 0x03A4	; 0x8003a4 <twi_state>
    5a04:	24 30       	cpi	r18, 0x04	; 4
    5a06:	c9 f4       	brne	.+50     	; 0x5a3a <twi_transmit+0x4c>
    5a08:	fc 01       	movw	r30, r24
    5a0a:	80 e0       	ldi	r24, 0x00	; 0
    5a0c:	90 e0       	ldi	r25, 0x00	; 0
    5a0e:	86 17       	cp	r24, r22
    5a10:	58 f4       	brcc	.+22     	; 0x5a28 <twi_transmit+0x3a>
    5a12:	30 91 53 03 	lds	r19, 0x0353	; 0x800353 <twi_txBufferLength>
    5a16:	21 91       	ld	r18, Z+
    5a18:	dc 01       	movw	r26, r24
    5a1a:	ab 5a       	subi	r26, 0xAB	; 171
    5a1c:	bc 4f       	sbci	r27, 0xFC	; 252
    5a1e:	a3 0f       	add	r26, r19
    5a20:	b1 1d       	adc	r27, r1
    5a22:	2c 93       	st	X, r18
    5a24:	01 96       	adiw	r24, 0x01	; 1
    5a26:	f3 cf       	rjmp	.-26     	; 0x5a0e <twi_transmit+0x20>
    5a28:	80 91 53 03 	lds	r24, 0x0353	; 0x800353 <twi_txBufferLength>
    5a2c:	68 0f       	add	r22, r24
    5a2e:	60 93 53 03 	sts	0x0353, r22	; 0x800353 <twi_txBufferLength>
    5a32:	80 e0       	ldi	r24, 0x00	; 0
    5a34:	08 95       	ret
    5a36:	81 e0       	ldi	r24, 0x01	; 1
    5a38:	08 95       	ret
    5a3a:	82 e0       	ldi	r24, 0x02	; 2
    5a3c:	08 95       	ret

00005a3e <twi_attachSlaveRxEvent>:
    5a3e:	90 93 98 03 	sts	0x0398, r25	; 0x800398 <twi_onSlaveReceive+0x1>
    5a42:	80 93 97 03 	sts	0x0397, r24	; 0x800397 <twi_onSlaveReceive>
    5a46:	08 95       	ret

00005a48 <twi_attachSlaveTxEvent>:
    5a48:	90 93 9a 03 	sts	0x039A, r25	; 0x80039a <twi_onSlaveTransmit+0x1>
    5a4c:	80 93 99 03 	sts	0x0399, r24	; 0x800399 <twi_onSlaveTransmit>
    5a50:	08 95       	ret

00005a52 <twi_releaseBus>:
    5a52:	85 ec       	ldi	r24, 0xC5	; 197
    5a54:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    5a58:	10 92 a4 03 	sts	0x03A4, r1	; 0x8003a4 <twi_state>
    5a5c:	08 95       	ret

00005a5e <twi_handleTimeout>:
    5a5e:	cf 93       	push	r28
    5a60:	df 93       	push	r29
    5a62:	91 e0       	ldi	r25, 0x01	; 1
    5a64:	90 93 9c 03 	sts	0x039C, r25	; 0x80039c <twi_timed_out_flag>
    5a68:	88 23       	and	r24, r24
    5a6a:	61 f0       	breq	.+24     	; 0x5a84 <twi_handleTimeout+0x26>
    5a6c:	c0 91 b8 00 	lds	r28, 0x00B8	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
    5a70:	d0 91 ba 00 	lds	r29, 0x00BA	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7f80ba>
    5a74:	0e 94 d6 2c 	call	0x59ac	; 0x59ac <twi_disable>
    5a78:	0e 94 b8 2c 	call	0x5970	; 0x5970 <twi_init>
    5a7c:	d0 93 ba 00 	sts	0x00BA, r29	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7f80ba>
    5a80:	c0 93 b8 00 	sts	0x00B8, r28	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
    5a84:	df 91       	pop	r29
    5a86:	cf 91       	pop	r28
    5a88:	08 95       	ret

00005a8a <twi_writeTo>:
    5a8a:	4f 92       	push	r4
    5a8c:	5f 92       	push	r5
    5a8e:	6f 92       	push	r6
    5a90:	7f 92       	push	r7
    5a92:	8f 92       	push	r8
    5a94:	9f 92       	push	r9
    5a96:	af 92       	push	r10
    5a98:	bf 92       	push	r11
    5a9a:	cf 92       	push	r12
    5a9c:	df 92       	push	r13
    5a9e:	ef 92       	push	r14
    5aa0:	ff 92       	push	r15
    5aa2:	0f 93       	push	r16
    5aa4:	1f 93       	push	r17
    5aa6:	cf 93       	push	r28
    5aa8:	df 93       	push	r29
    5aaa:	41 32       	cpi	r20, 0x21	; 33
    5aac:	08 f0       	brcs	.+2      	; 0x5ab0 <twi_writeTo+0x26>
    5aae:	c6 c0       	rjmp	.+396    	; 0x5c3c <twi_writeTo+0x1b2>
    5ab0:	12 2f       	mov	r17, r18
    5ab2:	f4 2e       	mov	r15, r20
    5ab4:	d7 2e       	mov	r13, r23
    5ab6:	e6 2e       	mov	r14, r22
    5ab8:	d8 2f       	mov	r29, r24
    5aba:	0e 94 7d 18 	call	0x30fa	; 0x30fa <micros>
    5abe:	4b 01       	movw	r8, r22
    5ac0:	5c 01       	movw	r10, r24
    5ac2:	c0 91 a4 03 	lds	r28, 0x03A4	; 0x8003a4 <twi_state>
    5ac6:	cc 23       	and	r28, r28
    5ac8:	11 f1       	breq	.+68     	; 0x5b0e <twi_writeTo+0x84>
    5aca:	80 91 9d 03 	lds	r24, 0x039D	; 0x80039d <twi_timeout_us>
    5ace:	90 91 9e 03 	lds	r25, 0x039E	; 0x80039e <twi_timeout_us+0x1>
    5ad2:	a0 91 9f 03 	lds	r26, 0x039F	; 0x80039f <twi_timeout_us+0x2>
    5ad6:	b0 91 a0 03 	lds	r27, 0x03A0	; 0x8003a0 <twi_timeout_us+0x3>
    5ada:	89 2b       	or	r24, r25
    5adc:	8a 2b       	or	r24, r26
    5ade:	8b 2b       	or	r24, r27
    5ae0:	81 f3       	breq	.-32     	; 0x5ac2 <twi_writeTo+0x38>
    5ae2:	0e 94 7d 18 	call	0x30fa	; 0x30fa <micros>
    5ae6:	40 90 9d 03 	lds	r4, 0x039D	; 0x80039d <twi_timeout_us>
    5aea:	50 90 9e 03 	lds	r5, 0x039E	; 0x80039e <twi_timeout_us+0x1>
    5aee:	60 90 9f 03 	lds	r6, 0x039F	; 0x80039f <twi_timeout_us+0x2>
    5af2:	70 90 a0 03 	lds	r7, 0x03A0	; 0x8003a0 <twi_timeout_us+0x3>
    5af6:	dc 01       	movw	r26, r24
    5af8:	cb 01       	movw	r24, r22
    5afa:	88 19       	sub	r24, r8
    5afc:	99 09       	sbc	r25, r9
    5afe:	aa 09       	sbc	r26, r10
    5b00:	bb 09       	sbc	r27, r11
    5b02:	48 16       	cp	r4, r24
    5b04:	59 06       	cpc	r5, r25
    5b06:	6a 06       	cpc	r6, r26
    5b08:	7b 06       	cpc	r7, r27
    5b0a:	d8 f6       	brcc	.-74     	; 0x5ac2 <twi_writeTo+0x38>
    5b0c:	83 c0       	rjmp	.+262    	; 0x5c14 <twi_writeTo+0x18a>
    5b0e:	82 e0       	ldi	r24, 0x02	; 2
    5b10:	80 93 a4 03 	sts	0x03A4, r24	; 0x8003a4 <twi_state>
    5b14:	00 93 a2 03 	sts	0x03A2, r16	; 0x8003a2 <twi_sendStop>
    5b18:	8f ef       	ldi	r24, 0xFF	; 255
    5b1a:	80 93 31 03 	sts	0x0331, r24	; 0x800331 <twi_error>
    5b1e:	10 92 76 03 	sts	0x0376, r1	; 0x800376 <twi_masterBufferIndex>
    5b22:	f0 92 75 03 	sts	0x0375, r15	; 0x800375 <twi_masterBufferLength>
    5b26:	9e 2d       	mov	r25, r14
    5b28:	a7 e7       	ldi	r26, 0x77	; 119
    5b2a:	b3 e0       	ldi	r27, 0x03	; 3
    5b2c:	ee 2d       	mov	r30, r14
    5b2e:	fd 2d       	mov	r31, r13
    5b30:	8e 2f       	mov	r24, r30
    5b32:	89 1b       	sub	r24, r25
    5b34:	8f 15       	cp	r24, r15
    5b36:	18 f4       	brcc	.+6      	; 0x5b3e <twi_writeTo+0xb4>
    5b38:	81 91       	ld	r24, Z+
    5b3a:	8d 93       	st	X+, r24
    5b3c:	f9 cf       	rjmp	.-14     	; 0x5b30 <twi_writeTo+0xa6>
    5b3e:	10 92 a3 03 	sts	0x03A3, r1	; 0x8003a3 <twi_slarw>
    5b42:	90 91 a3 03 	lds	r25, 0x03A3	; 0x8003a3 <twi_slarw>
    5b46:	dd 0f       	add	r29, r29
    5b48:	d9 2b       	or	r29, r25
    5b4a:	d0 93 a3 03 	sts	0x03A3, r29	; 0x8003a3 <twi_slarw>
    5b4e:	80 91 a1 03 	lds	r24, 0x03A1	; 0x8003a1 <twi_inRepStart>
    5b52:	81 30       	cpi	r24, 0x01	; 1
    5b54:	89 f5       	brne	.+98     	; 0x5bb8 <twi_writeTo+0x12e>
    5b56:	10 92 a1 03 	sts	0x03A1, r1	; 0x8003a1 <twi_inRepStart>
    5b5a:	0e 94 7d 18 	call	0x30fa	; 0x30fa <micros>
    5b5e:	6b 01       	movw	r12, r22
    5b60:	7c 01       	movw	r14, r24
    5b62:	80 91 a3 03 	lds	r24, 0x03A3	; 0x8003a3 <twi_slarw>
    5b66:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    5b6a:	80 91 9d 03 	lds	r24, 0x039D	; 0x80039d <twi_timeout_us>
    5b6e:	90 91 9e 03 	lds	r25, 0x039E	; 0x80039e <twi_timeout_us+0x1>
    5b72:	a0 91 9f 03 	lds	r26, 0x039F	; 0x80039f <twi_timeout_us+0x2>
    5b76:	b0 91 a0 03 	lds	r27, 0x03A0	; 0x8003a0 <twi_timeout_us+0x3>
    5b7a:	89 2b       	or	r24, r25
    5b7c:	8a 2b       	or	r24, r26
    5b7e:	8b 2b       	or	r24, r27
    5b80:	a9 f0       	breq	.+42     	; 0x5bac <twi_writeTo+0x122>
    5b82:	0e 94 7d 18 	call	0x30fa	; 0x30fa <micros>
    5b86:	80 90 9d 03 	lds	r8, 0x039D	; 0x80039d <twi_timeout_us>
    5b8a:	90 90 9e 03 	lds	r9, 0x039E	; 0x80039e <twi_timeout_us+0x1>
    5b8e:	a0 90 9f 03 	lds	r10, 0x039F	; 0x80039f <twi_timeout_us+0x2>
    5b92:	b0 90 a0 03 	lds	r11, 0x03A0	; 0x8003a0 <twi_timeout_us+0x3>
    5b96:	dc 01       	movw	r26, r24
    5b98:	cb 01       	movw	r24, r22
    5b9a:	8c 19       	sub	r24, r12
    5b9c:	9d 09       	sbc	r25, r13
    5b9e:	ae 09       	sbc	r26, r14
    5ba0:	bf 09       	sbc	r27, r15
    5ba2:	88 16       	cp	r8, r24
    5ba4:	99 06       	cpc	r9, r25
    5ba6:	aa 06       	cpc	r10, r26
    5ba8:	bb 06       	cpc	r11, r27
    5baa:	a0 f1       	brcs	.+104    	; 0x5c14 <twi_writeTo+0x18a>
    5bac:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    5bb0:	83 fd       	sbrc	r24, 3
    5bb2:	d7 cf       	rjmp	.-82     	; 0x5b62 <twi_writeTo+0xd8>
    5bb4:	85 ec       	ldi	r24, 0xC5	; 197
    5bb6:	01 c0       	rjmp	.+2      	; 0x5bba <twi_writeTo+0x130>
    5bb8:	85 ee       	ldi	r24, 0xE5	; 229
    5bba:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    5bbe:	0e 94 7d 18 	call	0x30fa	; 0x30fa <micros>
    5bc2:	6b 01       	movw	r12, r22
    5bc4:	7c 01       	movw	r14, r24
    5bc6:	11 23       	and	r17, r17
    5bc8:	59 f1       	breq	.+86     	; 0x5c20 <twi_writeTo+0x196>
    5bca:	80 91 a4 03 	lds	r24, 0x03A4	; 0x8003a4 <twi_state>
    5bce:	82 30       	cpi	r24, 0x02	; 2
    5bd0:	39 f5       	brne	.+78     	; 0x5c20 <twi_writeTo+0x196>
    5bd2:	80 91 9d 03 	lds	r24, 0x039D	; 0x80039d <twi_timeout_us>
    5bd6:	90 91 9e 03 	lds	r25, 0x039E	; 0x80039e <twi_timeout_us+0x1>
    5bda:	a0 91 9f 03 	lds	r26, 0x039F	; 0x80039f <twi_timeout_us+0x2>
    5bde:	b0 91 a0 03 	lds	r27, 0x03A0	; 0x8003a0 <twi_timeout_us+0x3>
    5be2:	89 2b       	or	r24, r25
    5be4:	8a 2b       	or	r24, r26
    5be6:	8b 2b       	or	r24, r27
    5be8:	71 f3       	breq	.-36     	; 0x5bc6 <twi_writeTo+0x13c>
    5bea:	0e 94 7d 18 	call	0x30fa	; 0x30fa <micros>
    5bee:	80 90 9d 03 	lds	r8, 0x039D	; 0x80039d <twi_timeout_us>
    5bf2:	90 90 9e 03 	lds	r9, 0x039E	; 0x80039e <twi_timeout_us+0x1>
    5bf6:	a0 90 9f 03 	lds	r10, 0x039F	; 0x80039f <twi_timeout_us+0x2>
    5bfa:	b0 90 a0 03 	lds	r11, 0x03A0	; 0x8003a0 <twi_timeout_us+0x3>
    5bfe:	dc 01       	movw	r26, r24
    5c00:	cb 01       	movw	r24, r22
    5c02:	8c 19       	sub	r24, r12
    5c04:	9d 09       	sbc	r25, r13
    5c06:	ae 09       	sbc	r26, r14
    5c08:	bf 09       	sbc	r27, r15
    5c0a:	88 16       	cp	r8, r24
    5c0c:	99 06       	cpc	r9, r25
    5c0e:	aa 06       	cpc	r10, r26
    5c10:	bb 06       	cpc	r11, r27
    5c12:	c8 f6       	brcc	.-78     	; 0x5bc6 <twi_writeTo+0x13c>
    5c14:	80 91 9b 03 	lds	r24, 0x039B	; 0x80039b <twi_do_reset_on_timeout>
    5c18:	0e 94 2f 2d 	call	0x5a5e	; 0x5a5e <twi_handleTimeout>
    5c1c:	c5 e0       	ldi	r28, 0x05	; 5
    5c1e:	13 c0       	rjmp	.+38     	; 0x5c46 <twi_writeTo+0x1bc>
    5c20:	80 91 31 03 	lds	r24, 0x0331	; 0x800331 <twi_error>
    5c24:	8f 3f       	cpi	r24, 0xFF	; 255
    5c26:	79 f0       	breq	.+30     	; 0x5c46 <twi_writeTo+0x1bc>
    5c28:	80 91 31 03 	lds	r24, 0x0331	; 0x800331 <twi_error>
    5c2c:	80 32       	cpi	r24, 0x20	; 32
    5c2e:	41 f0       	breq	.+16     	; 0x5c40 <twi_writeTo+0x1b6>
    5c30:	80 91 31 03 	lds	r24, 0x0331	; 0x800331 <twi_error>
    5c34:	80 33       	cpi	r24, 0x30	; 48
    5c36:	31 f0       	breq	.+12     	; 0x5c44 <twi_writeTo+0x1ba>
    5c38:	c4 e0       	ldi	r28, 0x04	; 4
    5c3a:	05 c0       	rjmp	.+10     	; 0x5c46 <twi_writeTo+0x1bc>
    5c3c:	c1 e0       	ldi	r28, 0x01	; 1
    5c3e:	03 c0       	rjmp	.+6      	; 0x5c46 <twi_writeTo+0x1bc>
    5c40:	c2 e0       	ldi	r28, 0x02	; 2
    5c42:	01 c0       	rjmp	.+2      	; 0x5c46 <twi_writeTo+0x1bc>
    5c44:	c3 e0       	ldi	r28, 0x03	; 3
    5c46:	8c 2f       	mov	r24, r28
    5c48:	df 91       	pop	r29
    5c4a:	cf 91       	pop	r28
    5c4c:	1f 91       	pop	r17
    5c4e:	0f 91       	pop	r16
    5c50:	ff 90       	pop	r15
    5c52:	ef 90       	pop	r14
    5c54:	df 90       	pop	r13
    5c56:	cf 90       	pop	r12
    5c58:	bf 90       	pop	r11
    5c5a:	af 90       	pop	r10
    5c5c:	9f 90       	pop	r9
    5c5e:	8f 90       	pop	r8
    5c60:	7f 90       	pop	r7
    5c62:	6f 90       	pop	r6
    5c64:	5f 90       	pop	r5
    5c66:	4f 90       	pop	r4
    5c68:	08 95       	ret

00005c6a <twi_stop>:
    5c6a:	85 ed       	ldi	r24, 0xD5	; 213
    5c6c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    5c70:	80 91 9d 03 	lds	r24, 0x039D	; 0x80039d <twi_timeout_us>
    5c74:	90 91 9e 03 	lds	r25, 0x039E	; 0x80039e <twi_timeout_us+0x1>
    5c78:	a0 91 9f 03 	lds	r26, 0x039F	; 0x80039f <twi_timeout_us+0x2>
    5c7c:	b0 91 a0 03 	lds	r27, 0x03A0	; 0x8003a0 <twi_timeout_us+0x3>
    5c80:	07 96       	adiw	r24, 0x07	; 7
    5c82:	a1 1d       	adc	r26, r1
    5c84:	b1 1d       	adc	r27, r1
    5c86:	23 e0       	ldi	r18, 0x03	; 3
    5c88:	b6 95       	lsr	r27
    5c8a:	a7 95       	ror	r26
    5c8c:	97 95       	ror	r25
    5c8e:	87 95       	ror	r24
    5c90:	2a 95       	dec	r18
    5c92:	d1 f7       	brne	.-12     	; 0x5c88 <twi_stop+0x1e>
    5c94:	20 91 bc 00 	lds	r18, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    5c98:	24 ff       	sbrs	r18, 4
    5c9a:	1c c0       	rjmp	.+56     	; 0x5cd4 <twi_stop+0x6a>
    5c9c:	40 91 9d 03 	lds	r20, 0x039D	; 0x80039d <twi_timeout_us>
    5ca0:	50 91 9e 03 	lds	r21, 0x039E	; 0x80039e <twi_timeout_us+0x1>
    5ca4:	60 91 9f 03 	lds	r22, 0x039F	; 0x80039f <twi_timeout_us+0x2>
    5ca8:	70 91 a0 03 	lds	r23, 0x03A0	; 0x8003a0 <twi_timeout_us+0x3>
    5cac:	45 2b       	or	r20, r21
    5cae:	46 2b       	or	r20, r22
    5cb0:	47 2b       	or	r20, r23
    5cb2:	81 f3       	breq	.-32     	; 0x5c94 <twi_stop+0x2a>
    5cb4:	00 97       	sbiw	r24, 0x00	; 0
    5cb6:	a1 05       	cpc	r26, r1
    5cb8:	b1 05       	cpc	r27, r1
    5cba:	41 f0       	breq	.+16     	; 0x5ccc <twi_stop+0x62>
    5cbc:	2a e2       	ldi	r18, 0x2A	; 42
    5cbe:	2a 95       	dec	r18
    5cc0:	f1 f7       	brne	.-4      	; 0x5cbe <twi_stop+0x54>
    5cc2:	00 c0       	rjmp	.+0      	; 0x5cc4 <twi_stop+0x5a>
    5cc4:	01 97       	sbiw	r24, 0x01	; 1
    5cc6:	a1 09       	sbc	r26, r1
    5cc8:	b1 09       	sbc	r27, r1
    5cca:	e4 cf       	rjmp	.-56     	; 0x5c94 <twi_stop+0x2a>
    5ccc:	80 91 9b 03 	lds	r24, 0x039B	; 0x80039b <twi_do_reset_on_timeout>
    5cd0:	0c 94 2f 2d 	jmp	0x5a5e	; 0x5a5e <twi_handleTimeout>
    5cd4:	10 92 a4 03 	sts	0x03A4, r1	; 0x8003a4 <twi_state>
    5cd8:	08 95       	ret

00005cda <__vector_24>:

ISR(TWI_vect)
{
    5cda:	1f 92       	push	r1
    5cdc:	0f 92       	push	r0
    5cde:	0f b6       	in	r0, 0x3f	; 63
    5ce0:	0f 92       	push	r0
    5ce2:	11 24       	eor	r1, r1
    5ce4:	2f 93       	push	r18
    5ce6:	3f 93       	push	r19
    5ce8:	4f 93       	push	r20
    5cea:	5f 93       	push	r21
    5cec:	6f 93       	push	r22
    5cee:	7f 93       	push	r23
    5cf0:	8f 93       	push	r24
    5cf2:	9f 93       	push	r25
    5cf4:	af 93       	push	r26
    5cf6:	bf 93       	push	r27
    5cf8:	ef 93       	push	r30
    5cfa:	ff 93       	push	r31
  switch(TW_STATUS){
    5cfc:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
    5d00:	88 7f       	andi	r24, 0xF8	; 248
    5d02:	80 36       	cpi	r24, 0x60	; 96
    5d04:	09 f4       	brne	.+2      	; 0x5d08 <__vector_24+0x2e>
    5d06:	9e c0       	rjmp	.+316    	; 0x5e44 <__vector_24+0x16a>
    5d08:	78 f5       	brcc	.+94     	; 0x5d68 <__vector_24+0x8e>
    5d0a:	88 32       	cpi	r24, 0x28	; 40
    5d0c:	09 f4       	brne	.+2      	; 0x5d10 <__vector_24+0x36>
    5d0e:	5d c0       	rjmp	.+186    	; 0x5dca <__vector_24+0xf0>
    5d10:	90 f4       	brcc	.+36     	; 0x5d36 <__vector_24+0x5c>
    5d12:	80 31       	cpi	r24, 0x10	; 16
    5d14:	09 f4       	brne	.+2      	; 0x5d18 <__vector_24+0x3e>
    5d16:	56 c0       	rjmp	.+172    	; 0x5dc4 <__vector_24+0xea>
    5d18:	38 f4       	brcc	.+14     	; 0x5d28 <__vector_24+0x4e>
    5d1a:	88 23       	and	r24, r24
    5d1c:	09 f4       	brne	.+2      	; 0x5d20 <__vector_24+0x46>
    5d1e:	f5 c0       	rjmp	.+490    	; 0x5f0a <__vector_24+0x230>
    5d20:	88 30       	cpi	r24, 0x08	; 8
    5d22:	09 f4       	brne	.+2      	; 0x5d26 <__vector_24+0x4c>
    5d24:	4f c0       	rjmp	.+158    	; 0x5dc4 <__vector_24+0xea>
    5d26:	f5 c0       	rjmp	.+490    	; 0x5f12 <__vector_24+0x238>
    5d28:	88 31       	cpi	r24, 0x18	; 24
    5d2a:	09 f4       	brne	.+2      	; 0x5d2e <__vector_24+0x54>
    5d2c:	4e c0       	rjmp	.+156    	; 0x5dca <__vector_24+0xf0>
    5d2e:	80 32       	cpi	r24, 0x20	; 32
    5d30:	09 f4       	brne	.+2      	; 0x5d34 <__vector_24+0x5a>
    5d32:	5f c0       	rjmp	.+190    	; 0x5df2 <__vector_24+0x118>
    5d34:	ee c0       	rjmp	.+476    	; 0x5f12 <__vector_24+0x238>
    5d36:	80 34       	cpi	r24, 0x40	; 64
    5d38:	09 f4       	brne	.+2      	; 0x5d3c <__vector_24+0x62>
    5d3a:	6a c0       	rjmp	.+212    	; 0x5e10 <__vector_24+0x136>
    5d3c:	58 f4       	brcc	.+22     	; 0x5d54 <__vector_24+0x7a>
    5d3e:	80 33       	cpi	r24, 0x30	; 48
    5d40:	09 f4       	brne	.+2      	; 0x5d44 <__vector_24+0x6a>
    5d42:	57 c0       	rjmp	.+174    	; 0x5df2 <__vector_24+0x118>
    5d44:	88 33       	cpi	r24, 0x38	; 56
    5d46:	09 f0       	breq	.+2      	; 0x5d4a <__vector_24+0x70>
    5d48:	e4 c0       	rjmp	.+456    	; 0x5f12 <__vector_24+0x238>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    5d4a:	80 93 31 03 	sts	0x0331, r24	; 0x800331 <twi_error>
      twi_releaseBus();
    5d4e:	0e 94 29 2d 	call	0x5a52	; 0x5a52 <twi_releaseBus>
      break;
    5d52:	df c0       	rjmp	.+446    	; 0x5f12 <__vector_24+0x238>
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    5d54:	80 35       	cpi	r24, 0x50	; 80
    5d56:	09 f4       	brne	.+2      	; 0x5d5a <__vector_24+0x80>
    5d58:	4f c0       	rjmp	.+158    	; 0x5df8 <__vector_24+0x11e>
    5d5a:	88 35       	cpi	r24, 0x58	; 88
    5d5c:	09 f4       	brne	.+2      	; 0x5d60 <__vector_24+0x86>
    5d5e:	5d c0       	rjmp	.+186    	; 0x5e1a <__vector_24+0x140>
    5d60:	88 34       	cpi	r24, 0x48	; 72
    5d62:	09 f0       	breq	.+2      	; 0x5d66 <__vector_24+0x8c>
    5d64:	d6 c0       	rjmp	.+428    	; 0x5f12 <__vector_24+0x238>
    5d66:	d3 c0       	rjmp	.+422    	; 0x5f0e <__vector_24+0x234>
    5d68:	88 39       	cpi	r24, 0x98	; 152
    5d6a:	09 f4       	brne	.+2      	; 0x5d6e <__vector_24+0x94>
    5d6c:	c4 c0       	rjmp	.+392    	; 0x5ef6 <__vector_24+0x21c>
    5d6e:	a8 f4       	brcc	.+42     	; 0x5d9a <__vector_24+0xc0>
    5d70:	88 37       	cpi	r24, 0x78	; 120
    5d72:	09 f4       	brne	.+2      	; 0x5d76 <__vector_24+0x9c>
    5d74:	67 c0       	rjmp	.+206    	; 0x5e44 <__vector_24+0x16a>
    5d76:	38 f4       	brcc	.+14     	; 0x5d86 <__vector_24+0xac>
    5d78:	88 36       	cpi	r24, 0x68	; 104
    5d7a:	09 f4       	brne	.+2      	; 0x5d7e <__vector_24+0xa4>
    5d7c:	63 c0       	rjmp	.+198    	; 0x5e44 <__vector_24+0x16a>
    5d7e:	80 37       	cpi	r24, 0x70	; 112
    5d80:	09 f4       	brne	.+2      	; 0x5d84 <__vector_24+0xaa>
    5d82:	60 c0       	rjmp	.+192    	; 0x5e44 <__vector_24+0x16a>
    5d84:	c6 c0       	rjmp	.+396    	; 0x5f12 <__vector_24+0x238>
    5d86:	88 38       	cpi	r24, 0x88	; 136
    5d88:	09 f4       	brne	.+2      	; 0x5d8c <__vector_24+0xb2>
    5d8a:	b5 c0       	rjmp	.+362    	; 0x5ef6 <__vector_24+0x21c>
    5d8c:	80 39       	cpi	r24, 0x90	; 144
    5d8e:	09 f4       	brne	.+2      	; 0x5d92 <__vector_24+0xb8>
    5d90:	5f c0       	rjmp	.+190    	; 0x5e50 <__vector_24+0x176>
    5d92:	80 38       	cpi	r24, 0x80	; 128
    5d94:	09 f0       	breq	.+2      	; 0x5d98 <__vector_24+0xbe>
    5d96:	bd c0       	rjmp	.+378    	; 0x5f12 <__vector_24+0x238>
    5d98:	5b c0       	rjmp	.+182    	; 0x5e50 <__vector_24+0x176>
    5d9a:	80 3b       	cpi	r24, 0xB0	; 176
    5d9c:	09 f4       	brne	.+2      	; 0x5da0 <__vector_24+0xc6>
    5d9e:	83 c0       	rjmp	.+262    	; 0x5ea6 <__vector_24+0x1cc>
    5da0:	38 f4       	brcc	.+14     	; 0x5db0 <__vector_24+0xd6>
    5da2:	80 3a       	cpi	r24, 0xA0	; 160
    5da4:	09 f4       	brne	.+2      	; 0x5da8 <__vector_24+0xce>
    5da6:	66 c0       	rjmp	.+204    	; 0x5e74 <__vector_24+0x19a>
    5da8:	88 3a       	cpi	r24, 0xA8	; 168
    5daa:	09 f4       	brne	.+2      	; 0x5dae <__vector_24+0xd4>
    5dac:	7c c0       	rjmp	.+248    	; 0x5ea6 <__vector_24+0x1cc>
    5dae:	b1 c0       	rjmp	.+354    	; 0x5f12 <__vector_24+0x238>
    5db0:	80 3c       	cpi	r24, 0xC0	; 192
    5db2:	09 f4       	brne	.+2      	; 0x5db6 <__vector_24+0xdc>
    5db4:	a4 c0       	rjmp	.+328    	; 0x5efe <__vector_24+0x224>
    5db6:	88 3c       	cpi	r24, 0xC8	; 200
    5db8:	09 f4       	brne	.+2      	; 0x5dbc <__vector_24+0xe2>
    5dba:	a1 c0       	rjmp	.+322    	; 0x5efe <__vector_24+0x224>
    5dbc:	88 3b       	cpi	r24, 0xB8	; 184
    5dbe:	09 f4       	brne	.+2      	; 0x5dc2 <__vector_24+0xe8>
    5dc0:	87 c0       	rjmp	.+270    	; 0x5ed0 <__vector_24+0x1f6>
    5dc2:	a7 c0       	rjmp	.+334    	; 0x5f12 <__vector_24+0x238>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    5dc4:	80 91 a3 03 	lds	r24, 0x03A3	; 0x8003a3 <twi_slarw>
    5dc8:	10 c0       	rjmp	.+32     	; 0x5dea <__vector_24+0x110>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    5dca:	90 91 76 03 	lds	r25, 0x0376	; 0x800376 <twi_masterBufferIndex>
    5dce:	80 91 75 03 	lds	r24, 0x0375	; 0x800375 <twi_masterBufferLength>
    5dd2:	98 17       	cp	r25, r24
    5dd4:	70 f5       	brcc	.+92     	; 0x5e32 <__vector_24+0x158>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    5dd6:	e0 91 76 03 	lds	r30, 0x0376	; 0x800376 <twi_masterBufferIndex>
    5dda:	81 e0       	ldi	r24, 0x01	; 1
    5ddc:	8e 0f       	add	r24, r30
    5dde:	80 93 76 03 	sts	0x0376, r24	; 0x800376 <twi_masterBufferIndex>
    5de2:	f0 e0       	ldi	r31, 0x00	; 0
    5de4:	e9 58       	subi	r30, 0x89	; 137
    5de6:	fc 4f       	sbci	r31, 0xFC	; 252
    5de8:	80 81       	ld	r24, Z
    5dea:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    5dee:	85 ec       	ldi	r24, 0xC5	; 197
    5df0:	83 c0       	rjmp	.+262    	; 0x5ef8 <__vector_24+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    5df2:	80 93 31 03 	sts	0x0331, r24	; 0x800331 <twi_error>
    5df6:	8b c0       	rjmp	.+278    	; 0x5f0e <__vector_24+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    5df8:	e0 91 76 03 	lds	r30, 0x0376	; 0x800376 <twi_masterBufferIndex>
    5dfc:	81 e0       	ldi	r24, 0x01	; 1
    5dfe:	8e 0f       	add	r24, r30
    5e00:	80 93 76 03 	sts	0x0376, r24	; 0x800376 <twi_masterBufferIndex>
    5e04:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    5e08:	f0 e0       	ldi	r31, 0x00	; 0
    5e0a:	e9 58       	subi	r30, 0x89	; 137
    5e0c:	fc 4f       	sbci	r31, 0xFC	; 252
    5e0e:	80 83       	st	Z, r24
      __attribute__ ((fallthrough));
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    5e10:	90 91 76 03 	lds	r25, 0x0376	; 0x800376 <twi_masterBufferIndex>
    5e14:	80 91 75 03 	lds	r24, 0x0375	; 0x800375 <twi_masterBufferLength>
    5e18:	6b c0       	rjmp	.+214    	; 0x5ef0 <__vector_24+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    5e1a:	e0 91 76 03 	lds	r30, 0x0376	; 0x800376 <twi_masterBufferIndex>
    5e1e:	81 e0       	ldi	r24, 0x01	; 1
    5e20:	8e 0f       	add	r24, r30
    5e22:	80 93 76 03 	sts	0x0376, r24	; 0x800376 <twi_masterBufferIndex>
    5e26:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    5e2a:	f0 e0       	ldi	r31, 0x00	; 0
    5e2c:	e9 58       	subi	r30, 0x89	; 137
    5e2e:	fc 4f       	sbci	r31, 0xFC	; 252
    5e30:	80 83       	st	Z, r24
      if (twi_sendStop){
    5e32:	80 91 a2 03 	lds	r24, 0x03A2	; 0x8003a2 <twi_sendStop>
    5e36:	81 11       	cpse	r24, r1
    5e38:	6a c0       	rjmp	.+212    	; 0x5f0e <__vector_24+0x234>
        twi_stop();
      } else {
        twi_inRepStart = true;	// we're gonna send the START
    5e3a:	81 e0       	ldi	r24, 0x01	; 1
    5e3c:	80 93 a1 03 	sts	0x03A1, r24	; 0x8003a1 <twi_inRepStart>
        // don't enable the interrupt. We'll generate the start, but we
        // avoid handling the interrupt until we're in the next transaction,
        // at the point where we would normally issue the start.
        TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    5e40:	84 ea       	ldi	r24, 0xA4	; 164
    5e42:	5e c0       	rjmp	.+188    	; 0x5f00 <__vector_24+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    5e44:	83 e0       	ldi	r24, 0x03	; 3
    5e46:	80 93 a4 03 	sts	0x03A4, r24	; 0x8003a4 <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    5e4a:	10 92 32 03 	sts	0x0332, r1	; 0x800332 <twi_rxBufferIndex>
    5e4e:	cf cf       	rjmp	.-98     	; 0x5dee <__vector_24+0x114>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    5e50:	80 91 32 03 	lds	r24, 0x0332	; 0x800332 <twi_rxBufferIndex>
    5e54:	80 32       	cpi	r24, 0x20	; 32
    5e56:	08 f0       	brcs	.+2      	; 0x5e5a <__vector_24+0x180>
    5e58:	4e c0       	rjmp	.+156    	; 0x5ef6 <__vector_24+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    5e5a:	e0 91 32 03 	lds	r30, 0x0332	; 0x800332 <twi_rxBufferIndex>
    5e5e:	81 e0       	ldi	r24, 0x01	; 1
    5e60:	8e 0f       	add	r24, r30
    5e62:	80 93 32 03 	sts	0x0332, r24	; 0x800332 <twi_rxBufferIndex>
    5e66:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    5e6a:	f0 e0       	ldi	r31, 0x00	; 0
    5e6c:	ed 5c       	subi	r30, 0xCD	; 205
    5e6e:	fc 4f       	sbci	r31, 0xFC	; 252
    5e70:	80 83       	st	Z, r24
    5e72:	bd cf       	rjmp	.-134    	; 0x5dee <__vector_24+0x114>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    5e74:	0e 94 29 2d 	call	0x5a52	; 0x5a52 <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    5e78:	80 91 32 03 	lds	r24, 0x0332	; 0x800332 <twi_rxBufferIndex>
    5e7c:	80 32       	cpi	r24, 0x20	; 32
    5e7e:	30 f4       	brcc	.+12     	; 0x5e8c <__vector_24+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    5e80:	e0 91 32 03 	lds	r30, 0x0332	; 0x800332 <twi_rxBufferIndex>
    5e84:	f0 e0       	ldi	r31, 0x00	; 0
    5e86:	ed 5c       	subi	r30, 0xCD	; 205
    5e88:	fc 4f       	sbci	r31, 0xFC	; 252
    5e8a:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    5e8c:	60 91 32 03 	lds	r22, 0x0332	; 0x800332 <twi_rxBufferIndex>
    5e90:	70 e0       	ldi	r23, 0x00	; 0
    5e92:	e0 91 97 03 	lds	r30, 0x0397	; 0x800397 <twi_onSlaveReceive>
    5e96:	f0 91 98 03 	lds	r31, 0x0398	; 0x800398 <twi_onSlaveReceive+0x1>
    5e9a:	83 e3       	ldi	r24, 0x33	; 51
    5e9c:	93 e0       	ldi	r25, 0x03	; 3
    5e9e:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    5ea0:	10 92 32 03 	sts	0x0332, r1	; 0x800332 <twi_rxBufferIndex>
      break;
    5ea4:	36 c0       	rjmp	.+108    	; 0x5f12 <__vector_24+0x238>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    5ea6:	84 e0       	ldi	r24, 0x04	; 4
    5ea8:	80 93 a4 03 	sts	0x03A4, r24	; 0x8003a4 <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    5eac:	10 92 54 03 	sts	0x0354, r1	; 0x800354 <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    5eb0:	10 92 53 03 	sts	0x0353, r1	; 0x800353 <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    5eb4:	e0 91 99 03 	lds	r30, 0x0399	; 0x800399 <twi_onSlaveTransmit>
    5eb8:	f0 91 9a 03 	lds	r31, 0x039A	; 0x80039a <twi_onSlaveTransmit+0x1>
    5ebc:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    5ebe:	80 91 53 03 	lds	r24, 0x0353	; 0x800353 <twi_txBufferLength>
    5ec2:	81 11       	cpse	r24, r1
    5ec4:	05 c0       	rjmp	.+10     	; 0x5ed0 <__vector_24+0x1f6>
        twi_txBufferLength = 1;
    5ec6:	81 e0       	ldi	r24, 0x01	; 1
    5ec8:	80 93 53 03 	sts	0x0353, r24	; 0x800353 <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    5ecc:	10 92 55 03 	sts	0x0355, r1	; 0x800355 <twi_txBuffer>
      }
      __attribute__ ((fallthrough));		  
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    5ed0:	e0 91 54 03 	lds	r30, 0x0354	; 0x800354 <twi_txBufferIndex>
    5ed4:	81 e0       	ldi	r24, 0x01	; 1
    5ed6:	8e 0f       	add	r24, r30
    5ed8:	80 93 54 03 	sts	0x0354, r24	; 0x800354 <twi_txBufferIndex>
    5edc:	f0 e0       	ldi	r31, 0x00	; 0
    5ede:	eb 5a       	subi	r30, 0xAB	; 171
    5ee0:	fc 4f       	sbci	r31, 0xFC	; 252
    5ee2:	80 81       	ld	r24, Z
    5ee4:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    5ee8:	90 91 54 03 	lds	r25, 0x0354	; 0x800354 <twi_txBufferIndex>
    5eec:	80 91 53 03 	lds	r24, 0x0353	; 0x800353 <twi_txBufferLength>
    5ef0:	98 17       	cp	r25, r24
    5ef2:	08 f4       	brcc	.+2      	; 0x5ef6 <__vector_24+0x21c>
    5ef4:	7c cf       	rjmp	.-264    	; 0x5dee <__vector_24+0x114>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    5ef6:	85 e8       	ldi	r24, 0x85	; 133
    5ef8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    5efc:	0a c0       	rjmp	.+20     	; 0x5f12 <__vector_24+0x238>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    5efe:	85 ec       	ldi	r24, 0xC5	; 197
    5f00:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    5f04:	10 92 a4 03 	sts	0x03A4, r1	; 0x8003a4 <twi_state>
      break;
    5f08:	04 c0       	rjmp	.+8      	; 0x5f12 <__vector_24+0x238>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    5f0a:	10 92 31 03 	sts	0x0331, r1	; 0x800331 <twi_error>
      twi_stop();
    5f0e:	0e 94 35 2e 	call	0x5c6a	; 0x5c6a <twi_stop>
      break;
  }
}
    5f12:	ff 91       	pop	r31
    5f14:	ef 91       	pop	r30
    5f16:	bf 91       	pop	r27
    5f18:	af 91       	pop	r26
    5f1a:	9f 91       	pop	r25
    5f1c:	8f 91       	pop	r24
    5f1e:	7f 91       	pop	r23
    5f20:	6f 91       	pop	r22
    5f22:	5f 91       	pop	r21
    5f24:	4f 91       	pop	r20
    5f26:	3f 91       	pop	r19
    5f28:	2f 91       	pop	r18
    5f2a:	0f 90       	pop	r0
    5f2c:	0f be       	out	0x3f, r0	; 63
    5f2e:	0f 90       	pop	r0
    5f30:	1f 90       	pop	r1
    5f32:	18 95       	reti

00005f34 <__mulsi3>:
    5f34:	db 01       	movw	r26, r22
    5f36:	8f 93       	push	r24
    5f38:	9f 93       	push	r25
    5f3a:	0e 94 1d 30 	call	0x603a	; 0x603a <__muluhisi3>
    5f3e:	bf 91       	pop	r27
    5f40:	af 91       	pop	r26
    5f42:	a2 9f       	mul	r26, r18
    5f44:	80 0d       	add	r24, r0
    5f46:	91 1d       	adc	r25, r1
    5f48:	a3 9f       	mul	r26, r19
    5f4a:	90 0d       	add	r25, r0
    5f4c:	b2 9f       	mul	r27, r18
    5f4e:	90 0d       	add	r25, r0
    5f50:	11 24       	eor	r1, r1
    5f52:	08 95       	ret

00005f54 <__divmodhi4>:
    5f54:	97 fb       	bst	r25, 7
    5f56:	07 2e       	mov	r0, r23
    5f58:	16 f4       	brtc	.+4      	; 0x5f5e <__divmodhi4+0xa>
    5f5a:	00 94       	com	r0
    5f5c:	07 d0       	rcall	.+14     	; 0x5f6c <__divmodhi4_neg1>
    5f5e:	77 fd       	sbrc	r23, 7
    5f60:	09 d0       	rcall	.+18     	; 0x5f74 <__divmodhi4_neg2>
    5f62:	0e 94 28 30 	call	0x6050	; 0x6050 <__udivmodhi4>
    5f66:	07 fc       	sbrc	r0, 7
    5f68:	05 d0       	rcall	.+10     	; 0x5f74 <__divmodhi4_neg2>
    5f6a:	3e f4       	brtc	.+14     	; 0x5f7a <__divmodhi4_exit>

00005f6c <__divmodhi4_neg1>:
    5f6c:	90 95       	com	r25
    5f6e:	81 95       	neg	r24
    5f70:	9f 4f       	sbci	r25, 0xFF	; 255
    5f72:	08 95       	ret

00005f74 <__divmodhi4_neg2>:
    5f74:	70 95       	com	r23
    5f76:	61 95       	neg	r22
    5f78:	7f 4f       	sbci	r23, 0xFF	; 255

00005f7a <__divmodhi4_exit>:
    5f7a:	08 95       	ret

00005f7c <__udivmodsi4>:
    5f7c:	a1 e2       	ldi	r26, 0x21	; 33
    5f7e:	1a 2e       	mov	r1, r26
    5f80:	aa 1b       	sub	r26, r26
    5f82:	bb 1b       	sub	r27, r27
    5f84:	fd 01       	movw	r30, r26
    5f86:	0d c0       	rjmp	.+26     	; 0x5fa2 <__udivmodsi4_ep>

00005f88 <__udivmodsi4_loop>:
    5f88:	aa 1f       	adc	r26, r26
    5f8a:	bb 1f       	adc	r27, r27
    5f8c:	ee 1f       	adc	r30, r30
    5f8e:	ff 1f       	adc	r31, r31
    5f90:	a2 17       	cp	r26, r18
    5f92:	b3 07       	cpc	r27, r19
    5f94:	e4 07       	cpc	r30, r20
    5f96:	f5 07       	cpc	r31, r21
    5f98:	20 f0       	brcs	.+8      	; 0x5fa2 <__udivmodsi4_ep>
    5f9a:	a2 1b       	sub	r26, r18
    5f9c:	b3 0b       	sbc	r27, r19
    5f9e:	e4 0b       	sbc	r30, r20
    5fa0:	f5 0b       	sbc	r31, r21

00005fa2 <__udivmodsi4_ep>:
    5fa2:	66 1f       	adc	r22, r22
    5fa4:	77 1f       	adc	r23, r23
    5fa6:	88 1f       	adc	r24, r24
    5fa8:	99 1f       	adc	r25, r25
    5faa:	1a 94       	dec	r1
    5fac:	69 f7       	brne	.-38     	; 0x5f88 <__udivmodsi4_loop>
    5fae:	60 95       	com	r22
    5fb0:	70 95       	com	r23
    5fb2:	80 95       	com	r24
    5fb4:	90 95       	com	r25
    5fb6:	9b 01       	movw	r18, r22
    5fb8:	ac 01       	movw	r20, r24
    5fba:	bd 01       	movw	r22, r26
    5fbc:	cf 01       	movw	r24, r30
    5fbe:	08 95       	ret

00005fc0 <__divmodsi4>:
    5fc0:	05 2e       	mov	r0, r21
    5fc2:	97 fb       	bst	r25, 7
    5fc4:	1e f4       	brtc	.+6      	; 0x5fcc <__divmodsi4+0xc>
    5fc6:	00 94       	com	r0
    5fc8:	0e 94 f7 2f 	call	0x5fee	; 0x5fee <__negsi2>
    5fcc:	57 fd       	sbrc	r21, 7
    5fce:	07 d0       	rcall	.+14     	; 0x5fde <__divmodsi4_neg2>
    5fd0:	0e 94 be 2f 	call	0x5f7c	; 0x5f7c <__udivmodsi4>
    5fd4:	07 fc       	sbrc	r0, 7
    5fd6:	03 d0       	rcall	.+6      	; 0x5fde <__divmodsi4_neg2>
    5fd8:	4e f4       	brtc	.+18     	; 0x5fec <__divmodsi4_exit>
    5fda:	0c 94 f7 2f 	jmp	0x5fee	; 0x5fee <__negsi2>

00005fde <__divmodsi4_neg2>:
    5fde:	50 95       	com	r21
    5fe0:	40 95       	com	r20
    5fe2:	30 95       	com	r19
    5fe4:	21 95       	neg	r18
    5fe6:	3f 4f       	sbci	r19, 0xFF	; 255
    5fe8:	4f 4f       	sbci	r20, 0xFF	; 255
    5fea:	5f 4f       	sbci	r21, 0xFF	; 255

00005fec <__divmodsi4_exit>:
    5fec:	08 95       	ret

00005fee <__negsi2>:
    5fee:	90 95       	com	r25
    5ff0:	80 95       	com	r24
    5ff2:	70 95       	com	r23
    5ff4:	61 95       	neg	r22
    5ff6:	7f 4f       	sbci	r23, 0xFF	; 255
    5ff8:	8f 4f       	sbci	r24, 0xFF	; 255
    5ffa:	9f 4f       	sbci	r25, 0xFF	; 255
    5ffc:	08 95       	ret

00005ffe <__mulhisi3>:
    5ffe:	0e 94 07 30 	call	0x600e	; 0x600e <__umulhisi3>
    6002:	33 23       	and	r19, r19
    6004:	12 f4       	brpl	.+4      	; 0x600a <__mulhisi3+0xc>
    6006:	8a 1b       	sub	r24, r26
    6008:	9b 0b       	sbc	r25, r27
    600a:	0c 94 18 30 	jmp	0x6030	; 0x6030 <__usmulhisi3_tail>

0000600e <__umulhisi3>:
    600e:	a2 9f       	mul	r26, r18
    6010:	b0 01       	movw	r22, r0
    6012:	b3 9f       	mul	r27, r19
    6014:	c0 01       	movw	r24, r0
    6016:	a3 9f       	mul	r26, r19
    6018:	70 0d       	add	r23, r0
    601a:	81 1d       	adc	r24, r1
    601c:	11 24       	eor	r1, r1
    601e:	91 1d       	adc	r25, r1
    6020:	b2 9f       	mul	r27, r18
    6022:	70 0d       	add	r23, r0
    6024:	81 1d       	adc	r24, r1
    6026:	11 24       	eor	r1, r1
    6028:	91 1d       	adc	r25, r1
    602a:	08 95       	ret

0000602c <__usmulhisi3>:
    602c:	0e 94 07 30 	call	0x600e	; 0x600e <__umulhisi3>

00006030 <__usmulhisi3_tail>:
    6030:	b7 ff       	sbrs	r27, 7
    6032:	08 95       	ret
    6034:	82 1b       	sub	r24, r18
    6036:	93 0b       	sbc	r25, r19
    6038:	08 95       	ret

0000603a <__muluhisi3>:
    603a:	0e 94 07 30 	call	0x600e	; 0x600e <__umulhisi3>
    603e:	a5 9f       	mul	r26, r21
    6040:	90 0d       	add	r25, r0
    6042:	b4 9f       	mul	r27, r20
    6044:	90 0d       	add	r25, r0
    6046:	a4 9f       	mul	r26, r20
    6048:	80 0d       	add	r24, r0
    604a:	91 1d       	adc	r25, r1
    604c:	11 24       	eor	r1, r1
    604e:	08 95       	ret

00006050 <__udivmodhi4>:
    6050:	aa 1b       	sub	r26, r26
    6052:	bb 1b       	sub	r27, r27
    6054:	51 e1       	ldi	r21, 0x11	; 17
    6056:	07 c0       	rjmp	.+14     	; 0x6066 <__udivmodhi4_ep>

00006058 <__udivmodhi4_loop>:
    6058:	aa 1f       	adc	r26, r26
    605a:	bb 1f       	adc	r27, r27
    605c:	a6 17       	cp	r26, r22
    605e:	b7 07       	cpc	r27, r23
    6060:	10 f0       	brcs	.+4      	; 0x6066 <__udivmodhi4_ep>
    6062:	a6 1b       	sub	r26, r22
    6064:	b7 0b       	sbc	r27, r23

00006066 <__udivmodhi4_ep>:
    6066:	88 1f       	adc	r24, r24
    6068:	99 1f       	adc	r25, r25
    606a:	5a 95       	dec	r21
    606c:	a9 f7       	brne	.-22     	; 0x6058 <__udivmodhi4_loop>
    606e:	80 95       	com	r24
    6070:	90 95       	com	r25
    6072:	bc 01       	movw	r22, r24
    6074:	cd 01       	movw	r24, r26
    6076:	08 95       	ret

00006078 <__tablejump2__>:
    6078:	ee 0f       	add	r30, r30
    607a:	ff 1f       	adc	r31, r31
    607c:	05 90       	lpm	r0, Z+
    607e:	f4 91       	lpm	r31, Z
    6080:	e0 2d       	mov	r30, r0
    6082:	09 94       	ijmp

00006084 <malloc>:
    6084:	0f 93       	push	r16
    6086:	1f 93       	push	r17
    6088:	cf 93       	push	r28
    608a:	df 93       	push	r29
    608c:	82 30       	cpi	r24, 0x02	; 2
    608e:	91 05       	cpc	r25, r1
    6090:	10 f4       	brcc	.+4      	; 0x6096 <malloc+0x12>
    6092:	82 e0       	ldi	r24, 0x02	; 2
    6094:	90 e0       	ldi	r25, 0x00	; 0
    6096:	e0 91 a7 03 	lds	r30, 0x03A7	; 0x8003a7 <__flp>
    609a:	f0 91 a8 03 	lds	r31, 0x03A8	; 0x8003a8 <__flp+0x1>
    609e:	20 e0       	ldi	r18, 0x00	; 0
    60a0:	30 e0       	ldi	r19, 0x00	; 0
    60a2:	a0 e0       	ldi	r26, 0x00	; 0
    60a4:	b0 e0       	ldi	r27, 0x00	; 0
    60a6:	30 97       	sbiw	r30, 0x00	; 0
    60a8:	19 f1       	breq	.+70     	; 0x60f0 <malloc+0x6c>
    60aa:	40 81       	ld	r20, Z
    60ac:	51 81       	ldd	r21, Z+1	; 0x01
    60ae:	02 81       	ldd	r16, Z+2	; 0x02
    60b0:	13 81       	ldd	r17, Z+3	; 0x03
    60b2:	48 17       	cp	r20, r24
    60b4:	59 07       	cpc	r21, r25
    60b6:	c8 f0       	brcs	.+50     	; 0x60ea <malloc+0x66>
    60b8:	84 17       	cp	r24, r20
    60ba:	95 07       	cpc	r25, r21
    60bc:	69 f4       	brne	.+26     	; 0x60d8 <malloc+0x54>
    60be:	10 97       	sbiw	r26, 0x00	; 0
    60c0:	31 f0       	breq	.+12     	; 0x60ce <malloc+0x4a>
    60c2:	12 96       	adiw	r26, 0x02	; 2
    60c4:	0c 93       	st	X, r16
    60c6:	12 97       	sbiw	r26, 0x02	; 2
    60c8:	13 96       	adiw	r26, 0x03	; 3
    60ca:	1c 93       	st	X, r17
    60cc:	27 c0       	rjmp	.+78     	; 0x611c <malloc+0x98>
    60ce:	00 93 a7 03 	sts	0x03A7, r16	; 0x8003a7 <__flp>
    60d2:	10 93 a8 03 	sts	0x03A8, r17	; 0x8003a8 <__flp+0x1>
    60d6:	22 c0       	rjmp	.+68     	; 0x611c <malloc+0x98>
    60d8:	21 15       	cp	r18, r1
    60da:	31 05       	cpc	r19, r1
    60dc:	19 f0       	breq	.+6      	; 0x60e4 <malloc+0x60>
    60de:	42 17       	cp	r20, r18
    60e0:	53 07       	cpc	r21, r19
    60e2:	18 f4       	brcc	.+6      	; 0x60ea <malloc+0x66>
    60e4:	9a 01       	movw	r18, r20
    60e6:	bd 01       	movw	r22, r26
    60e8:	ef 01       	movw	r28, r30
    60ea:	df 01       	movw	r26, r30
    60ec:	f8 01       	movw	r30, r16
    60ee:	db cf       	rjmp	.-74     	; 0x60a6 <malloc+0x22>
    60f0:	21 15       	cp	r18, r1
    60f2:	31 05       	cpc	r19, r1
    60f4:	f9 f0       	breq	.+62     	; 0x6134 <malloc+0xb0>
    60f6:	28 1b       	sub	r18, r24
    60f8:	39 0b       	sbc	r19, r25
    60fa:	24 30       	cpi	r18, 0x04	; 4
    60fc:	31 05       	cpc	r19, r1
    60fe:	80 f4       	brcc	.+32     	; 0x6120 <malloc+0x9c>
    6100:	8a 81       	ldd	r24, Y+2	; 0x02
    6102:	9b 81       	ldd	r25, Y+3	; 0x03
    6104:	61 15       	cp	r22, r1
    6106:	71 05       	cpc	r23, r1
    6108:	21 f0       	breq	.+8      	; 0x6112 <malloc+0x8e>
    610a:	fb 01       	movw	r30, r22
    610c:	93 83       	std	Z+3, r25	; 0x03
    610e:	82 83       	std	Z+2, r24	; 0x02
    6110:	04 c0       	rjmp	.+8      	; 0x611a <malloc+0x96>
    6112:	90 93 a8 03 	sts	0x03A8, r25	; 0x8003a8 <__flp+0x1>
    6116:	80 93 a7 03 	sts	0x03A7, r24	; 0x8003a7 <__flp>
    611a:	fe 01       	movw	r30, r28
    611c:	32 96       	adiw	r30, 0x02	; 2
    611e:	44 c0       	rjmp	.+136    	; 0x61a8 <malloc+0x124>
    6120:	fe 01       	movw	r30, r28
    6122:	e2 0f       	add	r30, r18
    6124:	f3 1f       	adc	r31, r19
    6126:	81 93       	st	Z+, r24
    6128:	91 93       	st	Z+, r25
    612a:	22 50       	subi	r18, 0x02	; 2
    612c:	31 09       	sbc	r19, r1
    612e:	39 83       	std	Y+1, r19	; 0x01
    6130:	28 83       	st	Y, r18
    6132:	3a c0       	rjmp	.+116    	; 0x61a8 <malloc+0x124>
    6134:	20 91 a5 03 	lds	r18, 0x03A5	; 0x8003a5 <__brkval>
    6138:	30 91 a6 03 	lds	r19, 0x03A6	; 0x8003a6 <__brkval+0x1>
    613c:	23 2b       	or	r18, r19
    613e:	41 f4       	brne	.+16     	; 0x6150 <malloc+0xcc>
    6140:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    6144:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    6148:	30 93 a6 03 	sts	0x03A6, r19	; 0x8003a6 <__brkval+0x1>
    614c:	20 93 a5 03 	sts	0x03A5, r18	; 0x8003a5 <__brkval>
    6150:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    6154:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    6158:	21 15       	cp	r18, r1
    615a:	31 05       	cpc	r19, r1
    615c:	41 f4       	brne	.+16     	; 0x616e <malloc+0xea>
    615e:	2d b7       	in	r18, 0x3d	; 61
    6160:	3e b7       	in	r19, 0x3e	; 62
    6162:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    6166:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    616a:	24 1b       	sub	r18, r20
    616c:	35 0b       	sbc	r19, r21
    616e:	e0 91 a5 03 	lds	r30, 0x03A5	; 0x8003a5 <__brkval>
    6172:	f0 91 a6 03 	lds	r31, 0x03A6	; 0x8003a6 <__brkval+0x1>
    6176:	e2 17       	cp	r30, r18
    6178:	f3 07       	cpc	r31, r19
    617a:	a0 f4       	brcc	.+40     	; 0x61a4 <malloc+0x120>
    617c:	2e 1b       	sub	r18, r30
    617e:	3f 0b       	sbc	r19, r31
    6180:	28 17       	cp	r18, r24
    6182:	39 07       	cpc	r19, r25
    6184:	78 f0       	brcs	.+30     	; 0x61a4 <malloc+0x120>
    6186:	ac 01       	movw	r20, r24
    6188:	4e 5f       	subi	r20, 0xFE	; 254
    618a:	5f 4f       	sbci	r21, 0xFF	; 255
    618c:	24 17       	cp	r18, r20
    618e:	35 07       	cpc	r19, r21
    6190:	48 f0       	brcs	.+18     	; 0x61a4 <malloc+0x120>
    6192:	4e 0f       	add	r20, r30
    6194:	5f 1f       	adc	r21, r31
    6196:	50 93 a6 03 	sts	0x03A6, r21	; 0x8003a6 <__brkval+0x1>
    619a:	40 93 a5 03 	sts	0x03A5, r20	; 0x8003a5 <__brkval>
    619e:	81 93       	st	Z+, r24
    61a0:	91 93       	st	Z+, r25
    61a2:	02 c0       	rjmp	.+4      	; 0x61a8 <malloc+0x124>
    61a4:	e0 e0       	ldi	r30, 0x00	; 0
    61a6:	f0 e0       	ldi	r31, 0x00	; 0
    61a8:	cf 01       	movw	r24, r30
    61aa:	df 91       	pop	r29
    61ac:	cf 91       	pop	r28
    61ae:	1f 91       	pop	r17
    61b0:	0f 91       	pop	r16
    61b2:	08 95       	ret

000061b4 <free>:
    61b4:	cf 93       	push	r28
    61b6:	df 93       	push	r29
    61b8:	00 97       	sbiw	r24, 0x00	; 0
    61ba:	09 f4       	brne	.+2      	; 0x61be <free+0xa>
    61bc:	81 c0       	rjmp	.+258    	; 0x62c0 <free+0x10c>
    61be:	fc 01       	movw	r30, r24
    61c0:	32 97       	sbiw	r30, 0x02	; 2
    61c2:	13 82       	std	Z+3, r1	; 0x03
    61c4:	12 82       	std	Z+2, r1	; 0x02
    61c6:	a0 91 a7 03 	lds	r26, 0x03A7	; 0x8003a7 <__flp>
    61ca:	b0 91 a8 03 	lds	r27, 0x03A8	; 0x8003a8 <__flp+0x1>
    61ce:	10 97       	sbiw	r26, 0x00	; 0
    61d0:	81 f4       	brne	.+32     	; 0x61f2 <free+0x3e>
    61d2:	20 81       	ld	r18, Z
    61d4:	31 81       	ldd	r19, Z+1	; 0x01
    61d6:	82 0f       	add	r24, r18
    61d8:	93 1f       	adc	r25, r19
    61da:	20 91 a5 03 	lds	r18, 0x03A5	; 0x8003a5 <__brkval>
    61de:	30 91 a6 03 	lds	r19, 0x03A6	; 0x8003a6 <__brkval+0x1>
    61e2:	28 17       	cp	r18, r24
    61e4:	39 07       	cpc	r19, r25
    61e6:	51 f5       	brne	.+84     	; 0x623c <free+0x88>
    61e8:	f0 93 a6 03 	sts	0x03A6, r31	; 0x8003a6 <__brkval+0x1>
    61ec:	e0 93 a5 03 	sts	0x03A5, r30	; 0x8003a5 <__brkval>
    61f0:	67 c0       	rjmp	.+206    	; 0x62c0 <free+0x10c>
    61f2:	ed 01       	movw	r28, r26
    61f4:	20 e0       	ldi	r18, 0x00	; 0
    61f6:	30 e0       	ldi	r19, 0x00	; 0
    61f8:	ce 17       	cp	r28, r30
    61fa:	df 07       	cpc	r29, r31
    61fc:	40 f4       	brcc	.+16     	; 0x620e <free+0x5a>
    61fe:	4a 81       	ldd	r20, Y+2	; 0x02
    6200:	5b 81       	ldd	r21, Y+3	; 0x03
    6202:	9e 01       	movw	r18, r28
    6204:	41 15       	cp	r20, r1
    6206:	51 05       	cpc	r21, r1
    6208:	f1 f0       	breq	.+60     	; 0x6246 <free+0x92>
    620a:	ea 01       	movw	r28, r20
    620c:	f5 cf       	rjmp	.-22     	; 0x61f8 <free+0x44>
    620e:	d3 83       	std	Z+3, r29	; 0x03
    6210:	c2 83       	std	Z+2, r28	; 0x02
    6212:	40 81       	ld	r20, Z
    6214:	51 81       	ldd	r21, Z+1	; 0x01
    6216:	84 0f       	add	r24, r20
    6218:	95 1f       	adc	r25, r21
    621a:	c8 17       	cp	r28, r24
    621c:	d9 07       	cpc	r29, r25
    621e:	59 f4       	brne	.+22     	; 0x6236 <free+0x82>
    6220:	88 81       	ld	r24, Y
    6222:	99 81       	ldd	r25, Y+1	; 0x01
    6224:	84 0f       	add	r24, r20
    6226:	95 1f       	adc	r25, r21
    6228:	02 96       	adiw	r24, 0x02	; 2
    622a:	91 83       	std	Z+1, r25	; 0x01
    622c:	80 83       	st	Z, r24
    622e:	8a 81       	ldd	r24, Y+2	; 0x02
    6230:	9b 81       	ldd	r25, Y+3	; 0x03
    6232:	93 83       	std	Z+3, r25	; 0x03
    6234:	82 83       	std	Z+2, r24	; 0x02
    6236:	21 15       	cp	r18, r1
    6238:	31 05       	cpc	r19, r1
    623a:	29 f4       	brne	.+10     	; 0x6246 <free+0x92>
    623c:	f0 93 a8 03 	sts	0x03A8, r31	; 0x8003a8 <__flp+0x1>
    6240:	e0 93 a7 03 	sts	0x03A7, r30	; 0x8003a7 <__flp>
    6244:	3d c0       	rjmp	.+122    	; 0x62c0 <free+0x10c>
    6246:	e9 01       	movw	r28, r18
    6248:	fb 83       	std	Y+3, r31	; 0x03
    624a:	ea 83       	std	Y+2, r30	; 0x02
    624c:	49 91       	ld	r20, Y+
    624e:	59 91       	ld	r21, Y+
    6250:	c4 0f       	add	r28, r20
    6252:	d5 1f       	adc	r29, r21
    6254:	ec 17       	cp	r30, r28
    6256:	fd 07       	cpc	r31, r29
    6258:	61 f4       	brne	.+24     	; 0x6272 <free+0xbe>
    625a:	80 81       	ld	r24, Z
    625c:	91 81       	ldd	r25, Z+1	; 0x01
    625e:	84 0f       	add	r24, r20
    6260:	95 1f       	adc	r25, r21
    6262:	02 96       	adiw	r24, 0x02	; 2
    6264:	e9 01       	movw	r28, r18
    6266:	99 83       	std	Y+1, r25	; 0x01
    6268:	88 83       	st	Y, r24
    626a:	82 81       	ldd	r24, Z+2	; 0x02
    626c:	93 81       	ldd	r25, Z+3	; 0x03
    626e:	9b 83       	std	Y+3, r25	; 0x03
    6270:	8a 83       	std	Y+2, r24	; 0x02
    6272:	e0 e0       	ldi	r30, 0x00	; 0
    6274:	f0 e0       	ldi	r31, 0x00	; 0
    6276:	12 96       	adiw	r26, 0x02	; 2
    6278:	8d 91       	ld	r24, X+
    627a:	9c 91       	ld	r25, X
    627c:	13 97       	sbiw	r26, 0x03	; 3
    627e:	00 97       	sbiw	r24, 0x00	; 0
    6280:	19 f0       	breq	.+6      	; 0x6288 <free+0xd4>
    6282:	fd 01       	movw	r30, r26
    6284:	dc 01       	movw	r26, r24
    6286:	f7 cf       	rjmp	.-18     	; 0x6276 <free+0xc2>
    6288:	8d 91       	ld	r24, X+
    628a:	9c 91       	ld	r25, X
    628c:	11 97       	sbiw	r26, 0x01	; 1
    628e:	9d 01       	movw	r18, r26
    6290:	2e 5f       	subi	r18, 0xFE	; 254
    6292:	3f 4f       	sbci	r19, 0xFF	; 255
    6294:	82 0f       	add	r24, r18
    6296:	93 1f       	adc	r25, r19
    6298:	20 91 a5 03 	lds	r18, 0x03A5	; 0x8003a5 <__brkval>
    629c:	30 91 a6 03 	lds	r19, 0x03A6	; 0x8003a6 <__brkval+0x1>
    62a0:	28 17       	cp	r18, r24
    62a2:	39 07       	cpc	r19, r25
    62a4:	69 f4       	brne	.+26     	; 0x62c0 <free+0x10c>
    62a6:	30 97       	sbiw	r30, 0x00	; 0
    62a8:	29 f4       	brne	.+10     	; 0x62b4 <free+0x100>
    62aa:	10 92 a8 03 	sts	0x03A8, r1	; 0x8003a8 <__flp+0x1>
    62ae:	10 92 a7 03 	sts	0x03A7, r1	; 0x8003a7 <__flp>
    62b2:	02 c0       	rjmp	.+4      	; 0x62b8 <free+0x104>
    62b4:	13 82       	std	Z+3, r1	; 0x03
    62b6:	12 82       	std	Z+2, r1	; 0x02
    62b8:	b0 93 a6 03 	sts	0x03A6, r27	; 0x8003a6 <__brkval+0x1>
    62bc:	a0 93 a5 03 	sts	0x03A5, r26	; 0x8003a5 <__brkval>
    62c0:	df 91       	pop	r29
    62c2:	cf 91       	pop	r28
    62c4:	08 95       	ret

000062c6 <abort>:
    62c6:	81 e0       	ldi	r24, 0x01	; 1
    62c8:	90 e0       	ldi	r25, 0x00	; 0
    62ca:	f8 94       	cli
    62cc:	0c 94 8e 31 	jmp	0x631c	; 0x631c <__do_global_dtors>

000062d0 <memcpy_P>:
    62d0:	fb 01       	movw	r30, r22
    62d2:	dc 01       	movw	r26, r24
    62d4:	02 c0       	rjmp	.+4      	; 0x62da <memcpy_P+0xa>
    62d6:	05 90       	lpm	r0, Z+
    62d8:	0d 92       	st	X+, r0
    62da:	41 50       	subi	r20, 0x01	; 1
    62dc:	50 40       	sbci	r21, 0x00	; 0
    62de:	d8 f7       	brcc	.-10     	; 0x62d6 <memcpy_P+0x6>
    62e0:	08 95       	ret

000062e2 <memset>:
    62e2:	dc 01       	movw	r26, r24
    62e4:	01 c0       	rjmp	.+2      	; 0x62e8 <memset+0x6>
    62e6:	6d 93       	st	X+, r22
    62e8:	41 50       	subi	r20, 0x01	; 1
    62ea:	50 40       	sbci	r21, 0x00	; 0
    62ec:	e0 f7       	brcc	.-8      	; 0x62e6 <memset+0x4>
    62ee:	08 95       	ret

000062f0 <eeprom_read_byte>:
    62f0:	f9 99       	sbic	0x1f, 1	; 31
    62f2:	fe cf       	rjmp	.-4      	; 0x62f0 <eeprom_read_byte>
    62f4:	92 bd       	out	0x22, r25	; 34
    62f6:	81 bd       	out	0x21, r24	; 33
    62f8:	f8 9a       	sbi	0x1f, 0	; 31
    62fa:	99 27       	eor	r25, r25
    62fc:	80 b5       	in	r24, 0x20	; 32
    62fe:	08 95       	ret

00006300 <eeprom_write_byte>:
    6300:	26 2f       	mov	r18, r22

00006302 <eeprom_write_r18>:
    6302:	f9 99       	sbic	0x1f, 1	; 31
    6304:	fe cf       	rjmp	.-4      	; 0x6302 <eeprom_write_r18>
    6306:	1f ba       	out	0x1f, r1	; 31
    6308:	92 bd       	out	0x22, r25	; 34
    630a:	81 bd       	out	0x21, r24	; 33
    630c:	20 bd       	out	0x20, r18	; 32
    630e:	0f b6       	in	r0, 0x3f	; 63
    6310:	f8 94       	cli
    6312:	fa 9a       	sbi	0x1f, 2	; 31
    6314:	f9 9a       	sbi	0x1f, 1	; 31
    6316:	0f be       	out	0x3f, r0	; 63
    6318:	01 96       	adiw	r24, 0x01	; 1
    631a:	08 95       	ret

0000631c <__do_global_dtors>:
    631c:	19 e0       	ldi	r17, 0x09	; 9
    631e:	c6 e6       	ldi	r28, 0x66	; 102
    6320:	d9 e0       	ldi	r29, 0x09	; 9
    6322:	04 c0       	rjmp	.+8      	; 0x632c <__do_global_dtors+0x10>
    6324:	fe 01       	movw	r30, r28
    6326:	0e 94 3c 30 	call	0x6078	; 0x6078 <__tablejump2__>
    632a:	21 96       	adiw	r28, 0x01	; 1
    632c:	c7 36       	cpi	r28, 0x67	; 103
    632e:	d1 07       	cpc	r29, r17
    6330:	c9 f7       	brne	.-14     	; 0x6324 <__do_global_dtors+0x8>
    6332:	f8 94       	cli

00006334 <__stop_program>:
    6334:	ff cf       	rjmp	.-2      	; 0x6334 <__stop_program>
