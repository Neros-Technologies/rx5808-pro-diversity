
rx5808-pro-diversity.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000d2  00800100  0000670a  0000679e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000670a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001ff  008001d2  008001d2  00006870  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00006870  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000068a0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000e50  00000000  00000000  000068e0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00020a50  00000000  00000000  00007730  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00006bb4  00000000  00000000  00028180  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000a21d  00000000  00000000  0002ed34  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00003350  00000000  00000000  00038f54  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00006d00  00000000  00000000  0003c2a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00017372  00000000  00000000  00042fa4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000fa0  00000000  00000000  0005a316  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 6b 09 	jmp	0x12d6	; 0x12d6 <__dtors_end>
       4:	0c 94 93 09 	jmp	0x1326	; 0x1326 <__bad_interrupt>
       8:	0c 94 93 09 	jmp	0x1326	; 0x1326 <__bad_interrupt>
       c:	0c 94 93 09 	jmp	0x1326	; 0x1326 <__bad_interrupt>
      10:	0c 94 93 09 	jmp	0x1326	; 0x1326 <__bad_interrupt>
      14:	0c 94 93 09 	jmp	0x1326	; 0x1326 <__bad_interrupt>
      18:	0c 94 93 09 	jmp	0x1326	; 0x1326 <__bad_interrupt>
      1c:	0c 94 93 09 	jmp	0x1326	; 0x1326 <__bad_interrupt>
      20:	0c 94 93 09 	jmp	0x1326	; 0x1326 <__bad_interrupt>
      24:	0c 94 93 09 	jmp	0x1326	; 0x1326 <__bad_interrupt>
      28:	0c 94 93 09 	jmp	0x1326	; 0x1326 <__bad_interrupt>
      2c:	0c 94 93 09 	jmp	0x1326	; 0x1326 <__bad_interrupt>
      30:	0c 94 93 09 	jmp	0x1326	; 0x1326 <__bad_interrupt>
      34:	0c 94 93 09 	jmp	0x1326	; 0x1326 <__bad_interrupt>
      38:	0c 94 93 09 	jmp	0x1326	; 0x1326 <__bad_interrupt>
      3c:	0c 94 93 09 	jmp	0x1326	; 0x1326 <__bad_interrupt>
      40:	0c 94 11 1a 	jmp	0x3422	; 0x3422 <__vector_16>
      44:	0c 94 93 09 	jmp	0x1326	; 0x1326 <__bad_interrupt>
      48:	0c 94 93 09 	jmp	0x1326	; 0x1326 <__bad_interrupt>
      4c:	0c 94 93 09 	jmp	0x1326	; 0x1326 <__bad_interrupt>
      50:	0c 94 93 09 	jmp	0x1326	; 0x1326 <__bad_interrupt>
      54:	0c 94 93 09 	jmp	0x1326	; 0x1326 <__bad_interrupt>
      58:	0c 94 93 09 	jmp	0x1326	; 0x1326 <__bad_interrupt>
      5c:	0c 94 93 09 	jmp	0x1326	; 0x1326 <__bad_interrupt>
      60:	0c 94 57 30 	jmp	0x60ae	; 0x60ae <__vector_24>
      64:	0c 94 93 09 	jmp	0x1326	; 0x1326 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	1f 1c       	adc	r1, r15
      6a:	18 14       	cp	r1, r8
      6c:	11 0d       	add	r17, r1
      6e:	0a 06       	cpc	r0, r26
      70:	08 0b       	sbc	r16, r24
      72:	0f 12       	cpse	r0, r31
      74:	16 19       	sub	r17, r6
      76:	1d 20       	and	r1, r13
      78:	05 03       	mulsu	r16, r21
      7a:	02 00       	.word	0x0002	; ????
      7c:	23 24       	eor	r2, r3
      7e:	26 27       	eor	r18, r22
      80:	09 0c       	add	r0, r9
      82:	10 13       	cpse	r17, r16
      84:	17 1a       	sub	r1, r23
      86:	1e 21       	and	r17, r14
      88:	01 04       	cpc	r0, r1
      8a:	07 0e       	add	r0, r23
      8c:	15 1b       	sub	r17, r21
      8e:	22 25       	eor	r18, r2

00000090 <_ZL23channelFreqOrderedIndex>:
      90:	13 20 12 11 21 10 07 22 08 18 06 09 19 05 23 0a     . ..!.."......#.
      a0:	1a 04 0b 1b 03 24 0c 1c 02 0d 1d 25 01 0e 1e 00     .....$.....%....
      b0:	0f 1f 26 14 15 27 16 17                             ..&..'..

000000b8 <_ZL12channelNames>:
      b8:	00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f     ................
      c8:	20 21 22 23 24 25 26 27 28 29 2a 2b 2c 2d 2e 2f      !"#$%&'()*+,-./
      d8:	88 89 8a 8b 8c 8d 8e 8f                             ........

000000e0 <_ZL16channelFreqTable>:
      e0:	e9 16 d5 16 c1 16 ad 16 99 16 85 16 71 16 5d 16     ............q.].
      f0:	65 16 78 16 8b 16 9e 16 b1 16 c4 16 d7 16 ea 16     e.x.............
     100:	49 16 35 16 21 16 0d 16 fd 16 11 17 25 17 39 17     I.5.!.......%.9.
     110:	6c 16 80 16 94 16 a8 16 bc 16 d0 16 e4 16 f8 16     l...............
     120:	1a 16 3f 16 64 16 89 16 ae 16 d3 16 f8 16 1d 17     ..?.d...........

00000130 <_ZL12channelTable>:
     130:	05 2a 9b 29 91 29 87 29 1d 29 13 29 09 29 9f 28     .*.).).).).).).(
     140:	03 29 0c 29 16 29 1f 29 89 29 92 29 9c 29 05 2a     .).).).).).).).*
     150:	95 28 8b 28 81 28 17 28 0f 2a 19 2a 83 2a 8d 2a     .(.(.(.(.*.*.*.*
     160:	06 29 10 29 1a 29 84 29 8e 29 98 29 02 2a 0c 2a     .).).).).).).*.*
     170:	1d 28 90 28 02 29 15 29 87 29 9a 29 0c 2a 1f 2a     .(.(.).).).).*.*

00000180 <_ZL14EepromDefaults>:
     180:	09 00 00 00 00 01 00 00 28 00 96 00 00 28 00 96     ........(....(..
	...

00000191 <_ZZN12StateMachine16MenuStateHandler7onEnterEvE3__c_1>:
     191:	53 65 74 74 69 6e 67 73 00                          Settings.

0000019a <_ZZN12StateMachine16MenuStateHandler7onEnterEvE3__c_0>:
     19a:	42 61 6e 64 20 53 63 61 6e 00                       Band Scan.

000001a4 <_ZZN12StateMachine16MenuStateHandler7onEnterEvE3__c>:
     1a4:	53 65 61 72 63 68 00                                Search.

000001ab <_ZL12settingsIcon>:
	...
     1b3:	00 0f f0 00 00 0f f0 00 00 0f f0 00 00 0f f0 00     ................
     1c3:	07 1f f8 e0 07 ff ff e0 0f ff ff f0 0f ff ff f0     ................
     1d3:	1f ff ff f8 1f ff ff f8 1f fc 3f f8 1f f8 1f f8     ..........?.....
     1e3:	07 f0 0f e0 03 f0 0f c0 03 f0 0f c0 07 f0 0f e0     ................
     1f3:	1f f8 1f f8 1f fc 3f f8 1f ff ff f8 1f ff ff f8     ......?.........
     203:	0f ff ff f0 0f ff ff f0 07 ff ff e0 07 1f f8 e0     ................
     213:	00 0f f0 00 00 0f f0 00 00 0f f0 00 00 0f f0 00     ................
	...

0000022b <_ZL12bandScanIcon>:
	...
     23b:	00 3f fc 00 03 ff ff c0 07 ff ff e0 3f ff ff fc     .?..........?...
     24b:	7f fe 7f fe ff fe 7f ff ff fe 7f ff 7f ff ff fe     ................
     25b:	7f ff ff fe 1f fe 7f f8 1f fe 7f f8 0f fe 7f f0     ................
     26b:	07 fe 7f e0 03 fe 7f c0 01 fe 7f 80 01 fe 7f 80     ................
     27b:	00 fe 7f 00 00 7f fe 00 00 3f fc 00 00 1f f8 00     .........?......
     28b:	00 1f f8 00 00 07 e0 00 00 07 e0 00 00 03 c0 00     ................
     29b:	00 01 80 00 00 00 00 00 00 00 00 00 00 00 00 00     ................

000002ab <_ZL10searchIcon>:
	...
     2bb:	00 ff 80 00 01 ff e0 00 03 ff f0 00 07 e3 f0 00     ................
     2cb:	0f 80 f8 00 0f 00 78 00 0f 00 3c 00 0e 00 3c 00     ......x...<...<.
     2db:	0e 00 3c 00 0e 00 3c 00 0f 00 3c 00 0f 00 78 00     ..<...<...<...x.
     2eb:	0f 80 f8 00 07 c1 f8 00 07 ff f8 00 03 ff fc 00     ................
     2fb:	00 ff fe 00 00 3f 1f 00 00 00 0f 80 00 00 07 c0     .....?..........
     30b:	00 00 03 e0 00 00 01 f0 00 00 00 e0 00 00 00 40     ...............@
	...

0000032b <_ZL4logo>:
	...
     383:	fc 00 00 00 00 3f 00 00 00 00 00 00 00 00 00 00     .....?..........
     393:	fc 00 00 00 00 3f 00 00 00 00 00 00 00 00 00 00     .....?..........
     3a3:	fc 00 00 00 00 3f 00 00 00 00 00 00 00 00 00 00     .....?..........
     3b3:	fc 00 00 00 00 3f 00 00 00 00 00 00 00 00 00 00     .....?..........
     3c3:	fc 00 00 00 00 3f 00 00 00 00 00 00 00 00 00 00     .....?..........
     3d3:	78 00 00 00 00 1e 00 00 00 00 00 00 00 00 00 00     x...............
     3e3:	78 00 00 00 00 1e 00 00 00 00 00 00 00 00 00 00     x...............
     3f3:	78 00 00 00 00 1e 00 00 00 00 00 00 00 00 00 00     x...............
     403:	78 00 00 00 00 1e 00 00 00 00 00 00 00 00 00 00     x...............
     413:	78 00 00 00 00 1e 00 00 00 00 00 00 00 00 00 00     x...............
     423:	78 00 00 00 00 1e 00 00 00 00 00 00 00 00 00 00     x...............
     433:	78 00 00 00 00 1e 00 00 ff ff fb f8 0f df ff ff     x...............
     443:	7f ff fb ff ff df ff ff ff ff fb fc 1f df ff ff     ................
     453:	7f ff fb ff ff df ff ff ff ff f9 fc 1f df ff ff     ................
     463:	7f ff fb ff ff df ff ff ff ff f9 fe 3f 9f ff ff     ............?...
     473:	7f ff fb ff ff df ff ff ff ff f8 fe 3f 9f ff ff     ............?...
     483:	7f ff fb ff ff df ff ff ff ff f8 ff 7f 1f ff ff     ................
     493:	7f ff fb ff ff df ff ff fc 03 f8 7f 7f 1f 80 00     ................
     4a3:	7f 01 fb f0 0f df c0 3f fc 03 f8 7f fe 1f 80 00     .......?........
     4b3:	7f 01 fb f0 0f df c0 3f fc 03 f8 3f fe 1f 80 00     .......?...?....
     4c3:	7f 01 fb f0 0f df c0 3f fc 03 f8 3f fc 1f 80 00     .......?...?....
     4d3:	7f 01 fb f0 0f df c0 3f fc 03 f8 1f fc 1f 80 00     .......?........
     4e3:	7f 01 fb f0 0f df c0 3f fc 03 f8 1f f8 1f 80 00     .......?........
     4f3:	7f 01 fb f0 0f df c0 3f ff ff f8 0f f8 1f ff ff     .......?........
     503:	7f ff fb f0 0f df ff ff ff ff f8 0f f0 1f ff ff     ................
     513:	7f ff fb f0 0f df ff ff ff ff f8 07 f0 1f ff ff     ................
     523:	7f ff fb f0 0f df ff ff ff ff f8 07 f0 1f ff ff     ................
     533:	7f ff fb f0 0f df ff ff ff ff f8 0f f0 1f ff ff     ................
     543:	7f ff fb f0 0f df ff ff ff ff f8 0f f8 1f ff ff     ................
     553:	7f ff fb f0 0f df ff ff fd fe 00 1f f8 00 00 3f     ...............?
     563:	7f 01 fb f0 0f df c0 3f fc fe 00 1f fc 00 00 3f     .......?.......?
     573:	7f 01 fb f0 0f df c0 3f fc 7f 00 3f fc 00 00 3f     .......?...?...?
     583:	7f 01 fb f0 0f df c0 3f fc 7f 00 3f fe 00 00 3f     .......?...?...?
     593:	7f 01 fb f0 0f df c0 3f fc 3f 80 7e 7e 00 00 3f     .......?.?.~~..?
     5a3:	7f 01 fb f0 0f df c0 3f fc 3f c0 7e 7e 00 00 3f     .......?.?.~~..?
     5b3:	7f 01 fb f0 0f df c0 3f fc 1f c0 fe 7f 1f ff ff     .......?........
     5c3:	7f ff fb ff ff df ff ff fc 0f e0 fe 7f 1f ff ff     ................
     5d3:	7f ff fb ff ff df ff ff fc 0f e1 fc 3f 9f ff ff     ............?...
     5e3:	7f ff fb ff ff df ff ff fc 07 f1 fc 3f 9f ff ff     ............?...
     5f3:	7f ff fb ff ff df ff ff fc 07 f3 f8 1f df ff ff     ................
     603:	7f ff fb ff ff df ff ff fc 03 fb f8 1f df ff ff     ................
     613:	7f ff fb ff ff df ff ff 00 00 00 00 00 00 00 00     ................
	...

0000072b <_ZL13freqOrderIcon>:
     72b:	00 00 19 80 19 80 19 80 1f b8 1f 88 19 90 19 a0     ................
     73b:	19 b8 00 00 10 08 30 0c 7e 7e 30 0c 10 08 00 00     ......0.~~0.....

0000074b <_ZL16channelOrderIcon>:
     74b:	00 00 00 00 33 9c 4a 52 7b 9c 4a 52 4b 92 00 00     ....3.JR{.JRK...
     75b:	00 00 00 00 10 08 30 0c 7e 7e 30 0c 10 08 00 00     ......0.~~0.....

0000076b <_ZL10manualIcon>:
     76b:	00 00 60 c0 71 c0 7b c0 7f d8 7f c4 6e c2 64 c2     ..`.q.{.....n.d.
     77b:	60 c0 60 c0 60 c0 08 0c 08 12 04 1e 03 12 00 00     `.`.`...........

0000078b <_ZL8autoIcon>:
     78b:	00 00 1e 00 3f 00 73 80 61 98 7f 84 7f 82 61 82     ....?.s.a.....a.
     79b:	61 80 61 80 61 a2 08 36 08 2a 04 22 03 22 00 00     a.a.a..6.*."."..

000007ab <_ZZN12StateMachine18SearchStateHandler13drawRssiGraphEvE3__c_0>:
     7ab:	41 00                                               A.

000007ad <_ZZN12StateMachine18SearchStateHandler13drawRssiGraphEvE3__c>:
     7ad:	42 00                                               B.

000007af <_ZZN12StateMachine20SettingsStateHandler13onInitialDrawEvE3__c>:
     7af:	50 72 65 73 73 20 6d 6f 64 65 20 66 6f 72 0a 52     Press mode for.R
     7bf:	53 53 49 20 63 61 6c 69 62 72 61 74 69 6f 6e 00     SSI calibration.

000007cf <_ZZN12StateMachine24SettingsRssiStateHandler12onUpdateDrawEvE3__c_9>:
     7cf:	50 72 65 73 73 20 4d 4f 44 45 20 74 6f 20 73 61     Press MODE to sa
     7df:	76 65 2e 00                                         ve..

000007e3 <_ZZN12StateMachine24SettingsRssiStateHandler12onUpdateDrawEvE3__c_8>:
     7e3:	4d 61 78 3a 20 00                                   Max: .

000007e9 <_ZZN12StateMachine24SettingsRssiStateHandler12onUpdateDrawEvE3__c_7>:
     7e9:	4d 69 6e 3a 20 00                                   Min: .

000007ef <_ZZN12StateMachine24SettingsRssiStateHandler12onUpdateDrawEvE3__c_6>:
     7ef:	41 6c 6c 20 64 6f 6e 65 21 00                       All done!.

000007f9 <_ZZN12StateMachine24SettingsRssiStateHandler12onUpdateDrawEvE3__c_5>:
     7f9:	34 2f 34 0a 53 63 61 6e 6e 69 6e 67 20 66 6f 72     4/4.Scanning for
     809:	20 68 69 67 68 65 73 74 0a 52 53 53 49 2e 2e 2e      highest.RSSI...
	...

0000081a <_ZZN12StateMachine24SettingsRssiStateHandler12onUpdateDrawEvE3__c_4>:
     81a:	50 72 65 73 73 20 4d 4f 44 45 20 77 68 65 6e 20     Press MODE when 
     82a:	72 65 61 64 79 2e 00                                ready..

00000831 <_ZZN12StateMachine24SettingsRssiStateHandler12onUpdateDrawEvE3__c_3>:
     831:	33 2f 34 0a 54 75 72 6e 20 6f 6e 20 79 6f 75 72     3/4.Turn on your
     841:	20 56 54 58 2e 00                                    VTX..

00000847 <_ZZN12StateMachine24SettingsRssiStateHandler12onUpdateDrawEvE3__c_2>:
     847:	32 2f 34 0a 53 63 61 6e 6e 69 6e 67 20 66 6f 72     2/4.Scanning for
     857:	20 6c 6f 77 65 73 74 0a 52 53 53 49 2e 2e 2e 00      lowest.RSSI....

00000867 <_ZZN12StateMachine24SettingsRssiStateHandler12onUpdateDrawEvE3__c_1>:
     867:	50 72 65 73 73 20 4d 4f 44 45 20 77 68 65 6e 20     Press MODE when 
     877:	72 65 61 64 79 2e 00                                ready..

0000087e <_ZZN12StateMachine24SettingsRssiStateHandler12onUpdateDrawEvE3__c_0>:
     87e:	52 65 6d 6f 76 65 20 52 58 20 61 6e 74 65 6e 6e     Remove RX antenn
     88e:	61 73 2e 00                                         as..

00000892 <_ZZN12StateMachine24SettingsRssiStateHandler12onUpdateDrawEvE3__c>:
     892:	31 2f 34 0a 54 75 72 6e 20 6f 66 66 20 61 6c 6c     1/4.Turn off all
     8a2:	20 56 54 58 73 2e 00                                 VTXs..

000008a9 <digital_pin_to_timer_PGM>:
     8a9:	00 00 00 08 00 02 01 00 00 03 04 07 00 00 00 00     ................
     8b9:	00 00 00 00                                         ....

000008bd <digital_pin_to_bit_mask_PGM>:
     8bd:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     8cd:	04 08 10 20                                         ... 

000008d1 <digital_pin_to_port_PGM>:
     8d1:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     8e1:	03 03 03 03                                         ....

000008e5 <port_to_input_PGM>:
     8e5:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

000008ef <port_to_output_PGM>:
     8ef:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

000008f9 <port_to_mode_PGM>:
     8f9:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

00000903 <_ZL4font>:
     903:	00 00 00 00 00 3e 5b 4f 5b 3e 3e 6b 4f 6b 3e 1c     .....>[O[>>kOk>.
     913:	3e 7c 3e 1c 18 3c 7e 3c 18 1c 57 7d 57 1c 1c 5e     >|>..<~<..W}W..^
     923:	7f 5e 1c 00 18 3c 18 00 ff e7 c3 e7 ff 00 18 24     .^...<.........$
     933:	18 00 ff e7 db e7 ff 30 48 3a 06 0e 26 29 79 29     .......0H:..&)y)
     943:	26 40 7f 05 05 07 40 7f 05 25 3f 5a 3c e7 3c 5a     &@....@..%?Z<.<Z
     953:	7f 3e 1c 1c 08 08 1c 1c 3e 7f 14 22 7f 22 14 5f     .>......>.."."._
     963:	5f 00 5f 5f 06 09 7f 01 7f 00 66 89 95 6a 60 60     _.__......f..j``
     973:	60 60 60 94 a2 ff a2 94 08 04 7e 04 08 10 20 7e     ```.......~... ~
     983:	20 10 08 08 2a 1c 08 08 1c 2a 08 08 1e 10 10 10      ...*....*......
     993:	10 0c 1e 0c 1e 0c 30 38 3e 38 30 06 0e 3e 0e 06     ......08>80..>..
     9a3:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
     9b3:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
     9c3:	56 20 50 00 08 07 03 00 00 1c 22 41 00 00 41 22     V P......."A..A"
     9d3:	1c 00 2a 1c 7f 1c 2a 08 08 3e 08 08 00 80 70 30     ..*...*..>....p0
     9e3:	00 08 08 08 08 08 00 00 60 60 00 20 10 08 04 02     ........``. ....
     9f3:	3e 51 49 45 3e 00 42 7f 40 00 72 49 49 49 46 21     >QIE>.B.@.rIIIF!
     a03:	41 49 4d 33 18 14 12 7f 10 27 45 45 45 39 3c 4a     AIM3.....'EEE9<J
     a13:	49 49 31 41 21 11 09 07 36 49 49 49 36 46 49 49     II1A!...6III6FII
     a23:	29 1e 00 00 14 00 00 00 40 34 00 00 00 08 14 22     ).......@4....."
     a33:	41 14 14 14 14 14 00 41 22 14 08 02 01 59 09 06     A......A"....Y..
     a43:	3e 41 5d 59 4e 7c 12 11 12 7c 7f 49 49 49 36 3e     >A]YN|...|.III6>
     a53:	41 41 41 22 7f 41 41 41 3e 7f 49 49 49 41 7f 09     AAA".AAA>.IIIA..
     a63:	09 09 01 3e 41 41 51 73 7f 08 08 08 7f 00 41 7f     ...>AAQs......A.
     a73:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
     a83:	40 7f 02 1c 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
     a93:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 26     .....>AQ!^...)F&
     aa3:	49 49 49 32 03 01 7f 01 03 3f 40 40 40 3f 1f 20     III2.....?@@@?. 
     ab3:	40 20 1f 3f 40 38 40 3f 63 14 08 14 63 03 04 78     @ .?@8@?c...c..x
     ac3:	04 03 61 59 49 4d 43 00 7f 41 41 41 02 04 08 10     ..aYIMC..AAA....
     ad3:	20 00 41 41 41 7f 04 02 01 02 04 40 40 40 40 40      .AAA......@@@@@
     ae3:	00 03 07 08 00 20 54 54 78 40 7f 28 44 44 38 38     ..... TTx@.(DD88
     af3:	44 44 44 28 38 44 44 28 7f 38 54 54 54 18 00 08     DDD(8DD(.8TTT...
     b03:	7e 09 02 18 a4 a4 9c 78 7f 08 04 04 78 00 44 7d     ~......x....x.D}
     b13:	40 00 20 40 40 3d 00 7f 10 28 44 00 00 41 7f 40     @. @@=...(D..A.@
     b23:	00 7c 04 78 04 78 7c 08 04 04 78 38 44 44 44 38     .|.x.x|...x8DDD8
     b33:	fc 18 24 24 18 18 24 24 18 fc 7c 08 04 04 08 48     ..$$..$$..|....H
     b43:	54 54 54 24 04 04 3f 44 24 3c 40 40 20 7c 1c 20     TTT$..?D$<@@ |. 
     b53:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 4c 90 90     @ .<@0@<D(.(DL..
     b63:	90 7c 44 64 54 4c 44 00 08 36 41 00 00 00 77 00     .|DdTLD..6A...w.
     b73:	00 00 41 36 08 00 02 01 02 04 02 3c 26 23 26 3c     ..A6.......<&#&<
     b83:	1e a1 a1 61 12 3a 40 40 20 7a 38 54 54 55 59 21     ...a.:@@ z8TTUY!
     b93:	55 55 79 41 22 54 54 78 42 21 55 54 78 40 20 54     UUyA"TTxB!UTx@ T
     ba3:	55 79 40 0c 1e 52 72 12 39 55 55 55 59 39 54 54     Uy@..Rr.9UUUY9TT
     bb3:	54 59 39 55 54 54 58 00 00 45 7c 41 00 02 45 7d     TY9UTTX..E|A..E}
     bc3:	42 00 01 45 7c 40 7d 12 11 12 7d f0 28 25 28 f0     B..E|@}...}.(%(.
     bd3:	7c 54 55 45 00 20 54 54 7c 54 7c 0a 09 7f 49 32     |TUE. TT|T|...I2
     be3:	49 49 49 32 3a 44 44 44 3a 32 4a 48 48 30 3a 41     III2:DDD:2JHH0:A
     bf3:	41 21 7a 3a 42 40 20 78 00 9d a0 a0 7d 3d 42 42     A!z:B@ x....}=BB
     c03:	42 3d 3d 40 40 40 3d 3c 24 ff 24 24 48 7e 49 43     B==@@@=<$.$$H~IC
     c13:	66 2b 2f fc 2f 2b ff 09 29 f6 20 c0 88 7e 09 03     f+/./+..). ..~..
     c23:	20 54 54 79 41 00 00 44 7d 41 30 48 48 4a 32 38      TTyA..D}A0HHJ28
     c33:	40 40 22 7a 00 7a 0a 0a 72 7d 0d 19 31 7d 26 29     @@"z.z..r}..1}&)
     c43:	29 2f 28 26 29 29 29 26 30 48 4d 40 20 38 08 08     )/(&)))&0HM@ 8..
     c53:	08 08 08 08 08 08 38 2f 10 c8 ac ba 2f 10 28 34     ......8/..../.(4
     c63:	fa 00 00 7b 00 00 08 14 2a 14 22 22 14 2a 14 08     ...{....*."".*..
     c73:	55 00 55 00 55 aa 55 aa 55 aa ff 55 ff 55 ff 00     U.U.U.U.U..U.U..
     c83:	00 00 ff 00 10 10 10 ff 00 14 14 14 ff 00 10 10     ................
     c93:	ff 00 ff 10 10 f0 10 f0 14 14 14 fc 00 14 14 f7     ................
     ca3:	00 ff 00 00 ff 00 ff 14 14 f4 04 fc 14 14 17 10     ................
     cb3:	1f 10 10 1f 10 1f 14 14 14 1f 00 10 10 10 f0 00     ................
     cc3:	00 00 00 1f 10 10 10 10 1f 10 10 10 10 f0 10 00     ................
     cd3:	00 00 ff 10 10 10 10 10 10 10 10 10 ff 10 00 00     ................
     ce3:	00 ff 14 00 00 ff 00 ff 00 00 1f 10 17 00 00 fc     ................
     cf3:	04 f4 14 14 17 10 17 14 14 f4 04 f4 00 00 ff 00     ................
     d03:	f7 14 14 14 14 14 14 14 f7 00 f7 14 14 14 17 14     ................
     d13:	10 10 1f 10 1f 14 14 14 f4 14 10 10 f0 10 f0 00     ................
     d23:	00 1f 10 1f 00 00 00 1f 14 00 00 00 fc 14 00 00     ................
     d33:	f0 10 f0 10 10 ff 10 ff 14 14 14 ff 14 10 10 10     ................
     d43:	1f 00 00 00 00 f0 10 ff ff ff ff ff f0 f0 f0 f0     ................
     d53:	f0 ff ff ff 00 00 00 00 00 ff ff 0f 0f 0f 0f 0f     ................
     d63:	38 44 44 38 44 fc 4a 4a 4a 34 7e 02 02 06 06 02     8DD8D.JJJ4~.....
     d73:	7e 02 7e 02 63 55 49 41 63 38 44 44 3c 04 40 7e     ~.~.cUIAc8DD<.@~
     d83:	20 1e 20 06 02 7e 02 02 99 a5 e7 a5 99 1c 2a 49      . ..~........*I
     d93:	2a 1c 4c 72 01 72 4c 30 4a 4d 4d 30 30 48 78 48     *.Lr.rL0JMM00HxH
     da3:	30 bc 62 5a 46 3d 3e 49 49 49 00 7e 01 01 01 7e     0.bZF=>III.~...~
     db3:	2a 2a 2a 2a 2a 44 44 5f 44 44 40 51 4a 44 40 40     *****DD_DD@QJD@@
     dc3:	44 4a 51 40 00 00 ff 01 03 e0 80 ff 00 00 08 08     DJQ@............
     dd3:	6b 6b 08 36 12 36 24 36 06 0f 09 0f 06 00 00 18     kk.6.6$6........
     de3:	18 00 00 00 10 10 00 30 40 ff 01 01 00 1f 01 01     .......0@.......
     df3:	1e 00 19 1d 17 12 00 3c 3c 3c 3c 00 00 00 00 00     .......<<<<.....

00000e03 <_ZZN16Adafruit_SSD13067displayEvE6dlist1>:
     e03:	22 00 ff 21 00                                      "..!.

00000e08 <_ZZN16Adafruit_SSD130621drawFastVLineInternalEiiijE8postmask>:
     e08:	00 01 03 07 0f 1f 3f 7f                             ......?.

00000e10 <_ZZN16Adafruit_SSD130621drawFastVLineInternalEiiijE7premask>:
     e10:	00 80 c0 e0 f0 f8 fc fe                             ........

00000e18 <_ZZN16Adafruit_SSD13065beginEhhbbE5init5>:
     e18:	db 40 a4 a6 2e af                                   .@....

00000e1e <_ZZN16Adafruit_SSD13065beginEhhbbE5init3>:
     e1e:	20 00 a1 c8                                          ...

00000e22 <_ZZN16Adafruit_SSD13065beginEhhbbE5init2>:
     e22:	d3 00 40 8d                                         ..@.

00000e26 <_ZZN16Adafruit_SSD13065beginEhhbbE5init1>:
     e26:	ae d5 80 a8                                         ....

00000e2a <_ZL12splash2_data>:
     e2a:	00 00 60 00 00 00 00 00 00 00 00 00 00 00 00 00     ..`.............
     e3a:	00 e0 00 00 00 00 00 00 00 00 00 00 00 00 00 01     ................
     e4a:	e0 00 00 00 00 00 00 00 00 00 00 00 00 00 01 f0     ................
	...
     e66:	00 03 f0 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     e76:	07 f0 00 00 00 00 00 00 00 00 00 00 00 00 00 07     ................
     e86:	f8 00 00 00 00 00 00 00 00 00 00 00 00 00 0f f8     ................
     e96:	00 00 00 03 c0 00 7e 00 00 01 e0 00 7f 0f f8 00     ......~.........
     ea6:	00 00 03 c0 00 fe 00 00 01 e0 00 ff ef f8 00 00     ................
     eb6:	00 03 c0 00 fe 00 00 01 e0 00 ff ff f8 00 00 00     ................
     ec6:	03 c0 00 f0 00 00 00 0f 00 7f fe 7f c0 00 00 03     ................
     ed6:	c0 00 f0 00 00 00 0f 00 3f fe 7f f8 3f f1 fb cf     ........?...?...
     ee6:	fc fe f3 bc 3d ef e0 1f fe 7f ff 7f fb ff df fe     ....=...........
     ef6:	fe ff bc 3d ef e0 1f c6 ff ff 7f fb ff df fe fe     ...=............
     f06:	ff bc 3d ef e0 0f e3 c7 fe 78 7b c3 de 1e f0 ff     ..=......x{.....
     f16:	bc 3d ef 00 07 ff 87 fc 78 7b c3 de 1e f0 f8 3c     .=......x{.....<
     f26:	3d ef 00 01 ff ff f0 00 7b c3 c0 1e f0 f0 3c 3d     =.......{.....<=
     f36:	ef 00 01 f3 7f e0 3f fb c3 cf fe f0 f0 3c 3d ef     ......?......<=.
     f46:	00 03 e3 3f 80 7f fb c3 df fe f0 f0 3c 3d ef 00     ...?........<=..
     f56:	07 e7 3c 00 78 7b c3 de 1e f0 f0 3c 3d ef 00 07     ..<.x{.....<=...
     f66:	ff be 00 78 7b c3 de 1e f0 f0 3c 3d ef 00 07 ff     ...x{.....<=....
     f76:	fe 00 78 7b c3 de 1e f0 f0 3c 3d ef 00 0f ff fe     ..x{.....<=.....
     f86:	00 7f fb ff df fe f0 f0 3f fd ef e0 0f ff ff 00     ........?.......
     f96:	7f fb ff df fe f0 f0 3f fd ef e0 0f f9 ff 00 3e     .......?.......>
     fa6:	79 f9 cf 9e f0 f0 1f 3d e7 e0 1f f1 ff 00 00 00     y......=........
	...
     fbe:	00 1f 80 ff 00 7f ff ff ff ff ff ff ff ff ff e0     ................
     fce:	1c 00 7f 00 7f ff ff ff fe b4 6d 88 8d 18 e0 00     ..........m.....
     fde:	00 1f 00 7f ff ff ff fe 95 ad 7d b5 77 e0 00 00     ..........}.w...
     fee:	0f 00 7f ff ff ff fe a5 ad 9d 8d 19 e0 00 00 06     ................
     ffe:	00 7f ff ff ff fe b5 ad ed b5 7e e0                 ..........~.

0000100a <_ZL12splash1_data>:
    100a:	00 00 00 00 00 01 80 00 00 00 00 00 00 00 00 00     ................
    101a:	03 80 00 00 00 00 00 00 00 00 00 07 c0 00 00 00     ................
    102a:	00 00 00 00 00 00 07 c0 00 00 00 00 00 00 00 00     ................
    103a:	00 0f c0 00 00 00 00 00 00 00 00 00 1f e0 00 00     ................
    104a:	00 00 00 00 00 00 00 1f e0 00 00 00 00 00 00 00     ................
    105a:	00 00 3f e0 00 00 00 00 00 00 00 00 00 3f f0 00     ..?..........?..
	...
    1072:	7f f0 00 00 00 00 00 00 00 1f f8 7f f0 00 00 00     ................
    1082:	00 00 00 00 3f fe 7f f0 00 00 00 00 00 00 00 3f     ....?..........?
    1092:	ff 7f f0 00 00 00 00 00 00 00 1f ff fb e0 00 00     ................
    10a2:	00 00 00 00 00 0f ff f9 ff c0 00 00 00 00 00 00     ................
    10b2:	0f ff f9 ff f8 00 00 00 00 00 00 07 ff f1 ff ff     ................
    10c2:	00 00 00 00 00 00 03 fc 73 ff ff 80 00 00 00 00     ........s.......
    10d2:	00 01 fe 3f ff ff 80 00 00 00 00 00 00 ff 1e 0f     ...?............
    10e2:	ff 00 00 00 00 00 00 00 7f fe 1f fc 00 00 00 00     ................
    10f2:	00 00 00 3f ff ff f8 00 00 00 00 00 00 00 0f df     ...?............
    1102:	ff e0 00 00 00 00 00 00 00 1f 19 ff c0 00 00 00     ................
    1112:	00 00 00 00 3f 3c ff 00 00 00 00 00 00 00 00 7e     ....?<.........~
    1122:	7c f8 00 00 00 00 00 00 00 00 7f fe 7c 00 00 00     |...........|...
    1132:	00 00 00 00 00 ff ff fc 00 00 00 00 00 00 00 00     ................
    1142:	ff ff fe 00 00 00 00 00 00 00 00 ff ff fe 00 00     ................
    1152:	00 00 00 00 00 01 ff ef fe 00 00 00 00 00 00 00     ................
    1162:	01 ff cf fe 00 00 00 00 00 00 00 03 ff 07 fe 00     ................
    1172:	00 00 00 00 00 00 03 fc 07 fe 00 00 00 00 00 00     ................
    1182:	00 03 f0 03 fe 00 00 00 00 00 00 00 01 80 00 fe     ................
	...
    119a:	00 00 7e 00 00 00 00 00 00 00 00 00 00 3e 00 00     ..~..........>..
	...
    11b2:	0c 00 00 00 00 00 00 07 80 00 fc 00 00 03 c0 00     ................
    11c2:	00 00 07 80 01 fc 00 00 03 c0 00 00 00 07 80 01     ................
    11d2:	fc 00 00 03 c0 00 00 00 07 80 01 e0 00 00 00 1e     ................
    11e2:	00 00 00 07 80 01 e0 00 00 00 1e 00 7f e3 f7 9f     ................
    11f2:	f9 fd e7 78 7b df c0 ff f7 ff bf fd fd ff 78 7b     ...x{.........x{
    1202:	df c0 ff f7 ff bf fd fd ff 78 7b df c0 f0 f7 87     .........x{.....
    1212:	bc 3d e1 ff 78 7b de 00 f0 f7 87 bc 3d e1 f0 78     .=..x{......=..x
    1222:	7b de 00 00 f7 87 80 3d e1 e0 78 7b de 00 7f f7     {......=..x{....
    1232:	87 9f fd e1 e0 78 7b de 00 ff f7 87 bf fd e1 e0     .....x{.........
    1242:	78 7b de 00 f0 f7 87 bc 3d e1 e0 78 7b de 00 f0     x{......=..x{...
    1252:	f7 87 bc 3d e1 e0 78 7b de 00 f0 f7 87 bc 3d e1     ...=..x{......=.
    1262:	e0 78 7b de 00 ff f7 ff bf fd e1 e0 7f fb df c0     .x{.............
    1272:	ff f7 ff bf fd e1 e0 7f fb df c0 7c f3 f3 9f 3d     ...........|...=
    1282:	e1 e0 3e 7b cf c0 00 00 00 00 00 00 00 00 00 00     ..>{............
    1292:	00 ff ff ff ff ff ff ff ff ff ff c0 ff ff ff ff     ................
    12a2:	fd 68 db 11 1a 31 c0 ff ff ff ff fd 2b 5a fb 6a     .h...1......+Z.j
    12b2:	ef c0 ff ff ff ff fd 4b 5b 3b 1a 33 c0 ff ff ff     .......K[;.3....
    12c2:	ff fd 6b 5b db 6a fd c0                             ..k[.j..

000012ca <__ctors_start>:
    12ca:	5f 0c       	add	r5, r15
    12cc:	5f 0d       	add	r21, r15
    12ce:	4d 0f       	add	r20, r29
    12d0:	c4 16       	cp	r12, r20
    12d2:	9b 2e       	mov	r9, r27

000012d4 <__ctors_end>:
    12d4:	c9 16       	cp	r12, r25

000012d6 <__dtors_end>:
    12d6:	11 24       	eor	r1, r1
    12d8:	1f be       	out	0x3f, r1	; 63
    12da:	cf ef       	ldi	r28, 0xFF	; 255
    12dc:	d8 e0       	ldi	r29, 0x08	; 8
    12de:	de bf       	out	0x3e, r29	; 62
    12e0:	cd bf       	out	0x3d, r28	; 61

000012e2 <__do_copy_data>:
    12e2:	11 e0       	ldi	r17, 0x01	; 1
    12e4:	a0 e0       	ldi	r26, 0x00	; 0
    12e6:	b1 e0       	ldi	r27, 0x01	; 1
    12e8:	ea e0       	ldi	r30, 0x0A	; 10
    12ea:	f7 e6       	ldi	r31, 0x67	; 103
    12ec:	02 c0       	rjmp	.+4      	; 0x12f2 <__do_copy_data+0x10>
    12ee:	05 90       	lpm	r0, Z+
    12f0:	0d 92       	st	X+, r0
    12f2:	a2 3d       	cpi	r26, 0xD2	; 210
    12f4:	b1 07       	cpc	r27, r17
    12f6:	d9 f7       	brne	.-10     	; 0x12ee <__do_copy_data+0xc>

000012f8 <__do_clear_bss>:
    12f8:	23 e0       	ldi	r18, 0x03	; 3
    12fa:	a2 ed       	ldi	r26, 0xD2	; 210
    12fc:	b1 e0       	ldi	r27, 0x01	; 1
    12fe:	01 c0       	rjmp	.+2      	; 0x1302 <.do_clear_bss_start>

00001300 <.do_clear_bss_loop>:
    1300:	1d 92       	st	X+, r1

00001302 <.do_clear_bss_start>:
    1302:	a1 3d       	cpi	r26, 0xD1	; 209
    1304:	b2 07       	cpc	r27, r18
    1306:	e1 f7       	brne	.-8      	; 0x1300 <.do_clear_bss_loop>

00001308 <__do_global_ctors>:
    1308:	19 e0       	ldi	r17, 0x09	; 9
    130a:	ca e6       	ldi	r28, 0x6A	; 106
    130c:	d9 e0       	ldi	r29, 0x09	; 9
    130e:	04 c0       	rjmp	.+8      	; 0x1318 <__do_global_ctors+0x10>
    1310:	21 97       	sbiw	r28, 0x01	; 1
    1312:	fe 01       	movw	r30, r28
    1314:	0e 94 26 32 	call	0x644c	; 0x644c <__tablejump2__>
    1318:	c5 36       	cpi	r28, 0x65	; 101
    131a:	d1 07       	cpc	r29, r17
    131c:	c9 f7       	brne	.-14     	; 0x1310 <__do_global_ctors+0x8>
    131e:	0e 94 5f 19 	call	0x32be	; 0x32be <main>
    1322:	0c 94 78 33 	jmp	0x66f0	; 0x66f0 <__do_global_dtors>

00001326 <__bad_interrupt>:
    1326:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000132a <_ZN7ButtonsL14runChangeFuncsE6ButtonNS_9PressTypeE>:
            if (states[i].pressed)
                return true;
        }

        return false;
    }
    132a:	0f 93       	push	r16
    132c:	1f 93       	push	r17
    132e:	cf 93       	push	r28
    1330:	df 93       	push	r29
    1332:	18 2f       	mov	r17, r24
    1334:	06 2f       	mov	r16, r22
    1336:	c6 ed       	ldi	r28, 0xD6	; 214
    1338:	d1 e0       	ldi	r29, 0x01	; 1
    133a:	e9 91       	ld	r30, Y+
    133c:	f9 91       	ld	r31, Y+
    133e:	30 97       	sbiw	r30, 0x00	; 0
    1340:	19 f0       	breq	.+6      	; 0x1348 <_ZN7ButtonsL14runChangeFuncsE6ButtonNS_9PressTypeE+0x1e>
    1342:	60 2f       	mov	r22, r16
    1344:	81 2f       	mov	r24, r17
    1346:	09 95       	icall
    1348:	81 e0       	ldi	r24, 0x01	; 1
    134a:	ce 3d       	cpi	r28, 0xDE	; 222
    134c:	d8 07       	cpc	r29, r24
    134e:	a9 f7       	brne	.-22     	; 0x133a <_ZN7ButtonsL14runChangeFuncsE6ButtonNS_9PressTypeE+0x10>
    1350:	df 91       	pop	r29
    1352:	cf 91       	pop	r28
    1354:	1f 91       	pop	r17
    1356:	0f 91       	pop	r16
    1358:	08 95       	ret

0000135a <_ZN7ButtonsL12updateButtonE6ButtonRNS_11ButtonStateEh>:
    135a:	8f 92       	push	r8
    135c:	9f 92       	push	r9
    135e:	af 92       	push	r10
    1360:	bf 92       	push	r11
    1362:	cf 92       	push	r12
    1364:	df 92       	push	r13
    1366:	ef 92       	push	r14
    1368:	ff 92       	push	r15
    136a:	0f 93       	push	r16
    136c:	1f 93       	push	r17
    136e:	cf 93       	push	r28
    1370:	df 93       	push	r29
    1372:	08 2f       	mov	r16, r24
    1374:	eb 01       	movw	r28, r22
    1376:	84 2f       	mov	r24, r20
    1378:	0e 94 bf 1b 	call	0x377e	; 0x377e <digitalRead>
    137c:	7c 01       	movw	r14, r24
    137e:	11 e0       	ldi	r17, 0x01	; 1
    1380:	89 2b       	or	r24, r25
    1382:	09 f0       	breq	.+2      	; 0x1386 <_ZN7ButtonsL12updateButtonE6ButtonRNS_11ButtonStateEh+0x2c>
    1384:	10 e0       	ldi	r17, 0x00	; 0
    1386:	8c 81       	ldd	r24, Y+4	; 0x04
    1388:	18 17       	cp	r17, r24
    138a:	31 f0       	breq	.+12     	; 0x1398 <_ZN7ButtonsL12updateButtonE6ButtonRNS_11ButtonStateEh+0x3e>
    138c:	0e 94 5b 1a 	call	0x34b6	; 0x34b6 <millis>
    1390:	68 83       	st	Y, r22
    1392:	79 83       	std	Y+1, r23	; 0x01
    1394:	8a 83       	std	Y+2, r24	; 0x02
    1396:	9b 83       	std	Y+3, r25	; 0x03
    1398:	1c 83       	std	Y+4, r17	; 0x04
    139a:	8d 81       	ldd	r24, Y+5	; 0x05
    139c:	18 17       	cp	r17, r24
    139e:	09 f4       	brne	.+2      	; 0x13a2 <_ZN7ButtonsL12updateButtonE6ButtonRNS_11ButtonStateEh+0x48>
    13a0:	4d c0       	rjmp	.+154    	; 0x143c <_ZN7ButtonsL12updateButtonE6ButtonRNS_11ButtonStateEh+0xe2>
    13a2:	0e 94 5b 1a 	call	0x34b6	; 0x34b6 <millis>
    13a6:	88 80       	ld	r8, Y
    13a8:	99 80       	ldd	r9, Y+1	; 0x01
    13aa:	aa 80       	ldd	r10, Y+2	; 0x02
    13ac:	bb 80       	ldd	r11, Y+3	; 0x03
    13ae:	dc 01       	movw	r26, r24
    13b0:	cb 01       	movw	r24, r22
    13b2:	88 19       	sub	r24, r8
    13b4:	99 09       	sbc	r25, r9
    13b6:	aa 09       	sbc	r26, r10
    13b8:	bb 09       	sbc	r27, r11
    13ba:	44 97       	sbiw	r24, 0x14	; 20
    13bc:	a1 05       	cpc	r26, r1
    13be:	b1 05       	cpc	r27, r1
    13c0:	e8 f1       	brcs	.+122    	; 0x143c <_ZN7ButtonsL12updateButtonE6ButtonRNS_11ButtonStateEh+0xe2>
    13c2:	1d 83       	std	Y+5, r17	; 0x05
    13c4:	ef 28       	or	r14, r15
    13c6:	91 f4       	brne	.+36     	; 0x13ec <_ZN7ButtonsL12updateButtonE6ButtonRNS_11ButtonStateEh+0x92>
    13c8:	61 e0       	ldi	r22, 0x01	; 1
    13ca:	80 e1       	ldi	r24, 0x10	; 16
    13cc:	0e 94 90 1b 	call	0x3720	; 0x3720 <digitalWrite>
    13d0:	60 e0       	ldi	r22, 0x00	; 0
    13d2:	80 2f       	mov	r24, r16
    13d4:	0e 94 95 09 	call	0x132a	; 0x132a <_ZN7ButtonsL14runChangeFuncsE6ButtonNS_9PressTypeE>
    13d8:	68 ec       	ldi	r22, 0xC8	; 200
    13da:	70 e0       	ldi	r23, 0x00	; 0
    13dc:	80 e0       	ldi	r24, 0x00	; 0
    13de:	90 e0       	ldi	r25, 0x00	; 0
    13e0:	0e 94 8c 1a 	call	0x3518	; 0x3518 <delay>
    13e4:	60 e0       	ldi	r22, 0x00	; 0
    13e6:	80 e1       	ldi	r24, 0x10	; 16
    13e8:	0e 94 90 1b 	call	0x3720	; 0x3720 <digitalWrite>
    13ec:	ce 80       	ldd	r12, Y+6	; 0x06
    13ee:	df 80       	ldd	r13, Y+7	; 0x07
    13f0:	e8 84       	ldd	r14, Y+8	; 0x08
    13f2:	f9 84       	ldd	r15, Y+9	; 0x09
    13f4:	0e 94 5b 1a 	call	0x34b6	; 0x34b6 <millis>
    13f8:	6e 83       	std	Y+6, r22	; 0x06
    13fa:	7f 83       	std	Y+7, r23	; 0x07
    13fc:	88 87       	std	Y+8, r24	; 0x08
    13fe:	99 87       	std	Y+9, r25	; 0x09
    1400:	60 93 d2 01 	sts	0x01D2, r22	; 0x8001d2 <__data_end>
    1404:	70 93 d3 01 	sts	0x01D3, r23	; 0x8001d3 <__data_end+0x1>
    1408:	80 93 d4 01 	sts	0x01D4, r24	; 0x8001d4 <__data_end+0x2>
    140c:	90 93 d5 01 	sts	0x01D5, r25	; 0x8001d5 <__data_end+0x3>
    1410:	2d 81       	ldd	r18, Y+5	; 0x05
    1412:	21 11       	cpse	r18, r1
    1414:	16 c0       	rjmp	.+44     	; 0x1442 <_ZN7ButtonsL12updateButtonE6ButtonRNS_11ButtonStateEh+0xe8>
    1416:	dc 01       	movw	r26, r24
    1418:	cb 01       	movw	r24, r22
    141a:	8c 19       	sub	r24, r12
    141c:	9d 09       	sbc	r25, r13
    141e:	ae 09       	sbc	r26, r14
    1420:	bf 09       	sbc	r27, r15
    1422:	85 5f       	subi	r24, 0xF5	; 245
    1424:	91 40       	sbci	r25, 0x01	; 1
    1426:	a1 09       	sbc	r26, r1
    1428:	b1 09       	sbc	r27, r1
    142a:	8b 3d       	cpi	r24, 0xDB	; 219
    142c:	95 40       	sbci	r25, 0x05	; 5
    142e:	a1 05       	cpc	r26, r1
    1430:	b1 05       	cpc	r27, r1
    1432:	40 f5       	brcc	.+80     	; 0x1484 <_ZN7ButtonsL12updateButtonE6ButtonRNS_11ButtonStateEh+0x12a>
    1434:	61 e0       	ldi	r22, 0x01	; 1
    1436:	80 2f       	mov	r24, r16
    1438:	0e 94 95 09 	call	0x132a	; 0x132a <_ZN7ButtonsL14runChangeFuncsE6ButtonNS_9PressTypeE>
    143c:	8d 81       	ldd	r24, Y+5	; 0x05
    143e:	88 23       	and	r24, r24
    1440:	09 f1       	breq	.+66     	; 0x1484 <_ZN7ButtonsL12updateButtonE6ButtonRNS_11ButtonStateEh+0x12a>
    1442:	0e 94 5b 1a 	call	0x34b6	; 0x34b6 <millis>
    1446:	ce 80       	ldd	r12, Y+6	; 0x06
    1448:	df 80       	ldd	r13, Y+7	; 0x07
    144a:	e8 84       	ldd	r14, Y+8	; 0x08
    144c:	f9 84       	ldd	r15, Y+9	; 0x09
    144e:	dc 01       	movw	r26, r24
    1450:	cb 01       	movw	r24, r22
    1452:	8c 19       	sub	r24, r12
    1454:	9d 09       	sbc	r25, r13
    1456:	ae 09       	sbc	r26, r14
    1458:	bf 09       	sbc	r27, r15
    145a:	80 3d       	cpi	r24, 0xD0	; 208
    145c:	97 40       	sbci	r25, 0x07	; 7
    145e:	a1 05       	cpc	r26, r1
    1460:	b1 05       	cpc	r27, r1
    1462:	80 f0       	brcs	.+32     	; 0x1484 <_ZN7ButtonsL12updateButtonE6ButtonRNS_11ButtonStateEh+0x12a>
    1464:	62 e0       	ldi	r22, 0x02	; 2
    1466:	80 2f       	mov	r24, r16
    1468:	df 91       	pop	r29
    146a:	cf 91       	pop	r28
    146c:	1f 91       	pop	r17
    146e:	0f 91       	pop	r16
    1470:	ff 90       	pop	r15
    1472:	ef 90       	pop	r14
    1474:	df 90       	pop	r13
    1476:	cf 90       	pop	r12
    1478:	bf 90       	pop	r11
    147a:	af 90       	pop	r10
    147c:	9f 90       	pop	r9
    147e:	8f 90       	pop	r8
    1480:	0c 94 95 09 	jmp	0x132a	; 0x132a <_ZN7ButtonsL14runChangeFuncsE6ButtonNS_9PressTypeE>
    1484:	df 91       	pop	r29
    1486:	cf 91       	pop	r28
    1488:	1f 91       	pop	r17
    148a:	0f 91       	pop	r16
    148c:	ff 90       	pop	r15
    148e:	ef 90       	pop	r14
    1490:	df 90       	pop	r13
    1492:	cf 90       	pop	r12
    1494:	bf 90       	pop	r11
    1496:	af 90       	pop	r10
    1498:	9f 90       	pop	r9
    149a:	8f 90       	pop	r8
    149c:	08 95       	ret

0000149e <_ZN7Buttons6updateEv>:
    149e:	42 e0       	ldi	r20, 0x02	; 2
    14a0:	6e ed       	ldi	r22, 0xDE	; 222
    14a2:	71 e0       	ldi	r23, 0x01	; 1
    14a4:	80 e0       	ldi	r24, 0x00	; 0
    14a6:	0e 94 ad 09 	call	0x135a	; 0x135a <_ZN7ButtonsL12updateButtonE6ButtonRNS_11ButtonStateEh>
    14aa:	44 e0       	ldi	r20, 0x04	; 4
    14ac:	68 ee       	ldi	r22, 0xE8	; 232
    14ae:	71 e0       	ldi	r23, 0x01	; 1
    14b0:	81 e0       	ldi	r24, 0x01	; 1
    14b2:	0e 94 ad 09 	call	0x135a	; 0x135a <_ZN7ButtonsL12updateButtonE6ButtonRNS_11ButtonStateEh>
    14b6:	43 e0       	ldi	r20, 0x03	; 3
    14b8:	62 ef       	ldi	r22, 0xF2	; 242
    14ba:	71 e0       	ldi	r23, 0x01	; 1
    14bc:	82 e0       	ldi	r24, 0x02	; 2
    14be:	0e 94 ad 09 	call	0x135a	; 0x135a <_ZN7ButtonsL12updateButtonE6ButtonRNS_11ButtonStateEh>
    14c2:	45 e0       	ldi	r20, 0x05	; 5
    14c4:	6c ef       	ldi	r22, 0xFC	; 252
    14c6:	71 e0       	ldi	r23, 0x01	; 1
    14c8:	83 e0       	ldi	r24, 0x03	; 3
    14ca:	0c 94 ad 09 	jmp	0x135a	; 0x135a <_ZN7ButtonsL12updateButtonE6ButtonRNS_11ButtonStateEh>

000014ce <_ZN7Buttons18registerChangeFuncEPFv6ButtonNS_9PressTypeEE>:

    void registerChangeFunc(ChangeFunc func) {
    14ce:	e6 ed       	ldi	r30, 0xD6	; 214
    14d0:	f1 e0       	ldi	r31, 0x01	; 1
    14d2:	20 e0       	ldi	r18, 0x00	; 0
    14d4:	30 e0       	ldi	r19, 0x00	; 0
        for (uint8_t i = 0; i < BUTTON_HOOKS_MAX; i++) {
            if (changeFuncs[i] == nullptr) {
    14d6:	41 91       	ld	r20, Z+
    14d8:	51 91       	ld	r21, Z+
    14da:	45 2b       	or	r20, r21
    14dc:	41 f4       	brne	.+16     	; 0x14ee <_ZN7Buttons18registerChangeFuncEPFv6ButtonNS_9PressTypeEE+0x20>
                changeFuncs[i] = func;
    14de:	22 0f       	add	r18, r18
    14e0:	33 1f       	adc	r19, r19
    14e2:	f9 01       	movw	r30, r18
    14e4:	ea 52       	subi	r30, 0x2A	; 42
    14e6:	fe 4f       	sbci	r31, 0xFE	; 254
    14e8:	91 83       	std	Z+1, r25	; 0x01
    14ea:	80 83       	st	Z, r24
                return;
    14ec:	08 95       	ret
    14ee:	2f 5f       	subi	r18, 0xFF	; 255
    14f0:	3f 4f       	sbci	r19, 0xFF	; 255

        return false;
    }

    void registerChangeFunc(ChangeFunc func) {
        for (uint8_t i = 0; i < BUTTON_HOOKS_MAX; i++) {
    14f2:	24 30       	cpi	r18, 0x04	; 4
    14f4:	31 05       	cpc	r19, r1
    14f6:	79 f7       	brne	.-34     	; 0x14d6 <_ZN7Buttons18registerChangeFuncEPFv6ButtonNS_9PressTypeEE+0x8>
    14f8:	08 95       	ret

000014fa <_ZN8Channels17getSynthRegisterBEh>:
};


namespace Channels {
    const uint16_t getSynthRegisterB(uint8_t index) {
        return pgm_read_word_near(channelTable + index);
    14fa:	e8 2f       	mov	r30, r24
    14fc:	f0 e0       	ldi	r31, 0x00	; 0
    14fe:	ee 0f       	add	r30, r30
    1500:	ff 1f       	adc	r31, r31
    1502:	e0 5d       	subi	r30, 0xD0	; 208
    1504:	fe 4f       	sbci	r31, 0xFE	; 254
    1506:	85 91       	lpm	r24, Z+
    1508:	94 91       	lpm	r25, Z
    }
    150a:	08 95       	ret

0000150c <_ZN8Channels12getFrequencyEh>:

    const uint16_t getFrequency(uint8_t index) {
        return pgm_read_word_near(channelFreqTable + index);
    150c:	e8 2f       	mov	r30, r24
    150e:	f0 e0       	ldi	r31, 0x00	; 0
    1510:	ee 0f       	add	r30, r30
    1512:	ff 1f       	adc	r31, r31
    1514:	e0 52       	subi	r30, 0x20	; 32
    1516:	ff 4f       	sbci	r31, 0xFF	; 255
    1518:	85 91       	lpm	r24, Z+
    151a:	94 91       	lpm	r25, Z
    }
    151c:	08 95       	ret

0000151e <_ZN8Channels7getNameEh>:

    // Returns channel name as a string.
    //      dest[] must be at least 3-bytes.
    char nameBuffer[3];
    const char *getName(uint8_t index) {
        uint8_t encodedName = pgm_read_byte_near(channelNames + index);
    151e:	e8 2f       	mov	r30, r24
    1520:	f0 e0       	ldi	r31, 0x00	; 0
    1522:	e8 54       	subi	r30, 0x48	; 72
    1524:	ff 4f       	sbci	r31, 0xFF	; 255
    1526:	e4 91       	lpm	r30, Z

        nameBuffer[0] = 65 + (encodedName >> 3);
    1528:	a6 e0       	ldi	r26, 0x06	; 6
    152a:	b2 e0       	ldi	r27, 0x02	; 2
    152c:	8e 2f       	mov	r24, r30
    152e:	86 95       	lsr	r24
    1530:	86 95       	lsr	r24
    1532:	86 95       	lsr	r24
    1534:	8f 5b       	subi	r24, 0xBF	; 191
    1536:	8c 93       	st	X, r24
        nameBuffer[1] = 48 + (encodedName & (255 >> (8 - 3))) + 1;
    1538:	e7 70       	andi	r30, 0x07	; 7
    153a:	ef 5c       	subi	r30, 0xCF	; 207
    153c:	11 96       	adiw	r26, 0x01	; 1
    153e:	ec 93       	st	X, r30
    1540:	11 97       	sbiw	r26, 0x01	; 1
        nameBuffer[2] = '\0';
    1542:	12 96       	adiw	r26, 0x02	; 2
    1544:	1c 92       	st	X, r1
    1546:	12 97       	sbiw	r26, 0x02	; 2

        return nameBuffer;
    }
    1548:	cd 01       	movw	r24, r26
    154a:	08 95       	ret

0000154c <_ZN8Channels15getOrderedIndexEh>:

    const uint8_t getOrderedIndex(uint8_t index) {
        return pgm_read_byte_near(channelFreqOrderedIndex + index);
    154c:	e8 2f       	mov	r30, r24
    154e:	f0 e0       	ldi	r31, 0x00	; 0
    1550:	e0 57       	subi	r30, 0x70	; 112
    1552:	ff 4f       	sbci	r31, 0xFF	; 255
    1554:	84 91       	lpm	r24, Z
    }
    1556:	08 95       	ret

00001558 <_ZN8Channels24getOrderedIndexFromIndexEh>:

    const uint8_t getOrderedIndexFromIndex(uint8_t index) {
        return pgm_read_byte_near(channelIndexToOrderedIndex + index);
    1558:	e8 2f       	mov	r30, r24
    155a:	f0 e0       	ldi	r31, 0x00	; 0
    155c:	e8 59       	subi	r30, 0x98	; 152
    155e:	ff 4f       	sbci	r31, 0xFF	; 255
    1560:	84 91       	lpm	r24, Z
    }
    1562:	08 95       	ret

00001564 <_Z14PSTRtoBuffer_PPKc>:
#include "pstr_helper.h"
#include <avr/pgmspace.h>

char PSTR2_BUFFER[PSTR2_BUFFER_SIZE];

char *PSTRtoBuffer_P(PGM_P str) { 
    1564:	fc 01       	movw	r30, r24
    1566:	a9 e0       	ldi	r26, 0x09	; 9
    1568:	b2 e0       	ldi	r27, 0x02	; 2
    uint8_t i = 0;
    156a:	90 e0       	ldi	r25, 0x00	; 0
    
    for (
        uint8_t c = '\0';
        c = pgm_read_byte(str + i) && i < sizeof(PSTR2_BUFFER); 
    156c:	84 91       	lpm	r24, Z
    156e:	88 23       	and	r24, r24
    1570:	51 f0       	breq	.+20     	; 0x1586 <_Z14PSTRtoBuffer_PPKc+0x22>
    1572:	9f 01       	movw	r18, r30
    1574:	2f 5f       	subi	r18, 0xFF	; 255
    1576:	3f 4f       	sbci	r19, 0xFF	; 255
    1578:	90 33       	cpi	r25, 0x30	; 48
    157a:	29 f0       	breq	.+10     	; 0x1586 <_Z14PSTRtoBuffer_PPKc+0x22>
        i++
    ) {
        PSTR2_BUFFER[i] = pgm_read_byte(str + i);
    157c:	e4 91       	lpm	r30, Z
    157e:	ed 93       	st	X+, r30
char PSTR2_BUFFER[PSTR2_BUFFER_SIZE];

char *PSTRtoBuffer_P(PGM_P str) { 
    uint8_t i = 0;
    
    for (
    1580:	9f 5f       	subi	r25, 0xFF	; 255
    1582:	f9 01       	movw	r30, r18
    1584:	f3 cf       	rjmp	.-26     	; 0x156c <_Z14PSTRtoBuffer_PPKc+0x8>
        i++
    ) {
        PSTR2_BUFFER[i] = pgm_read_byte(str + i);
    }
    
    PSTR2_BUFFER[i] = '\0'; // Loop drops early so add in finishing terminator.
    1586:	e9 2f       	mov	r30, r25
    1588:	f0 e0       	ldi	r31, 0x00	; 0
    158a:	e7 5f       	subi	r30, 0xF7	; 247
    158c:	fd 4f       	sbci	r31, 0xFD	; 253
    158e:	10 82       	st	Z, r1
    return PSTR2_BUFFER;
    1590:	89 e0       	ldi	r24, 0x09	; 9
    1592:	92 e0       	ldi	r25, 0x02	; 2
    1594:	08 95       	ret

00001596 <_ZN8Receiver10setChannelEh>:
    }

#ifdef USE_DIVERSITY
    void setDiversityMode(DiversityMode mode) {
        EepromSettings.diversityMode = mode;
        switchDiversity();
    1596:	cf 93       	push	r28
    1598:	c8 2f       	mov	r28, r24
    159a:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <_ZN8Channels17getSynthRegisterBEh>
    159e:	0e 94 e1 0c 	call	0x19c2	; 0x19c2 <_ZN11ReceiverSpi17setSynthRegisterBEj>
    15a2:	80 e4       	ldi	r24, 0x40	; 64
    15a4:	92 e0       	ldi	r25, 0x02	; 2
    15a6:	0e 94 6f 16 	call	0x2cde	; 0x2cde <_ZN5Timer5resetEv>
    15aa:	c0 93 85 02 	sts	0x0285, r28	; 0x800285 <_ZN8Receiver13activeChannelE>
    15ae:	cf 91       	pop	r28
    15b0:	08 95       	ret

000015b2 <_ZN8Receiver17setActiveReceiverENS_10ReceiverIdE>:
    15b2:	88 23       	and	r24, r24
    15b4:	19 f0       	breq	.+6      	; 0x15bc <_ZN8Receiver17setActiveReceiverENS_10ReceiverIdE+0xa>
    15b6:	2e e0       	ldi	r18, 0x0E	; 14
    15b8:	4f e0       	ldi	r20, 0x0F	; 15
    15ba:	02 c0       	rjmp	.+4      	; 0x15c0 <_ZN8Receiver17setActiveReceiverENS_10ReceiverIdE+0xe>
    15bc:	2f e0       	ldi	r18, 0x0F	; 15
    15be:	4e e0       	ldi	r20, 0x0E	; 14
    15c0:	50 e0       	ldi	r21, 0x00	; 0
    15c2:	fa 01       	movw	r30, r20
    15c4:	ef 52       	subi	r30, 0x2F	; 47
    15c6:	f7 4f       	sbci	r31, 0xF7	; 247
    15c8:	94 91       	lpm	r25, Z
    15ca:	fa 01       	movw	r30, r20
    15cc:	e3 54       	subi	r30, 0x43	; 67
    15ce:	f7 4f       	sbci	r31, 0xF7	; 247
    15d0:	44 91       	lpm	r20, Z
    15d2:	e2 2f       	mov	r30, r18
    15d4:	f0 e0       	ldi	r31, 0x00	; 0
    15d6:	e3 54       	subi	r30, 0x43	; 67
    15d8:	f7 4f       	sbci	r31, 0xF7	; 247
    15da:	24 91       	lpm	r18, Z
    15dc:	e9 2f       	mov	r30, r25
    15de:	f0 e0       	ldi	r31, 0x00	; 0
    15e0:	ee 0f       	add	r30, r30
    15e2:	ff 1f       	adc	r31, r31
    15e4:	e1 51       	subi	r30, 0x11	; 17
    15e6:	f7 4f       	sbci	r31, 0xF7	; 247
    15e8:	a5 91       	lpm	r26, Z+
    15ea:	b4 91       	lpm	r27, Z
    15ec:	ec 91       	ld	r30, X
    15ee:	4e 2b       	or	r20, r30
    15f0:	e2 2f       	mov	r30, r18
    15f2:	e0 95       	com	r30
    15f4:	e4 23       	and	r30, r20
    15f6:	ec 93       	st	X, r30
    15f8:	80 93 86 02 	sts	0x0286, r24	; 0x800286 <_ZN8Receiver14activeReceiverE>
    15fc:	08 95       	ret

000015fe <_ZN8Receiver12isRssiStableEv>:
    15fe:	80 e4       	ldi	r24, 0x40	; 64
    1600:	92 e0       	ldi	r25, 0x02	; 2
    1602:	0c 94 50 16 	jmp	0x2ca0	; 0x2ca0 <_ZN5Timer9hasTickedEv>

00001606 <_ZN8Receiver10updateRssiEv>:
    1606:	af 92       	push	r10
    1608:	bf 92       	push	r11
    160a:	cf 92       	push	r12
    160c:	df 92       	push	r13
    160e:	ef 92       	push	r14
    1610:	ff 92       	push	r15
    1612:	0f 93       	push	r16
    1614:	1f 93       	push	r17
    1616:	cf 93       	push	r28
    1618:	84 e1       	ldi	r24, 0x14	; 20
    161a:	0e 94 0e 1b 	call	0x361c	; 0x361c <analogRead>
    161e:	84 e1       	ldi	r24, 0x14	; 20
    1620:	0e 94 0e 1b 	call	0x361c	; 0x361c <analogRead>
    1624:	90 93 83 02 	sts	0x0283, r25	; 0x800283 <_ZN8Receiver8rssiARawE+0x1>
    1628:	80 93 82 02 	sts	0x0282, r24	; 0x800282 <_ZN8Receiver8rssiARawE>
    162c:	85 e1       	ldi	r24, 0x15	; 21
    162e:	0e 94 0e 1b 	call	0x361c	; 0x361c <analogRead>
    1632:	85 e1       	ldi	r24, 0x15	; 21
    1634:	0e 94 0e 1b 	call	0x361c	; 0x361c <analogRead>
    1638:	90 93 68 02 	sts	0x0268, r25	; 0x800268 <_ZN8Receiver8rssiBRawE+0x1>
    163c:	80 93 67 02 	sts	0x0267, r24	; 0x800267 <_ZN8Receiver8rssiBRawE>
    1640:	e0 90 91 02 	lds	r14, 0x0291	; 0x800291 <EepromSettings+0xa>
    1644:	f0 90 92 02 	lds	r15, 0x0292	; 0x800292 <EepromSettings+0xb>
    1648:	00 e0       	ldi	r16, 0x00	; 0
    164a:	10 e0       	ldi	r17, 0x00	; 0
    164c:	20 91 8f 02 	lds	r18, 0x028F	; 0x80028f <EepromSettings+0x8>
    1650:	30 91 90 02 	lds	r19, 0x0290	; 0x800290 <EepromSettings+0x9>
    1654:	40 e0       	ldi	r20, 0x00	; 0
    1656:	50 e0       	ldi	r21, 0x00	; 0
    1658:	60 91 82 02 	lds	r22, 0x0282	; 0x800282 <_ZN8Receiver8rssiARawE>
    165c:	70 91 83 02 	lds	r23, 0x0283	; 0x800283 <_ZN8Receiver8rssiARawE+0x1>
    1660:	80 e0       	ldi	r24, 0x00	; 0
    1662:	90 e0       	ldi	r25, 0x00	; 0
    1664:	1f 92       	push	r1
    1666:	1f 92       	push	r1
    1668:	1f 92       	push	r1
    166a:	c4 e6       	ldi	r28, 0x64	; 100
    166c:	cf 93       	push	r28
    166e:	a1 2c       	mov	r10, r1
    1670:	b1 2c       	mov	r11, r1
    1672:	65 01       	movw	r12, r10
    1674:	0e 94 e8 1b 	call	0x37d0	; 0x37d0 <_Z3maplllll>
    1678:	0f 90       	pop	r0
    167a:	0f 90       	pop	r0
    167c:	0f 90       	pop	r0
    167e:	0f 90       	pop	r0
    1680:	97 fd       	sbrc	r25, 7
    1682:	3e c0       	rjmp	.+124    	; 0x1700 <_ZN8Receiver10updateRssiEv+0xfa>
    1684:	e0 90 91 02 	lds	r14, 0x0291	; 0x800291 <EepromSettings+0xa>
    1688:	f0 90 92 02 	lds	r15, 0x0292	; 0x800292 <EepromSettings+0xb>
    168c:	00 e0       	ldi	r16, 0x00	; 0
    168e:	10 e0       	ldi	r17, 0x00	; 0
    1690:	20 91 8f 02 	lds	r18, 0x028F	; 0x80028f <EepromSettings+0x8>
    1694:	30 91 90 02 	lds	r19, 0x0290	; 0x800290 <EepromSettings+0x9>
    1698:	40 e0       	ldi	r20, 0x00	; 0
    169a:	50 e0       	ldi	r21, 0x00	; 0
    169c:	60 91 82 02 	lds	r22, 0x0282	; 0x800282 <_ZN8Receiver8rssiARawE>
    16a0:	70 91 83 02 	lds	r23, 0x0283	; 0x800283 <_ZN8Receiver8rssiARawE+0x1>
    16a4:	80 e0       	ldi	r24, 0x00	; 0
    16a6:	90 e0       	ldi	r25, 0x00	; 0
    16a8:	1f 92       	push	r1
    16aa:	1f 92       	push	r1
    16ac:	1f 92       	push	r1
    16ae:	cf 93       	push	r28
    16b0:	0e 94 e8 1b 	call	0x37d0	; 0x37d0 <_Z3maplllll>
    16b4:	0f 90       	pop	r0
    16b6:	0f 90       	pop	r0
    16b8:	0f 90       	pop	r0
    16ba:	0f 90       	pop	r0
    16bc:	65 36       	cpi	r22, 0x65	; 101
    16be:	71 05       	cpc	r23, r1
    16c0:	81 05       	cpc	r24, r1
    16c2:	91 05       	cpc	r25, r1
    16c4:	fc f4       	brge	.+62     	; 0x1704 <_ZN8Receiver10updateRssiEv+0xfe>
    16c6:	e0 90 91 02 	lds	r14, 0x0291	; 0x800291 <EepromSettings+0xa>
    16ca:	f0 90 92 02 	lds	r15, 0x0292	; 0x800292 <EepromSettings+0xb>
    16ce:	00 e0       	ldi	r16, 0x00	; 0
    16d0:	10 e0       	ldi	r17, 0x00	; 0
    16d2:	20 91 8f 02 	lds	r18, 0x028F	; 0x80028f <EepromSettings+0x8>
    16d6:	30 91 90 02 	lds	r19, 0x0290	; 0x800290 <EepromSettings+0x9>
    16da:	40 e0       	ldi	r20, 0x00	; 0
    16dc:	50 e0       	ldi	r21, 0x00	; 0
    16de:	60 91 82 02 	lds	r22, 0x0282	; 0x800282 <_ZN8Receiver8rssiARawE>
    16e2:	70 91 83 02 	lds	r23, 0x0283	; 0x800283 <_ZN8Receiver8rssiARawE+0x1>
    16e6:	80 e0       	ldi	r24, 0x00	; 0
    16e8:	90 e0       	ldi	r25, 0x00	; 0
    16ea:	1f 92       	push	r1
    16ec:	1f 92       	push	r1
    16ee:	1f 92       	push	r1
    16f0:	cf 93       	push	r28
    16f2:	0e 94 e8 1b 	call	0x37d0	; 0x37d0 <_Z3maplllll>
    16f6:	0f 90       	pop	r0
    16f8:	0f 90       	pop	r0
    16fa:	0f 90       	pop	r0
    16fc:	0f 90       	pop	r0
    16fe:	03 c0       	rjmp	.+6      	; 0x1706 <_ZN8Receiver10updateRssiEv+0x100>
    1700:	60 e0       	ldi	r22, 0x00	; 0
    1702:	01 c0       	rjmp	.+2      	; 0x1706 <_ZN8Receiver10updateRssiEv+0x100>
    1704:	64 e6       	ldi	r22, 0x64	; 100
    1706:	60 93 84 02 	sts	0x0284, r22	; 0x800284 <_ZN8Receiver5rssiAE>
    170a:	e0 90 96 02 	lds	r14, 0x0296	; 0x800296 <EepromSettings+0xf>
    170e:	f0 90 97 02 	lds	r15, 0x0297	; 0x800297 <EepromSettings+0x10>
    1712:	00 e0       	ldi	r16, 0x00	; 0
    1714:	10 e0       	ldi	r17, 0x00	; 0
    1716:	20 91 94 02 	lds	r18, 0x0294	; 0x800294 <EepromSettings+0xd>
    171a:	30 91 95 02 	lds	r19, 0x0295	; 0x800295 <EepromSettings+0xe>
    171e:	40 e0       	ldi	r20, 0x00	; 0
    1720:	50 e0       	ldi	r21, 0x00	; 0
    1722:	60 91 67 02 	lds	r22, 0x0267	; 0x800267 <_ZN8Receiver8rssiBRawE>
    1726:	70 91 68 02 	lds	r23, 0x0268	; 0x800268 <_ZN8Receiver8rssiBRawE+0x1>
    172a:	80 e0       	ldi	r24, 0x00	; 0
    172c:	90 e0       	ldi	r25, 0x00	; 0
    172e:	1f 92       	push	r1
    1730:	1f 92       	push	r1
    1732:	1f 92       	push	r1
    1734:	c4 e6       	ldi	r28, 0x64	; 100
    1736:	cf 93       	push	r28
    1738:	a1 2c       	mov	r10, r1
    173a:	b1 2c       	mov	r11, r1
    173c:	65 01       	movw	r12, r10
    173e:	0e 94 e8 1b 	call	0x37d0	; 0x37d0 <_Z3maplllll>
    1742:	0f 90       	pop	r0
    1744:	0f 90       	pop	r0
    1746:	0f 90       	pop	r0
    1748:	0f 90       	pop	r0
    174a:	97 fd       	sbrc	r25, 7
    174c:	3e c0       	rjmp	.+124    	; 0x17ca <_ZN8Receiver10updateRssiEv+0x1c4>
    174e:	e0 90 96 02 	lds	r14, 0x0296	; 0x800296 <EepromSettings+0xf>
    1752:	f0 90 97 02 	lds	r15, 0x0297	; 0x800297 <EepromSettings+0x10>
    1756:	00 e0       	ldi	r16, 0x00	; 0
    1758:	10 e0       	ldi	r17, 0x00	; 0
    175a:	20 91 94 02 	lds	r18, 0x0294	; 0x800294 <EepromSettings+0xd>
    175e:	30 91 95 02 	lds	r19, 0x0295	; 0x800295 <EepromSettings+0xe>
    1762:	40 e0       	ldi	r20, 0x00	; 0
    1764:	50 e0       	ldi	r21, 0x00	; 0
    1766:	60 91 67 02 	lds	r22, 0x0267	; 0x800267 <_ZN8Receiver8rssiBRawE>
    176a:	70 91 68 02 	lds	r23, 0x0268	; 0x800268 <_ZN8Receiver8rssiBRawE+0x1>
    176e:	80 e0       	ldi	r24, 0x00	; 0
    1770:	90 e0       	ldi	r25, 0x00	; 0
    1772:	1f 92       	push	r1
    1774:	1f 92       	push	r1
    1776:	1f 92       	push	r1
    1778:	cf 93       	push	r28
    177a:	0e 94 e8 1b 	call	0x37d0	; 0x37d0 <_Z3maplllll>
    177e:	0f 90       	pop	r0
    1780:	0f 90       	pop	r0
    1782:	0f 90       	pop	r0
    1784:	0f 90       	pop	r0
    1786:	65 36       	cpi	r22, 0x65	; 101
    1788:	71 05       	cpc	r23, r1
    178a:	81 05       	cpc	r24, r1
    178c:	91 05       	cpc	r25, r1
    178e:	fc f4       	brge	.+62     	; 0x17ce <_ZN8Receiver10updateRssiEv+0x1c8>
    1790:	e0 90 96 02 	lds	r14, 0x0296	; 0x800296 <EepromSettings+0xf>
    1794:	f0 90 97 02 	lds	r15, 0x0297	; 0x800297 <EepromSettings+0x10>
    1798:	00 e0       	ldi	r16, 0x00	; 0
    179a:	10 e0       	ldi	r17, 0x00	; 0
    179c:	20 91 94 02 	lds	r18, 0x0294	; 0x800294 <EepromSettings+0xd>
    17a0:	30 91 95 02 	lds	r19, 0x0295	; 0x800295 <EepromSettings+0xe>
    17a4:	40 e0       	ldi	r20, 0x00	; 0
    17a6:	50 e0       	ldi	r21, 0x00	; 0
    17a8:	60 91 67 02 	lds	r22, 0x0267	; 0x800267 <_ZN8Receiver8rssiBRawE>
    17ac:	70 91 68 02 	lds	r23, 0x0268	; 0x800268 <_ZN8Receiver8rssiBRawE+0x1>
    17b0:	80 e0       	ldi	r24, 0x00	; 0
    17b2:	90 e0       	ldi	r25, 0x00	; 0
    17b4:	1f 92       	push	r1
    17b6:	1f 92       	push	r1
    17b8:	1f 92       	push	r1
    17ba:	cf 93       	push	r28
    17bc:	0e 94 e8 1b 	call	0x37d0	; 0x37d0 <_Z3maplllll>
    17c0:	0f 90       	pop	r0
    17c2:	0f 90       	pop	r0
    17c4:	0f 90       	pop	r0
    17c6:	0f 90       	pop	r0
    17c8:	03 c0       	rjmp	.+6      	; 0x17d0 <_ZN8Receiver10updateRssiEv+0x1ca>
    17ca:	60 e0       	ldi	r22, 0x00	; 0
    17cc:	01 c0       	rjmp	.+2      	; 0x17d0 <_ZN8Receiver10updateRssiEv+0x1ca>
    17ce:	64 e6       	ldi	r22, 0x64	; 100
    17d0:	60 93 69 02 	sts	0x0269, r22	; 0x800269 <_ZN8Receiver5rssiBE>
    17d4:	89 e3       	ldi	r24, 0x39	; 57
    17d6:	92 e0       	ldi	r25, 0x02	; 2
    17d8:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <_ZN5Timer9hasTickedEv>
    17dc:	88 23       	and	r24, r24
    17de:	d1 f0       	breq	.+52     	; 0x1814 <_ZN8Receiver10updateRssiEv+0x20e>
    17e0:	ea e6       	ldi	r30, 0x6A	; 106
    17e2:	f2 e0       	ldi	r31, 0x02	; 2
    17e4:	af e4       	ldi	r26, 0x4F	; 79
    17e6:	b2 e0       	ldi	r27, 0x02	; 2
    17e8:	81 81       	ldd	r24, Z+1	; 0x01
    17ea:	81 93       	st	Z+, r24
    17ec:	11 96       	adiw	r26, 0x01	; 1
    17ee:	8c 91       	ld	r24, X
    17f0:	11 97       	sbiw	r26, 0x01	; 1
    17f2:	8d 93       	st	X+, r24
    17f4:	82 e0       	ldi	r24, 0x02	; 2
    17f6:	e1 38       	cpi	r30, 0x81	; 129
    17f8:	f8 07       	cpc	r31, r24
    17fa:	b1 f7       	brne	.-20     	; 0x17e8 <_ZN8Receiver10updateRssiEv+0x1e2>
    17fc:	80 91 84 02 	lds	r24, 0x0284	; 0x800284 <_ZN8Receiver5rssiAE>
    1800:	80 93 81 02 	sts	0x0281, r24	; 0x800281 <_ZN8Receiver9rssiALastE+0x17>
    1804:	80 91 69 02 	lds	r24, 0x0269	; 0x800269 <_ZN8Receiver5rssiBE>
    1808:	80 93 66 02 	sts	0x0266, r24	; 0x800266 <_ZN8Receiver9rssiBLastE+0x17>
    180c:	89 e3       	ldi	r24, 0x39	; 57
    180e:	92 e0       	ldi	r25, 0x02	; 2
    1810:	0e 94 6f 16 	call	0x2cde	; 0x2cde <_ZN5Timer5resetEv>
    1814:	cf 91       	pop	r28
    1816:	1f 91       	pop	r17
    1818:	0f 91       	pop	r16
    181a:	ff 90       	pop	r15
    181c:	ef 90       	pop	r14
    181e:	df 90       	pop	r13
    1820:	cf 90       	pop	r12
    1822:	bf 90       	pop	r11
    1824:	af 90       	pop	r10
    1826:	08 95       	ret

00001828 <_ZN8Receiver15switchDiversityEv>:
    1828:	cf 93       	push	r28
    182a:	c0 91 86 02 	lds	r28, 0x0286	; 0x800286 <_ZN8Receiver14activeReceiverE>
    182e:	80 91 93 02 	lds	r24, 0x0293	; 0x800293 <EepromSettings+0xc>
    1832:	81 11       	cpse	r24, r1
    1834:	2d c0       	rjmp	.+90     	; 0x1890 <_ZN8Receiver15switchDiversityEv+0x68>
    1836:	20 91 84 02 	lds	r18, 0x0284	; 0x800284 <_ZN8Receiver5rssiAE>
    183a:	80 91 69 02 	lds	r24, 0x0269	; 0x800269 <_ZN8Receiver5rssiBE>
    183e:	28 1b       	sub	r18, r24
    1840:	82 2f       	mov	r24, r18
    1842:	02 2e       	mov	r0, r18
    1844:	00 0c       	add	r0, r0
    1846:	99 0b       	sbc	r25, r25
    1848:	97 ff       	sbrs	r25, 7
    184a:	03 c0       	rjmp	.+6      	; 0x1852 <_ZN8Receiver15switchDiversityEv+0x2a>
    184c:	91 95       	neg	r25
    184e:	81 95       	neg	r24
    1850:	91 09       	sbc	r25, r1
    1852:	12 16       	cp	r1, r18
    1854:	24 f0       	brlt	.+8      	; 0x185e <_ZN8Receiver15switchDiversityEv+0x36>
    1856:	21 11       	cpse	r18, r1
    1858:	04 c0       	rjmp	.+8      	; 0x1862 <_ZN8Receiver15switchDiversityEv+0x3a>
    185a:	9c 2f       	mov	r25, r28
    185c:	03 c0       	rjmp	.+6      	; 0x1864 <_ZN8Receiver15switchDiversityEv+0x3c>
    185e:	90 e0       	ldi	r25, 0x00	; 0
    1860:	01 c0       	rjmp	.+2      	; 0x1864 <_ZN8Receiver15switchDiversityEv+0x3c>
    1862:	91 e0       	ldi	r25, 0x01	; 1
    1864:	82 30       	cpi	r24, 0x02	; 2
    1866:	78 f0       	brcs	.+30     	; 0x1886 <_ZN8Receiver15switchDiversityEv+0x5e>
    1868:	80 91 4e 02 	lds	r24, 0x024E	; 0x80024e <_ZN8Receiver23diversityTargetReceiverE>
    186c:	98 13       	cpse	r25, r24
    186e:	09 c0       	rjmp	.+18     	; 0x1882 <_ZN8Receiver15switchDiversityEv+0x5a>
    1870:	87 e4       	ldi	r24, 0x47	; 71
    1872:	92 e0       	ldi	r25, 0x02	; 2
    1874:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <_ZN5Timer9hasTickedEv>
    1878:	88 23       	and	r24, r24
    187a:	89 f0       	breq	.+34     	; 0x189e <_ZN8Receiver15switchDiversityEv+0x76>
    187c:	c0 91 4e 02 	lds	r28, 0x024E	; 0x80024e <_ZN8Receiver23diversityTargetReceiverE>
    1880:	0e c0       	rjmp	.+28     	; 0x189e <_ZN8Receiver15switchDiversityEv+0x76>
    1882:	90 93 4e 02 	sts	0x024E, r25	; 0x80024e <_ZN8Receiver23diversityTargetReceiverE>
    1886:	87 e4       	ldi	r24, 0x47	; 71
    1888:	92 e0       	ldi	r25, 0x02	; 2
    188a:	0e 94 6f 16 	call	0x2cde	; 0x2cde <_ZN5Timer5resetEv>
    188e:	07 c0       	rjmp	.+14     	; 0x189e <_ZN8Receiver15switchDiversityEv+0x76>
    1890:	81 30       	cpi	r24, 0x01	; 1
    1892:	21 f0       	breq	.+8      	; 0x189c <_ZN8Receiver15switchDiversityEv+0x74>
    1894:	82 30       	cpi	r24, 0x02	; 2
    1896:	19 f4       	brne	.+6      	; 0x189e <_ZN8Receiver15switchDiversityEv+0x76>
    1898:	c1 e0       	ldi	r28, 0x01	; 1
    189a:	01 c0       	rjmp	.+2      	; 0x189e <_ZN8Receiver15switchDiversityEv+0x76>
    189c:	c0 e0       	ldi	r28, 0x00	; 0
    189e:	8c 2f       	mov	r24, r28
    18a0:	cf 91       	pop	r28
    18a2:	0c 94 d9 0a 	jmp	0x15b2	; 0x15b2 <_ZN8Receiver17setActiveReceiverENS_10ReceiverIdE>

000018a6 <_ZN8Receiver5setupEv>:

        setActiveReceiver(nextReceiver);
    }
#endif

    void setup() {
    18a6:	08 95       	ret

000018a8 <_ZN8Receiver6updateEv>:
            ReceiverSpi::setPowerDownRegister(0b00010000110111110011);
        #endif
    }

    void update() {
        if (rssiStableTimer.hasTicked()) {
    18a8:	80 e4       	ldi	r24, 0x40	; 64
    18aa:	92 e0       	ldi	r25, 0x02	; 2
    18ac:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <_ZN5Timer9hasTickedEv>
    18b0:	88 23       	and	r24, r24
    18b2:	21 f0       	breq	.+8      	; 0x18bc <_ZN8Receiver6updateEv+0x14>
            updateRssi();
    18b4:	0e 94 03 0b 	call	0x1606	; 0x1606 <_ZN8Receiver10updateRssiEv>
            #ifdef USE_SERIAL_OUT
                writeSerialData();
            #endif

            #ifdef USE_DIVERSITY
                switchDiversity();
    18b8:	0c 94 14 0c 	jmp	0x1828	; 0x1828 <_ZN8Receiver15switchDiversityEv>
    18bc:	08 95       	ret

000018be <_GLOBAL__sub_I__ZN8Receiver14activeReceiverE>:
    #ifdef USE_DIVERSITY
        uint8_t rssiB = 0;
        uint16_t rssiBRaw = 0;
        uint8_t rssiBLast[RECEIVER_LAST_DATA_SIZE] = { 0 };

        ReceiverId diversityTargetReceiver = activeReceiver;
    18be:	80 91 86 02 	lds	r24, 0x0286	; 0x800286 <_ZN8Receiver14activeReceiverE>
    18c2:	80 93 4e 02 	sts	0x024E, r24	; 0x80024e <_ZN8Receiver23diversityTargetReceiverE>
        Timer diversityHysteresisTimer = Timer(DIVERSITY_HYSTERESIS_PERIOD);
    18c6:	65 e0       	ldi	r22, 0x05	; 5
    18c8:	70 e0       	ldi	r23, 0x00	; 0
    18ca:	87 e4       	ldi	r24, 0x47	; 71
    18cc:	92 e0       	ldi	r25, 0x02	; 2
    18ce:	0e 94 39 16 	call	0x2c72	; 0x2c72 <_ZN5TimerC1Ej>
    #endif

    static Timer rssiStableTimer = Timer(MIN_TUNE_TIME);
    18d2:	69 e1       	ldi	r22, 0x19	; 25
    18d4:	70 e0       	ldi	r23, 0x00	; 0
    18d6:	80 e4       	ldi	r24, 0x40	; 64
    18d8:	92 e0       	ldi	r25, 0x02	; 2
    18da:	0e 94 39 16 	call	0x2c72	; 0x2c72 <_ZN5TimerC1Ej>
    static Timer rssiLogTimer = Timer(RECEIVER_LAST_DELAY);
    18de:	62 e3       	ldi	r22, 0x32	; 50
    18e0:	70 e0       	ldi	r23, 0x00	; 0
    18e2:	89 e3       	ldi	r24, 0x39	; 57
    18e4:	92 e0       	ldi	r25, 0x02	; 2
    18e6:	0c 94 39 16 	jmp	0x2c72	; 0x2c72 <_ZN5TimerC1Ej>

000018ea <_ZL7sendBith>:
        sendBit(bits & 0x1);
        bits >>= 1;
    }
}

static inline void sendBit(uint8_t value) {
    18ea:	cf 93       	push	r28
    18ec:	c8 2f       	mov	r28, r24
    digitalWrite(PIN_SPI_CLOCK, LOW);
    18ee:	60 e0       	ldi	r22, 0x00	; 0
    18f0:	8d e0       	ldi	r24, 0x0D	; 13
    18f2:	0e 94 90 1b 	call	0x3720	; 0x3720 <digitalWrite>
    delayMicroseconds(1);
    18f6:	81 e0       	ldi	r24, 0x01	; 1
    18f8:	90 e0       	ldi	r25, 0x00	; 0
    18fa:	0e 94 c8 1a 	call	0x3590	; 0x3590 <delayMicroseconds>

    digitalWrite(PIN_SPI_DATA, value);
    18fe:	6c 2f       	mov	r22, r28
    1900:	8b e0       	ldi	r24, 0x0B	; 11
    1902:	0e 94 90 1b 	call	0x3720	; 0x3720 <digitalWrite>
    delayMicroseconds(1);
    1906:	81 e0       	ldi	r24, 0x01	; 1
    1908:	90 e0       	ldi	r25, 0x00	; 0
    190a:	0e 94 c8 1a 	call	0x3590	; 0x3590 <delayMicroseconds>
    digitalWrite(PIN_SPI_CLOCK, HIGH);
    190e:	61 e0       	ldi	r22, 0x01	; 1
    1910:	8d e0       	ldi	r24, 0x0D	; 13
    1912:	0e 94 90 1b 	call	0x3720	; 0x3720 <digitalWrite>
    delayMicroseconds(1);
    1916:	81 e0       	ldi	r24, 0x01	; 1
    1918:	90 e0       	ldi	r25, 0x00	; 0
    191a:	0e 94 c8 1a 	call	0x3590	; 0x3590 <delayMicroseconds>

    digitalWrite(PIN_SPI_CLOCK, LOW);
    191e:	60 e0       	ldi	r22, 0x00	; 0
    1920:	8d e0       	ldi	r24, 0x0D	; 13
    1922:	0e 94 90 1b 	call	0x3720	; 0x3720 <digitalWrite>
    delayMicroseconds(1);
    1926:	81 e0       	ldi	r24, 0x01	; 1
    1928:	90 e0       	ldi	r25, 0x00	; 0
}
    192a:	cf 91       	pop	r28
    delayMicroseconds(1);
    digitalWrite(PIN_SPI_CLOCK, HIGH);
    delayMicroseconds(1);

    digitalWrite(PIN_SPI_CLOCK, LOW);
    delayMicroseconds(1);
    192c:	0c 94 c8 1a 	jmp	0x3590	; 0x3590 <delayMicroseconds>

00001930 <_ZL12sendRegisterhm>:
        sendRegister(SPI_ADDRESS_POWER, value);
    }
}


static inline void sendRegister(uint8_t address, uint32_t data) {
    1930:	8f 92       	push	r8
    1932:	9f 92       	push	r9
    1934:	af 92       	push	r10
    1936:	bf 92       	push	r11
    1938:	cf 92       	push	r12
    193a:	df 92       	push	r13
    193c:	ef 92       	push	r14
    193e:	ff 92       	push	r15
    1940:	cf 93       	push	r28
    1942:	c8 2e       	mov	r12, r24
    1944:	4a 01       	movw	r8, r20
    1946:	5b 01       	movw	r10, r22
    digitalWrite(PIN_SPI_CLOCK, LOW);
    delayMicroseconds(1);
}

static inline void sendSlaveSelect(uint8_t value) {
    digitalWrite(PIN_SPI_SLAVE_SELECT, value);
    1948:	60 e0       	ldi	r22, 0x00	; 0
    194a:	8c e0       	ldi	r24, 0x0C	; 12
    194c:	0e 94 90 1b 	call	0x3720	; 0x3720 <digitalWrite>
    delayMicroseconds(1);
    1950:	81 e0       	ldi	r24, 0x01	; 1
    1952:	90 e0       	ldi	r25, 0x00	; 0
    1954:	0e 94 c8 1a 	call	0x3590	; 0x3590 <delayMicroseconds>


static inline void sendRegister(uint8_t address, uint32_t data) {
    sendSlaveSelect(LOW);

    sendBits(address, 4);
    1958:	d1 2c       	mov	r13, r1
    195a:	e1 2c       	mov	r14, r1
    195c:	f1 2c       	mov	r15, r1
    195e:	c4 e0       	ldi	r28, 0x04	; 4
}


static inline void sendBits(uint32_t bits, uint8_t count) {
    for (uint8_t i = 0; i < count; i++) {
        sendBit(bits & 0x1);
    1960:	8c 2d       	mov	r24, r12
    1962:	81 70       	andi	r24, 0x01	; 1
    1964:	0e 94 75 0c 	call	0x18ea	; 0x18ea <_ZL7sendBith>
        bits >>= 1;
    1968:	f6 94       	lsr	r15
    196a:	e7 94       	ror	r14
    196c:	d7 94       	ror	r13
    196e:	c7 94       	ror	r12
    1970:	c1 50       	subi	r28, 0x01	; 1
    digitalWrite(PIN_SPI_DATA, LOW);
}


static inline void sendBits(uint32_t bits, uint8_t count) {
    for (uint8_t i = 0; i < count; i++) {
    1972:	b1 f7       	brne	.-20     	; 0x1960 <_ZL12sendRegisterhm+0x30>

static inline void sendRegister(uint8_t address, uint32_t data) {
    sendSlaveSelect(LOW);

    sendBits(address, 4);
    sendBit(HIGH); // Enable write.
    1974:	81 e0       	ldi	r24, 0x01	; 1
    1976:	0e 94 75 0c 	call	0x18ea	; 0x18ea <_ZL7sendBith>
    197a:	c4 e1       	ldi	r28, 0x14	; 20
}


static inline void sendBits(uint32_t bits, uint8_t count) {
    for (uint8_t i = 0; i < count; i++) {
        sendBit(bits & 0x1);
    197c:	88 2d       	mov	r24, r8
    197e:	81 70       	andi	r24, 0x01	; 1
    1980:	0e 94 75 0c 	call	0x18ea	; 0x18ea <_ZL7sendBith>
        bits >>= 1;
    1984:	b6 94       	lsr	r11
    1986:	a7 94       	ror	r10
    1988:	97 94       	ror	r9
    198a:	87 94       	ror	r8
    198c:	c1 50       	subi	r28, 0x01	; 1
    digitalWrite(PIN_SPI_DATA, LOW);
}


static inline void sendBits(uint32_t bits, uint8_t count) {
    for (uint8_t i = 0; i < count; i++) {
    198e:	b1 f7       	brne	.-20     	; 0x197c <_ZL12sendRegisterhm+0x4c>
    digitalWrite(PIN_SPI_CLOCK, LOW);
    delayMicroseconds(1);
}

static inline void sendSlaveSelect(uint8_t value) {
    digitalWrite(PIN_SPI_SLAVE_SELECT, value);
    1990:	61 e0       	ldi	r22, 0x01	; 1
    1992:	8c e0       	ldi	r24, 0x0C	; 12
    1994:	0e 94 90 1b 	call	0x3720	; 0x3720 <digitalWrite>
    delayMicroseconds(1);
    1998:	81 e0       	ldi	r24, 0x01	; 1
    199a:	90 e0       	ldi	r25, 0x00	; 0
    199c:	0e 94 c8 1a 	call	0x3590	; 0x3590 <delayMicroseconds>

    sendBits(data, 20);

    // Finished clocking data in
    sendSlaveSelect(HIGH);
    digitalWrite(PIN_SPI_CLOCK, LOW);
    19a0:	60 e0       	ldi	r22, 0x00	; 0
    19a2:	8d e0       	ldi	r24, 0x0D	; 13
    19a4:	0e 94 90 1b 	call	0x3720	; 0x3720 <digitalWrite>
    digitalWrite(PIN_SPI_DATA, LOW);
    19a8:	60 e0       	ldi	r22, 0x00	; 0
    19aa:	8b e0       	ldi	r24, 0x0B	; 11
}
    19ac:	cf 91       	pop	r28
    19ae:	ff 90       	pop	r15
    19b0:	ef 90       	pop	r14
    19b2:	df 90       	pop	r13
    19b4:	cf 90       	pop	r12
    19b6:	bf 90       	pop	r11
    19b8:	af 90       	pop	r10
    19ba:	9f 90       	pop	r9
    19bc:	8f 90       	pop	r8
    sendBits(data, 20);

    // Finished clocking data in
    sendSlaveSelect(HIGH);
    digitalWrite(PIN_SPI_CLOCK, LOW);
    digitalWrite(PIN_SPI_DATA, LOW);
    19be:	0c 94 90 1b 	jmp	0x3720	; 0x3720 <digitalWrite>

000019c2 <_ZN11ReceiverSpi17setSynthRegisterBEj>:
    //        R = 8
    //
    // Refer to RTC6715 datasheet for further details.
    //
    void setSynthRegisterB(uint16_t value) {
        sendRegister(SPI_ADDRESS_SYNTH_A, value);
    19c2:	ac 01       	movw	r20, r24
    19c4:	60 e0       	ldi	r22, 0x00	; 0
    19c6:	70 e0       	ldi	r23, 0x00	; 0
    19c8:	81 e0       	ldi	r24, 0x01	; 1
    19ca:	0c 94 98 0c 	jmp	0x1930	; 0x1930 <_ZL12sendRegisterhm>

000019ce <_ZN14EepromSettings4saveEv>:

    if (this->magic != EEPROM_MAGIC)
        this->initDefaults();
}

void EepromSettings::save() {
    19ce:	ff 92       	push	r15
    19d0:	0f 93       	push	r16
    19d2:	1f 93       	push	r17
    19d4:	cf 93       	push	r28
    19d6:	df 93       	push	r29
    19d8:	8c 01       	movw	r16, r24
***/

struct EEPtr{

    EEPtr( const int index )
        : index( index )                {}
    19da:	c0 e0       	ldi	r28, 0x00	; 0
    19dc:	d0 e0       	ldi	r29, 0x00	; 0
    }
    
    template< typename T > const T &put( int idx, const T &t ){
        EEPtr e = idx;
        const uint8_t *ptr = (const uint8_t*) &t;
        for( int count = sizeof(T) ; count ; --count, ++e )  (*e).update( *ptr++ );
    19de:	f8 01       	movw	r30, r16
    19e0:	f1 90       	ld	r15, Z+
    19e2:	8f 01       	movw	r16, r30

    EERef( const int index )
        : index( index )                 {}
    
    //Access/read members.
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    19e4:	ce 01       	movw	r24, r28
    19e6:	0e 94 62 33 	call	0x66c4	; 0x66c4 <eeprom_read_byte>
    EERef &operator &=( uint8_t in )     { return *this = **this & in; }
    EERef &operator |=( uint8_t in )     { return *this = **this | in; }
    EERef &operator <<=( uint8_t in )    { return *this = **this << in; }
    EERef &operator >>=( uint8_t in )    { return *this = **this >> in; }
    
    EERef &update( uint8_t in )          { return  in != *this ? *this = in : *this; }
    19ea:	f8 16       	cp	r15, r24
    19ec:	21 f0       	breq	.+8      	; 0x19f6 <_ZN14EepromSettings4saveEv+0x28>
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    operator uint8_t() const             { return **this; }
    
    //Assignment/write members.
    EERef &operator=( const EERef &ref ) { return *this = *ref; }
    EERef &operator=( uint8_t in )       { return eeprom_write_byte( (uint8_t*) index, in ), *this;  }
    19ee:	6f 2d       	mov	r22, r15
    19f0:	ce 01       	movw	r24, r28
    19f2:	0e 94 6a 33 	call	0x66d4	; 0x66d4 <eeprom_write_byte>
    //Iterator functionality.
    bool operator!=( const EEPtr &ptr ) { return index != ptr.index; }
    EERef operator*()                   { return index; }
    
    /** Prefix & Postfix increment/decrement **/
    EEPtr& operator++()                 { return ++index, *this; }
    19f6:	21 96       	adiw	r28, 0x01	; 1
    }
    
    template< typename T > const T &put( int idx, const T &t ){
        EEPtr e = idx;
        const uint8_t *ptr = (const uint8_t*) &t;
        for( int count = sizeof(T) ; count ; --count, ++e )  (*e).update( *ptr++ );
    19f8:	c1 31       	cpi	r28, 0x11	; 17
    19fa:	d1 05       	cpc	r29, r1
    19fc:	81 f7       	brne	.-32     	; 0x19de <_ZN14EepromSettings4saveEv+0x10>
    EEPROM.put(0, *this);
}
    19fe:	df 91       	pop	r29
    1a00:	cf 91       	pop	r28
    1a02:	1f 91       	pop	r17
    1a04:	0f 91       	pop	r16
    1a06:	ff 90       	pop	r15
    1a08:	08 95       	ret

00001a0a <_ZN14EepromSettings6updateEv>:


struct EepromSettings EepromSettings;


void EepromSettings::update() {
    1a0a:	cf 93       	push	r28
    1a0c:	df 93       	push	r29
    if (isDirty) {
    1a0e:	20 91 98 02 	lds	r18, 0x0298	; 0x800298 <_ZL7isDirty>
    1a12:	22 23       	and	r18, r18
    1a14:	91 f0       	breq	.+36     	; 0x1a3a <_ZN14EepromSettings6updateEv+0x30>
    1a16:	ec 01       	movw	r28, r24
        if (saveTimer.hasTicked()) {
    1a18:	89 e9       	ldi	r24, 0x99	; 153
    1a1a:	92 e0       	ldi	r25, 0x02	; 2
    1a1c:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <_ZN5Timer9hasTickedEv>
    1a20:	88 23       	and	r24, r24
    1a22:	59 f0       	breq	.+22     	; 0x1a3a <_ZN14EepromSettings6updateEv+0x30>
            isDirty = false;
    1a24:	10 92 98 02 	sts	0x0298, r1	; 0x800298 <_ZL7isDirty>
            saveTimer.reset();
    1a28:	89 e9       	ldi	r24, 0x99	; 153
    1a2a:	92 e0       	ldi	r25, 0x02	; 2
    1a2c:	0e 94 6f 16 	call	0x2cde	; 0x2cde <_ZN5Timer5resetEv>

            this->save();
    1a30:	ce 01       	movw	r24, r28
        }
    }
}
    1a32:	df 91       	pop	r29
    1a34:	cf 91       	pop	r28
    if (isDirty) {
        if (saveTimer.hasTicked()) {
            isDirty = false;
            saveTimer.reset();

            this->save();
    1a36:	0c 94 e7 0c 	jmp	0x19ce	; 0x19ce <_ZN14EepromSettings4saveEv>
        }
    }
}
    1a3a:	df 91       	pop	r29
    1a3c:	cf 91       	pop	r28
    1a3e:	08 95       	ret

00001a40 <_ZN14EepromSettings9markDirtyEv>:
void EepromSettings::save() {
    EEPROM.put(0, *this);
}

void EepromSettings::markDirty() {
    isDirty = true;
    1a40:	81 e0       	ldi	r24, 0x01	; 1
    1a42:	80 93 98 02 	sts	0x0298, r24	; 0x800298 <_ZL7isDirty>
    1a46:	08 95       	ret

00001a48 <_ZN14EepromSettings12initDefaultsEv>:
}


void EepromSettings::initDefaults() {
    1a48:	cf 93       	push	r28
    1a4a:	df 93       	push	r29
    1a4c:	ec 01       	movw	r28, r24
    memcpy_P(this, &EepromDefaults, sizeof(EepromDefaults));
    1a4e:	41 e1       	ldi	r20, 0x11	; 17
    1a50:	50 e0       	ldi	r21, 0x00	; 0
    1a52:	60 e8       	ldi	r22, 0x80	; 128
    1a54:	71 e0       	ldi	r23, 0x01	; 1
    1a56:	0e 94 52 33 	call	0x66a4	; 0x66a4 <memcpy_P>
    this->save();
    1a5a:	ce 01       	movw	r24, r28
}
    1a5c:	df 91       	pop	r29
    1a5e:	cf 91       	pop	r28
}


void EepromSettings::initDefaults() {
    memcpy_P(this, &EepromDefaults, sizeof(EepromDefaults));
    this->save();
    1a60:	0c 94 e7 0c 	jmp	0x19ce	; 0x19ce <_ZN14EepromSettings4saveEv>

00001a64 <_ZN14EepromSettings4loadEv>:
            this->save();
        }
    }
}

void EepromSettings::load() {
    1a64:	ef 92       	push	r14
    1a66:	ff 92       	push	r15
    1a68:	0f 93       	push	r16
    1a6a:	1f 93       	push	r17
    1a6c:	cf 93       	push	r28
    1a6e:	df 93       	push	r29
    1a70:	8c 01       	movw	r16, r24
    1a72:	7c 01       	movw	r14, r24
    1a74:	c0 e0       	ldi	r28, 0x00	; 0
    1a76:	d0 e0       	ldi	r29, 0x00	; 0

    EERef( const int index )
        : index( index )                 {}
    
    //Access/read members.
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    1a78:	ce 01       	movw	r24, r28
    1a7a:	0e 94 62 33 	call	0x66c4	; 0x66c4 <eeprom_read_byte>
    
    //Functionality to 'get' and 'put' objects to and from EEPROM.
    template< typename T > T &get( int idx, T &t ){
        EEPtr e = idx;
        uint8_t *ptr = (uint8_t*) &t;
        for( int count = sizeof(T) ; count ; --count, ++e )  *ptr++ = *e;
    1a7e:	f7 01       	movw	r30, r14
    1a80:	81 93       	st	Z+, r24
    1a82:	7f 01       	movw	r14, r30
    1a84:	21 96       	adiw	r28, 0x01	; 1
    1a86:	c1 31       	cpi	r28, 0x11	; 17
    1a88:	d1 05       	cpc	r29, r1
    1a8a:	b1 f7       	brne	.-20     	; 0x1a78 <_ZN14EepromSettings4loadEv+0x14>
    EEPROM.get(0, *this);

    if (this->magic != EEPROM_MAGIC)
    1a8c:	f8 01       	movw	r30, r16
    1a8e:	80 81       	ld	r24, Z
    1a90:	91 81       	ldd	r25, Z+1	; 0x01
    1a92:	a2 81       	ldd	r26, Z+2	; 0x02
    1a94:	b3 81       	ldd	r27, Z+3	; 0x03
    1a96:	09 97       	sbiw	r24, 0x09	; 9
    1a98:	a1 05       	cpc	r26, r1
    1a9a:	b1 05       	cpc	r27, r1
    1a9c:	49 f0       	breq	.+18     	; 0x1ab0 <_ZN14EepromSettings4loadEv+0x4c>
        this->initDefaults();
    1a9e:	c8 01       	movw	r24, r16
}
    1aa0:	df 91       	pop	r29
    1aa2:	cf 91       	pop	r28
    1aa4:	1f 91       	pop	r17
    1aa6:	0f 91       	pop	r16
    1aa8:	ff 90       	pop	r15
    1aaa:	ef 90       	pop	r14

void EepromSettings::load() {
    EEPROM.get(0, *this);

    if (this->magic != EEPROM_MAGIC)
        this->initDefaults();
    1aac:	0c 94 24 0d 	jmp	0x1a48	; 0x1a48 <_ZN14EepromSettings12initDefaultsEv>
}
    1ab0:	df 91       	pop	r29
    1ab2:	cf 91       	pop	r28
    1ab4:	1f 91       	pop	r17
    1ab6:	0f 91       	pop	r16
    1ab8:	ff 90       	pop	r15
    1aba:	ef 90       	pop	r14
    1abc:	08 95       	ret

00001abe <_GLOBAL__sub_I_EepromSettings>:
#include "settings_eeprom.h"

#include "timer.h"


static Timer saveTimer = Timer(EEPROM_SAVE_TIME);
    1abe:	68 e8       	ldi	r22, 0x88	; 136
    1ac0:	73 e1       	ldi	r23, 0x13	; 19
    1ac2:	89 e9       	ldi	r24, 0x99	; 153
    1ac4:	92 e0       	ldi	r25, 0x02	; 2
    1ac6:	0c 94 39 16 	jmp	0x2c72	; 0x2c72 <_ZN5TimerC1Ej>

00001aca <_ZL23globalMenuButtonHandler6ButtonN7Buttons9PressTypeE>:
static void globalMenuButtonHandler(
    Button button,
    Buttons::PressType pressType
) {
	localButton = button;
    if (
    1aca:	90 91 b0 02 	lds	r25, 0x02B0	; 0x8002b0 <_ZN12StateMachine12currentStateE>
    1ace:	94 30       	cpi	r25, 0x04	; 4
    1ad0:	39 f0       	breq	.+14     	; 0x1ae0 <_ZL23globalMenuButtonHandler6ButtonN7Buttons9PressTypeE+0x16>
        StateMachine::currentState != StateMachine::State::MENU &&
    1ad2:	82 30       	cpi	r24, 0x02	; 2
    1ad4:	29 f4       	brne	.+10     	; 0x1ae0 <_ZL23globalMenuButtonHandler6ButtonN7Buttons9PressTypeE+0x16>
        button == Button::MODE &&
    1ad6:	62 30       	cpi	r22, 0x02	; 2
    1ad8:	19 f4       	brne	.+6      	; 0x1ae0 <_ZL23globalMenuButtonHandler6ButtonN7Buttons9PressTypeE+0x16>
        pressType == Buttons::PressType::HOLDING
    ) {
        StateMachine::switchState(StateMachine::State::MENU);
    1ada:	84 e0       	ldi	r24, 0x04	; 4
    1adc:	0c 94 7b 0e 	jmp	0x1cf6	; 0x1cf6 <_ZN12StateMachine11switchStateENS_5StateE>
    1ae0:	08 95       	ret

00001ae2 <_Z9setupPinsv>:
    // Switch to initial state.
    StateMachine::switchState(StateMachine::State::SEARCH);
}

void setupPins() {
	delay(1000); // Delay to allow LCD to boot.
    1ae2:	68 ee       	ldi	r22, 0xE8	; 232
    1ae4:	73 e0       	ldi	r23, 0x03	; 3
    1ae6:	80 e0       	ldi	r24, 0x00	; 0
    1ae8:	90 e0       	ldi	r25, 0x00	; 0
    1aea:	0e 94 8c 1a 	call	0x3518	; 0x3518 <delay>
    pinMode(PIN_LED, OUTPUT);
    1aee:	61 e0       	ldi	r22, 0x01	; 1
    1af0:	80 e1       	ldi	r24, 0x10	; 16
    1af2:	0e 94 54 1b 	call	0x36a8	; 0x36a8 <pinMode>
    pinMode(PIN_BUZZER, OUTPUT);
    1af6:	61 e0       	ldi	r22, 0x01	; 1
    1af8:	86 e0       	ldi	r24, 0x06	; 6
    1afa:	0e 94 54 1b 	call	0x36a8	; 0x36a8 <pinMode>
    pinMode(PIN_BUTTON_UP, INPUT_PULLUP);
    1afe:	62 e0       	ldi	r22, 0x02	; 2
    1b00:	82 e0       	ldi	r24, 0x02	; 2
    1b02:	0e 94 54 1b 	call	0x36a8	; 0x36a8 <pinMode>
    pinMode(PIN_BUTTON_MODE, INPUT_PULLUP);
    1b06:	62 e0       	ldi	r22, 0x02	; 2
    1b08:	83 e0       	ldi	r24, 0x03	; 3
    1b0a:	0e 94 54 1b 	call	0x36a8	; 0x36a8 <pinMode>
    pinMode(PIN_BUTTON_DOWN, INPUT_PULLUP);
    1b0e:	62 e0       	ldi	r22, 0x02	; 2
    1b10:	84 e0       	ldi	r24, 0x04	; 4
    1b12:	0e 94 54 1b 	call	0x36a8	; 0x36a8 <pinMode>
    pinMode(PIN_BUTTON_SAVE, INPUT_PULLUP);
    1b16:	62 e0       	ldi	r22, 0x02	; 2
    1b18:	85 e0       	ldi	r24, 0x05	; 5
    1b1a:	0e 94 54 1b 	call	0x36a8	; 0x36a8 <pinMode>

    pinMode(PIN_LED_A,OUTPUT);
    1b1e:	61 e0       	ldi	r22, 0x01	; 1
    1b20:	8e e0       	ldi	r24, 0x0E	; 14
    1b22:	0e 94 54 1b 	call	0x36a8	; 0x36a8 <pinMode>
    #ifdef USE_DIVERSITY
        pinMode(PIN_LED_B,OUTPUT);
    1b26:	61 e0       	ldi	r22, 0x01	; 1
    1b28:	8f e0       	ldi	r24, 0x0F	; 15
    1b2a:	0e 94 54 1b 	call	0x36a8	; 0x36a8 <pinMode>
    #endif

    pinMode(PIN_RSSI_A, INPUT_PULLUP);
    1b2e:	62 e0       	ldi	r22, 0x02	; 2
    1b30:	84 e1       	ldi	r24, 0x14	; 20
    1b32:	0e 94 54 1b 	call	0x36a8	; 0x36a8 <pinMode>
    #ifdef USE_DIVERSITY
        pinMode(PIN_RSSI_B, INPUT_PULLUP);
    1b36:	62 e0       	ldi	r22, 0x02	; 2
    1b38:	85 e1       	ldi	r24, 0x15	; 21
    1b3a:	0e 94 54 1b 	call	0x36a8	; 0x36a8 <pinMode>
    #endif

    pinMode(PIN_SPI_SLAVE_SELECT, OUTPUT);
    1b3e:	61 e0       	ldi	r22, 0x01	; 1
    1b40:	8c e0       	ldi	r24, 0x0C	; 12
    1b42:	0e 94 54 1b 	call	0x36a8	; 0x36a8 <pinMode>
    pinMode(PIN_SPI_DATA, OUTPUT);
    1b46:	61 e0       	ldi	r22, 0x01	; 1
    1b48:	8b e0       	ldi	r24, 0x0B	; 11
    1b4a:	0e 94 54 1b 	call	0x36a8	; 0x36a8 <pinMode>
	pinMode(PIN_SPI_CLOCK, OUTPUT);
    1b4e:	61 e0       	ldi	r22, 0x01	; 1
    1b50:	8d e0       	ldi	r24, 0x0D	; 13
    1b52:	0e 94 54 1b 	call	0x36a8	; 0x36a8 <pinMode>

    digitalWrite(PIN_SPI_SLAVE_SELECT, HIGH);
    1b56:	61 e0       	ldi	r22, 0x01	; 1
    1b58:	8c e0       	ldi	r24, 0x0C	; 12
    1b5a:	0e 94 90 1b 	call	0x3720	; 0x3720 <digitalWrite>
    digitalWrite(PIN_SPI_CLOCK, LOW);
    1b5e:	60 e0       	ldi	r22, 0x00	; 0
    1b60:	8d e0       	ldi	r24, 0x0D	; 13
    1b62:	0e 94 90 1b 	call	0x3720	; 0x3720 <digitalWrite>
    digitalWrite(PIN_SPI_DATA, LOW);
    1b66:	60 e0       	ldi	r22, 0x00	; 0
    1b68:	8b e0       	ldi	r24, 0x0B	; 11
    1b6a:	0c 94 90 1b 	jmp	0x3720	; 0x3720 <digitalWrite>

00001b6e <_Z13setupSettingsv>:
}

void setupSettings() {
    EepromSettings.load();
    1b6e:	87 e8       	ldi	r24, 0x87	; 135
    1b70:	92 e0       	ldi	r25, 0x02	; 2
    1b72:	0e 94 32 0d 	call	0x1a64	; 0x1a64 <_ZN14EepromSettings4loadEv>
	EepromSettings.startChannel = 4 * 8; // R1 5658
    1b76:	80 e2       	ldi	r24, 0x20	; 32
    1b78:	80 93 8b 02 	sts	0x028B, r24	; 0x80028b <EepromSettings+0x4>
    Receiver::setChannel(EepromSettings.startChannel);
    1b7c:	0c 94 cb 0a 	jmp	0x1596	; 0x1596 <_ZN8Receiver10setChannelEh>

00001b80 <setup>:


void setup()
{
	
    setupPins();
    1b80:	0e 94 71 0d 	call	0x1ae2	; 0x1ae2 <_Z9setupPinsv>

    // Enable buzzer and LED for duration of setup process.
    digitalWrite(PIN_LED, HIGH);
    1b84:	61 e0       	ldi	r22, 0x01	; 1
    1b86:	80 e1       	ldi	r24, 0x10	; 16
    1b88:	0e 94 90 1b 	call	0x3720	; 0x3720 <digitalWrite>
    digitalWrite(PIN_BUZZER, LOW);
    1b8c:	60 e0       	ldi	r22, 0x00	; 0
    1b8e:	86 e0       	ldi	r24, 0x06	; 6
    1b90:	0e 94 90 1b 	call	0x3720	; 0x3720 <digitalWrite>

    setupSettings();
    1b94:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <_Z13setupSettingsv>

    StateMachine::setup();
    1b98:	0e 94 28 0e 	call	0x1c50	; 0x1c50 <_ZN12StateMachine5setupEv>
    Receiver::setup();
    1b9c:	0e 94 53 0c 	call	0x18a6	; 0x18a6 <_ZN8Receiver5setupEv>
    Ui::setup();
    1ba0:	0e 94 84 16 	call	0x2d08	; 0x2d08 <_ZN2Ui5setupEv>

    Receiver::setActiveReceiver(Receiver::ReceiverId::A);
    1ba4:	80 e0       	ldi	r24, 0x00	; 0
    1ba6:	0e 94 d9 0a 	call	0x15b2	; 0x15b2 <_ZN8Receiver17setActiveReceiverENS_10ReceiverIdE>
	
	//Serial.begin(250000);
	
	
    // Setup complete.
    digitalWrite(PIN_LED, LOW);
    1baa:	60 e0       	ldi	r22, 0x00	; 0
    1bac:	80 e1       	ldi	r24, 0x10	; 16
    1bae:	0e 94 90 1b 	call	0x3720	; 0x3720 <digitalWrite>
    digitalWrite(PIN_BUZZER, HIGH);
    1bb2:	61 e0       	ldi	r22, 0x01	; 1
    1bb4:	86 e0       	ldi	r24, 0x06	; 6
    1bb6:	0e 94 90 1b 	call	0x3720	; 0x3720 <digitalWrite>

    Buttons::registerChangeFunc(globalMenuButtonHandler);
    1bba:	85 e6       	ldi	r24, 0x65	; 101
    1bbc:	9d e0       	ldi	r25, 0x0D	; 13
    1bbe:	0e 94 67 0a 	call	0x14ce	; 0x14ce <_ZN7Buttons18registerChangeFuncEPFv6ButtonNS_9PressTypeEE>

    // Switch to initial state.
    StateMachine::switchState(StateMachine::State::SEARCH);
    1bc2:	81 e0       	ldi	r24, 0x01	; 1
    1bc4:	0c 94 7b 0e 	jmp	0x1cf6	; 0x1cf6 <_ZN12StateMachine11switchStateENS_5StateE>

00001bc8 <loop>:
    Receiver::setChannel(EepromSettings.startChannel);
}

static Button localButton = Button::COUNT;
static Button localButtonOld = Button::COUNT;
void loop() {
    1bc8:	0f 93       	push	r16
    1bca:	1f 93       	push	r17


    Receiver::update();
    1bcc:	0e 94 54 0c 	call	0x18a8	; 0x18a8 <_ZN8Receiver6updateEv>
    Buttons::update();
    1bd0:	0e 94 4f 0a 	call	0x149e	; 0x149e <_ZN7Buttons6updateEv>

    StateMachine::update();
    1bd4:	0e 94 2c 0e 	call	0x1c58	; 0x1c58 <_ZN12StateMachine6updateEv>
    Ui::update();
    1bd8:	0e 94 a9 16 	call	0x2d52	; 0x2d52 <_ZN2Ui6updateEv>
    EepromSettings.update();
    1bdc:	87 e8       	ldi	r24, 0x87	; 135
    1bde:	92 e0       	ldi	r25, 0x02	; 2
    1be0:	0e 94 05 0d 	call	0x1a0a	; 0x1a0a <_ZN14EepromSettings6updateEv>


    if (
        StateMachine::currentState != StateMachine::State::SCREENSAVER
        && StateMachine::currentState != StateMachine::State::BANDSCAN
        && (millis() - Buttons::lastChangeTime) >
    1be4:	80 91 b0 02 	lds	r24, 0x02B0	; 0x8002b0 <_ZN12StateMachine12currentStateE>
    1be8:	82 50       	subi	r24, 0x02	; 2
    1bea:	82 30       	cpi	r24, 0x02	; 2
    1bec:	d0 f0       	brcs	.+52     	; 0x1c22 <loop+0x5a>
    1bee:	0e 94 5b 1a 	call	0x34b6	; 0x34b6 <millis>
    1bf2:	00 91 d2 01 	lds	r16, 0x01D2	; 0x8001d2 <__data_end>
    1bf6:	10 91 d3 01 	lds	r17, 0x01D3	; 0x8001d3 <__data_end+0x1>
    1bfa:	20 91 d4 01 	lds	r18, 0x01D4	; 0x8001d4 <__data_end+0x2>
    1bfe:	30 91 d5 01 	lds	r19, 0x01D5	; 0x8001d5 <__data_end+0x3>
    1c02:	dc 01       	movw	r26, r24
    1c04:	cb 01       	movw	r24, r22
    1c06:	80 1b       	sub	r24, r16
    1c08:	91 0b       	sbc	r25, r17
    1c0a:	a2 0b       	sbc	r26, r18
    1c0c:	b3 0b       	sbc	r27, r19
    1c0e:	81 3c       	cpi	r24, 0xC1	; 193
    1c10:	96 4c       	sbci	r25, 0xC6	; 198
    1c12:	af 4f       	sbci	r26, 0xFF	; 255
    1c14:	bf 4f       	sbci	r27, 0xFF	; 255
    1c16:	28 f0       	brcs	.+10     	; 0x1c22 <loop+0x5a>
            (SCREENSAVER_TIMEOUT * 1000)
    ) {
        StateMachine::switchState(StateMachine::State::SCREENSAVER);
    1c18:	83 e0       	ldi	r24, 0x03	; 3
    }
}
    1c1a:	1f 91       	pop	r17
    1c1c:	0f 91       	pop	r16
        StateMachine::currentState != StateMachine::State::SCREENSAVER
        && StateMachine::currentState != StateMachine::State::BANDSCAN
        && (millis() - Buttons::lastChangeTime) >
            (SCREENSAVER_TIMEOUT * 1000)
    ) {
        StateMachine::switchState(StateMachine::State::SCREENSAVER);
    1c1e:	0c 94 7b 0e 	jmp	0x1cf6	; 0x1cf6 <_ZN12StateMachine11switchStateENS_5StateE>
    }
}
    1c22:	1f 91       	pop	r17
    1c24:	0f 91       	pop	r16
    1c26:	08 95       	ret

00001c28 <_ZN12StateMachine12StateHandler8onUpdateEv>:
        public:
            virtual void onInitialDraw() {};
            virtual void onUpdateDraw() {};

            virtual void onEnter() {};
            virtual void onUpdate() {};
    1c28:	08 95       	ret

00001c2a <_ZN12StateMachine12StateHandler6onExitEv>:
            virtual void onExit() {};
    1c2a:	08 95       	ret

00001c2c <_ZN12StateMachine12StateHandler14onButtonChangeE6ButtonN7Buttons9PressTypeE>:

            virtual void onButtonChange(
    1c2c:	08 95       	ret

00001c2e <_ZN12StateMachineL14onButtonChangeE6ButtonN7Buttons9PressTypeE>:
    //     }

    //     #undef STATE_FACTORY
    // }

    static void onButtonChange(Button button, Buttons::PressType pressType) {
    1c2e:	46 2f       	mov	r20, r22
        if (currentHandler != nullptr) {
    1c30:	a0 91 b1 02 	lds	r26, 0x02B1	; 0x8002b1 <_ZN12StateMachineL14currentHandlerE>
    1c34:	b0 91 b2 02 	lds	r27, 0x02B2	; 0x8002b2 <_ZN12StateMachineL14currentHandlerE+0x1>
    1c38:	10 97       	sbiw	r26, 0x00	; 0
    1c3a:	49 f0       	breq	.+18     	; 0x1c4e <_ZN12StateMachineL14onButtonChangeE6ButtonN7Buttons9PressTypeE+0x20>
            currentHandler->onButtonChange(button, pressType);
    1c3c:	ed 91       	ld	r30, X+
    1c3e:	fc 91       	ld	r31, X
    1c40:	11 97       	sbiw	r26, 0x01	; 1
    1c42:	02 84       	ldd	r0, Z+10	; 0x0a
    1c44:	f3 85       	ldd	r31, Z+11	; 0x0b
    1c46:	e0 2d       	mov	r30, r0
    1c48:	68 2f       	mov	r22, r24
    1c4a:	cd 01       	movw	r24, r26
    1c4c:	09 94       	ijmp
    1c4e:	08 95       	ret

00001c50 <_ZN12StateMachine5setupEv>:
    State currentState = State::BOOT;
    State lastState = currentState;


    void setup() {
        Buttons::registerChangeFunc(onButtonChange);
    1c50:	87 e1       	ldi	r24, 0x17	; 23
    1c52:	9e e0       	ldi	r25, 0x0E	; 14
    1c54:	0c 94 67 0a 	jmp	0x14ce	; 0x14ce <_ZN7Buttons18registerChangeFuncEPFv6ButtonNS_9PressTypeEE>

00001c58 <_ZN12StateMachine6updateEv>:
    }

    void update() {
        if (currentHandler) {
    1c58:	80 91 b1 02 	lds	r24, 0x02B1	; 0x8002b1 <_ZN12StateMachineL14currentHandlerE>
    1c5c:	90 91 b2 02 	lds	r25, 0x02B2	; 0x8002b2 <_ZN12StateMachineL14currentHandlerE+0x1>
    1c60:	00 97       	sbiw	r24, 0x00	; 0
    1c62:	09 f4       	brne	.+2      	; 0x1c66 <_ZN12StateMachine6updateEv+0xe>
    1c64:	47 c0       	rjmp	.+142    	; 0x1cf4 <_ZN12StateMachine6updateEv+0x9c>
            currentHandler->onUpdate();
    1c66:	dc 01       	movw	r26, r24
    1c68:	ed 91       	ld	r30, X+
    1c6a:	fc 91       	ld	r31, X
    1c6c:	06 80       	ldd	r0, Z+6	; 0x06
    1c6e:	f7 81       	ldd	r31, Z+7	; 0x07
    1c70:	e0 2d       	mov	r30, r0
    1c72:	09 95       	icall

            // FIXME: This should probably be handled in the UI module but not
            // 100% on how to decouple them at this stage
            static Timer drawTimer = Timer(OLED_FRAMERATE);
    1c74:	80 91 a7 02 	lds	r24, 0x02A7	; 0x8002a7 <_ZGVZN12StateMachine6updateEvE9drawTimer>
    1c78:	81 11       	cpse	r24, r1
    1c7a:	09 c0       	rjmp	.+18     	; 0x1c8e <_ZN12StateMachine6updateEv+0x36>
    1c7c:	68 e2       	ldi	r22, 0x28	; 40
    1c7e:	70 e0       	ldi	r23, 0x00	; 0
    1c80:	80 ea       	ldi	r24, 0xA0	; 160
    1c82:	92 e0       	ldi	r25, 0x02	; 2
    1c84:	0e 94 39 16 	call	0x2c72	; 0x2c72 <_ZN5TimerC1Ej>
    1c88:	81 e0       	ldi	r24, 0x01	; 1
    1c8a:	80 93 a7 02 	sts	0x02A7, r24	; 0x8002a7 <_ZGVZN12StateMachine6updateEvE9drawTimer>
            if (currentHandler
                && Ui::shouldDrawUpdate
                && drawTimer.hasTicked()
    1c8e:	80 91 b1 02 	lds	r24, 0x02B1	; 0x8002b1 <_ZN12StateMachineL14currentHandlerE>
    1c92:	90 91 b2 02 	lds	r25, 0x02B2	; 0x8002b2 <_ZN12StateMachineL14currentHandlerE+0x1>
    1c96:	89 2b       	or	r24, r25
    1c98:	69 f1       	breq	.+90     	; 0x1cf4 <_ZN12StateMachine6updateEv+0x9c>

            // FIXME: This should probably be handled in the UI module but not
            // 100% on how to decouple them at this stage
            static Timer drawTimer = Timer(OLED_FRAMERATE);
            if (currentHandler
                && Ui::shouldDrawUpdate
    1c9a:	80 91 b5 02 	lds	r24, 0x02B5	; 0x8002b5 <_ZN2Ui16shouldDrawUpdateE>
    1c9e:	88 23       	and	r24, r24
    1ca0:	49 f1       	breq	.+82     	; 0x1cf4 <_ZN12StateMachine6updateEv+0x9c>
                && drawTimer.hasTicked()
    1ca2:	80 ea       	ldi	r24, 0xA0	; 160
    1ca4:	92 e0       	ldi	r25, 0x02	; 2
    1ca6:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <_ZN5Timer9hasTickedEv>
    1caa:	81 11       	cpse	r24, r1
    1cac:	01 c0       	rjmp	.+2      	; 0x1cb0 <_ZN12StateMachine6updateEv+0x58>
    1cae:	08 95       	ret
            ) {
                if (Ui::shouldFullRedraw) {
    1cb0:	80 91 b3 02 	lds	r24, 0x02B3	; 0x8002b3 <_ZN2Ui16shouldFullRedrawE>
    1cb4:	88 23       	and	r24, r24
    1cb6:	69 f0       	breq	.+26     	; 0x1cd2 <_ZN12StateMachine6updateEv+0x7a>
                    currentHandler->onInitialDraw();
    1cb8:	80 91 b1 02 	lds	r24, 0x02B1	; 0x8002b1 <_ZN12StateMachineL14currentHandlerE>
    1cbc:	90 91 b2 02 	lds	r25, 0x02B2	; 0x8002b2 <_ZN12StateMachineL14currentHandlerE+0x1>
    1cc0:	dc 01       	movw	r26, r24
    1cc2:	ed 91       	ld	r30, X+
    1cc4:	fc 91       	ld	r31, X
    1cc6:	01 90       	ld	r0, Z+
    1cc8:	f0 81       	ld	r31, Z
    1cca:	e0 2d       	mov	r30, r0
    1ccc:	09 95       	icall
                    Ui::shouldFullRedraw = false;
    1cce:	10 92 b3 02 	sts	0x02B3, r1	; 0x8002b3 <_ZN2Ui16shouldFullRedrawE>
                }

                currentHandler->onUpdateDraw();
    1cd2:	80 91 b1 02 	lds	r24, 0x02B1	; 0x8002b1 <_ZN12StateMachineL14currentHandlerE>
    1cd6:	90 91 b2 02 	lds	r25, 0x02B2	; 0x8002b2 <_ZN12StateMachineL14currentHandlerE+0x1>
    1cda:	dc 01       	movw	r26, r24
    1cdc:	ed 91       	ld	r30, X+
    1cde:	fc 91       	ld	r31, X
    1ce0:	02 80       	ldd	r0, Z+2	; 0x02
    1ce2:	f3 81       	ldd	r31, Z+3	; 0x03
    1ce4:	e0 2d       	mov	r30, r0
    1ce6:	09 95       	icall
                Ui::shouldDrawUpdate = false;
    1ce8:	10 92 b5 02 	sts	0x02B5, r1	; 0x8002b5 <_ZN2Ui16shouldDrawUpdateE>
                drawTimer.reset();
    1cec:	80 ea       	ldi	r24, 0xA0	; 160
    1cee:	92 e0       	ldi	r25, 0x02	; 2
    1cf0:	0c 94 6f 16 	jmp	0x2cde	; 0x2cde <_ZN5Timer5resetEv>
    1cf4:	08 95       	ret

00001cf6 <_ZN12StateMachine11switchStateENS_5StateE>:
            }
        }
    }

    void switchState(State newState) {
    1cf6:	cf 93       	push	r28
    1cf8:	df 93       	push	r29
    1cfa:	c8 2f       	mov	r28, r24
        if (currentHandler != nullptr) {
    1cfc:	80 91 b1 02 	lds	r24, 0x02B1	; 0x8002b1 <_ZN12StateMachineL14currentHandlerE>
    1d00:	90 91 b2 02 	lds	r25, 0x02B2	; 0x8002b2 <_ZN12StateMachineL14currentHandlerE+0x1>
    1d04:	00 97       	sbiw	r24, 0x00	; 0
    1d06:	39 f0       	breq	.+14     	; 0x1d16 <_ZN12StateMachine11switchStateENS_5StateE+0x20>
            currentHandler->onExit();
    1d08:	dc 01       	movw	r26, r24
    1d0a:	ed 91       	ld	r30, X+
    1d0c:	fc 91       	ld	r31, X
    1d0e:	00 84       	ldd	r0, Z+8	; 0x08
    1d10:	f1 85       	ldd	r31, Z+9	; 0x09
    1d12:	e0 2d       	mov	r30, r0
    1d14:	09 95       	icall
        }

        lastState = currentState;
    1d16:	80 91 b0 02 	lds	r24, 0x02B0	; 0x8002b0 <_ZN12StateMachine12currentStateE>
    1d1a:	80 93 af 02 	sts	0x02AF, r24	; 0x8002af <_ZN12StateMachine9lastStateE>
        currentState = newState;
    1d1e:	c0 93 b0 02 	sts	0x02B0, r28	; 0x8002b0 <_ZN12StateMachine12currentStateE>
        // currentHandler = getStateHandler(newState);
        switch (newState){
    1d22:	c3 30       	cpi	r28, 0x03	; 3
    1d24:	09 f4       	brne	.+2      	; 0x1d28 <_ZN12StateMachine11switchStateENS_5StateE+0x32>
    1d26:	53 c0       	rjmp	.+166    	; 0x1dce <_ZN12StateMachine11switchStateENS_5StateE+0xd8>
    1d28:	d0 f4       	brcc	.+52     	; 0x1d5e <_ZN12StateMachine11switchStateENS_5StateE+0x68>
    1d2a:	c1 30       	cpi	r28, 0x01	; 1
    1d2c:	61 f1       	breq	.+88     	; 0x1d86 <_ZN12StateMachine11switchStateENS_5StateE+0x90>
    1d2e:	c2 30       	cpi	r28, 0x02	; 2
    1d30:	09 f0       	breq	.+2      	; 0x1d34 <_ZN12StateMachine11switchStateENS_5StateE+0x3e>
    1d32:	92 c0       	rjmp	.+292    	; 0x1e58 <_ZN12StateMachine11switchStateENS_5StateE+0x162>
                break;
            case State::SCREENSAVER:
                currentHandler = new  ScreensaverStateHandler();
                break;
            case State::BANDSCAN:
                currentHandler = new BandScanStateHandler();
    1d34:	8c e2       	ldi	r24, 0x2C	; 44
    1d36:	90 e0       	ldi	r25, 0x00	; 0
    1d38:	0e 94 6e 19 	call	0x32dc	; 0x32dc <_Znwj>
    1d3c:	2c e2       	ldi	r18, 0x2C	; 44
    1d3e:	ec 01       	movw	r28, r24
    1d40:	19 92       	st	Y+, r1
    1d42:	2a 95       	dec	r18
    1d44:	e9 f7       	brne	.-6      	; 0x1d40 <_ZN12StateMachine11switchStateENS_5StateE+0x4a>
#include "channels.h"
#include "state.h"


namespace StateMachine {
    class BandScanStateHandler : public StateMachine::StateHandler {
    1d46:	2b e0       	ldi	r18, 0x0B	; 11
    1d48:	31 e0       	ldi	r19, 0x01	; 1
    1d4a:	fc 01       	movw	r30, r24
    1d4c:	31 83       	std	Z+1, r19	; 0x01
    1d4e:	20 83       	st	Z, r18
    1d50:	34 96       	adiw	r30, 0x04	; 4
    1d52:	28 e2       	ldi	r18, 0x28	; 40
    1d54:	df 01       	movw	r26, r30
    1d56:	1d 92       	st	X+, r1
    1d58:	2a 95       	dec	r18
    1d5a:	e9 f7       	brne	.-6      	; 0x1d56 <_ZN12StateMachine11switchStateENS_5StateE+0x60>
    1d5c:	78 c0       	rjmp	.+240    	; 0x1e4e <_ZN12StateMachine11switchStateENS_5StateE+0x158>
        }

        lastState = currentState;
        currentState = newState;
        // currentHandler = getStateHandler(newState);
        switch (newState){
    1d5e:	c5 30       	cpi	r28, 0x05	; 5
    1d60:	09 f4       	brne	.+2      	; 0x1d64 <_ZN12StateMachine11switchStateENS_5StateE+0x6e>
    1d62:	6c c0       	rjmp	.+216    	; 0x1e3c <_ZN12StateMachine11switchStateENS_5StateE+0x146>
    1d64:	08 f4       	brcc	.+2      	; 0x1d68 <_ZN12StateMachine11switchStateENS_5StateE+0x72>
    1d66:	4d c0       	rjmp	.+154    	; 0x1e02 <_ZN12StateMachine11switchStateENS_5StateE+0x10c>
    1d68:	c6 30       	cpi	r28, 0x06	; 6
    1d6a:	09 f0       	breq	.+2      	; 0x1d6e <_ZN12StateMachine11switchStateENS_5StateE+0x78>
    1d6c:	75 c0       	rjmp	.+234    	; 0x1e58 <_ZN12StateMachine11switchStateENS_5StateE+0x162>
                break;
            case State::SETTINGS:
                currentHandler = new   SettingsStateHandler();
                break;
            case State::SETTINGS_RSSI:
                currentHandler = new   SettingsRssiStateHandler();
    1d6e:	84 e0       	ldi	r24, 0x04	; 4
    1d70:	90 e0       	ldi	r25, 0x00	; 0
    1d72:	0e 94 6e 19 	call	0x32dc	; 0x32dc <_Znwj>
    1d76:	fc 01       	movw	r30, r24
    1d78:	12 82       	std	Z+2, r1	; 0x02
    1d7a:	13 82       	std	Z+3, r1	; 0x03

#include "state.h"


namespace StateMachine {
    class SettingsRssiStateHandler : public StateMachine::StateHandler {
    1d7c:	8b e5       	ldi	r24, 0x5B	; 91
    1d7e:	91 e0       	ldi	r25, 0x01	; 1
    1d80:	91 83       	std	Z+1, r25	; 0x01
    1d82:	80 83       	st	Z, r24
    1d84:	56 c0       	rjmp	.+172    	; 0x1e32 <_ZN12StateMachine11switchStateENS_5StateE+0x13c>
        lastState = currentState;
        currentState = newState;
        // currentHandler = getStateHandler(newState);
        switch (newState){
            case State::SEARCH:
                currentHandler = new  SearchStateHandler();
    1d86:	87 e2       	ldi	r24, 0x27	; 39
    1d88:	90 e0       	ldi	r25, 0x00	; 0
    1d8a:	0e 94 6e 19 	call	0x32dc	; 0x32dc <_Znwj>
    1d8e:	fc 01       	movw	r30, r24
    1d90:	87 e2       	ldi	r24, 0x27	; 39
    1d92:	df 01       	movw	r26, r30
    1d94:	1d 92       	st	X+, r1
    1d96:	8a 95       	dec	r24
    1d98:	e9 f7       	brne	.-6      	; 0x1d94 <_ZN12StateMachine11switchStateENS_5StateE+0x9e>

#define PEAK_LOOKAHEAD 4


namespace StateMachine {
    class SearchStateHandler : public StateMachine::StateHandler {
    1d9a:	8b e3       	ldi	r24, 0x3B	; 59
    1d9c:	91 e0       	ldi	r25, 0x01	; 1
    1d9e:	91 83       	std	Z+1, r25	; 0x01
    1da0:	80 83       	st	Z, r24
    1da2:	c3 83       	std	Z+3, r28	; 0x03
    1da4:	17 82       	std	Z+7, r1	; 0x07
    1da6:	10 86       	std	Z+8, r1	; 0x08
    1da8:	11 86       	std	Z+9, r1	; 0x09
    1daa:	12 86       	std	Z+10, r1	; 0x0a
    1dac:	c3 87       	std	Z+11, r28	; 0x0b
                MenuIcon icon = nullptr;
                MenuHandler handler = nullptr;
            };


            StateMenuHelper(void* state) { this->state = state; }
    1dae:	df 01       	movw	r26, r30
    1db0:	1c 96       	adiw	r26, 0x0c	; 12
    1db2:	80 e1       	ldi	r24, 0x10	; 16
    1db4:	ed 01       	movw	r28, r26
    1db6:	19 92       	st	Y+, r1
    1db8:	8a 95       	dec	r24
    1dba:	e9 f7       	brne	.-6      	; 0x1db6 <_ZN12StateMachine11switchStateENS_5StateE+0xc0>
    1dbc:	17 8e       	std	Z+31, r1	; 0x1f
    1dbe:	16 8e       	std	Z+30, r1	; 0x1e
    1dc0:	11 a2       	std	Z+33, r1	; 0x21
    1dc2:	10 a2       	std	Z+32, r1	; 0x20
    1dc4:	12 a2       	std	Z+34, r1	; 0x22
    1dc6:	13 a2       	std	Z+35, r1	; 0x23
    1dc8:	f5 8f       	std	Z+29, r31	; 0x1d
    1dca:	e4 8f       	std	Z+28, r30	; 0x1c
    1dcc:	32 c0       	rjmp	.+100    	; 0x1e32 <_ZN12StateMachine11switchStateENS_5StateE+0x13c>
                break;
            case State::SCREENSAVER:
                currentHandler = new  ScreensaverStateHandler();
    1dce:	8a e0       	ldi	r24, 0x0A	; 10
    1dd0:	90 e0       	ldi	r25, 0x00	; 0
    1dd2:	0e 94 6e 19 	call	0x32dc	; 0x32dc <_Znwj>
    1dd6:	ec 01       	movw	r28, r24
    1dd8:	8a e0       	ldi	r24, 0x0A	; 10
    1dda:	fe 01       	movw	r30, r28
    1ddc:	11 92       	st	Z+, r1
    1dde:	8a 95       	dec	r24
    1de0:	e9 f7       	brne	.-6      	; 0x1ddc <_ZN12StateMachine11switchStateENS_5StateE+0xe6>
#include "timer.h"
#include "settings.h"


namespace StateMachine {
    class ScreensaverStateHandler : public StateMachine::StateHandler {
    1de2:	2b e2       	ldi	r18, 0x2B	; 43
    1de4:	31 e0       	ldi	r19, 0x01	; 1
    1de6:	de 01       	movw	r26, r28
    1de8:	2d 93       	st	X+, r18
    1dea:	3d 93       	st	X+, r19
    1dec:	cd 01       	movw	r24, r26
    1dee:	68 eb       	ldi	r22, 0xB8	; 184
    1df0:	7b e0       	ldi	r23, 0x0B	; 11
    1df2:	0e 94 39 16 	call	0x2c72	; 0x2c72 <_ZN5TimerC1Ej>
    1df6:	19 86       	std	Y+9, r1	; 0x09
    1df8:	d0 93 b2 02 	sts	0x02B2, r29	; 0x8002b2 <_ZN12StateMachineL14currentHandlerE+0x1>
    1dfc:	c0 93 b1 02 	sts	0x02B1, r28	; 0x8002b1 <_ZN12StateMachineL14currentHandlerE>
                break;
    1e00:	2f c0       	rjmp	.+94     	; 0x1e60 <_ZN12StateMachine11switchStateENS_5StateE+0x16a>
            case State::BANDSCAN:
                currentHandler = new BandScanStateHandler();
                break;
            case State::MENU:
                currentHandler = new  MenuStateHandler();
    1e02:	8e e1       	ldi	r24, 0x1E	; 30
    1e04:	90 e0       	ldi	r25, 0x00	; 0
    1e06:	0e 94 6e 19 	call	0x32dc	; 0x32dc <_Znwj>
    1e0a:	fc 01       	movw	r30, r24
    1e0c:	8e e1       	ldi	r24, 0x1E	; 30
    1e0e:	ef 01       	movw	r28, r30
    1e10:	19 92       	st	Y+, r1
    1e12:	8a 95       	dec	r24
    1e14:	e9 f7       	brne	.-6      	; 0x1e10 <_ZN12StateMachine11switchStateENS_5StateE+0x11a>
#include "state.h"
#include "ui_menu.h"


namespace StateMachine {
    class MenuStateHandler : public StateMachine::StateHandler {
    1e16:	df 01       	movw	r26, r30
    1e18:	8b e1       	ldi	r24, 0x1B	; 27
    1e1a:	91 e0       	ldi	r25, 0x01	; 1
    1e1c:	8d 93       	st	X+, r24
    1e1e:	9d 93       	st	X+, r25
        const char* text = nullptr;
        Ui::MenuHandler handler = nullptr;
        const unsigned char* icon = nullptr;
    };

    class MenuHelper {
    1e20:	88 e1       	ldi	r24, 0x18	; 24
    1e22:	ed 01       	movw	r28, r26
    1e24:	19 92       	st	Y+, r1
    1e26:	8a 95       	dec	r24
    1e28:	e9 f7       	brne	.-6      	; 0x1e24 <_ZN12StateMachine11switchStateENS_5StateE+0x12e>
    1e2a:	13 8e       	std	Z+27, r1	; 0x1b
    1e2c:	12 8e       	std	Z+26, r1	; 0x1a
    1e2e:	15 8e       	std	Z+29, r1	; 0x1d
    1e30:	14 8e       	std	Z+28, r1	; 0x1c
    1e32:	f0 93 b2 02 	sts	0x02B2, r31	; 0x8002b2 <_ZN12StateMachineL14currentHandlerE+0x1>
    1e36:	e0 93 b1 02 	sts	0x02B1, r30	; 0x8002b1 <_ZN12StateMachineL14currentHandlerE>
                break;
    1e3a:	12 c0       	rjmp	.+36     	; 0x1e60 <_ZN12StateMachine11switchStateENS_5StateE+0x16a>
            case State::SETTINGS:
                currentHandler = new   SettingsStateHandler();
    1e3c:	82 e0       	ldi	r24, 0x02	; 2
    1e3e:	90 e0       	ldi	r25, 0x00	; 0
    1e40:	0e 94 6e 19 	call	0x32dc	; 0x32dc <_Znwj>

#include "state.h"


namespace StateMachine {
    class SettingsStateHandler : public StateMachine::StateHandler {
    1e44:	2b e4       	ldi	r18, 0x4B	; 75
    1e46:	31 e0       	ldi	r19, 0x01	; 1
    1e48:	fc 01       	movw	r30, r24
    1e4a:	31 83       	std	Z+1, r19	; 0x01
    1e4c:	20 83       	st	Z, r18
    1e4e:	90 93 b2 02 	sts	0x02B2, r25	; 0x8002b2 <_ZN12StateMachineL14currentHandlerE+0x1>
    1e52:	80 93 b1 02 	sts	0x02B1, r24	; 0x8002b1 <_ZN12StateMachineL14currentHandlerE>
                break;
    1e56:	04 c0       	rjmp	.+8      	; 0x1e60 <_ZN12StateMachine11switchStateENS_5StateE+0x16a>
            case State::SETTINGS_RSSI:
                currentHandler = new   SettingsRssiStateHandler();
                break;
            default:
                currentHandler = nullptr;
    1e58:	10 92 b2 02 	sts	0x02B2, r1	; 0x8002b2 <_ZN12StateMachineL14currentHandlerE+0x1>
    1e5c:	10 92 b1 02 	sts	0x02B1, r1	; 0x8002b1 <_ZN12StateMachineL14currentHandlerE>
                break;
        }

        if (currentHandler != nullptr) {
    1e60:	80 91 b1 02 	lds	r24, 0x02B1	; 0x8002b1 <_ZN12StateMachineL14currentHandlerE>
    1e64:	90 91 b2 02 	lds	r25, 0x02B2	; 0x8002b2 <_ZN12StateMachineL14currentHandlerE+0x1>
    1e68:	00 97       	sbiw	r24, 0x00	; 0
    1e6a:	a1 f0       	breq	.+40     	; 0x1e94 <_ZN12StateMachine11switchStateENS_5StateE+0x19e>
            currentHandler->onEnter();
    1e6c:	dc 01       	movw	r26, r24
    1e6e:	ed 91       	ld	r30, X+
    1e70:	fc 91       	ld	r31, X
    1e72:	04 80       	ldd	r0, Z+4	; 0x04
    1e74:	f5 81       	ldd	r31, Z+5	; 0x05
    1e76:	e0 2d       	mov	r30, r0
    1e78:	09 95       	icall
            currentHandler->onInitialDraw();
    1e7a:	80 91 b1 02 	lds	r24, 0x02B1	; 0x8002b1 <_ZN12StateMachineL14currentHandlerE>
    1e7e:	90 91 b2 02 	lds	r25, 0x02B2	; 0x8002b2 <_ZN12StateMachineL14currentHandlerE+0x1>
    1e82:	ec 01       	movw	r28, r24
    1e84:	e8 81       	ld	r30, Y
    1e86:	f9 81       	ldd	r31, Y+1	; 0x01
    1e88:	01 90       	ld	r0, Z+
    1e8a:	f0 81       	ld	r31, Z
    1e8c:	e0 2d       	mov	r30, r0
        }
    }
    1e8e:	df 91       	pop	r29
    1e90:	cf 91       	pop	r28
                break;
        }

        if (currentHandler != nullptr) {
            currentHandler->onEnter();
            currentHandler->onInitialDraw();
    1e92:	09 94       	ijmp
        }
    }
    1e94:	df 91       	pop	r29
    1e96:	cf 91       	pop	r28
    1e98:	08 95       	ret

00001e9a <_GLOBAL__sub_I__ZN12StateMachine12currentStateE>:


    static uint8_t stateBuffer[STATE_BUFFER_SIZE];
    static StateHandler* currentHandler = nullptr;
    State currentState = State::BOOT;
    State lastState = currentState;
    1e9a:	80 91 b0 02 	lds	r24, 0x02B0	; 0x8002b0 <_ZN12StateMachine12currentStateE>
    1e9e:	80 93 af 02 	sts	0x02AF, r24	; 0x8002af <_ZN12StateMachine9lastStateE>
    1ea2:	08 95       	ret

00001ea4 <_ZN12StateMachine20BandScanStateHandler7onEnterEv>:
#include "ui.h"
#include "ui_menu.h"


void StateMachine::BandScanStateHandler::onEnter() {
    orderedChanelIndex = 0;
    1ea4:	fc 01       	movw	r30, r24
    1ea6:	12 82       	std	Z+2, r1	; 0x02
    lastChannelIndex = Receiver::activeChannel;
    1ea8:	20 91 85 02 	lds	r18, 0x0285	; 0x800285 <_ZN8Receiver13activeChannelE>
    1eac:	23 83       	std	Z+3, r18	; 0x03
    1eae:	08 95       	ret

00001eb0 <_ZN12StateMachine20BandScanStateHandler6onExitEv>:
}

void StateMachine::BandScanStateHandler::onExit() {
    Receiver::setChannel(lastChannelIndex);
    1eb0:	fc 01       	movw	r30, r24
    1eb2:	83 81       	ldd	r24, Z+3	; 0x03
    1eb4:	0c 94 cb 0a 	jmp	0x1596	; 0x1596 <_ZN8Receiver10setChannelEh>

00001eb8 <_ZN12StateMachine20BandScanStateHandler8onUpdateEv>:
}


void StateMachine::BandScanStateHandler::onUpdate() {
    1eb8:	cf 93       	push	r28
    1eba:	df 93       	push	r29
    1ebc:	ec 01       	movw	r28, r24
    if (!Receiver::isRssiStable())
    1ebe:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <_ZN8Receiver12isRssiStableEv>
    1ec2:	88 23       	and	r24, r24
    1ec4:	e9 f0       	breq	.+58     	; 0x1f00 <_ZN12StateMachine20BandScanStateHandler8onUpdateEv+0x48>
        return;

    #ifdef USE_DIVERSITY
        rssiData[orderedChanelIndex] = (Receiver::rssiA + Receiver::rssiB) / 2;
    1ec6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ec8:	90 e0       	ldi	r25, 0x00	; 0
    1eca:	fe 01       	movw	r30, r28
    1ecc:	e8 0f       	add	r30, r24
    1ece:	f9 1f       	adc	r31, r25
    1ed0:	40 91 84 02 	lds	r20, 0x0284	; 0x800284 <_ZN8Receiver5rssiAE>
    1ed4:	20 91 69 02 	lds	r18, 0x0269	; 0x800269 <_ZN8Receiver5rssiBE>
    1ed8:	30 e0       	ldi	r19, 0x00	; 0
    1eda:	24 0f       	add	r18, r20
    1edc:	31 1d       	adc	r19, r1
    1ede:	35 95       	asr	r19
    1ee0:	27 95       	ror	r18
    1ee2:	24 83       	std	Z+4, r18	; 0x04
    #else
        rssiData[orderedChanelIndex] = Receiver::rssiA;
    #endif

    orderedChanelIndex = (orderedChanelIndex + 1) % (CHANNELS_SIZE);
    1ee4:	01 96       	adiw	r24, 0x01	; 1
    1ee6:	68 e2       	ldi	r22, 0x28	; 40
    1ee8:	70 e0       	ldi	r23, 0x00	; 0
    1eea:	0e 94 94 31 	call	0x6328	; 0x6328 <__divmodhi4>
    1eee:	8a 83       	std	Y+2, r24	; 0x02
    Receiver::setChannel(Channels::getOrderedIndex(orderedChanelIndex));
    1ef0:	0e 94 a6 0a 	call	0x154c	; 0x154c <_ZN8Channels15getOrderedIndexEh>
    1ef4:	0e 94 cb 0a 	call	0x1596	; 0x1596 <_ZN8Receiver10setChannelEh>
    Ui::needUpdate();

    if (orderedChanelIndex == 0) {

    }
}
    1ef8:	df 91       	pop	r29
    1efa:	cf 91       	pop	r28
    #endif

    orderedChanelIndex = (orderedChanelIndex + 1) % (CHANNELS_SIZE);
    Receiver::setChannel(Channels::getOrderedIndex(orderedChanelIndex));

    Ui::needUpdate();
    1efc:	0c 94 b8 16 	jmp	0x2d70	; 0x2d70 <_ZN2Ui10needUpdateEv>

    if (orderedChanelIndex == 0) {

    }
}
    1f00:	df 91       	pop	r29
    1f02:	cf 91       	pop	r28
    1f04:	08 95       	ret

00001f06 <_ZN12StateMachine20BandScanStateHandler13onInitialDrawEv>:
#define GRAPH_Y 0
#define GRAPH_W (BORDER_RIGHT_X - GRAPH_X)
#define GRAPH_H BORDER_BOTTOM_Y


void StateMachine::BandScanStateHandler::onInitialDraw() {
    1f06:	0f 93       	push	r16
    1f08:	1f 93       	push	r17
    1f0a:	cf 93       	push	r28
    1f0c:	df 93       	push	r29
    Ui::clear();
    1f0e:	0e 94 b4 16 	call	0x2d68	; 0x2d68 <_ZN2Ui5clearEv>
    Ui::display.drawFastVLine(
        BORDER_LEFT_X,
        BORDER_LEFT_Y,
        BORDER_LEFT_H,
        WHITE
    );
    1f12:	01 e0       	ldi	r16, 0x01	; 1
    1f14:	10 e0       	ldi	r17, 0x00	; 0
    1f16:	28 e3       	ldi	r18, 0x38	; 56
    1f18:	30 e0       	ldi	r19, 0x00	; 0
    1f1a:	40 e0       	ldi	r20, 0x00	; 0
    1f1c:	50 e0       	ldi	r21, 0x00	; 0
    1f1e:	60 e0       	ldi	r22, 0x00	; 0
    1f20:	70 e0       	ldi	r23, 0x00	; 0
    1f22:	86 eb       	ldi	r24, 0xB6	; 182
    1f24:	92 e0       	ldi	r25, 0x02	; 2
    1f26:	0e 94 2b 2c 	call	0x5856	; 0x5856 <_ZN16Adafruit_SSD130613drawFastVLineEiiij>
    Ui::display.drawFastVLine(
        BORDER_RIGHT_X,
        BORDER_RIGHT_Y,
        BORDER_RIGHT_H,
        WHITE
    );
    1f2a:	28 e3       	ldi	r18, 0x38	; 56
    1f2c:	30 e0       	ldi	r19, 0x00	; 0
    1f2e:	40 e0       	ldi	r20, 0x00	; 0
    1f30:	50 e0       	ldi	r21, 0x00	; 0
    1f32:	6f e7       	ldi	r22, 0x7F	; 127
    1f34:	70 e0       	ldi	r23, 0x00	; 0
    1f36:	86 eb       	ldi	r24, 0xB6	; 182
    1f38:	92 e0       	ldi	r25, 0x02	; 2
    1f3a:	0e 94 2b 2c 	call	0x5856	; 0x5856 <_ZN16Adafruit_SSD130613drawFastVLineEiiij>
    Ui::display.drawFastHLine(
        BORDER_BOTTOM_X,
        BORDER_BOTTOM_Y,
        BORDER_BOTTOM_W,
        WHITE
    );
    1f3e:	20 e8       	ldi	r18, 0x80	; 128
    1f40:	30 e0       	ldi	r19, 0x00	; 0
    1f42:	47 e3       	ldi	r20, 0x37	; 55
    1f44:	50 e0       	ldi	r21, 0x00	; 0
    1f46:	60 e0       	ldi	r22, 0x00	; 0
    1f48:	70 e0       	ldi	r23, 0x00	; 0
    1f4a:	86 eb       	ldi	r24, 0xB6	; 182
    1f4c:	92 e0       	ldi	r25, 0x02	; 2
    1f4e:	0e 94 ea 2b 	call	0x57d4	; 0x57d4 <_ZN16Adafruit_SSD130613drawFastHLineEiiij>
    Ui::display.drawFastHLine(
        BORDER_PROGRESS_LEFT_X,
        SCREEN_HEIGHT - 1,
        BORDER_PROGRESS_RIGHT_X - BORDER_PROGRESS_LEFT_X,
        WHITE
    );
    1f52:	2f e4       	ldi	r18, 0x4F	; 79
    1f54:	30 e0       	ldi	r19, 0x00	; 0
    1f56:	4f e3       	ldi	r20, 0x3F	; 63
    1f58:	50 e0       	ldi	r21, 0x00	; 0
    1f5a:	68 e1       	ldi	r22, 0x18	; 24
    1f5c:	70 e0       	ldi	r23, 0x00	; 0
    1f5e:	86 eb       	ldi	r24, 0xB6	; 182
    1f60:	92 e0       	ldi	r25, 0x02	; 2
    1f62:	0e 94 ea 2b 	call	0x57d4	; 0x57d4 <_ZN16Adafruit_SSD130613drawFastHLineEiiij>
    Ui::display.drawFastVLine(
        BORDER_PROGRESS_LEFT_X,
        BORDER_PROGRESS_Y,
        BORDER_PROGRESS_H,
        WHITE
    );
    1f66:	29 e0       	ldi	r18, 0x09	; 9
    1f68:	30 e0       	ldi	r19, 0x00	; 0
    1f6a:	47 e3       	ldi	r20, 0x37	; 55
    1f6c:	50 e0       	ldi	r21, 0x00	; 0
    1f6e:	68 e1       	ldi	r22, 0x18	; 24
    1f70:	70 e0       	ldi	r23, 0x00	; 0
    1f72:	86 eb       	ldi	r24, 0xB6	; 182
    1f74:	92 e0       	ldi	r25, 0x02	; 2
    1f76:	0e 94 2b 2c 	call	0x5856	; 0x5856 <_ZN16Adafruit_SSD130613drawFastVLineEiiij>
    Ui::display.drawFastVLine(
        BORDER_PROGRESS_RIGHT_X,
        BORDER_PROGRESS_Y,
        BORDER_PROGRESS_H,
        WHITE
    );
    1f7a:	29 e0       	ldi	r18, 0x09	; 9
    1f7c:	30 e0       	ldi	r19, 0x00	; 0
    1f7e:	47 e3       	ldi	r20, 0x37	; 55
    1f80:	50 e0       	ldi	r21, 0x00	; 0
    1f82:	67 e6       	ldi	r22, 0x67	; 103
    1f84:	70 e0       	ldi	r23, 0x00	; 0
    1f86:	86 eb       	ldi	r24, 0xB6	; 182
    1f88:	92 e0       	ldi	r25, 0x02	; 2
    1f8a:	0e 94 2b 2c 	call	0x5856	; 0x5856 <_ZN16Adafruit_SSD130613drawFastVLineEiiij>

    Ui::display.setTextSize(1);
    1f8e:	61 e0       	ldi	r22, 0x01	; 1
    1f90:	86 eb       	ldi	r24, 0xB6	; 182
    1f92:	92 e0       	ldi	r25, 0x02	; 2
    1f94:	0e 94 64 26 	call	0x4cc8	; 0x4cc8 <_ZN12Adafruit_GFX11setTextSizeEh>
    @param   c   16-bit 5-6-5 Color to draw text with
    @note    For 'transparent' background, background and foreground
             are set to same color rather than using a separate flag.
  */
  /**********************************************************************/
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
    1f98:	c6 eb       	ldi	r28, 0xB6	; 182
    1f9a:	d2 e0       	ldi	r29, 0x02	; 2
    1f9c:	81 e0       	ldi	r24, 0x01	; 1
    1f9e:	90 e0       	ldi	r25, 0x00	; 0
    1fa0:	9b 8b       	std	Y+19, r25	; 0x13
    1fa2:	8a 8b       	std	Y+18, r24	; 0x12
    1fa4:	99 8b       	std	Y+17, r25	; 0x11
    1fa6:	88 8b       	std	Y+16, r24	; 0x10
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) {
    cursor_x = x;
    1fa8:	1d 86       	std	Y+13, r1	; 0x0d
    1faa:	1c 86       	std	Y+12, r1	; 0x0c
    cursor_y = y;
    1fac:	09 e3       	ldi	r16, 0x39	; 57
    1fae:	10 e0       	ldi	r17, 0x00	; 0
    1fb0:	1f 87       	std	Y+15, r17	; 0x0f
    1fb2:	0e 87       	std	Y+14, r16	; 0x0e
    Ui::display.setTextColor(WHITE);
    Ui::display.setCursor(CHANNEL_TEXT_LOW_X, CHANNEL_TEXT_LOW_Y);
    Ui::display.print(Channels::getFrequency(Channels::getOrderedIndex(0)));
    1fb4:	80 e0       	ldi	r24, 0x00	; 0
    1fb6:	0e 94 a6 0a 	call	0x154c	; 0x154c <_ZN8Channels15getOrderedIndexEh>
    1fba:	0e 94 86 0a 	call	0x150c	; 0x150c <_ZN8Channels12getFrequencyEh>
    1fbe:	4a e0       	ldi	r20, 0x0A	; 10
    1fc0:	50 e0       	ldi	r21, 0x00	; 0
    1fc2:	bc 01       	movw	r22, r24
    1fc4:	ce 01       	movw	r24, r28
    1fc6:	0e 94 0b 1a 	call	0x3416	; 0x3416 <_ZN5Print5printEji>
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) {
    cursor_x = x;
    1fca:	89 e6       	ldi	r24, 0x69	; 105
    1fcc:	90 e0       	ldi	r25, 0x00	; 0
    1fce:	9d 87       	std	Y+13, r25	; 0x0d
    1fd0:	8c 87       	std	Y+12, r24	; 0x0c
    cursor_y = y;
    1fd2:	1f 87       	std	Y+15, r17	; 0x0f
    1fd4:	0e 87       	std	Y+14, r16	; 0x0e

    Ui::display.setCursor(CHANNEL_TEXT_HIGH_X, CHANNEL_TEXT_HIGH_Y);
    Ui::display.print(
    1fd6:	87 e2       	ldi	r24, 0x27	; 39
    1fd8:	0e 94 a6 0a 	call	0x154c	; 0x154c <_ZN8Channels15getOrderedIndexEh>
    1fdc:	0e 94 86 0a 	call	0x150c	; 0x150c <_ZN8Channels12getFrequencyEh>
        Channels::getFrequency(Channels::getOrderedIndex(CHANNELS_SIZE - 1)));
    1fe0:	4a e0       	ldi	r20, 0x0A	; 10
    1fe2:	50 e0       	ldi	r21, 0x00	; 0
    1fe4:	bc 01       	movw	r22, r24
    1fe6:	ce 01       	movw	r24, r28
    1fe8:	0e 94 0b 1a 	call	0x3416	; 0x3416 <_ZN5Print5printEji>

    Ui::needDisplay();
}
    1fec:	df 91       	pop	r29
    1fee:	cf 91       	pop	r28
    1ff0:	1f 91       	pop	r17
    1ff2:	0f 91       	pop	r16

    Ui::display.setCursor(CHANNEL_TEXT_HIGH_X, CHANNEL_TEXT_HIGH_Y);
    Ui::display.print(
        Channels::getFrequency(Channels::getOrderedIndex(CHANNELS_SIZE - 1)));

    Ui::needDisplay();
    1ff4:	0c 94 bc 16 	jmp	0x2d78	; 0x2d78 <_ZN2Ui11needDisplayEv>

00001ff8 <_ZN12StateMachine20BandScanStateHandler12onUpdateDrawEv>:
}

void StateMachine::BandScanStateHandler::onUpdateDraw() {
    1ff8:	cf 92       	push	r12
    1ffa:	ef 92       	push	r14
    1ffc:	ff 92       	push	r15
    1ffe:	0f 93       	push	r16
    2000:	1f 93       	push	r17
    2002:	cf 93       	push	r28
    2004:	df 93       	push	r29
    2006:	ec 01       	movw	r28, r24
        100,
        GRAPH_X,
        GRAPH_Y,
        GRAPH_W,
        GRAPH_H
    );
    2008:	27 e3       	ldi	r18, 0x37	; 55
    200a:	c2 2e       	mov	r12, r18
    200c:	3e e7       	ldi	r19, 0x7E	; 126
    200e:	e3 2e       	mov	r14, r19
    2010:	00 e0       	ldi	r16, 0x00	; 0
    2012:	21 e0       	ldi	r18, 0x01	; 1
    2014:	44 e6       	ldi	r20, 0x64	; 100
    2016:	68 e2       	ldi	r22, 0x28	; 40
    2018:	04 96       	adiw	r24, 0x04	; 4
    201a:	0e 94 58 17 	call	0x2eb0	; 0x2eb0 <_ZN2Ui9drawGraphEPKhhhhhhh>
    Ui::display.drawFastHLine(
        BORDER_BOTTOM_X,
        BORDER_BOTTOM_Y,
        BORDER_BOTTOM_W,
        WHITE
    );
    201e:	01 e0       	ldi	r16, 0x01	; 1
    2020:	10 e0       	ldi	r17, 0x00	; 0
    2022:	20 e8       	ldi	r18, 0x80	; 128
    2024:	30 e0       	ldi	r19, 0x00	; 0
    2026:	47 e3       	ldi	r20, 0x37	; 55
    2028:	50 e0       	ldi	r21, 0x00	; 0
    202a:	60 e0       	ldi	r22, 0x00	; 0
    202c:	70 e0       	ldi	r23, 0x00	; 0
    202e:	86 eb       	ldi	r24, 0xB6	; 182
    2030:	92 e0       	ldi	r25, 0x02	; 2
    2032:	0e 94 ea 2b 	call	0x57d4	; 0x57d4 <_ZN16Adafruit_SSD130613drawFastHLineEiiij>
    Ui::clearRect(
        PROGRESS_X,
        PROGRESS_Y,
        PROGRESS_W,
        PROGRESS_H
    );
    2036:	25 e0       	ldi	r18, 0x05	; 5
    2038:	30 e0       	ldi	r19, 0x00	; 0
    203a:	4c e4       	ldi	r20, 0x4C	; 76
    203c:	50 e0       	ldi	r21, 0x00	; 0
    203e:	69 e3       	ldi	r22, 0x39	; 57
    2040:	70 e0       	ldi	r23, 0x00	; 0
    2042:	8a e1       	ldi	r24, 0x1A	; 26
    2044:	90 e0       	ldi	r25, 0x00	; 0
    2046:	0e 94 45 17 	call	0x2e8a	; 0x2e8a <_ZN2Ui9clearRectEiiii>

    uint8_t progressW = orderedChanelIndex * PROGRESS_W / CHANNELS_SIZE + 1;
    204a:	8a 81       	ldd	r24, Y+2	; 0x02
        PROGRESS_X,
        PROGRESS_Y,
        progressW,
        PROGRESS_H,
        WHITE
    );
    204c:	2c e4       	ldi	r18, 0x4C	; 76
    204e:	82 9f       	mul	r24, r18
    2050:	c0 01       	movw	r24, r0
    2052:	11 24       	eor	r1, r1
    2054:	68 e2       	ldi	r22, 0x28	; 40
    2056:	70 e0       	ldi	r23, 0x00	; 0
    2058:	0e 94 94 31 	call	0x6328	; 0x6328 <__divmodhi4>
    205c:	6f 5f       	subi	r22, 0xFF	; 255
    205e:	26 2f       	mov	r18, r22
    2060:	30 e0       	ldi	r19, 0x00	; 0
    2062:	ee 24       	eor	r14, r14
    2064:	e3 94       	inc	r14
    2066:	f1 2c       	mov	r15, r1
    2068:	05 e0       	ldi	r16, 0x05	; 5
    206a:	10 e0       	ldi	r17, 0x00	; 0
    206c:	49 e3       	ldi	r20, 0x39	; 57
    206e:	50 e0       	ldi	r21, 0x00	; 0
    2070:	6a e1       	ldi	r22, 0x1A	; 26
    2072:	70 e0       	ldi	r23, 0x00	; 0
    2074:	86 eb       	ldi	r24, 0xB6	; 182
    2076:	92 e0       	ldi	r25, 0x02	; 2
    2078:	0e 94 7d 1d 	call	0x3afa	; 0x3afa <_ZN12Adafruit_GFX8fillRectEiiiij>

    Ui::needDisplay();
}
    207c:	df 91       	pop	r29
    207e:	cf 91       	pop	r28
    2080:	1f 91       	pop	r17
    2082:	0f 91       	pop	r16
    2084:	ff 90       	pop	r15
    2086:	ef 90       	pop	r14
    2088:	cf 90       	pop	r12
        progressW,
        PROGRESS_H,
        WHITE
    );

    Ui::needDisplay();
    208a:	0c 94 bc 16 	jmp	0x2d78	; 0x2d78 <_ZN2Ui11needDisplayEv>

0000208e <_ZN12StateMachine16MenuStateHandler7onEnterEv>:
static void searchMenuHandler();
static void bandScannerMenuHandler();
static void settingsMenuHandler();


void StateMachine::MenuStateHandler::onEnter() {
    208e:	cf 93       	push	r28
    2090:	df 93       	push	r29
    this->menu.reset();
    2092:	ec 01       	movw	r28, r24
    2094:	22 96       	adiw	r28, 0x02	; 2
    2096:	ce 01       	movw	r24, r28
    2098:	0e 94 fe 17 	call	0x2ffc	; 0x2ffc <_ZN2Ui10MenuHelper5resetEv>
    this->menu.addItem(PSTR("Search"), searchIcon, searchMenuHandler);
    209c:	21 e7       	ldi	r18, 0x71	; 113
    209e:	30 e1       	ldi	r19, 0x10	; 16
    20a0:	4b ea       	ldi	r20, 0xAB	; 171
    20a2:	52 e0       	ldi	r21, 0x02	; 2
    20a4:	64 ea       	ldi	r22, 0xA4	; 164
    20a6:	71 e0       	ldi	r23, 0x01	; 1
    20a8:	ce 01       	movw	r24, r28
    20aa:	0e 94 04 18 	call	0x3008	; 0x3008 <_ZN2Ui10MenuHelper7addItemEPKcPKhPFvvE>
    this->menu.addItem(PSTR("Band Scan"), bandScanIcon, bandScannerMenuHandler);
    20ae:	2e e6       	ldi	r18, 0x6E	; 110
    20b0:	30 e1       	ldi	r19, 0x10	; 16
    20b2:	4b e2       	ldi	r20, 0x2B	; 43
    20b4:	52 e0       	ldi	r21, 0x02	; 2
    20b6:	6a e9       	ldi	r22, 0x9A	; 154
    20b8:	71 e0       	ldi	r23, 0x01	; 1
    20ba:	ce 01       	movw	r24, r28
    20bc:	0e 94 04 18 	call	0x3008	; 0x3008 <_ZN2Ui10MenuHelper7addItemEPKcPKhPFvvE>
    this->menu.addItem(PSTR("Settings"), settingsIcon, settingsMenuHandler);
    20c0:	2b e6       	ldi	r18, 0x6B	; 107
    20c2:	30 e1       	ldi	r19, 0x10	; 16
    20c4:	4b ea       	ldi	r20, 0xAB	; 171
    20c6:	51 e0       	ldi	r21, 0x01	; 1
    20c8:	61 e9       	ldi	r22, 0x91	; 145
    20ca:	71 e0       	ldi	r23, 0x01	; 1
    20cc:	ce 01       	movw	r24, r28
}
    20ce:	df 91       	pop	r29
    20d0:	cf 91       	pop	r28

void StateMachine::MenuStateHandler::onEnter() {
    this->menu.reset();
    this->menu.addItem(PSTR("Search"), searchIcon, searchMenuHandler);
    this->menu.addItem(PSTR("Band Scan"), bandScanIcon, bandScannerMenuHandler);
    this->menu.addItem(PSTR("Settings"), settingsIcon, settingsMenuHandler);
    20d2:	0c 94 04 18 	jmp	0x3008	; 0x3008 <_ZN2Ui10MenuHelper7addItemEPKcPKhPFvvE>

000020d6 <_ZL19settingsMenuHandlerv>:
static void bandScannerMenuHandler() {
    StateMachine::switchState(StateMachine::State::BANDSCAN);
};

static void settingsMenuHandler() {
    StateMachine::switchState(StateMachine::State::SETTINGS);
    20d6:	85 e0       	ldi	r24, 0x05	; 5
    20d8:	0c 94 7b 0e 	jmp	0x1cf6	; 0x1cf6 <_ZN12StateMachine11switchStateENS_5StateE>

000020dc <_ZL22bandScannerMenuHandlerv>:
static void searchMenuHandler() {
    StateMachine::switchState(StateMachine::State::SEARCH);
};

static void bandScannerMenuHandler() {
    StateMachine::switchState(StateMachine::State::BANDSCAN);
    20dc:	82 e0       	ldi	r24, 0x02	; 2
    20de:	0c 94 7b 0e 	jmp	0x1cf6	; 0x1cf6 <_ZN12StateMachine11switchStateENS_5StateE>

000020e2 <_ZL17searchMenuHandlerv>:
    }
}


static void searchMenuHandler() {
    StateMachine::switchState(StateMachine::State::SEARCH);
    20e2:	81 e0       	ldi	r24, 0x01	; 1
    20e4:	0c 94 7b 0e 	jmp	0x1cf6	; 0x1cf6 <_ZN12StateMachine11switchStateENS_5StateE>

000020e8 <_ZN12StateMachine16MenuStateHandler14onButtonChangeE6ButtonN7Buttons9PressTypeE>:

void StateMachine::MenuStateHandler::onButtonChange(
    Button button,
    Buttons::PressType pressType
) {
    if (pressType != Buttons::PressType::SHORT)
    20e8:	41 11       	cpse	r20, r1
    20ea:	12 c0       	rjmp	.+36     	; 0x2110 <_ZN12StateMachine16MenuStateHandler14onButtonChangeE6ButtonN7Buttons9PressTypeE+0x28>
        return;

    switch (button) {
    20ec:	61 30       	cpi	r22, 0x01	; 1
    20ee:	41 f0       	breq	.+16     	; 0x2100 <_ZN12StateMachine16MenuStateHandler14onButtonChangeE6ButtonN7Buttons9PressTypeE+0x18>
    20f0:	18 f0       	brcs	.+6      	; 0x20f8 <_ZN12StateMachine16MenuStateHandler14onButtonChangeE6ButtonN7Buttons9PressTypeE+0x10>
    20f2:	62 30       	cpi	r22, 0x02	; 2
    20f4:	51 f0       	breq	.+20     	; 0x210a <_ZN12StateMachine16MenuStateHandler14onButtonChangeE6ButtonN7Buttons9PressTypeE+0x22>
    20f6:	08 95       	ret
        case Button::UP:
            this->menu.selectPreviousItem();
    20f8:	02 96       	adiw	r24, 0x02	; 2
    20fa:	0e 94 2a 18 	call	0x3054	; 0x3054 <_ZN2Ui10MenuHelper18selectPreviousItemEv>
    20fe:	03 c0       	rjmp	.+6      	; 0x2106 <_ZN12StateMachine16MenuStateHandler14onButtonChangeE6ButtonN7Buttons9PressTypeE+0x1e>
            Ui::needUpdate();
            break;

        case Button::DOWN:
            this->menu.selectNextItem();
    2100:	02 96       	adiw	r24, 0x02	; 2
    2102:	0e 94 1c 18 	call	0x3038	; 0x3038 <_ZN2Ui10MenuHelper14selectNextItemEv>
            Ui::needUpdate();
    2106:	0c 94 b8 16 	jmp	0x2d70	; 0x2d70 <_ZN2Ui10needUpdateEv>
            break;

        case Button::MODE:
            this->menu.activateItem();
    210a:	02 96       	adiw	r24, 0x02	; 2
    210c:	0c 94 38 18 	jmp	0x3070	; 0x3070 <_ZN2Ui10MenuHelper12activateItemEv>
    2110:	08 95       	ret

00002112 <_ZN12StateMachine16MenuStateHandler13drawMenuEntryEv>:
    drawMenuEntry();
    Ui::needDisplay();
}


void StateMachine::MenuStateHandler::drawMenuEntry() {
    2112:	cf 92       	push	r12
    2114:	df 92       	push	r13
    2116:	ef 92       	push	r14
    2118:	ff 92       	push	r15
    211a:	0f 93       	push	r16
    211c:	1f 93       	push	r17
    211e:	cf 93       	push	r28
    2120:	df 93       	push	r29
    const Ui::MenuItem* item = this->menu.getCurrentItem();
    2122:	02 96       	adiw	r24, 0x02	; 2
    2124:	0e 94 47 18 	call	0x308e	; 0x308e <_ZN2Ui10MenuHelper14getCurrentItemEv>
    2128:	ec 01       	movw	r28, r24
    const uint8_t charLen = strlen(PSTRtoBuffer_P(item->text));
    212a:	88 81       	ld	r24, Y
    212c:	99 81       	ldd	r25, Y+1	; 0x01
    212e:	0e 94 b2 0a 	call	0x1564	; 0x1564 <_Z14PSTRtoBuffer_PPKc>
    2132:	fc 01       	movw	r30, r24
    2134:	01 90       	ld	r0, Z+
    2136:	00 20       	and	r0, r0
    2138:	e9 f7       	brne	.-6      	; 0x2134 <_ZN12StateMachine16MenuStateHandler13drawMenuEntryEv+0x22>
    213a:	31 97       	sbiw	r30, 0x01	; 1
    213c:	8f 01       	movw	r16, r30
    213e:	08 1b       	sub	r16, r24
    2140:	19 0b       	sbc	r17, r25

    Ui::display.setTextSize(2);
    2142:	62 e0       	ldi	r22, 0x02	; 2
    2144:	86 eb       	ldi	r24, 0xB6	; 182
    2146:	92 e0       	ldi	r25, 0x02	; 2
    2148:	0e 94 64 26 	call	0x4cc8	; 0x4cc8 <_ZN12Adafruit_GFX11setTextSizeEh>
    @param   c   16-bit 5-6-5 Color to draw text with
    @note    For 'transparent' background, background and foreground
             are set to same color rather than using a separate flag.
  */
  /**********************************************************************/
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
    214c:	81 e0       	ldi	r24, 0x01	; 1
    214e:	90 e0       	ldi	r25, 0x00	; 0
    2150:	90 93 c9 02 	sts	0x02C9, r25	; 0x8002c9 <_ZN2Ui7displayE+0x13>
    2154:	80 93 c8 02 	sts	0x02C8, r24	; 0x8002c8 <_ZN2Ui7displayE+0x12>
    2158:	90 93 c7 02 	sts	0x02C7, r25	; 0x8002c7 <_ZN2Ui7displayE+0x11>
    215c:	80 93 c6 02 	sts	0x02C6, r24	; 0x8002c6 <_ZN2Ui7displayE+0x10>
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) {
    cursor_x = x;
    2160:	2a ef       	ldi	r18, 0xFA	; 250
    2162:	20 03       	mulsu	r18, r16
    2164:	f0 01       	movw	r30, r0
    2166:	11 24       	eor	r1, r1
    2168:	ff 96       	adiw	r30, 0x3f	; 63
    216a:	f0 93 c3 02 	sts	0x02C3, r31	; 0x8002c3 <_ZN2Ui7displayE+0xd>
    216e:	e0 93 c2 02 	sts	0x02C2, r30	; 0x8002c2 <_ZN2Ui7displayE+0xc>
    cursor_y = y;
    2172:	8e e2       	ldi	r24, 0x2E	; 46
    2174:	90 e0       	ldi	r25, 0x00	; 0
    2176:	90 93 c5 02 	sts	0x02C5, r25	; 0x8002c5 <_ZN2Ui7displayE+0xf>
    217a:	80 93 c4 02 	sts	0x02C4, r24	; 0x8002c4 <_ZN2Ui7displayE+0xe>
    Ui::display.setTextColor(WHITE);
    Ui::display.setCursor(
        SCREEN_WIDTH_MID - (charLen * ((CHAR_WIDTH + 1) * 2)) / 2,
        TEXT_Y
    );
    Ui::display.print(PSTRtoBuffer_P(item->text));
    217e:	88 81       	ld	r24, Y
    2180:	99 81       	ldd	r25, Y+1	; 0x01
    2182:	0e 94 b2 0a 	call	0x1564	; 0x1564 <_Z14PSTRtoBuffer_PPKc>
    2186:	bc 01       	movw	r22, r24
    2188:	86 eb       	ldi	r24, 0xB6	; 182
    218a:	92 e0       	ldi	r25, 0x02	; 2
    218c:	0e 94 b3 19 	call	0x3366	; 0x3366 <_ZN5Print5printEPKc>

    if (item->icon) {
    2190:	8c 81       	ldd	r24, Y+4	; 0x04
    2192:	9d 81       	ldd	r25, Y+5	; 0x05
    2194:	89 2b       	or	r24, r25
    2196:	e1 f0       	breq	.+56     	; 0x21d0 <_ZN12StateMachine16MenuStateHandler13drawMenuEntryEv+0xbe>
        Ui::clearRect(
            GRAPHIC_X,
            GRAPHIC_Y,
            GRAPHIC_SIZE,
            GRAPHIC_SIZE
        );
    2198:	20 e2       	ldi	r18, 0x20	; 32
    219a:	30 e0       	ldi	r19, 0x00	; 0
    219c:	40 e2       	ldi	r20, 0x20	; 32
    219e:	50 e0       	ldi	r21, 0x00	; 0
    21a0:	67 e0       	ldi	r22, 0x07	; 7
    21a2:	70 e0       	ldi	r23, 0x00	; 0
    21a4:	8f e2       	ldi	r24, 0x2F	; 47
    21a6:	90 e0       	ldi	r25, 0x00	; 0
    21a8:	0e 94 45 17 	call	0x2e8a	; 0x2e8a <_ZN2Ui9clearRectEiiii>
            GRAPHIC_Y,
            item->icon,
            GRAPHIC_SIZE,
            GRAPHIC_SIZE,
            WHITE
        );
    21ac:	2c 81       	ldd	r18, Y+4	; 0x04
    21ae:	3d 81       	ldd	r19, Y+5	; 0x05
    21b0:	cc 24       	eor	r12, r12
    21b2:	c3 94       	inc	r12
    21b4:	d1 2c       	mov	r13, r1
    21b6:	90 e2       	ldi	r25, 0x20	; 32
    21b8:	e9 2e       	mov	r14, r25
    21ba:	f1 2c       	mov	r15, r1
    21bc:	00 e2       	ldi	r16, 0x20	; 32
    21be:	10 e0       	ldi	r17, 0x00	; 0
    21c0:	47 e0       	ldi	r20, 0x07	; 7
    21c2:	50 e0       	ldi	r21, 0x00	; 0
    21c4:	6f e2       	ldi	r22, 0x2F	; 47
    21c6:	70 e0       	ldi	r23, 0x00	; 0
    21c8:	86 eb       	ldi	r24, 0xB6	; 182
    21ca:	92 e0       	ldi	r25, 0x02	; 2
    21cc:	0e 94 ae 22 	call	0x455c	; 0x455c <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij>
    }
}
    21d0:	df 91       	pop	r29
    21d2:	cf 91       	pop	r28
    21d4:	1f 91       	pop	r17
    21d6:	0f 91       	pop	r16
    21d8:	ff 90       	pop	r15
    21da:	ef 90       	pop	r14
    21dc:	df 90       	pop	r13
    21de:	cf 90       	pop	r12
    21e0:	08 95       	ret

000021e2 <_ZN12StateMachine16MenuStateHandler13onInitialDrawEv>:

static void drawTriangles();
static void drawMenuEntry();


void StateMachine::MenuStateHandler::onInitialDraw() {
    21e2:	af 92       	push	r10
    21e4:	bf 92       	push	r11
    21e6:	cf 92       	push	r12
    21e8:	df 92       	push	r13
    21ea:	ef 92       	push	r14
    21ec:	ff 92       	push	r15
    21ee:	0f 93       	push	r16
    21f0:	1f 93       	push	r17
    21f2:	cf 93       	push	r28
    21f4:	df 93       	push	r29
    21f6:	ec 01       	movw	r28, r24
    Ui::clear();
    21f8:	0e 94 b4 16 	call	0x2d68	; 0x2d68 <_ZN2Ui5clearEv>

    drawMenuEntry();
    21fc:	ce 01       	movw	r24, r28
    21fe:	0e 94 89 10 	call	0x2112	; 0x2112 <_ZN12StateMachine16MenuStateHandler13drawMenuEntryEv>

        SCREEN_WIDTH - 1,
        SCREEN_HEIGHT_MID + TRIANGLE_MARGIN,

        WHITE
    );
    2202:	aa 24       	eor	r10, r10
    2204:	a3 94       	inc	r10
    2206:	b1 2c       	mov	r11, r1
    2208:	91 e2       	ldi	r25, 0x21	; 33
    220a:	c9 2e       	mov	r12, r25
    220c:	d1 2c       	mov	r13, r1
    220e:	2f e7       	ldi	r18, 0x7F	; 127
    2210:	e2 2e       	mov	r14, r18
    2212:	f1 2c       	mov	r15, r1
    2214:	05 e2       	ldi	r16, 0x25	; 37
    2216:	10 e0       	ldi	r17, 0x00	; 0
    2218:	2d e7       	ldi	r18, 0x7D	; 125
    221a:	30 e0       	ldi	r19, 0x00	; 0
    221c:	41 e2       	ldi	r20, 0x21	; 33
    221e:	50 e0       	ldi	r21, 0x00	; 0
    2220:	6b e7       	ldi	r22, 0x7B	; 123
    2222:	70 e0       	ldi	r23, 0x00	; 0
    2224:	86 eb       	ldi	r24, 0xB6	; 182
    2226:	92 e0       	ldi	r25, 0x02	; 2
    2228:	0e 94 cc 20 	call	0x4198	; 0x4198 <_ZN12Adafruit_GFX12fillTriangleEiiiiiij>

        SCREEN_WIDTH - 1,
        SCREEN_HEIGHT_MID - TRIANGLE_MARGIN,

        WHITE
    );
    222c:	3d e1       	ldi	r19, 0x1D	; 29
    222e:	c3 2e       	mov	r12, r19
    2230:	d1 2c       	mov	r13, r1
    2232:	09 e1       	ldi	r16, 0x19	; 25
    2234:	10 e0       	ldi	r17, 0x00	; 0
    2236:	2d e7       	ldi	r18, 0x7D	; 125
    2238:	30 e0       	ldi	r19, 0x00	; 0
    223a:	4d e1       	ldi	r20, 0x1D	; 29
    223c:	50 e0       	ldi	r21, 0x00	; 0
    223e:	6b e7       	ldi	r22, 0x7B	; 123
    2240:	70 e0       	ldi	r23, 0x00	; 0
    2242:	86 eb       	ldi	r24, 0xB6	; 182
    2244:	92 e0       	ldi	r25, 0x02	; 2
    2246:	0e 94 cc 20 	call	0x4198	; 0x4198 <_ZN12Adafruit_GFX12fillTriangleEiiiiiij>

    drawMenuEntry();
    drawTriangles();

    Ui::needDisplay();
}
    224a:	df 91       	pop	r29
    224c:	cf 91       	pop	r28
    224e:	1f 91       	pop	r17
    2250:	0f 91       	pop	r16
    2252:	ff 90       	pop	r15
    2254:	ef 90       	pop	r14
    2256:	df 90       	pop	r13
    2258:	cf 90       	pop	r12
    225a:	bf 90       	pop	r11
    225c:	af 90       	pop	r10
    Ui::clear();

    drawMenuEntry();
    drawTriangles();

    Ui::needDisplay();
    225e:	0c 94 bc 16 	jmp	0x2d78	; 0x2d78 <_ZN2Ui11needDisplayEv>

00002262 <_ZN12StateMachine16MenuStateHandler12onUpdateDrawEv>:
}

void StateMachine::MenuStateHandler::onUpdateDraw() {
    2262:	cf 93       	push	r28
    2264:	df 93       	push	r29
    2266:	ec 01       	movw	r28, r24
    Ui::clearRect(
        0,
        SCREEN_HEIGHT - (CHAR_HEIGHT + 2) * 2,
        SCREEN_WIDTH,
        (CHAR_HEIGHT + 2) * 2
    );
    2268:	22 e1       	ldi	r18, 0x12	; 18
    226a:	30 e0       	ldi	r19, 0x00	; 0
    226c:	40 e8       	ldi	r20, 0x80	; 128
    226e:	50 e0       	ldi	r21, 0x00	; 0
    2270:	6e e2       	ldi	r22, 0x2E	; 46
    2272:	70 e0       	ldi	r23, 0x00	; 0
    2274:	80 e0       	ldi	r24, 0x00	; 0
    2276:	90 e0       	ldi	r25, 0x00	; 0
    2278:	0e 94 45 17 	call	0x2e8a	; 0x2e8a <_ZN2Ui9clearRectEiiii>

    drawMenuEntry();
    227c:	ce 01       	movw	r24, r28
    227e:	0e 94 89 10 	call	0x2112	; 0x2112 <_ZN12StateMachine16MenuStateHandler13drawMenuEntryEv>
    Ui::needDisplay();
}
    2282:	df 91       	pop	r29
    2284:	cf 91       	pop	r28
        SCREEN_WIDTH,
        (CHAR_HEIGHT + 2) * 2
    );

    drawMenuEntry();
    Ui::needDisplay();
    2286:	0c 94 bc 16 	jmp	0x2d78	; 0x2d78 <_ZN2Ui11needDisplayEv>

0000228a <_ZN12StateMachine23ScreensaverStateHandler7onEnterEv>:
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};


void StateMachine::ScreensaverStateHandler::onEnter() {
    showLogo = true;
    228a:	21 e0       	ldi	r18, 0x01	; 1
    228c:	fc 01       	movw	r30, r24
    228e:	21 87       	std	Z+9, r18	; 0x09
    2290:	08 95       	ret

00002292 <_ZN12StateMachine23ScreensaverStateHandler12onUpdateDrawEv>:

    Ui::needDisplay();
}

void StateMachine::ScreensaverStateHandler::onUpdateDraw() {
    this->onInitialDraw();
    2292:	dc 01       	movw	r26, r24
    2294:	ed 91       	ld	r30, X+
    2296:	fc 91       	ld	r31, X
    2298:	01 90       	ld	r0, Z+
    229a:	f0 81       	ld	r31, Z
    229c:	e0 2d       	mov	r30, r0
    229e:	09 94       	ijmp

000022a0 <_ZN12StateMachine23ScreensaverStateHandler8onUpdateEv>:

void StateMachine::ScreensaverStateHandler::onEnter() {
    showLogo = true;
}

void StateMachine::ScreensaverStateHandler::onUpdate() {
    22a0:	0f 93       	push	r16
    22a2:	1f 93       	push	r17
    22a4:	cf 93       	push	r28
    22a6:	df 93       	push	r29
    22a8:	ec 01       	movw	r28, r24
    if (this->displaySwapTimer.hasTicked()) {
    22aa:	8c 01       	movw	r16, r24
    22ac:	0e 5f       	subi	r16, 0xFE	; 254
    22ae:	1f 4f       	sbci	r17, 0xFF	; 255
    22b0:	c8 01       	movw	r24, r16
    22b2:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <_ZN5Timer9hasTickedEv>
    22b6:	88 23       	and	r24, r24
    22b8:	69 f0       	breq	.+26     	; 0x22d4 <_ZN12StateMachine23ScreensaverStateHandler8onUpdateEv+0x34>
        this->displaySwapTimer.reset();
    22ba:	c8 01       	movw	r24, r16
    22bc:	0e 94 6f 16 	call	0x2cde	; 0x2cde <_ZN5Timer5resetEv>
        showLogo = !showLogo;
    22c0:	99 85       	ldd	r25, Y+9	; 0x09
    22c2:	81 e0       	ldi	r24, 0x01	; 1
    22c4:	89 27       	eor	r24, r25
    22c6:	89 87       	std	Y+9, r24	; 0x09

        Ui::needUpdate();
    }
}
    22c8:	df 91       	pop	r29
    22ca:	cf 91       	pop	r28
    22cc:	1f 91       	pop	r17
    22ce:	0f 91       	pop	r16
void StateMachine::ScreensaverStateHandler::onUpdate() {
    if (this->displaySwapTimer.hasTicked()) {
        this->displaySwapTimer.reset();
        showLogo = !showLogo;

        Ui::needUpdate();
    22d0:	0c 94 b8 16 	jmp	0x2d70	; 0x2d70 <_ZN2Ui10needUpdateEv>
    }
}
    22d4:	df 91       	pop	r29
    22d6:	cf 91       	pop	r28
    22d8:	1f 91       	pop	r17
    22da:	0f 91       	pop	r16
    22dc:	08 95       	ret

000022de <_ZN12StateMachine23ScreensaverStateHandler14onButtonChangeE6ButtonN7Buttons9PressTypeE>:

void StateMachine::ScreensaverStateHandler::onButtonChange(
    Button button,
    Buttons::PressType pressType
) {
    StateMachine::switchState(StateMachine::lastState);
    22de:	80 91 af 02 	lds	r24, 0x02AF	; 0x8002af <_ZN12StateMachine9lastStateE>
    22e2:	0c 94 7b 0e 	jmp	0x1cf6	; 0x1cf6 <_ZN12StateMachine11switchStateENS_5StateE>

000022e6 <_ZN12StateMachine23ScreensaverStateHandler13onInitialDrawEv>:
}


void StateMachine::ScreensaverStateHandler::onInitialDraw() {
    22e6:	cf 92       	push	r12
    22e8:	df 92       	push	r13
    22ea:	ef 92       	push	r14
    22ec:	ff 92       	push	r15
    22ee:	0f 93       	push	r16
    22f0:	1f 93       	push	r17
    22f2:	cf 93       	push	r28
    22f4:	df 93       	push	r29
    22f6:	ec 01       	movw	r28, r24
    Ui::clear();
    22f8:	0e 94 b4 16 	call	0x2d68	; 0x2d68 <_ZN2Ui5clearEv>

    if (showLogo) {
    22fc:	89 85       	ldd	r24, Y+9	; 0x09
    22fe:	88 23       	and	r24, r24
    2300:	99 f0       	breq	.+38     	; 0x2328 <_ZN12StateMachine23ScreensaverStateHandler13onInitialDrawEv+0x42>
            0,
            logo,
            SCREEN_WIDTH,
            SCREEN_HEIGHT,
            WHITE
        );
    2302:	cc 24       	eor	r12, r12
    2304:	c3 94       	inc	r12
    2306:	d1 2c       	mov	r13, r1
    2308:	90 e4       	ldi	r25, 0x40	; 64
    230a:	e9 2e       	mov	r14, r25
    230c:	f1 2c       	mov	r15, r1
    230e:	00 e8       	ldi	r16, 0x80	; 128
    2310:	10 e0       	ldi	r17, 0x00	; 0
    2312:	2b e2       	ldi	r18, 0x2B	; 43
    2314:	33 e0       	ldi	r19, 0x03	; 3
    2316:	40 e0       	ldi	r20, 0x00	; 0
    2318:	50 e0       	ldi	r21, 0x00	; 0
    231a:	60 e0       	ldi	r22, 0x00	; 0
    231c:	70 e0       	ldi	r23, 0x00	; 0
    231e:	86 eb       	ldi	r24, 0xB6	; 182
    2320:	92 e0       	ldi	r25, 0x02	; 2
    2322:	0e 94 ae 22 	call	0x455c	; 0x455c <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij>
    2326:	40 c0       	rjmp	.+128    	; 0x23a8 <_ZN12StateMachine23ScreensaverStateHandler13onInitialDrawEv+0xc2>
    @param   c   16-bit 5-6-5 Color to draw text with
    @note    For 'transparent' background, background and foreground
             are set to same color rather than using a separate flag.
  */
  /**********************************************************************/
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
    2328:	81 e0       	ldi	r24, 0x01	; 1
    232a:	90 e0       	ldi	r25, 0x00	; 0
    232c:	90 93 c9 02 	sts	0x02C9, r25	; 0x8002c9 <_ZN2Ui7displayE+0x13>
    2330:	80 93 c8 02 	sts	0x02C8, r24	; 0x8002c8 <_ZN2Ui7displayE+0x12>
    2334:	90 93 c7 02 	sts	0x02C7, r25	; 0x8002c7 <_ZN2Ui7displayE+0x11>
    2338:	80 93 c6 02 	sts	0x02C6, r24	; 0x8002c6 <_ZN2Ui7displayE+0x10>
    } else {
        Ui::display.setTextColor(WHITE);

        Ui::display.setTextSize(6);
    233c:	66 e0       	ldi	r22, 0x06	; 6
    233e:	86 eb       	ldi	r24, 0xB6	; 182
    2340:	92 e0       	ldi	r25, 0x02	; 2
    2342:	0e 94 64 26 	call	0x4cc8	; 0x4cc8 <_ZN12Adafruit_GFX11setTextSizeEh>
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) {
    cursor_x = x;
    2346:	8e e1       	ldi	r24, 0x1E	; 30
    2348:	90 e0       	ldi	r25, 0x00	; 0
    234a:	90 93 c3 02 	sts	0x02C3, r25	; 0x8002c3 <_ZN2Ui7displayE+0xd>
    234e:	80 93 c2 02 	sts	0x02C2, r24	; 0x8002c2 <_ZN2Ui7displayE+0xc>
    cursor_y = y;
    2352:	82 e0       	ldi	r24, 0x02	; 2
    2354:	90 e0       	ldi	r25, 0x00	; 0
    2356:	90 93 c5 02 	sts	0x02C5, r25	; 0x8002c5 <_ZN2Ui7displayE+0xf>
    235a:	80 93 c4 02 	sts	0x02C4, r24	; 0x8002c4 <_ZN2Ui7displayE+0xe>
        Ui::display.setCursor(
            SCREEN_WIDTH_MID - ((CHAR_WIDTH) * 6) / 2 * 2 - 3,
            2);

        Ui::display.print(Channels::getName(Receiver::activeChannel));
    235e:	80 91 85 02 	lds	r24, 0x0285	; 0x800285 <_ZN8Receiver13activeChannelE>
    2362:	0e 94 8f 0a 	call	0x151e	; 0x151e <_ZN8Channels7getNameEh>
    2366:	bc 01       	movw	r22, r24
    2368:	86 eb       	ldi	r24, 0xB6	; 182
    236a:	92 e0       	ldi	r25, 0x02	; 2
    236c:	0e 94 b3 19 	call	0x3366	; 0x3366 <_ZN5Print5printEPKc>

        Ui::display.setTextSize(2);
    2370:	62 e0       	ldi	r22, 0x02	; 2
    2372:	86 eb       	ldi	r24, 0xB6	; 182
    2374:	92 e0       	ldi	r25, 0x02	; 2
    2376:	0e 94 64 26 	call	0x4cc8	; 0x4cc8 <_ZN12Adafruit_GFX11setTextSizeEh>
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) {
    cursor_x = x;
    237a:	86 e2       	ldi	r24, 0x26	; 38
    237c:	90 e0       	ldi	r25, 0x00	; 0
    237e:	90 93 c3 02 	sts	0x02C3, r25	; 0x8002c3 <_ZN2Ui7displayE+0xd>
    2382:	80 93 c2 02 	sts	0x02C2, r24	; 0x8002c2 <_ZN2Ui7displayE+0xc>
    cursor_y = y;
    2386:	80 e3       	ldi	r24, 0x30	; 48
    2388:	90 e0       	ldi	r25, 0x00	; 0
    238a:	90 93 c5 02 	sts	0x02C5, r25	; 0x8002c5 <_ZN2Ui7displayE+0xf>
    238e:	80 93 c4 02 	sts	0x02C4, r24	; 0x8002c4 <_ZN2Ui7displayE+0xe>
        Ui::display.setCursor(
            SCREEN_WIDTH_MID - ((CHAR_WIDTH + 1) * 2) / 2 * 4 - 1,
            SCREEN_HEIGHT - CHAR_HEIGHT * 2 - 2);
        Ui::display.print(Channels::getFrequency(Receiver::activeChannel));
    2392:	80 91 85 02 	lds	r24, 0x0285	; 0x800285 <_ZN8Receiver13activeChannelE>
    2396:	0e 94 86 0a 	call	0x150c	; 0x150c <_ZN8Channels12getFrequencyEh>
    239a:	4a e0       	ldi	r20, 0x0A	; 10
    239c:	50 e0       	ldi	r21, 0x00	; 0
    239e:	bc 01       	movw	r22, r24
    23a0:	86 eb       	ldi	r24, 0xB6	; 182
    23a2:	92 e0       	ldi	r25, 0x02	; 2
    23a4:	0e 94 0b 1a 	call	0x3416	; 0x3416 <_ZN5Print5printEji>
    }

    Ui::needDisplay();
}
    23a8:	df 91       	pop	r29
    23aa:	cf 91       	pop	r28
    23ac:	1f 91       	pop	r17
    23ae:	0f 91       	pop	r16
    23b0:	ff 90       	pop	r15
    23b2:	ef 90       	pop	r14
    23b4:	df 90       	pop	r13
    23b6:	cf 90       	pop	r12
            SCREEN_WIDTH_MID - ((CHAR_WIDTH + 1) * 2) / 2 * 4 - 1,
            SCREEN_HEIGHT - CHAR_HEIGHT * 2 - 2);
        Ui::display.print(Channels::getFrequency(Receiver::activeChannel));
    }

    Ui::needDisplay();
    23b8:	0c 94 bc 16 	jmp	0x2d78	; 0x2d78 <_ZN2Ui11needDisplayEv>

000023bc <_ZL12menuModeIconPv>:
};


static const unsigned char* menuModeIcon(void* state) {
    SearchStateHandler* search = static_cast<SearchStateHandler*>(state);
    return search->manual ? manualIcon : autoIcon;
    23bc:	fc 01       	movw	r30, r24
    23be:	84 a1       	ldd	r24, Z+36	; 0x24
    23c0:	81 11       	cpse	r24, r1
    23c2:	03 c0       	rjmp	.+6      	; 0x23ca <_ZL12menuModeIconPv+0xe>
    23c4:	8b e8       	ldi	r24, 0x8B	; 139
    23c6:	97 e0       	ldi	r25, 0x07	; 7
    23c8:	08 95       	ret
    23ca:	8b e6       	ldi	r24, 0x6B	; 107
    23cc:	97 e0       	ldi	r25, 0x07	; 7
}
    23ce:	08 95       	ret

000023d0 <_ZL13menuOrderIconPv>:

static const unsigned char* menuOrderIcon(void* state) {
    SearchStateHandler* search = static_cast<SearchStateHandler*>(state);
    switch (search->order) {
    23d0:	fc 01       	movw	r30, r24
    23d2:	85 a1       	ldd	r24, Z+37	; 0x25
    23d4:	88 23       	and	r24, r24
    23d6:	31 f0       	breq	.+12     	; 0x23e4 <_ZL13menuOrderIconPv+0x14>
    23d8:	81 30       	cpi	r24, 0x01	; 1
    23da:	19 f4       	brne	.+6      	; 0x23e2 <_ZL13menuOrderIconPv+0x12>
        case SearchStateHandler::ScanOrder::FREQUENCY:
            return freqOrderIcon;
            break;

        case SearchStateHandler::ScanOrder::CHANNEL:
            return channelOrderIcon;
    23dc:	2b e4       	ldi	r18, 0x4B	; 75
    23de:	37 e0       	ldi	r19, 0x07	; 7
    23e0:	03 c0       	rjmp	.+6      	; 0x23e8 <_ZL13menuOrderIconPv+0x18>
            break;
    }
}
    23e2:	08 95       	ret

static const unsigned char* menuOrderIcon(void* state) {
    SearchStateHandler* search = static_cast<SearchStateHandler*>(state);
    switch (search->order) {
        case SearchStateHandler::ScanOrder::FREQUENCY:
            return freqOrderIcon;
    23e4:	2b e2       	ldi	r18, 0x2B	; 43
    23e6:	37 e0       	ldi	r19, 0x07	; 7
    23e8:	c9 01       	movw	r24, r18

        case SearchStateHandler::ScanOrder::CHANNEL:
            return channelOrderIcon;
            break;
    }
}
    23ea:	08 95       	ret

000023ec <_ZL16menuOrderHandlerPv>:

    EepromSettings.searchManual = search->manual;
    EepromSettings.markDirty();
}

static void menuOrderHandler(void* state) {
    23ec:	1f 93       	push	r17
    23ee:	cf 93       	push	r28
    23f0:	df 93       	push	r29
    23f2:	ec 01       	movw	r28, r24
    SearchStateHandler* search = static_cast<SearchStateHandler*>(state);
    if (search->order == SearchStateHandler::ScanOrder::FREQUENCY) {
    23f4:	8d a1       	ldd	r24, Y+37	; 0x25
    23f6:	81 11       	cpse	r24, r1
    23f8:	09 c0       	rjmp	.+18     	; 0x240c <_ZL16menuOrderHandlerPv+0x20>
        search->order = SearchStateHandler::ScanOrder::CHANNEL;
    23fa:	11 e0       	ldi	r17, 0x01	; 1
    23fc:	1d a3       	std	Y+37, r17	; 0x25
        search->orderedChanelIndex =
            Channels::getOrderedIndex(search->orderedChanelIndex);
    23fe:	8e a1       	ldd	r24, Y+38	; 0x26
    2400:	0e 94 a6 0a 	call	0x154c	; 0x154c <_ZN8Channels15getOrderedIndexEh>
    2404:	8e a3       	std	Y+38, r24	; 0x26
        EepromSettings.searchOrderByChannel = true;
    2406:	10 93 8e 02 	sts	0x028E, r17	; 0x80028e <EepromSettings+0x7>
    240a:	07 c0       	rjmp	.+14     	; 0x241a <_ZL16menuOrderHandlerPv+0x2e>
    } else {
        search->order = SearchStateHandler::ScanOrder::FREQUENCY;
    240c:	1d a2       	std	Y+37, r1	; 0x25
        search->orderedChanelIndex =
            Channels::getOrderedIndexFromIndex(search->orderedChanelIndex);
    240e:	8e a1       	ldd	r24, Y+38	; 0x26
    2410:	0e 94 ac 0a 	call	0x1558	; 0x1558 <_ZN8Channels24getOrderedIndexFromIndexEh>
    2414:	8e a3       	std	Y+38, r24	; 0x26
        EepromSettings.searchOrderByChannel = false;
    2416:	10 92 8e 02 	sts	0x028E, r1	; 0x80028e <EepromSettings+0x7>
    }

    EepromSettings.markDirty();
    241a:	87 e8       	ldi	r24, 0x87	; 135
    241c:	92 e0       	ldi	r25, 0x02	; 2
}
    241e:	df 91       	pop	r29
    2420:	cf 91       	pop	r28
    2422:	1f 91       	pop	r17
        search->orderedChanelIndex =
            Channels::getOrderedIndexFromIndex(search->orderedChanelIndex);
        EepromSettings.searchOrderByChannel = false;
    }

    EepromSettings.markDirty();
    2424:	0c 94 20 0d 	jmp	0x1a40	; 0x1a40 <_ZN14EepromSettings9markDirtyEv>

00002428 <_ZL15menuModeHandlerPv>:
            return channelOrderIcon;
            break;
    }
}

static void menuModeHandler(void* state) {
    2428:	fc 01       	movw	r30, r24
    SearchStateHandler* search = static_cast<SearchStateHandler*>(state);
    search->manual = !search->manual;
    242a:	84 a1       	ldd	r24, Z+36	; 0x24
    242c:	91 e0       	ldi	r25, 0x01	; 1
    242e:	98 27       	eor	r25, r24
    2430:	94 a3       	std	Z+36, r25	; 0x24

    EepromSettings.searchManual = search->manual;
    2432:	90 93 8d 02 	sts	0x028D, r25	; 0x80028d <EepromSettings+0x6>
    EepromSettings.markDirty();
    2436:	87 e8       	ldi	r24, 0x87	; 135
    2438:	92 e0       	ldi	r25, 0x02	; 2
    243a:	0c 94 20 0d 	jmp	0x1a40	; 0x1a40 <_ZN14EepromSettings9markDirtyEv>

0000243e <_ZN12StateMachine18SearchStateHandler7onEnterEv>:

    EepromSettings.markDirty();
}


void SearchStateHandler::onEnter() {
    243e:	0f 93       	push	r16
    2440:	1f 93       	push	r17
    2442:	cf 93       	push	r28
    2444:	df 93       	push	r29
    2446:	ec 01       	movw	r28, r24
    menu.addItem(menuModeIcon, menuModeHandler);
    2448:	8c 01       	movw	r16, r24
    244a:	04 5f       	subi	r16, 0xF4	; 244
    244c:	1f 4f       	sbci	r17, 0xFF	; 255
    244e:	44 e1       	ldi	r20, 0x14	; 20
    2450:	52 e1       	ldi	r21, 0x12	; 18
    2452:	6e ed       	ldi	r22, 0xDE	; 222
    2454:	71 e1       	ldi	r23, 0x11	; 17
    2456:	c8 01       	movw	r24, r16
    2458:	0e 94 53 18 	call	0x30a6	; 0x30a6 <_ZN2Ui15StateMenuHelper7addItemEPFPKhPvEPFvS3_E>
    menu.addItem(menuOrderIcon, menuOrderHandler);
    245c:	46 ef       	ldi	r20, 0xF6	; 246
    245e:	51 e1       	ldi	r21, 0x11	; 17
    2460:	68 ee       	ldi	r22, 0xE8	; 232
    2462:	71 e1       	ldi	r23, 0x11	; 17
    2464:	c8 01       	movw	r24, r16
    2466:	0e 94 53 18 	call	0x30a6	; 0x30a6 <_ZN2Ui15StateMenuHelper7addItemEPFPKhPvEPFvS3_E>

    this->manual = EepromSettings.searchManual;
    246a:	81 e0       	ldi	r24, 0x01	; 1
    246c:	90 91 8d 02 	lds	r25, 0x028D	; 0x80028d <EepromSettings+0x6>
    2470:	91 11       	cpse	r25, r1
    2472:	01 c0       	rjmp	.+2      	; 0x2476 <_ZN12StateMachine18SearchStateHandler7onEnterEv+0x38>
    2474:	80 e0       	ldi	r24, 0x00	; 0
    2476:	8c a3       	std	Y+36, r24	; 0x24
    this->order = EepromSettings.searchOrderByChannel ?
        ScanOrder::CHANNEL :
        ScanOrder::FREQUENCY;
    2478:	81 e0       	ldi	r24, 0x01	; 1
    247a:	90 91 8e 02 	lds	r25, 0x028E	; 0x80028e <EepromSettings+0x7>
    247e:	91 11       	cpse	r25, r1
    2480:	01 c0       	rjmp	.+2      	; 0x2484 <_ZN12StateMachine18SearchStateHandler7onEnterEv+0x46>
    2482:	80 e0       	ldi	r24, 0x00	; 0
    2484:	8d a3       	std	Y+37, r24	; 0x25

    switch (this->order) {
    2486:	81 30       	cpi	r24, 0x01	; 1
    2488:	19 f4       	brne	.+6      	; 0x2490 <_ZN12StateMachine18SearchStateHandler7onEnterEv+0x52>
        case ScanOrder::CHANNEL:
            this->orderedChanelIndex = EepromSettings.startChannel;
    248a:	80 91 8b 02 	lds	r24, 0x028B	; 0x80028b <EepromSettings+0x4>
    248e:	04 c0       	rjmp	.+8      	; 0x2498 <_ZN12StateMachine18SearchStateHandler7onEnterEv+0x5a>
            break;

        case ScanOrder::FREQUENCY:
            this->orderedChanelIndex =
                Channels::getOrderedIndexFromIndex(EepromSettings.startChannel);
    2490:	80 91 8b 02 	lds	r24, 0x028B	; 0x80028b <EepromSettings+0x4>
    2494:	0e 94 ac 0a 	call	0x1558	; 0x1558 <_ZN8Channels24getOrderedIndexFromIndexEh>
    2498:	8e a3       	std	Y+38, r24	; 0x26
            break;
    }
}
    249a:	df 91       	pop	r29
    249c:	cf 91       	pop	r28
    249e:	1f 91       	pop	r17
    24a0:	0f 91       	pop	r16
    24a2:	08 95       	ret

000024a4 <_ZN12StateMachine18SearchStateHandler12onUpdateAutoEv>:
    }

    Ui::needUpdate();
}

void SearchStateHandler::onUpdateAuto() {
    24a4:	1f 93       	push	r17
    24a6:	cf 93       	push	r28
    24a8:	df 93       	push	r29
    24aa:	ec 01       	movw	r28, r24
    if (scanningPeak) {
    24ac:	8d 81       	ldd	r24, Y+5	; 0x05
    24ae:	88 23       	and	r24, r24
    24b0:	b1 f1       	breq	.+108    	; 0x251e <_ZN12StateMachine18SearchStateHandler12onUpdateAutoEv+0x7a>
        uint8_t peaksIndex = peakChannelIndex - orderedChanelIndex;
    24b2:	8e 81       	ldd	r24, Y+6	; 0x06
    24b4:	9e a1       	ldd	r25, Y+38	; 0x26
    24b6:	28 2f       	mov	r18, r24
    24b8:	29 1b       	sub	r18, r25
        peaks[peaksIndex] = Receiver::rssiA;
    24ba:	fe 01       	movw	r30, r28
    24bc:	e2 0f       	add	r30, r18
    24be:	f1 1d       	adc	r31, r1
    24c0:	30 91 84 02 	lds	r19, 0x0284	; 0x800284 <_ZN8Receiver5rssiAE>
    24c4:	37 83       	std	Z+7, r19	; 0x07
        peakChannelIndex++;
    24c6:	8f 5f       	subi	r24, 0xFF	; 255
    24c8:	8e 83       	std	Y+6, r24	; 0x06

        if (peaksIndex >= PEAK_LOOKAHEAD || peakChannelIndex >= CHANNELS_SIZE) {
    24ca:	24 30       	cpi	r18, 0x04	; 4
    24cc:	10 f4       	brcc	.+4      	; 0x24d2 <_ZN12StateMachine18SearchStateHandler12onUpdateAutoEv+0x2e>
    24ce:	88 32       	cpi	r24, 0x28	; 40
    24d0:	f8 f0       	brcs	.+62     	; 0x2510 <_ZN12StateMachine18SearchStateHandler12onUpdateAutoEv+0x6c>
    24d2:	fe 01       	movw	r30, r28
    24d4:	37 96       	adiw	r30, 0x07	; 7
    }

    Ui::needUpdate();
}

void SearchStateHandler::onUpdateAuto() {
    24d6:	80 e0       	ldi	r24, 0x00	; 0
    24d8:	10 e0       	ldi	r17, 0x00	; 0
    24da:	20 e0       	ldi	r18, 0x00	; 0

        if (peaksIndex >= PEAK_LOOKAHEAD || peakChannelIndex >= CHANNELS_SIZE) {
            uint8_t largestPeak = 0;
            uint8_t largestPeakIndex = 0;
            for (uint8_t i = 0; i < PEAK_LOOKAHEAD; i++) {
                uint8_t peak = peaks[i];
    24dc:	31 91       	ld	r19, Z+
                if (peak > largestPeak) {
    24de:	23 17       	cp	r18, r19
    24e0:	10 f4       	brcc	.+4      	; 0x24e6 <_ZN12StateMachine18SearchStateHandler12onUpdateAutoEv+0x42>
    24e2:	18 2f       	mov	r17, r24
    24e4:	23 2f       	mov	r18, r19
        peakChannelIndex++;

        if (peaksIndex >= PEAK_LOOKAHEAD || peakChannelIndex >= CHANNELS_SIZE) {
            uint8_t largestPeak = 0;
            uint8_t largestPeakIndex = 0;
            for (uint8_t i = 0; i < PEAK_LOOKAHEAD; i++) {
    24e6:	8f 5f       	subi	r24, 0xFF	; 255
    24e8:	84 30       	cpi	r24, 0x04	; 4
    24ea:	c1 f7       	brne	.-16     	; 0x24dc <_ZN12StateMachine18SearchStateHandler12onUpdateAutoEv+0x38>
                    largestPeak = peak;
                    largestPeakIndex = i;
                }
            }

            uint8_t peakChannel = orderedChanelIndex + largestPeakIndex;
    24ec:	19 0f       	add	r17, r25
            orderedChanelIndex = peakChannel;
    24ee:	1e a3       	std	Y+38, r17	; 0x26
            Receiver::setChannel(Channels::getOrderedIndex(peakChannel));
    24f0:	81 2f       	mov	r24, r17
    24f2:	0e 94 a6 0a 	call	0x154c	; 0x154c <_ZN8Channels15getOrderedIndexEh>
    24f6:	0e 94 cb 0a 	call	0x1596	; 0x1596 <_ZN8Receiver10setChannelEh>

            EepromSettings.startChannel =
                Channels::getOrderedIndex(peakChannel);
    24fa:	81 2f       	mov	r24, r17
    24fc:	0e 94 a6 0a 	call	0x154c	; 0x154c <_ZN8Channels15getOrderedIndexEh>
    2500:	80 93 8b 02 	sts	0x028B, r24	; 0x80028b <EepromSettings+0x4>
            EepromSettings.markDirty();
    2504:	87 e8       	ldi	r24, 0x87	; 135
    2506:	92 e0       	ldi	r25, 0x02	; 2
    2508:	0e 94 20 0d 	call	0x1a40	; 0x1a40 <_ZN14EepromSettings9markDirtyEv>

            scanningPeak = false;
    250c:	1d 82       	std	Y+5, r1	; 0x05
    250e:	2e c0       	rjmp	.+92     	; 0x256c <_ZN12StateMachine18SearchStateHandler12onUpdateAutoEv+0xc8>
        } else {
            Receiver::setChannel(Channels::getOrderedIndex(peakChannelIndex));
    2510:	0e 94 a6 0a 	call	0x154c	; 0x154c <_ZN8Channels15getOrderedIndexEh>
                if (forceNext)
                    forceNext = false;
            }
        }
    }
}
    2514:	df 91       	pop	r29
    2516:	cf 91       	pop	r28
    2518:	1f 91       	pop	r17
                Channels::getOrderedIndex(peakChannel);
            EepromSettings.markDirty();

            scanningPeak = false;
        } else {
            Receiver::setChannel(Channels::getOrderedIndex(peakChannelIndex));
    251a:	0c 94 cb 0a 	jmp	0x1596	; 0x1596 <_ZN8Receiver10setChannelEh>
        }
    } else {
        if (scanning) {
    251e:	8a 81       	ldd	r24, Y+2	; 0x02
    2520:	88 23       	and	r24, r24
    2522:	21 f1       	breq	.+72     	; 0x256c <_ZN12StateMachine18SearchStateHandler12onUpdateAutoEv+0xc8>
            if (!forceNext && Receiver::rssiA >= RSSI_SEEK_TRESHOLD) {
    2524:	8c 81       	ldd	r24, Y+4	; 0x04
    2526:	9e a1       	ldd	r25, Y+38	; 0x26
    2528:	81 11       	cpse	r24, r1
    252a:	0d c0       	rjmp	.+26     	; 0x2546 <_ZN12StateMachine18SearchStateHandler12onUpdateAutoEv+0xa2>
    252c:	80 91 84 02 	lds	r24, 0x0284	; 0x800284 <_ZN8Receiver5rssiAE>
    2530:	80 35       	cpi	r24, 0x50	; 80
    2532:	48 f0       	brcs	.+18     	; 0x2546 <_ZN12StateMachine18SearchStateHandler12onUpdateAutoEv+0xa2>
                scanning = false;
    2534:	1a 82       	std	Y+2, r1	; 0x02
                scanningPeak = true;
    2536:	81 e0       	ldi	r24, 0x01	; 1
    2538:	8d 83       	std	Y+5, r24	; 0x05
                peakChannelIndex = orderedChanelIndex;
    253a:	9e 83       	std	Y+6, r25	; 0x06

                for (uint8_t i = 0; i < PEAK_LOOKAHEAD; i++)
                    peaks[i] = 0;
    253c:	1f 82       	std	Y+7, r1	; 0x07
    253e:	18 86       	std	Y+8, r1	; 0x08
    2540:	19 86       	std	Y+9, r1	; 0x09
    2542:	1a 86       	std	Y+10, r1	; 0x0a
    2544:	13 c0       	rjmp	.+38     	; 0x256c <_ZN12StateMachine18SearchStateHandler12onUpdateAutoEv+0xc8>
            } else {
                orderedChanelIndex += static_cast<int8_t>(direction);
    2546:	8b 81       	ldd	r24, Y+3	; 0x03
    2548:	89 0f       	add	r24, r25
                if (orderedChanelIndex == 255)
    254a:	8f 3f       	cpi	r24, 0xFF	; 255
    254c:	11 f4       	brne	.+4      	; 0x2552 <_ZN12StateMachine18SearchStateHandler12onUpdateAutoEv+0xae>
                    orderedChanelIndex = CHANNELS_SIZE - 1;
    254e:	87 e2       	ldi	r24, 0x27	; 39
    2550:	02 c0       	rjmp	.+4      	; 0x2556 <_ZN12StateMachine18SearchStateHandler12onUpdateAutoEv+0xb2>
                else if (orderedChanelIndex >= CHANNELS_SIZE)
    2552:	88 32       	cpi	r24, 0x28	; 40
    2554:	10 f4       	brcc	.+4      	; 0x255a <_ZN12StateMachine18SearchStateHandler12onUpdateAutoEv+0xb6>
                peakChannelIndex = orderedChanelIndex;

                for (uint8_t i = 0; i < PEAK_LOOKAHEAD; i++)
                    peaks[i] = 0;
            } else {
                orderedChanelIndex += static_cast<int8_t>(direction);
    2556:	8e a3       	std	Y+38, r24	; 0x26
    2558:	01 c0       	rjmp	.+2      	; 0x255c <_ZN12StateMachine18SearchStateHandler12onUpdateAutoEv+0xb8>
                if (orderedChanelIndex == 255)
                    orderedChanelIndex = CHANNELS_SIZE - 1;
                else if (orderedChanelIndex >= CHANNELS_SIZE)
                    orderedChanelIndex = 0;
    255a:	1e a2       	std	Y+38, r1	; 0x26

                Receiver::setChannel(
    255c:	8e a1       	ldd	r24, Y+38	; 0x26
    255e:	0e 94 a6 0a 	call	0x154c	; 0x154c <_ZN8Channels15getOrderedIndexEh>
                    Channels::getOrderedIndex(orderedChanelIndex));
    2562:	0e 94 cb 0a 	call	0x1596	; 0x1596 <_ZN8Receiver10setChannelEh>

                if (forceNext)
    2566:	8c 81       	ldd	r24, Y+4	; 0x04
    2568:	81 11       	cpse	r24, r1
                    forceNext = false;
    256a:	1c 82       	std	Y+4, r1	; 0x04
            }
        }
    }
}
    256c:	df 91       	pop	r29
    256e:	cf 91       	pop	r28
    2570:	1f 91       	pop	r17
    2572:	08 95       	ret

00002574 <_ZN12StateMachine18SearchStateHandler8onUpdateEv>:
            break;
    }
}

void SearchStateHandler::onUpdate() {
    if (!manual) {
    2574:	fc 01       	movw	r30, r24
    2576:	24 a1       	ldd	r18, Z+36	; 0x24
    2578:	21 11       	cpse	r18, r1
    257a:	02 c0       	rjmp	.+4      	; 0x2580 <_ZN12StateMachine18SearchStateHandler8onUpdateEv+0xc>
        onUpdateAuto();
    257c:	0e 94 52 12 	call	0x24a4	; 0x24a4 <_ZN12StateMachine18SearchStateHandler12onUpdateAutoEv>
    }

    Ui::needUpdate();
    2580:	0c 94 b8 16 	jmp	0x2d70	; 0x2d70 <_ZN2Ui10needUpdateEv>

00002584 <_ZN12StateMachine18SearchStateHandler10setChannelEv>:

        this->setChannel();
    }
}

void SearchStateHandler::setChannel() {
    2584:	cf 93       	push	r28
    2586:	fc 01       	movw	r30, r24
    uint8_t actualChannelIndex;
    if (this->order == ScanOrder::FREQUENCY) {
    2588:	85 a1       	ldd	r24, Z+37	; 0x25
    258a:	81 11       	cpse	r24, r1
    258c:	05 c0       	rjmp	.+10     	; 0x2598 <_ZN12StateMachine18SearchStateHandler10setChannelEv+0x14>
        actualChannelIndex = Channels::getOrderedIndex(orderedChanelIndex);
    258e:	86 a1       	ldd	r24, Z+38	; 0x26
    2590:	0e 94 a6 0a 	call	0x154c	; 0x154c <_ZN8Channels15getOrderedIndexEh>
    2594:	c8 2f       	mov	r28, r24
    2596:	01 c0       	rjmp	.+2      	; 0x259a <_ZN12StateMachine18SearchStateHandler10setChannelEv+0x16>
    } else {
        actualChannelIndex = orderedChanelIndex;
    2598:	c6 a1       	ldd	r28, Z+38	; 0x26
    }

    Receiver::setChannel(actualChannelIndex);
    259a:	8c 2f       	mov	r24, r28
    259c:	0e 94 cb 0a 	call	0x1596	; 0x1596 <_ZN8Receiver10setChannelEh>
    EepromSettings.startChannel = actualChannelIndex;
    25a0:	c0 93 8b 02 	sts	0x028B, r28	; 0x80028b <EepromSettings+0x4>
    EepromSettings.markDirty();
    25a4:	87 e8       	ldi	r24, 0x87	; 135
    25a6:	92 e0       	ldi	r25, 0x02	; 2
}
    25a8:	cf 91       	pop	r28
        actualChannelIndex = orderedChanelIndex;
    }

    Receiver::setChannel(actualChannelIndex);
    EepromSettings.startChannel = actualChannelIndex;
    EepromSettings.markDirty();
    25aa:	0c 94 20 0d 	jmp	0x1a40	; 0x1a40 <_ZN14EepromSettings9markDirtyEv>

000025ae <_ZN12StateMachine18SearchStateHandler14onButtonChangeE6ButtonN7Buttons9PressTypeE>:
}

void SearchStateHandler::onButtonChange(
    Button button,
    Buttons::PressType pressType
) {
    25ae:	0f 93       	push	r16
    25b0:	1f 93       	push	r17
    25b2:	cf 93       	push	r28
    25b4:	df 93       	push	r29
    25b6:	ec 01       	movw	r28, r24
    25b8:	16 2f       	mov	r17, r22
    25ba:	04 2f       	mov	r16, r20
    if (this->menu.handleButtons(button, pressType))
    25bc:	0c 96       	adiw	r24, 0x0c	; 12
    25be:	0e 94 67 18 	call	0x30ce	; 0x30ce <_ZN2Ui15StateMenuHelper13handleButtonsE6ButtonN7Buttons9PressTypeE>
    25c2:	81 11       	cpse	r24, r1
    25c4:	2c c0       	rjmp	.+88     	; 0x261e <_ZN12StateMachine18SearchStateHandler14onButtonChangeE6ButtonN7Buttons9PressTypeE+0x70>
        return;

    if (!this->manual) {
    25c6:	8c a1       	ldd	r24, Y+36	; 0x24
    25c8:	81 11       	cpse	r24, r1
    25ca:	0e c0       	rjmp	.+28     	; 0x25e8 <_ZN12StateMachine18SearchStateHandler14onButtonChangeE6ButtonN7Buttons9PressTypeE+0x3a>
        if (
    25cc:	01 11       	cpse	r16, r1
    25ce:	27 c0       	rjmp	.+78     	; 0x261e <_ZN12StateMachine18SearchStateHandler14onButtonChangeE6ButtonN7Buttons9PressTypeE+0x70>
            pressType != Buttons::PressType::SHORT ||
    25d0:	12 30       	cpi	r17, 0x02	; 2
    25d2:	29 f1       	breq	.+74     	; 0x261e <_ZN12StateMachine18SearchStateHandler14onButtonChangeE6ButtonN7Buttons9PressTypeE+0x70>
            button == Button::MODE
        ) {
            return;
        }

        scanning = true;
    25d4:	81 e0       	ldi	r24, 0x01	; 1
    25d6:	8a 83       	std	Y+2, r24	; 0x02
        forceNext = true;
    25d8:	8c 83       	std	Y+4, r24	; 0x04
        direction = button == Button::UP ?
            ScanDirection::UP : ScanDirection::DOWN;
    25da:	11 23       	and	r17, r17
    25dc:	11 f0       	breq	.+4      	; 0x25e2 <_ZN12StateMachine18SearchStateHandler14onButtonChangeE6ButtonN7Buttons9PressTypeE+0x34>
    25de:	8f ef       	ldi	r24, 0xFF	; 255
    25e0:	01 c0       	rjmp	.+2      	; 0x25e4 <_ZN12StateMachine18SearchStateHandler14onButtonChangeE6ButtonN7Buttons9PressTypeE+0x36>
    25e2:	81 e0       	ldi	r24, 0x01	; 1
    25e4:	8b 83       	std	Y+3, r24	; 0x03
    25e6:	1b c0       	rjmp	.+54     	; 0x261e <_ZN12StateMachine18SearchStateHandler14onButtonChangeE6ButtonN7Buttons9PressTypeE+0x70>
    } else 
	{
        if (pressType != Buttons::PressType::SHORT && pressType != Buttons::PressType::HOLDING        ) 
    25e8:	0d 7f       	andi	r16, 0xFD	; 253
    25ea:	c9 f4       	brne	.+50     	; 0x261e <_ZN12StateMachine18SearchStateHandler14onButtonChangeE6ButtonN7Buttons9PressTypeE+0x70>
    25ec:	8e a1       	ldd	r24, Y+38	; 0x26
		{
            return;
        }

        if (button == Button::UP) {
    25ee:	11 11       	cpse	r17, r1
    25f0:	02 c0       	rjmp	.+4      	; 0x25f6 <_ZN12StateMachine18SearchStateHandler14onButtonChangeE6ButtonN7Buttons9PressTypeE+0x48>
            orderedChanelIndex += 1;
    25f2:	8f 5f       	subi	r24, 0xFF	; 255
    25f4:	03 c0       	rjmp	.+6      	; 0x25fc <_ZN12StateMachine18SearchStateHandler14onButtonChangeE6ButtonN7Buttons9PressTypeE+0x4e>
        } else if (button == Button::DOWN) {
    25f6:	11 30       	cpi	r17, 0x01	; 1
    25f8:	11 f4       	brne	.+4      	; 0x25fe <_ZN12StateMachine18SearchStateHandler14onButtonChangeE6ButtonN7Buttons9PressTypeE+0x50>
            orderedChanelIndex -= 1;
    25fa:	81 50       	subi	r24, 0x01	; 1
    25fc:	8e a3       	std	Y+38, r24	; 0x26
        }

        if (orderedChanelIndex == 255)
    25fe:	8e a1       	ldd	r24, Y+38	; 0x26
    2600:	8f 3f       	cpi	r24, 0xFF	; 255
    2602:	19 f4       	brne	.+6      	; 0x260a <_ZN12StateMachine18SearchStateHandler14onButtonChangeE6ButtonN7Buttons9PressTypeE+0x5c>
            orderedChanelIndex = CHANNELS_SIZE - 1;
    2604:	87 e2       	ldi	r24, 0x27	; 39
    2606:	8e a3       	std	Y+38, r24	; 0x26
    2608:	03 c0       	rjmp	.+6      	; 0x2610 <_ZN12StateMachine18SearchStateHandler14onButtonChangeE6ButtonN7Buttons9PressTypeE+0x62>
        else if (orderedChanelIndex >= CHANNELS_SIZE)
    260a:	88 32       	cpi	r24, 0x28	; 40
    260c:	08 f0       	brcs	.+2      	; 0x2610 <_ZN12StateMachine18SearchStateHandler14onButtonChangeE6ButtonN7Buttons9PressTypeE+0x62>
            orderedChanelIndex = 0;
    260e:	1e a2       	std	Y+38, r1	; 0x26

        this->setChannel();
    2610:	ce 01       	movw	r24, r28
    }
}
    2612:	df 91       	pop	r29
    2614:	cf 91       	pop	r28
    2616:	1f 91       	pop	r17
    2618:	0f 91       	pop	r16
        if (orderedChanelIndex == 255)
            orderedChanelIndex = CHANNELS_SIZE - 1;
        else if (orderedChanelIndex >= CHANNELS_SIZE)
            orderedChanelIndex = 0;

        this->setChannel();
    261a:	0c 94 c2 12 	jmp	0x2584	; 0x2584 <_ZN12StateMachine18SearchStateHandler10setChannelEv>
    }
}
    261e:	df 91       	pop	r29
    2620:	cf 91       	pop	r28
    2622:	1f 91       	pop	r17
    2624:	0f 91       	pop	r16
    2626:	08 95       	ret

00002628 <_ZN12StateMachine18SearchStateHandler11drawBordersEv>:
        );
    #endif
}

void StateMachine::SearchStateHandler::drawMenu() {
    this->menu.draw();
    2628:	cf 92       	push	r12
    262a:	df 92       	push	r13
    262c:	ef 92       	push	r14
    262e:	ff 92       	push	r15
    2630:	0f 93       	push	r16
    2632:	1f 93       	push	r17
    2634:	cc 24       	eor	r12, r12
    2636:	c3 94       	inc	r12
    2638:	d1 2c       	mov	r13, r1
    263a:	92 e0       	ldi	r25, 0x02	; 2
    263c:	e9 2e       	mov	r14, r25
    263e:	f1 2c       	mov	r15, r1
    2640:	07 e0       	ldi	r16, 0x07	; 7
    2642:	10 e0       	ldi	r17, 0x00	; 0
    2644:	27 e3       	ldi	r18, 0x37	; 55
    2646:	30 e0       	ldi	r19, 0x00	; 0
    2648:	47 e2       	ldi	r20, 0x27	; 39
    264a:	50 e0       	ldi	r21, 0x00	; 0
    264c:	60 e0       	ldi	r22, 0x00	; 0
    264e:	70 e0       	ldi	r23, 0x00	; 0
    2650:	86 eb       	ldi	r24, 0xB6	; 182
    2652:	92 e0       	ldi	r25, 0x02	; 2
    2654:	0e 94 e1 1f 	call	0x3fc2	; 0x3fc2 <_ZN12Adafruit_GFX13drawRoundRectEiiiiij>
    2658:	23 e0       	ldi	r18, 0x03	; 3
    265a:	30 e0       	ldi	r19, 0x00	; 0
    265c:	40 e4       	ldi	r20, 0x40	; 64
    265e:	50 e0       	ldi	r21, 0x00	; 0
    2660:	60 e0       	ldi	r22, 0x00	; 0
    2662:	70 e0       	ldi	r23, 0x00	; 0
    2664:	8b e3       	ldi	r24, 0x3B	; 59
    2666:	90 e0       	ldi	r25, 0x00	; 0
    2668:	1f 91       	pop	r17
    266a:	0f 91       	pop	r16
    266c:	ff 90       	pop	r15
    266e:	ef 90       	pop	r14
    2670:	df 90       	pop	r13
    2672:	cf 90       	pop	r12
    2674:	0c 94 09 17 	jmp	0x2e12	; 0x2e12 <_ZN2Ui15drawDashedVLineEiiii>

00002678 <_ZN12StateMachine18SearchStateHandler15drawChannelTextEv>:
    2678:	65 e0       	ldi	r22, 0x05	; 5
    267a:	86 eb       	ldi	r24, 0xB6	; 182
    267c:	92 e0       	ldi	r25, 0x02	; 2
    267e:	0e 94 64 26 	call	0x4cc8	; 0x4cc8 <_ZN12Adafruit_GFX11setTextSizeEh>
    2682:	e6 eb       	ldi	r30, 0xB6	; 182
    2684:	f2 e0       	ldi	r31, 0x02	; 2
    2686:	81 e0       	ldi	r24, 0x01	; 1
    2688:	90 e0       	ldi	r25, 0x00	; 0
    268a:	93 8b       	std	Z+19, r25	; 0x13
    268c:	82 8b       	std	Z+18, r24	; 0x12
    268e:	91 8b       	std	Z+17, r25	; 0x11
    2690:	80 8b       	std	Z+16, r24	; 0x10
    2692:	15 86       	std	Z+13, r1	; 0x0d
    2694:	14 86       	std	Z+12, r1	; 0x0c
    2696:	17 86       	std	Z+15, r1	; 0x0f
    2698:	16 86       	std	Z+14, r1	; 0x0e
    269a:	80 91 85 02 	lds	r24, 0x0285	; 0x800285 <_ZN8Receiver13activeChannelE>
    269e:	0e 94 8f 0a 	call	0x151e	; 0x151e <_ZN8Channels7getNameEh>
    26a2:	bc 01       	movw	r22, r24
    26a4:	86 eb       	ldi	r24, 0xB6	; 182
    26a6:	92 e0       	ldi	r25, 0x02	; 2
    26a8:	0c 94 b3 19 	jmp	0x3366	; 0x3366 <_ZN5Print5printEPKc>

000026ac <_ZN12StateMachine18SearchStateHandler17drawFrequencyTextEv>:
    26ac:	62 e0       	ldi	r22, 0x02	; 2
    26ae:	86 eb       	ldi	r24, 0xB6	; 182
    26b0:	92 e0       	ldi	r25, 0x02	; 2
    26b2:	0e 94 64 26 	call	0x4cc8	; 0x4cc8 <_ZN12Adafruit_GFX11setTextSizeEh>
    26b6:	e6 eb       	ldi	r30, 0xB6	; 182
    26b8:	f2 e0       	ldi	r31, 0x02	; 2
    26ba:	81 e0       	ldi	r24, 0x01	; 1
    26bc:	90 e0       	ldi	r25, 0x00	; 0
    26be:	93 8b       	std	Z+19, r25	; 0x13
    26c0:	82 8b       	std	Z+18, r24	; 0x12
    26c2:	91 8b       	std	Z+17, r25	; 0x11
    26c4:	80 8b       	std	Z+16, r24	; 0x10
    26c6:	86 e0       	ldi	r24, 0x06	; 6
    26c8:	90 e0       	ldi	r25, 0x00	; 0
    26ca:	95 87       	std	Z+13, r25	; 0x0d
    26cc:	84 87       	std	Z+12, r24	; 0x0c
    26ce:	82 e3       	ldi	r24, 0x32	; 50
    26d0:	90 e0       	ldi	r25, 0x00	; 0
    26d2:	97 87       	std	Z+15, r25	; 0x0f
    26d4:	86 87       	std	Z+14, r24	; 0x0e
    26d6:	80 91 85 02 	lds	r24, 0x0285	; 0x800285 <_ZN8Receiver13activeChannelE>
    26da:	0e 94 86 0a 	call	0x150c	; 0x150c <_ZN8Channels12getFrequencyEh>
    26de:	4a e0       	ldi	r20, 0x0A	; 10
    26e0:	50 e0       	ldi	r21, 0x00	; 0
    26e2:	bc 01       	movw	r22, r24
    26e4:	86 eb       	ldi	r24, 0xB6	; 182
    26e6:	92 e0       	ldi	r25, 0x02	; 2
    26e8:	0c 94 0b 1a 	jmp	0x3416	; 0x3416 <_ZN5Print5printEji>

000026ec <_ZN12StateMachine18SearchStateHandler13drawRssiGraphEv>:
    26ec:	cf 92       	push	r12
    26ee:	ef 92       	push	r14
    26f0:	0f 93       	push	r16
    26f2:	1f 93       	push	r17
    26f4:	cf 93       	push	r28
    26f6:	df 93       	push	r29
    26f8:	8d e1       	ldi	r24, 0x1D	; 29
    26fa:	c8 2e       	mov	r12, r24
    26fc:	95 e4       	ldi	r25, 0x45	; 69
    26fe:	e9 2e       	mov	r14, r25
    2700:	00 e0       	ldi	r16, 0x00	; 0
    2702:	2d e3       	ldi	r18, 0x3D	; 61
    2704:	44 e6       	ldi	r20, 0x64	; 100
    2706:	68 e1       	ldi	r22, 0x18	; 24
    2708:	8f e4       	ldi	r24, 0x4F	; 79
    270a:	92 e0       	ldi	r25, 0x02	; 2
    270c:	0e 94 58 17 	call	0x2eb0	; 0x2eb0 <_ZN2Ui9drawGraphEPKhhhhhhh>
    2710:	02 e2       	ldi	r16, 0x22	; 34
    2712:	2d e3       	ldi	r18, 0x3D	; 61
    2714:	44 e6       	ldi	r20, 0x64	; 100
    2716:	68 e1       	ldi	r22, 0x18	; 24
    2718:	8a e6       	ldi	r24, 0x6A	; 106
    271a:	92 e0       	ldi	r25, 0x02	; 2
    271c:	0e 94 58 17 	call	0x2eb0	; 0x2eb0 <_ZN2Ui9drawGraphEPKhhhhhhh>
    2720:	23 e0       	ldi	r18, 0x03	; 3
    2722:	30 e0       	ldi	r19, 0x00	; 0
    2724:	45 e4       	ldi	r20, 0x45	; 69
    2726:	50 e0       	ldi	r21, 0x00	; 0
    2728:	6f e1       	ldi	r22, 0x1F	; 31
    272a:	70 e0       	ldi	r23, 0x00	; 0
    272c:	8d e3       	ldi	r24, 0x3D	; 61
    272e:	90 e0       	ldi	r25, 0x00	; 0
    2730:	0e 94 cd 16 	call	0x2d9a	; 0x2d9a <_ZN2Ui15drawDashedHLineEiiii>
    2734:	61 e0       	ldi	r22, 0x01	; 1
    2736:	86 eb       	ldi	r24, 0xB6	; 182
    2738:	92 e0       	ldi	r25, 0x02	; 2
    273a:	0e 94 64 26 	call	0x4cc8	; 0x4cc8 <_ZN12Adafruit_GFX11setTextSizeEh>
    273e:	c6 eb       	ldi	r28, 0xB6	; 182
    2740:	d2 e0       	ldi	r29, 0x02	; 2
    2742:	82 e0       	ldi	r24, 0x02	; 2
    2744:	90 e0       	ldi	r25, 0x00	; 0
    2746:	9b 8b       	std	Y+19, r25	; 0x13
    2748:	8a 8b       	std	Y+18, r24	; 0x12
    274a:	99 8b       	std	Y+17, r25	; 0x11
    274c:	88 8b       	std	Y+16, r24	; 0x10
    274e:	0f e3       	ldi	r16, 0x3F	; 63
    2750:	10 e0       	ldi	r17, 0x00	; 0
    2752:	1d 87       	std	Y+13, r17	; 0x0d
    2754:	0c 87       	std	Y+12, r16	; 0x0c
    2756:	8b e0       	ldi	r24, 0x0B	; 11
    2758:	90 e0       	ldi	r25, 0x00	; 0
    275a:	9f 87       	std	Y+15, r25	; 0x0f
    275c:	8e 87       	std	Y+14, r24	; 0x0e
    275e:	8d ea       	ldi	r24, 0xAD	; 173
    2760:	97 e0       	ldi	r25, 0x07	; 7
    2762:	0e 94 b2 0a 	call	0x1564	; 0x1564 <_Z14PSTRtoBuffer_PPKc>
    2766:	bc 01       	movw	r22, r24
    2768:	ce 01       	movw	r24, r28
    276a:	0e 94 b3 19 	call	0x3366	; 0x3366 <_ZN5Print5printEPKc>
    276e:	1d 87       	std	Y+13, r17	; 0x0d
    2770:	0c 87       	std	Y+12, r16	; 0x0c
    2772:	8d e2       	ldi	r24, 0x2D	; 45
    2774:	90 e0       	ldi	r25, 0x00	; 0
    2776:	9f 87       	std	Y+15, r25	; 0x0f
    2778:	8e 87       	std	Y+14, r24	; 0x0e
    277a:	8b ea       	ldi	r24, 0xAB	; 171
    277c:	97 e0       	ldi	r25, 0x07	; 7
    277e:	0e 94 b2 0a 	call	0x1564	; 0x1564 <_Z14PSTRtoBuffer_PPKc>
    2782:	bc 01       	movw	r22, r24
    2784:	ce 01       	movw	r24, r28
    2786:	df 91       	pop	r29
    2788:	cf 91       	pop	r28
    278a:	1f 91       	pop	r17
    278c:	0f 91       	pop	r16
    278e:	ef 90       	pop	r14
    2790:	cf 90       	pop	r12
    2792:	0c 94 b3 19 	jmp	0x3366	; 0x3366 <_ZN5Print5printEPKc>

00002796 <_ZN12StateMachine18SearchStateHandler11drawScanBarEv>:
    display.setCursor(FREQUENCY_TEXT_X, FREQUENCY_TEXT_Y);

    display.print(Channels::getFrequency(Receiver::activeChannel));
}

void StateMachine::SearchStateHandler::drawScanBar() {
    2796:	ef 92       	push	r14
    2798:	ff 92       	push	r15
    279a:	0f 93       	push	r16
    279c:	1f 93       	push	r17
    uint8_t scanWidth = orderedChanelIndex * SCANBAR_W / CHANNELS_SIZE;
    279e:	fc 01       	movw	r30, r24
    27a0:	86 a1       	ldd	r24, Z+38	; 0x26
        SCANBAR_X,
        SCANBAR_Y,
        scanWidth,
        SCANBAR_H,
        WHITE
    );
    27a2:	f3 e3       	ldi	r31, 0x33	; 51
    27a4:	8f 9f       	mul	r24, r31
    27a6:	c0 01       	movw	r24, r0
    27a8:	11 24       	eor	r1, r1
    27aa:	68 e2       	ldi	r22, 0x28	; 40
    27ac:	70 e0       	ldi	r23, 0x00	; 0
    27ae:	0e 94 94 31 	call	0x6328	; 0x6328 <__divmodhi4>
    27b2:	9b 01       	movw	r18, r22
    27b4:	33 27       	eor	r19, r19
    27b6:	ee 24       	eor	r14, r14
    27b8:	e3 94       	inc	r14
    27ba:	f1 2c       	mov	r15, r1
    27bc:	03 e0       	ldi	r16, 0x03	; 3
    27be:	10 e0       	ldi	r17, 0x00	; 0
    27c0:	49 e2       	ldi	r20, 0x29	; 41
    27c2:	50 e0       	ldi	r21, 0x00	; 0
    27c4:	62 e0       	ldi	r22, 0x02	; 2
    27c6:	70 e0       	ldi	r23, 0x00	; 0
    27c8:	86 eb       	ldi	r24, 0xB6	; 182
    27ca:	92 e0       	ldi	r25, 0x02	; 2
    27cc:	0e 94 7d 1d 	call	0x3afa	; 0x3afa <_ZN12Adafruit_GFX8fillRectEiiiij>
}
    27d0:	1f 91       	pop	r17
    27d2:	0f 91       	pop	r16
    27d4:	ff 90       	pop	r15
    27d6:	ef 90       	pop	r14
    27d8:	08 95       	ret

000027da <_ZN12StateMachine18SearchStateHandler13onInitialDrawEv>:


using Ui::display;


void StateMachine::SearchStateHandler::onInitialDraw() {
    27da:	cf 93       	push	r28
    27dc:	df 93       	push	r29
    27de:	ec 01       	movw	r28, r24
    Ui::clear();
    27e0:	0e 94 b4 16 	call	0x2d68	; 0x2d68 <_ZN2Ui5clearEv>

    drawBorders();
    27e4:	ce 01       	movw	r24, r28
    27e6:	0e 94 14 13 	call	0x2628	; 0x2628 <_ZN12StateMachine18SearchStateHandler11drawBordersEv>

    drawChannelText();
    27ea:	ce 01       	movw	r24, r28
    27ec:	0e 94 3c 13 	call	0x2678	; 0x2678 <_ZN12StateMachine18SearchStateHandler15drawChannelTextEv>
    drawFrequencyText();
    27f0:	ce 01       	movw	r24, r28
    27f2:	0e 94 56 13 	call	0x26ac	; 0x26ac <_ZN12StateMachine18SearchStateHandler17drawFrequencyTextEv>
    drawScanBar();
    27f6:	ce 01       	movw	r24, r28
    27f8:	0e 94 cb 13 	call	0x2796	; 0x2796 <_ZN12StateMachine18SearchStateHandler11drawScanBarEv>
    drawRssiGraph();
    27fc:	ce 01       	movw	r24, r28
    27fe:	0e 94 76 13 	call	0x26ec	; 0x26ec <_ZN12StateMachine18SearchStateHandler13drawRssiGraphEv>

    Ui::needDisplay();
}
    2802:	df 91       	pop	r29
    2804:	cf 91       	pop	r28
    drawChannelText();
    drawFrequencyText();
    drawScanBar();
    drawRssiGraph();

    Ui::needDisplay();
    2806:	0c 94 bc 16 	jmp	0x2d78	; 0x2d78 <_ZN2Ui11needDisplayEv>

0000280a <_ZN12StateMachine18SearchStateHandler12onUpdateDrawEv>:
}

void StateMachine::SearchStateHandler::onUpdateDraw() {
    280a:	cf 93       	push	r28
    280c:	df 93       	push	r29
    280e:	ec 01       	movw	r28, r24
    Ui::clearRect(
        0,
        0,
        BORDER_GRAPH_L_X,
        CHANNEL_TEXT_H
    );
    2810:	23 e2       	ldi	r18, 0x23	; 35
    2812:	30 e0       	ldi	r19, 0x00	; 0
    2814:	4b e3       	ldi	r20, 0x3B	; 59
    2816:	50 e0       	ldi	r21, 0x00	; 0
    2818:	60 e0       	ldi	r22, 0x00	; 0
    281a:	70 e0       	ldi	r23, 0x00	; 0
    281c:	80 e0       	ldi	r24, 0x00	; 0
    281e:	90 e0       	ldi	r25, 0x00	; 0
    2820:	0e 94 45 17 	call	0x2e8a	; 0x2e8a <_ZN2Ui9clearRectEiiii>
    Ui::clearRect(
        0,
        FREQUENCY_TEXT_Y,
        BORDER_GRAPH_L_X,
        CHAR_HEIGHT * 2
    );
    2824:	2e e0       	ldi	r18, 0x0E	; 14
    2826:	30 e0       	ldi	r19, 0x00	; 0
    2828:	4b e3       	ldi	r20, 0x3B	; 59
    282a:	50 e0       	ldi	r21, 0x00	; 0
    282c:	62 e3       	ldi	r22, 0x32	; 50
    282e:	70 e0       	ldi	r23, 0x00	; 0
    2830:	80 e0       	ldi	r24, 0x00	; 0
    2832:	90 e0       	ldi	r25, 0x00	; 0
    2834:	0e 94 45 17 	call	0x2e8a	; 0x2e8a <_ZN2Ui9clearRectEiiii>
    Ui::clearRect(
        SCANBAR_X,
        SCANBAR_Y,
        SCANBAR_W,
        SCANBAR_H
    );
    2838:	23 e0       	ldi	r18, 0x03	; 3
    283a:	30 e0       	ldi	r19, 0x00	; 0
    283c:	43 e3       	ldi	r20, 0x33	; 51
    283e:	50 e0       	ldi	r21, 0x00	; 0
    2840:	69 e2       	ldi	r22, 0x29	; 41
    2842:	70 e0       	ldi	r23, 0x00	; 0
    2844:	82 e0       	ldi	r24, 0x02	; 2
    2846:	90 e0       	ldi	r25, 0x00	; 0
    2848:	0e 94 45 17 	call	0x2e8a	; 0x2e8a <_ZN2Ui9clearRectEiiii>

    drawChannelText();
    284c:	ce 01       	movw	r24, r28
    284e:	0e 94 3c 13 	call	0x2678	; 0x2678 <_ZN12StateMachine18SearchStateHandler15drawChannelTextEv>
    drawFrequencyText();
    2852:	ce 01       	movw	r24, r28
    2854:	0e 94 56 13 	call	0x26ac	; 0x26ac <_ZN12StateMachine18SearchStateHandler17drawFrequencyTextEv>
    drawScanBar();
    2858:	ce 01       	movw	r24, r28
    285a:	0e 94 cb 13 	call	0x2796	; 0x2796 <_ZN12StateMachine18SearchStateHandler11drawScanBarEv>
    drawRssiGraph();
    285e:	ce 01       	movw	r24, r28
    2860:	0e 94 76 13 	call	0x26ec	; 0x26ec <_ZN12StateMachine18SearchStateHandler13drawRssiGraphEv>
    menu.draw();
    2864:	ce 01       	movw	r24, r28
    2866:	0c 96       	adiw	r24, 0x0c	; 12
    2868:	0e 94 b3 18 	call	0x3166	; 0x3166 <_ZN2Ui15StateMenuHelper4drawEv>

    Ui::needDisplay();
}
    286c:	df 91       	pop	r29
    286e:	cf 91       	pop	r28
    drawFrequencyText();
    drawScanBar();
    drawRssiGraph();
    menu.draw();

    Ui::needDisplay();
    2870:	0c 94 bc 16 	jmp	0x2d78	; 0x2d78 <_ZN2Ui11needDisplayEv>

00002874 <_ZN12StateMachine20SettingsStateHandler12onUpdateDrawEv>:
    Ui::display.print(PSTR2("Press mode for\nRSSI calibration"));

    Ui::needDisplay();
}

void StateMachine::SettingsStateHandler::onUpdateDraw() {
    2874:	08 95       	ret

00002876 <_ZN12StateMachine20SettingsStateHandler14onButtonChangeE6ButtonN7Buttons9PressTypeE>:

void StateMachine::SettingsStateHandler::onButtonChange(
    Button button,
    Buttons::PressType pressType
) {
    if (button == Button::MODE) {
    2876:	62 30       	cpi	r22, 0x02	; 2
    2878:	19 f4       	brne	.+6      	; 0x2880 <_ZN12StateMachine20SettingsStateHandler14onButtonChangeE6ButtonN7Buttons9PressTypeE+0xa>
        StateMachine::switchState(StateMachine::State::SETTINGS_RSSI);
    287a:	86 e0       	ldi	r24, 0x06	; 6
    287c:	0c 94 7b 0e 	jmp	0x1cf6	; 0x1cf6 <_ZN12StateMachine11switchStateENS_5StateE>
    2880:	08 95       	ret

00002882 <_ZN12StateMachine20SettingsStateHandler13onInitialDrawEv>:
    }
}


void StateMachine::SettingsStateHandler::onInitialDraw() {
    Ui::clear();
    2882:	0e 94 b4 16 	call	0x2d68	; 0x2d68 <_ZN2Ui5clearEv>

    Ui::display.setTextSize(1);
    2886:	61 e0       	ldi	r22, 0x01	; 1
    2888:	86 eb       	ldi	r24, 0xB6	; 182
    288a:	92 e0       	ldi	r25, 0x02	; 2
    288c:	0e 94 64 26 	call	0x4cc8	; 0x4cc8 <_ZN12Adafruit_GFX11setTextSizeEh>
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) {
    cursor_x = x;
    2890:	e6 eb       	ldi	r30, 0xB6	; 182
    2892:	f2 e0       	ldi	r31, 0x02	; 2
    2894:	15 86       	std	Z+13, r1	; 0x0d
    2896:	14 86       	std	Z+12, r1	; 0x0c
    cursor_y = y;
    2898:	17 86       	std	Z+15, r1	; 0x0f
    289a:	16 86       	std	Z+14, r1	; 0x0e
    Ui::display.setCursor(0, 0);
    Ui::display.print(PSTR2("Press mode for\nRSSI calibration"));
    289c:	8f ea       	ldi	r24, 0xAF	; 175
    289e:	97 e0       	ldi	r25, 0x07	; 7
    28a0:	0e 94 b2 0a 	call	0x1564	; 0x1564 <_Z14PSTRtoBuffer_PPKc>
    28a4:	bc 01       	movw	r22, r24
    28a6:	86 eb       	ldi	r24, 0xB6	; 182
    28a8:	92 e0       	ldi	r25, 0x02	; 2
    28aa:	0e 94 b3 19 	call	0x3366	; 0x3366 <_ZN5Print5printEPKc>

    Ui::needDisplay();
    28ae:	0c 94 bc 16 	jmp	0x2d78	; 0x2d78 <_ZN2Ui11needDisplayEv>

000028b2 <_ZN12StateMachine24SettingsRssiStateHandler7onEnterEv>:
#include "ui.h"
#include "pstr_helper.h"


void StateMachine::SettingsRssiStateHandler::onEnter() {
    internalState = InternalState::WAIT_FOR_LOW;
    28b2:	fc 01       	movw	r30, r24
    28b4:	12 82       	std	Z+2, r1	; 0x02
    28b6:	08 95       	ret

000028b8 <_ZN12StateMachine24SettingsRssiStateHandler13onInitialDrawEv>:
    Ui::needUpdate();
}


void StateMachine::SettingsRssiStateHandler::onInitialDraw() {
    Ui::needUpdate(); // Lazy. :(
    28b8:	0c 94 b8 16 	jmp	0x2d70	; 0x2d70 <_ZN2Ui10needUpdateEv>

000028bc <_ZN12StateMachine24SettingsRssiStateHandler12onUpdateDrawEv>:
}

void StateMachine::SettingsRssiStateHandler::onUpdateDraw() {
    28bc:	ef 92       	push	r14
    28be:	ff 92       	push	r15
    28c0:	0f 93       	push	r16
    28c2:	1f 93       	push	r17
    28c4:	cf 93       	push	r28
    28c6:	df 93       	push	r29
    28c8:	ec 01       	movw	r28, r24
    Ui::clear();
    28ca:	0e 94 b4 16 	call	0x2d68	; 0x2d68 <_ZN2Ui5clearEv>

    switch (internalState) {
    28ce:	8a 81       	ldd	r24, Y+2	; 0x02
    28d0:	82 30       	cpi	r24, 0x02	; 2
    28d2:	09 f4       	brne	.+2      	; 0x28d6 <_ZN12StateMachine24SettingsRssiStateHandler12onUpdateDrawEv+0x1a>
    28d4:	e9 c0       	rjmp	.+466    	; 0x2aa8 <_ZN12StateMachine24SettingsRssiStateHandler12onUpdateDrawEv+0x1ec>
    28d6:	b0 f4       	brcc	.+44     	; 0x2904 <_ZN12StateMachine24SettingsRssiStateHandler12onUpdateDrawEv+0x48>
    28d8:	88 23       	and	r24, r24
    28da:	09 f4       	brne	.+2      	; 0x28de <_ZN12StateMachine24SettingsRssiStateHandler12onUpdateDrawEv+0x22>
    28dc:	af c0       	rjmp	.+350    	; 0x2a3c <_ZN12StateMachine24SettingsRssiStateHandler12onUpdateDrawEv+0x180>
    28de:	81 30       	cpi	r24, 0x01	; 1
    28e0:	09 f0       	breq	.+2      	; 0x28e4 <_ZN12StateMachine24SettingsRssiStateHandler12onUpdateDrawEv+0x28>
    28e2:	1b c1       	rjmp	.+566    	; 0x2b1a <_ZN12StateMachine24SettingsRssiStateHandler12onUpdateDrawEv+0x25e>
            Ui::display.setCursor(0, SCREEN_HEIGHT - CHAR_HEIGHT - 1);
            Ui::display.print(PSTR2("Press MODE when ready."));
        break;

        case InternalState::SCANNING_LOW:
            Ui::display.setTextSize(1);
    28e4:	61 e0       	ldi	r22, 0x01	; 1
    28e6:	86 eb       	ldi	r24, 0xB6	; 182
    28e8:	92 e0       	ldi	r25, 0x02	; 2
    28ea:	0e 94 64 26 	call	0x4cc8	; 0x4cc8 <_ZN12Adafruit_GFX11setTextSizeEh>
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) {
    cursor_x = x;
    28ee:	10 92 c3 02 	sts	0x02C3, r1	; 0x8002c3 <_ZN2Ui7displayE+0xd>
    28f2:	10 92 c2 02 	sts	0x02C2, r1	; 0x8002c2 <_ZN2Ui7displayE+0xc>
    cursor_y = y;
    28f6:	10 92 c5 02 	sts	0x02C5, r1	; 0x8002c5 <_ZN2Ui7displayE+0xf>
    28fa:	10 92 c4 02 	sts	0x02C4, r1	; 0x8002c4 <_ZN2Ui7displayE+0xe>
            Ui::display.setCursor(0, 0);
            Ui::display.print(PSTR2("2/4\nScanning for lowest\nRSSI..."));
    28fe:	87 e4       	ldi	r24, 0x47	; 71
    2900:	98 e0       	ldi	r25, 0x08	; 8
    2902:	04 c1       	rjmp	.+520    	; 0x2b0c <_ZN12StateMachine24SettingsRssiStateHandler12onUpdateDrawEv+0x250>
}

void StateMachine::SettingsRssiStateHandler::onUpdateDraw() {
    Ui::clear();

    switch (internalState) {
    2904:	83 30       	cpi	r24, 0x03	; 3
    2906:	09 f4       	brne	.+2      	; 0x290a <_ZN12StateMachine24SettingsRssiStateHandler12onUpdateDrawEv+0x4e>
    2908:	f2 c0       	rjmp	.+484    	; 0x2aee <_ZN12StateMachine24SettingsRssiStateHandler12onUpdateDrawEv+0x232>
    290a:	84 30       	cpi	r24, 0x04	; 4
    290c:	09 f0       	breq	.+2      	; 0x2910 <_ZN12StateMachine24SettingsRssiStateHandler12onUpdateDrawEv+0x54>
    290e:	05 c1       	rjmp	.+522    	; 0x2b1a <_ZN12StateMachine24SettingsRssiStateHandler12onUpdateDrawEv+0x25e>
            Ui::display.setCursor(0, 0);
            Ui::display.print(PSTR2("4/4\nScanning for highest\nRSSI..."));
        break;

        case InternalState::DONE:
            Ui::display.setTextSize(1);
    2910:	61 e0       	ldi	r22, 0x01	; 1
    2912:	86 eb       	ldi	r24, 0xB6	; 182
    2914:	92 e0       	ldi	r25, 0x02	; 2
    2916:	0e 94 64 26 	call	0x4cc8	; 0x4cc8 <_ZN12Adafruit_GFX11setTextSizeEh>
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) {
    cursor_x = x;
    291a:	10 92 c3 02 	sts	0x02C3, r1	; 0x8002c3 <_ZN2Ui7displayE+0xd>
    291e:	10 92 c2 02 	sts	0x02C2, r1	; 0x8002c2 <_ZN2Ui7displayE+0xc>
    cursor_y = y;
    2922:	10 92 c5 02 	sts	0x02C5, r1	; 0x8002c5 <_ZN2Ui7displayE+0xf>
    2926:	10 92 c4 02 	sts	0x02C4, r1	; 0x8002c4 <_ZN2Ui7displayE+0xe>
            Ui::display.setCursor(0, 0);
            Ui::display.print(PSTR2("All done!"));
    292a:	8f ee       	ldi	r24, 0xEF	; 239
    292c:	97 e0       	ldi	r25, 0x07	; 7
    292e:	0e 94 b2 0a 	call	0x1564	; 0x1564 <_Z14PSTRtoBuffer_PPKc>
    2932:	bc 01       	movw	r22, r24
    2934:	86 eb       	ldi	r24, 0xB6	; 182
    2936:	92 e0       	ldi	r25, 0x02	; 2
    2938:	0e 94 b3 19 	call	0x3366	; 0x3366 <_ZN5Print5printEPKc>
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) {
    cursor_x = x;
    293c:	10 92 c3 02 	sts	0x02C3, r1	; 0x8002c3 <_ZN2Ui7displayE+0xd>
    2940:	10 92 c2 02 	sts	0x02C2, r1	; 0x8002c2 <_ZN2Ui7displayE+0xc>
    cursor_y = y;
    2944:	ce e0       	ldi	r28, 0x0E	; 14
    2946:	d0 e0       	ldi	r29, 0x00	; 0
    2948:	d0 93 c5 02 	sts	0x02C5, r29	; 0x8002c5 <_ZN2Ui7displayE+0xf>
    294c:	c0 93 c4 02 	sts	0x02C4, r28	; 0x8002c4 <_ZN2Ui7displayE+0xe>

            Ui::display.setCursor(0, CHAR_HEIGHT * 2);
            Ui::display.print(PSTR2("Min: "));
    2950:	89 ee       	ldi	r24, 0xE9	; 233
    2952:	97 e0       	ldi	r25, 0x07	; 7
    2954:	0e 94 b2 0a 	call	0x1564	; 0x1564 <_Z14PSTRtoBuffer_PPKc>
    2958:	bc 01       	movw	r22, r24
    295a:	86 eb       	ldi	r24, 0xB6	; 182
    295c:	92 e0       	ldi	r25, 0x02	; 2
    295e:	0e 94 b3 19 	call	0x3366	; 0x3366 <_ZN5Print5printEPKc>
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) {
    cursor_x = x;
    2962:	8e e1       	ldi	r24, 0x1E	; 30
    2964:	e8 2e       	mov	r14, r24
    2966:	f1 2c       	mov	r15, r1
    2968:	f0 92 c3 02 	sts	0x02C3, r15	; 0x8002c3 <_ZN2Ui7displayE+0xd>
    296c:	e0 92 c2 02 	sts	0x02C2, r14	; 0x8002c2 <_ZN2Ui7displayE+0xc>
    cursor_y = y;
    2970:	d0 93 c5 02 	sts	0x02C5, r29	; 0x8002c5 <_ZN2Ui7displayE+0xf>
    2974:	c0 93 c4 02 	sts	0x02C4, r28	; 0x8002c4 <_ZN2Ui7displayE+0xe>

            Ui::display.setCursor((CHAR_WIDTH + 1) * 5, CHAR_HEIGHT * 2);
            Ui::display.print(EepromSettings.rssiAMin);
    2978:	60 91 8f 02 	lds	r22, 0x028F	; 0x80028f <EepromSettings+0x8>
    297c:	70 91 90 02 	lds	r23, 0x0290	; 0x800290 <EepromSettings+0x9>
    2980:	4a e0       	ldi	r20, 0x0A	; 10
    2982:	50 e0       	ldi	r21, 0x00	; 0
    2984:	86 eb       	ldi	r24, 0xB6	; 182
    2986:	92 e0       	ldi	r25, 0x02	; 2
    2988:	0e 94 0b 1a 	call	0x3416	; 0x3416 <_ZN5Print5printEji>
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) {
    cursor_x = x;
    298c:	08 e4       	ldi	r16, 0x48	; 72
    298e:	10 e0       	ldi	r17, 0x00	; 0
    2990:	10 93 c3 02 	sts	0x02C3, r17	; 0x8002c3 <_ZN2Ui7displayE+0xd>
    2994:	00 93 c2 02 	sts	0x02C2, r16	; 0x8002c2 <_ZN2Ui7displayE+0xc>
    cursor_y = y;
    2998:	d0 93 c5 02 	sts	0x02C5, r29	; 0x8002c5 <_ZN2Ui7displayE+0xf>
    299c:	c0 93 c4 02 	sts	0x02C4, r28	; 0x8002c4 <_ZN2Ui7displayE+0xe>
            #ifdef USE_DIVERSITY
                Ui::display.setCursor((CHAR_WIDTH + 1) * 12, CHAR_HEIGHT * 2);
                Ui::display.print(EepromSettings.rssiAMin);
    29a0:	60 91 8f 02 	lds	r22, 0x028F	; 0x80028f <EepromSettings+0x8>
    29a4:	70 91 90 02 	lds	r23, 0x0290	; 0x800290 <EepromSettings+0x9>
    29a8:	4a e0       	ldi	r20, 0x0A	; 10
    29aa:	50 e0       	ldi	r21, 0x00	; 0
    29ac:	86 eb       	ldi	r24, 0xB6	; 182
    29ae:	92 e0       	ldi	r25, 0x02	; 2
    29b0:	0e 94 0b 1a 	call	0x3416	; 0x3416 <_ZN5Print5printEji>
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) {
    cursor_x = x;
    29b4:	10 92 c3 02 	sts	0x02C3, r1	; 0x8002c3 <_ZN2Ui7displayE+0xd>
    29b8:	10 92 c2 02 	sts	0x02C2, r1	; 0x8002c2 <_ZN2Ui7displayE+0xc>
    cursor_y = y;
    29bc:	c6 e1       	ldi	r28, 0x16	; 22
    29be:	d0 e0       	ldi	r29, 0x00	; 0
    29c0:	d0 93 c5 02 	sts	0x02C5, r29	; 0x8002c5 <_ZN2Ui7displayE+0xf>
    29c4:	c0 93 c4 02 	sts	0x02C4, r28	; 0x8002c4 <_ZN2Ui7displayE+0xe>
            #endif

            Ui::display.setCursor(0, CHAR_HEIGHT * 3 + 1);
            Ui::display.print(PSTR2("Max: "));
    29c8:	83 ee       	ldi	r24, 0xE3	; 227
    29ca:	97 e0       	ldi	r25, 0x07	; 7
    29cc:	0e 94 b2 0a 	call	0x1564	; 0x1564 <_Z14PSTRtoBuffer_PPKc>
    29d0:	bc 01       	movw	r22, r24
    29d2:	86 eb       	ldi	r24, 0xB6	; 182
    29d4:	92 e0       	ldi	r25, 0x02	; 2
    29d6:	0e 94 b3 19 	call	0x3366	; 0x3366 <_ZN5Print5printEPKc>
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) {
    cursor_x = x;
    29da:	f0 92 c3 02 	sts	0x02C3, r15	; 0x8002c3 <_ZN2Ui7displayE+0xd>
    29de:	e0 92 c2 02 	sts	0x02C2, r14	; 0x8002c2 <_ZN2Ui7displayE+0xc>
    cursor_y = y;
    29e2:	d0 93 c5 02 	sts	0x02C5, r29	; 0x8002c5 <_ZN2Ui7displayE+0xf>
    29e6:	c0 93 c4 02 	sts	0x02C4, r28	; 0x8002c4 <_ZN2Ui7displayE+0xe>

            Ui::display.setCursor((CHAR_WIDTH + 1) * 5, CHAR_HEIGHT * 3 + 1);
            Ui::display.print(EepromSettings.rssiAMax);
    29ea:	60 91 91 02 	lds	r22, 0x0291	; 0x800291 <EepromSettings+0xa>
    29ee:	70 91 92 02 	lds	r23, 0x0292	; 0x800292 <EepromSettings+0xb>
    29f2:	4a e0       	ldi	r20, 0x0A	; 10
    29f4:	50 e0       	ldi	r21, 0x00	; 0
    29f6:	86 eb       	ldi	r24, 0xB6	; 182
    29f8:	92 e0       	ldi	r25, 0x02	; 2
    29fa:	0e 94 0b 1a 	call	0x3416	; 0x3416 <_ZN5Print5printEji>
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) {
    cursor_x = x;
    29fe:	10 93 c3 02 	sts	0x02C3, r17	; 0x8002c3 <_ZN2Ui7displayE+0xd>
    2a02:	00 93 c2 02 	sts	0x02C2, r16	; 0x8002c2 <_ZN2Ui7displayE+0xc>
    cursor_y = y;
    2a06:	d0 93 c5 02 	sts	0x02C5, r29	; 0x8002c5 <_ZN2Ui7displayE+0xf>
    2a0a:	c0 93 c4 02 	sts	0x02C4, r28	; 0x8002c4 <_ZN2Ui7displayE+0xe>
            #ifdef USE_DIVERSITY
                Ui::display.setCursor((CHAR_WIDTH + 1) * 12,
                    CHAR_HEIGHT * 3 + 1);
                Ui::display.print(EepromSettings.rssiBMax);
    2a0e:	60 91 96 02 	lds	r22, 0x0296	; 0x800296 <EepromSettings+0xf>
    2a12:	70 91 97 02 	lds	r23, 0x0297	; 0x800297 <EepromSettings+0x10>
    2a16:	4a e0       	ldi	r20, 0x0A	; 10
    2a18:	50 e0       	ldi	r21, 0x00	; 0
    2a1a:	86 eb       	ldi	r24, 0xB6	; 182
    2a1c:	92 e0       	ldi	r25, 0x02	; 2
    2a1e:	0e 94 0b 1a 	call	0x3416	; 0x3416 <_ZN5Print5printEji>
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) {
    cursor_x = x;
    2a22:	10 92 c3 02 	sts	0x02C3, r1	; 0x8002c3 <_ZN2Ui7displayE+0xd>
    2a26:	10 92 c2 02 	sts	0x02C2, r1	; 0x8002c2 <_ZN2Ui7displayE+0xc>
    cursor_y = y;
    2a2a:	88 e3       	ldi	r24, 0x38	; 56
    2a2c:	90 e0       	ldi	r25, 0x00	; 0
    2a2e:	90 93 c5 02 	sts	0x02C5, r25	; 0x8002c5 <_ZN2Ui7displayE+0xf>
    2a32:	80 93 c4 02 	sts	0x02C4, r24	; 0x8002c4 <_ZN2Ui7displayE+0xe>
            #endif

            Ui::display.setCursor(0, SCREEN_HEIGHT - CHAR_HEIGHT - 1);
            Ui::display.print(PSTR2("Press MODE to save."));
    2a36:	8f ec       	ldi	r24, 0xCF	; 207
    2a38:	97 e0       	ldi	r25, 0x07	; 7
    2a3a:	68 c0       	rjmp	.+208    	; 0x2b0c <_ZN12StateMachine24SettingsRssiStateHandler12onUpdateDrawEv+0x250>
void StateMachine::SettingsRssiStateHandler::onUpdateDraw() {
    Ui::clear();

    switch (internalState) {
        case InternalState::WAIT_FOR_LOW:
            Ui::display.setTextSize(1);
    2a3c:	61 e0       	ldi	r22, 0x01	; 1
    2a3e:	86 eb       	ldi	r24, 0xB6	; 182
    2a40:	92 e0       	ldi	r25, 0x02	; 2
    2a42:	0e 94 64 26 	call	0x4cc8	; 0x4cc8 <_ZN12Adafruit_GFX11setTextSizeEh>
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) {
    cursor_x = x;
    2a46:	10 92 c3 02 	sts	0x02C3, r1	; 0x8002c3 <_ZN2Ui7displayE+0xd>
    2a4a:	10 92 c2 02 	sts	0x02C2, r1	; 0x8002c2 <_ZN2Ui7displayE+0xc>
    cursor_y = y;
    2a4e:	10 92 c5 02 	sts	0x02C5, r1	; 0x8002c5 <_ZN2Ui7displayE+0xf>
    2a52:	10 92 c4 02 	sts	0x02C4, r1	; 0x8002c4 <_ZN2Ui7displayE+0xe>
            Ui::display.setCursor(0, 0);
            Ui::display.print(PSTR2("1/4\nTurn off all VTXs."));
    2a56:	82 e9       	ldi	r24, 0x92	; 146
    2a58:	98 e0       	ldi	r25, 0x08	; 8
    2a5a:	0e 94 b2 0a 	call	0x1564	; 0x1564 <_Z14PSTRtoBuffer_PPKc>
    2a5e:	bc 01       	movw	r22, r24
    2a60:	86 eb       	ldi	r24, 0xB6	; 182
    2a62:	92 e0       	ldi	r25, 0x02	; 2
    2a64:	0e 94 b3 19 	call	0x3366	; 0x3366 <_ZN5Print5printEPKc>
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) {
    cursor_x = x;
    2a68:	10 92 c3 02 	sts	0x02C3, r1	; 0x8002c3 <_ZN2Ui7displayE+0xd>
    2a6c:	10 92 c2 02 	sts	0x02C2, r1	; 0x8002c2 <_ZN2Ui7displayE+0xc>
    cursor_y = y;
    2a70:	80 e1       	ldi	r24, 0x10	; 16
    2a72:	90 e0       	ldi	r25, 0x00	; 0
    2a74:	90 93 c5 02 	sts	0x02C5, r25	; 0x8002c5 <_ZN2Ui7displayE+0xf>
    2a78:	80 93 c4 02 	sts	0x02C4, r24	; 0x8002c4 <_ZN2Ui7displayE+0xe>
            Ui::display.setCursor(0, (CHAR_HEIGHT + 1) * 2);
            Ui::display.print(PSTR2("Remove RX antennas."));
    2a7c:	8e e7       	ldi	r24, 0x7E	; 126
    2a7e:	98 e0       	ldi	r25, 0x08	; 8
    2a80:	0e 94 b2 0a 	call	0x1564	; 0x1564 <_Z14PSTRtoBuffer_PPKc>
    2a84:	bc 01       	movw	r22, r24
    2a86:	86 eb       	ldi	r24, 0xB6	; 182
    2a88:	92 e0       	ldi	r25, 0x02	; 2
    2a8a:	0e 94 b3 19 	call	0x3366	; 0x3366 <_ZN5Print5printEPKc>
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) {
    cursor_x = x;
    2a8e:	10 92 c3 02 	sts	0x02C3, r1	; 0x8002c3 <_ZN2Ui7displayE+0xd>
    2a92:	10 92 c2 02 	sts	0x02C2, r1	; 0x8002c2 <_ZN2Ui7displayE+0xc>
    cursor_y = y;
    2a96:	88 e3       	ldi	r24, 0x38	; 56
    2a98:	90 e0       	ldi	r25, 0x00	; 0
    2a9a:	90 93 c5 02 	sts	0x02C5, r25	; 0x8002c5 <_ZN2Ui7displayE+0xf>
    2a9e:	80 93 c4 02 	sts	0x02C4, r24	; 0x8002c4 <_ZN2Ui7displayE+0xe>

            Ui::display.setCursor(0, SCREEN_HEIGHT - CHAR_HEIGHT - 1);
            Ui::display.print(PSTR2("Press MODE when ready."));
    2aa2:	87 e6       	ldi	r24, 0x67	; 103
    2aa4:	98 e0       	ldi	r25, 0x08	; 8
    2aa6:	32 c0       	rjmp	.+100    	; 0x2b0c <_ZN12StateMachine24SettingsRssiStateHandler12onUpdateDrawEv+0x250>
            Ui::display.setCursor(0, 0);
            Ui::display.print(PSTR2("2/4\nScanning for lowest\nRSSI..."));
        break;

        case InternalState::WAIT_FOR_HIGH:
            Ui::display.setTextSize(1);
    2aa8:	61 e0       	ldi	r22, 0x01	; 1
    2aaa:	86 eb       	ldi	r24, 0xB6	; 182
    2aac:	92 e0       	ldi	r25, 0x02	; 2
    2aae:	0e 94 64 26 	call	0x4cc8	; 0x4cc8 <_ZN12Adafruit_GFX11setTextSizeEh>
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) {
    cursor_x = x;
    2ab2:	10 92 c3 02 	sts	0x02C3, r1	; 0x8002c3 <_ZN2Ui7displayE+0xd>
    2ab6:	10 92 c2 02 	sts	0x02C2, r1	; 0x8002c2 <_ZN2Ui7displayE+0xc>
    cursor_y = y;
    2aba:	10 92 c5 02 	sts	0x02C5, r1	; 0x8002c5 <_ZN2Ui7displayE+0xf>
    2abe:	10 92 c4 02 	sts	0x02C4, r1	; 0x8002c4 <_ZN2Ui7displayE+0xe>
            Ui::display.setCursor(0, 0);
            Ui::display.print(PSTR2("3/4\nTurn on your VTX."));
    2ac2:	81 e3       	ldi	r24, 0x31	; 49
    2ac4:	98 e0       	ldi	r25, 0x08	; 8
    2ac6:	0e 94 b2 0a 	call	0x1564	; 0x1564 <_Z14PSTRtoBuffer_PPKc>
    2aca:	bc 01       	movw	r22, r24
    2acc:	86 eb       	ldi	r24, 0xB6	; 182
    2ace:	92 e0       	ldi	r25, 0x02	; 2
    2ad0:	0e 94 b3 19 	call	0x3366	; 0x3366 <_ZN5Print5printEPKc>
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) {
    cursor_x = x;
    2ad4:	10 92 c3 02 	sts	0x02C3, r1	; 0x8002c3 <_ZN2Ui7displayE+0xd>
    2ad8:	10 92 c2 02 	sts	0x02C2, r1	; 0x8002c2 <_ZN2Ui7displayE+0xc>
    cursor_y = y;
    2adc:	88 e3       	ldi	r24, 0x38	; 56
    2ade:	90 e0       	ldi	r25, 0x00	; 0
    2ae0:	90 93 c5 02 	sts	0x02C5, r25	; 0x8002c5 <_ZN2Ui7displayE+0xf>
    2ae4:	80 93 c4 02 	sts	0x02C4, r24	; 0x8002c4 <_ZN2Ui7displayE+0xe>

            Ui::display.setCursor(0, SCREEN_HEIGHT - CHAR_HEIGHT - 1);
            Ui::display.print(PSTR2("Press MODE when ready."));
    2ae8:	8a e1       	ldi	r24, 0x1A	; 26
    2aea:	98 e0       	ldi	r25, 0x08	; 8
    2aec:	0f c0       	rjmp	.+30     	; 0x2b0c <_ZN12StateMachine24SettingsRssiStateHandler12onUpdateDrawEv+0x250>
        break;

        case InternalState::SCANNING_HIGH:
            Ui::display.setTextSize(1);
    2aee:	61 e0       	ldi	r22, 0x01	; 1
    2af0:	86 eb       	ldi	r24, 0xB6	; 182
    2af2:	92 e0       	ldi	r25, 0x02	; 2
    2af4:	0e 94 64 26 	call	0x4cc8	; 0x4cc8 <_ZN12Adafruit_GFX11setTextSizeEh>
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) {
    cursor_x = x;
    2af8:	10 92 c3 02 	sts	0x02C3, r1	; 0x8002c3 <_ZN2Ui7displayE+0xd>
    2afc:	10 92 c2 02 	sts	0x02C2, r1	; 0x8002c2 <_ZN2Ui7displayE+0xc>
    cursor_y = y;
    2b00:	10 92 c5 02 	sts	0x02C5, r1	; 0x8002c5 <_ZN2Ui7displayE+0xf>
    2b04:	10 92 c4 02 	sts	0x02C4, r1	; 0x8002c4 <_ZN2Ui7displayE+0xe>
            Ui::display.setCursor(0, 0);
            Ui::display.print(PSTR2("4/4\nScanning for highest\nRSSI..."));
    2b08:	89 ef       	ldi	r24, 0xF9	; 249
    2b0a:	97 e0       	ldi	r25, 0x07	; 7
                    CHAR_HEIGHT * 3 + 1);
                Ui::display.print(EepromSettings.rssiBMax);
            #endif

            Ui::display.setCursor(0, SCREEN_HEIGHT - CHAR_HEIGHT - 1);
            Ui::display.print(PSTR2("Press MODE to save."));
    2b0c:	0e 94 b2 0a 	call	0x1564	; 0x1564 <_Z14PSTRtoBuffer_PPKc>
    2b10:	bc 01       	movw	r22, r24
    2b12:	86 eb       	ldi	r24, 0xB6	; 182
    2b14:	92 e0       	ldi	r25, 0x02	; 2
    2b16:	0e 94 b3 19 	call	0x3366	; 0x3366 <_ZN5Print5printEPKc>
        break;
    }

    Ui::needDisplay();
}
    2b1a:	df 91       	pop	r29
    2b1c:	cf 91       	pop	r28
    2b1e:	1f 91       	pop	r17
    2b20:	0f 91       	pop	r16
    2b22:	ff 90       	pop	r15
    2b24:	ef 90       	pop	r14
            Ui::display.setCursor(0, SCREEN_HEIGHT - CHAR_HEIGHT - 1);
            Ui::display.print(PSTR2("Press MODE to save."));
        break;
    }

    Ui::needDisplay();
    2b26:	0c 94 bc 16 	jmp	0x2d78	; 0x2d78 <_ZN2Ui11needDisplayEv>

00002b2a <_ZN12StateMachine24SettingsRssiStateHandler14onButtonChangeE6ButtonN7Buttons9PressTypeE>:

void StateMachine::SettingsRssiStateHandler::onButtonChange(
    Button button,
    Buttons::PressType pressType
) {
    if (button != Button::MODE || pressType != Buttons::PressType::SHORT)
    2b2a:	62 30       	cpi	r22, 0x02	; 2
    2b2c:	99 f5       	brne	.+102    	; 0x2b94 <_ZN12StateMachine24SettingsRssiStateHandler14onButtonChangeE6ButtonN7Buttons9PressTypeE+0x6a>
    2b2e:	41 11       	cpse	r20, r1
    2b30:	31 c0       	rjmp	.+98     	; 0x2b94 <_ZN12StateMachine24SettingsRssiStateHandler14onButtonChangeE6ButtonN7Buttons9PressTypeE+0x6a>
    2b32:	fc 01       	movw	r30, r24
        return;

    switch (internalState) {
    2b34:	82 81       	ldd	r24, Z+2	; 0x02
    2b36:	82 30       	cpi	r24, 0x02	; 2
    2b38:	a9 f0       	breq	.+42     	; 0x2b64 <_ZN12StateMachine24SettingsRssiStateHandler14onButtonChangeE6ButtonN7Buttons9PressTypeE+0x3a>
    2b3a:	84 30       	cpi	r24, 0x04	; 4
    2b3c:	11 f1       	breq	.+68     	; 0x2b82 <_ZN12StateMachine24SettingsRssiStateHandler14onButtonChangeE6ButtonN7Buttons9PressTypeE+0x58>
    2b3e:	81 11       	cpse	r24, r1
    2b40:	27 c0       	rjmp	.+78     	; 0x2b90 <_ZN12StateMachine24SettingsRssiStateHandler14onButtonChangeE6ButtonN7Buttons9PressTypeE+0x66>
        case InternalState::WAIT_FOR_LOW:
            internalState = InternalState::SCANNING_LOW;
    2b42:	81 e0       	ldi	r24, 0x01	; 1
    2b44:	82 83       	std	Z+2, r24	; 0x02
            currentSweep = 0;
    2b46:	13 82       	std	Z+3, r1	; 0x03
            Receiver::setChannel(0);
    2b48:	80 e0       	ldi	r24, 0x00	; 0
    2b4a:	0e 94 cb 0a 	call	0x1596	; 0x1596 <_ZN8Receiver10setChannelEh>

            EepromSettings.rssiAMin = UINT16_MAX;
    2b4e:	8f ef       	ldi	r24, 0xFF	; 255
    2b50:	9f ef       	ldi	r25, 0xFF	; 255
    2b52:	90 93 90 02 	sts	0x0290, r25	; 0x800290 <EepromSettings+0x9>
    2b56:	80 93 8f 02 	sts	0x028F, r24	; 0x80028f <EepromSettings+0x8>
            #ifdef USE_DIVERSITY
                EepromSettings.rssiBMin = UINT16_MAX;
    2b5a:	90 93 95 02 	sts	0x0295, r25	; 0x800295 <EepromSettings+0xe>
    2b5e:	80 93 94 02 	sts	0x0294, r24	; 0x800294 <EepromSettings+0xd>
    2b62:	16 c0       	rjmp	.+44     	; 0x2b90 <_ZN12StateMachine24SettingsRssiStateHandler14onButtonChangeE6ButtonN7Buttons9PressTypeE+0x66>
            #endif
        break;

        case InternalState::WAIT_FOR_HIGH:
            internalState = InternalState::SCANNING_HIGH;
    2b64:	83 e0       	ldi	r24, 0x03	; 3
    2b66:	82 83       	std	Z+2, r24	; 0x02
            currentSweep = 0;
    2b68:	13 82       	std	Z+3, r1	; 0x03
            Receiver::setChannel(0);
    2b6a:	80 e0       	ldi	r24, 0x00	; 0
    2b6c:	0e 94 cb 0a 	call	0x1596	; 0x1596 <_ZN8Receiver10setChannelEh>

            EepromSettings.rssiAMax = 0;
    2b70:	10 92 92 02 	sts	0x0292, r1	; 0x800292 <EepromSettings+0xb>
    2b74:	10 92 91 02 	sts	0x0291, r1	; 0x800291 <EepromSettings+0xa>
            #ifdef USE_DIVERSITY
                EepromSettings.rssiBMax = 0;
    2b78:	10 92 97 02 	sts	0x0297, r1	; 0x800297 <EepromSettings+0x10>
    2b7c:	10 92 96 02 	sts	0x0296, r1	; 0x800296 <EepromSettings+0xf>
    2b80:	07 c0       	rjmp	.+14     	; 0x2b90 <_ZN12StateMachine24SettingsRssiStateHandler14onButtonChangeE6ButtonN7Buttons9PressTypeE+0x66>
            #endif
        break;

        case InternalState::DONE:
            EepromSettings.save();
    2b82:	87 e8       	ldi	r24, 0x87	; 135
    2b84:	92 e0       	ldi	r25, 0x02	; 2
    2b86:	0e 94 e7 0c 	call	0x19ce	; 0x19ce <_ZN14EepromSettings4saveEv>
            StateMachine::switchState(StateMachine::State::MENU);
    2b8a:	84 e0       	ldi	r24, 0x04	; 4
    2b8c:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <_ZN12StateMachine11switchStateENS_5StateE>
        break;
    }

    Ui::needUpdate();
    2b90:	0c 94 b8 16 	jmp	0x2d70	; 0x2d70 <_ZN2Ui10needUpdateEv>
    2b94:	08 95       	ret

00002b96 <_ZN12StateMachine24SettingsRssiStateHandler8onUpdateEv>:

void StateMachine::SettingsRssiStateHandler::onEnter() {
    internalState = InternalState::WAIT_FOR_LOW;
}

void StateMachine::SettingsRssiStateHandler::onUpdate() {
    2b96:	cf 93       	push	r28
    2b98:	df 93       	push	r29
    2b9a:	ec 01       	movw	r28, r24
    if (!Receiver::isRssiStable())
    2b9c:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <_ZN8Receiver12isRssiStableEv>
    2ba0:	88 23       	and	r24, r24
    2ba2:	09 f4       	brne	.+2      	; 0x2ba6 <_ZN12StateMachine24SettingsRssiStateHandler8onUpdateEv+0x10>
    2ba4:	63 c0       	rjmp	.+198    	; 0x2c6c <_ZN12StateMachine24SettingsRssiStateHandler8onUpdateEv+0xd6>
        return;

    switch (internalState) {
    2ba6:	8a 81       	ldd	r24, Y+2	; 0x02
    2ba8:	81 30       	cpi	r24, 0x01	; 1
    2baa:	19 f0       	breq	.+6      	; 0x2bb2 <_ZN12StateMachine24SettingsRssiStateHandler8onUpdateEv+0x1c>
    2bac:	83 30       	cpi	r24, 0x03	; 3
    2bae:	01 f1       	breq	.+64     	; 0x2bf0 <_ZN12StateMachine24SettingsRssiStateHandler8onUpdateEv+0x5a>
    2bb0:	3d c0       	rjmp	.+122    	; 0x2c2c <_ZN12StateMachine24SettingsRssiStateHandler8onUpdateEv+0x96>
        case InternalState::SCANNING_LOW:
            if (Receiver::rssiARaw < EepromSettings.rssiAMin)
    2bb2:	80 91 82 02 	lds	r24, 0x0282	; 0x800282 <_ZN8Receiver8rssiARawE>
    2bb6:	90 91 83 02 	lds	r25, 0x0283	; 0x800283 <_ZN8Receiver8rssiARawE+0x1>
    2bba:	20 91 8f 02 	lds	r18, 0x028F	; 0x80028f <EepromSettings+0x8>
    2bbe:	30 91 90 02 	lds	r19, 0x0290	; 0x800290 <EepromSettings+0x9>
    2bc2:	82 17       	cp	r24, r18
    2bc4:	93 07       	cpc	r25, r19
    2bc6:	20 f4       	brcc	.+8      	; 0x2bd0 <_ZN12StateMachine24SettingsRssiStateHandler8onUpdateEv+0x3a>
                EepromSettings.rssiAMin = Receiver::rssiARaw;
    2bc8:	90 93 90 02 	sts	0x0290, r25	; 0x800290 <EepromSettings+0x9>
    2bcc:	80 93 8f 02 	sts	0x028F, r24	; 0x80028f <EepromSettings+0x8>

            #ifdef USE_DIVERSITY
                if (Receiver::rssiBRaw < EepromSettings.rssiBMin)
    2bd0:	80 91 67 02 	lds	r24, 0x0267	; 0x800267 <_ZN8Receiver8rssiBRawE>
    2bd4:	90 91 68 02 	lds	r25, 0x0268	; 0x800268 <_ZN8Receiver8rssiBRawE+0x1>
    2bd8:	20 91 94 02 	lds	r18, 0x0294	; 0x800294 <EepromSettings+0xd>
    2bdc:	30 91 95 02 	lds	r19, 0x0295	; 0x800295 <EepromSettings+0xe>
    2be0:	82 17       	cp	r24, r18
    2be2:	93 07       	cpc	r25, r19
    2be4:	18 f5       	brcc	.+70     	; 0x2c2c <_ZN12StateMachine24SettingsRssiStateHandler8onUpdateEv+0x96>
                    EepromSettings.rssiBMin = Receiver::rssiBRaw;
    2be6:	90 93 95 02 	sts	0x0295, r25	; 0x800295 <EepromSettings+0xe>
    2bea:	80 93 94 02 	sts	0x0294, r24	; 0x800294 <EepromSettings+0xd>
    2bee:	1e c0       	rjmp	.+60     	; 0x2c2c <_ZN12StateMachine24SettingsRssiStateHandler8onUpdateEv+0x96>
            #endif
        break;

        case InternalState::SCANNING_HIGH:
            if (Receiver::rssiARaw > EepromSettings.rssiAMax)
    2bf0:	80 91 82 02 	lds	r24, 0x0282	; 0x800282 <_ZN8Receiver8rssiARawE>
    2bf4:	90 91 83 02 	lds	r25, 0x0283	; 0x800283 <_ZN8Receiver8rssiARawE+0x1>
    2bf8:	20 91 91 02 	lds	r18, 0x0291	; 0x800291 <EepromSettings+0xa>
    2bfc:	30 91 92 02 	lds	r19, 0x0292	; 0x800292 <EepromSettings+0xb>
    2c00:	28 17       	cp	r18, r24
    2c02:	39 07       	cpc	r19, r25
    2c04:	20 f4       	brcc	.+8      	; 0x2c0e <_ZN12StateMachine24SettingsRssiStateHandler8onUpdateEv+0x78>
                EepromSettings.rssiAMax = Receiver::rssiARaw;
    2c06:	90 93 92 02 	sts	0x0292, r25	; 0x800292 <EepromSettings+0xb>
    2c0a:	80 93 91 02 	sts	0x0291, r24	; 0x800291 <EepromSettings+0xa>

            #ifdef USE_DIVERSITY
                if (Receiver::rssiBRaw > EepromSettings.rssiBMax)
    2c0e:	80 91 67 02 	lds	r24, 0x0267	; 0x800267 <_ZN8Receiver8rssiBRawE>
    2c12:	90 91 68 02 	lds	r25, 0x0268	; 0x800268 <_ZN8Receiver8rssiBRawE+0x1>
    2c16:	20 91 96 02 	lds	r18, 0x0296	; 0x800296 <EepromSettings+0xf>
    2c1a:	30 91 97 02 	lds	r19, 0x0297	; 0x800297 <EepromSettings+0x10>
    2c1e:	28 17       	cp	r18, r24
    2c20:	39 07       	cpc	r19, r25
    2c22:	20 f4       	brcc	.+8      	; 0x2c2c <_ZN12StateMachine24SettingsRssiStateHandler8onUpdateEv+0x96>
                    EepromSettings.rssiBMax = Receiver::rssiBRaw;
    2c24:	90 93 97 02 	sts	0x0297, r25	; 0x800297 <EepromSettings+0x10>
    2c28:	80 93 96 02 	sts	0x0296, r24	; 0x800296 <EepromSettings+0xf>
            #endif
        break;
    }

    Receiver::setChannel((Receiver::activeChannel + 1) % CHANNELS_SIZE);
    2c2c:	80 91 85 02 	lds	r24, 0x0285	; 0x800285 <_ZN8Receiver13activeChannelE>
    2c30:	90 e0       	ldi	r25, 0x00	; 0
    2c32:	01 96       	adiw	r24, 0x01	; 1
    2c34:	68 e2       	ldi	r22, 0x28	; 40
    2c36:	70 e0       	ldi	r23, 0x00	; 0
    2c38:	0e 94 94 31 	call	0x6328	; 0x6328 <__divmodhi4>
    2c3c:	0e 94 cb 0a 	call	0x1596	; 0x1596 <_ZN8Receiver10setChannelEh>
    if (Receiver::activeChannel == 0) {
    2c40:	80 91 85 02 	lds	r24, 0x0285	; 0x800285 <_ZN8Receiver13activeChannelE>
    2c44:	81 11       	cpse	r24, r1
    2c46:	12 c0       	rjmp	.+36     	; 0x2c6c <_ZN12StateMachine24SettingsRssiStateHandler8onUpdateEv+0xd6>
        currentSweep++;
    2c48:	8b 81       	ldd	r24, Y+3	; 0x03
    2c4a:	8f 5f       	subi	r24, 0xFF	; 255
    2c4c:	8b 83       	std	Y+3, r24	; 0x03

        if (currentSweep == RSSI_SETUP_RUN) {
    2c4e:	83 30       	cpi	r24, 0x03	; 3
    2c50:	69 f4       	brne	.+26     	; 0x2c6c <_ZN12StateMachine24SettingsRssiStateHandler8onUpdateEv+0xd6>
            switch (internalState) {
    2c52:	8a 81       	ldd	r24, Y+2	; 0x02
    2c54:	81 30       	cpi	r24, 0x01	; 1
    2c56:	21 f0       	breq	.+8      	; 0x2c60 <_ZN12StateMachine24SettingsRssiStateHandler8onUpdateEv+0xca>
    2c58:	83 30       	cpi	r24, 0x03	; 3
    2c5a:	21 f4       	brne	.+8      	; 0x2c64 <_ZN12StateMachine24SettingsRssiStateHandler8onUpdateEv+0xce>
                case InternalState::SCANNING_LOW:
                    internalState = InternalState::WAIT_FOR_HIGH;
                break;

                case InternalState::SCANNING_HIGH:
                    internalState = InternalState::DONE;
    2c5c:	84 e0       	ldi	r24, 0x04	; 4
    2c5e:	01 c0       	rjmp	.+2      	; 0x2c62 <_ZN12StateMachine24SettingsRssiStateHandler8onUpdateEv+0xcc>
        currentSweep++;

        if (currentSweep == RSSI_SETUP_RUN) {
            switch (internalState) {
                case InternalState::SCANNING_LOW:
                    internalState = InternalState::WAIT_FOR_HIGH;
    2c60:	82 e0       	ldi	r24, 0x02	; 2
                break;

                case InternalState::SCANNING_HIGH:
                    internalState = InternalState::DONE;
    2c62:	8a 83       	std	Y+2, r24	; 0x02
            }

            Ui::needUpdate();
        }
    }
}
    2c64:	df 91       	pop	r29
    2c66:	cf 91       	pop	r28
                case InternalState::SCANNING_HIGH:
                    internalState = InternalState::DONE;
                break;
            }

            Ui::needUpdate();
    2c68:	0c 94 b8 16 	jmp	0x2d70	; 0x2d70 <_ZN2Ui10needUpdateEv>
        }
    }
}
    2c6c:	df 91       	pop	r29
    2c6e:	cf 91       	pop	r28
    2c70:	08 95       	ret

00002c72 <_ZN5TimerC1Ej>:
#include <Arduino.h>
#include "timer.h"


Timer::Timer(uint16_t delay) {
    2c72:	cf 93       	push	r28
    2c74:	df 93       	push	r29
    2c76:	ec 01       	movw	r28, r24
    this->delay = delay;
    2c78:	7d 83       	std	Y+5, r23	; 0x05
    2c7a:	6c 83       	std	Y+4, r22	; 0x04
    this->nextTick = millis() + this->delay;
    2c7c:	0e 94 5b 1a 	call	0x34b6	; 0x34b6 <millis>
    2c80:	2c 81       	ldd	r18, Y+4	; 0x04
    2c82:	3d 81       	ldd	r19, Y+5	; 0x05
    2c84:	dc 01       	movw	r26, r24
    2c86:	cb 01       	movw	r24, r22
    2c88:	82 0f       	add	r24, r18
    2c8a:	93 1f       	adc	r25, r19
    2c8c:	a1 1d       	adc	r26, r1
    2c8e:	b1 1d       	adc	r27, r1
    2c90:	88 83       	st	Y, r24
    2c92:	99 83       	std	Y+1, r25	; 0x01
    2c94:	aa 83       	std	Y+2, r26	; 0x02
    2c96:	bb 83       	std	Y+3, r27	; 0x03
    this->ticked = false;
    2c98:	1e 82       	std	Y+6, r1	; 0x06
}
    2c9a:	df 91       	pop	r29
    2c9c:	cf 91       	pop	r28
    2c9e:	08 95       	ret

00002ca0 <_ZN5Timer9hasTickedEv>:

const bool Timer::hasTicked() {
    2ca0:	0f 93       	push	r16
    2ca2:	1f 93       	push	r17
    2ca4:	cf 93       	push	r28
    2ca6:	df 93       	push	r29
    if (this->ticked)
    2ca8:	fc 01       	movw	r30, r24
    2caa:	26 81       	ldd	r18, Z+6	; 0x06
    2cac:	21 11       	cpse	r18, r1
    2cae:	0f c0       	rjmp	.+30     	; 0x2cce <_ZN5Timer9hasTickedEv+0x2e>
    2cb0:	ec 01       	movw	r28, r24
        return true;

    if (millis() >= this->nextTick) {
    2cb2:	0e 94 5b 1a 	call	0x34b6	; 0x34b6 <millis>
    2cb6:	08 81       	ld	r16, Y
    2cb8:	19 81       	ldd	r17, Y+1	; 0x01
    2cba:	2a 81       	ldd	r18, Y+2	; 0x02
    2cbc:	3b 81       	ldd	r19, Y+3	; 0x03
    2cbe:	60 17       	cp	r22, r16
    2cc0:	71 07       	cpc	r23, r17
    2cc2:	82 07       	cpc	r24, r18
    2cc4:	93 07       	cpc	r25, r19
    2cc6:	28 f0       	brcs	.+10     	; 0x2cd2 <_ZN5Timer9hasTickedEv+0x32>
        this->ticked = true;
    2cc8:	81 e0       	ldi	r24, 0x01	; 1
    2cca:	8e 83       	std	Y+6, r24	; 0x06
        return true;
    2ccc:	03 c0       	rjmp	.+6      	; 0x2cd4 <_ZN5Timer9hasTickedEv+0x34>
    this->ticked = false;
}

const bool Timer::hasTicked() {
    if (this->ticked)
        return true;
    2cce:	81 e0       	ldi	r24, 0x01	; 1
    2cd0:	01 c0       	rjmp	.+2      	; 0x2cd4 <_ZN5Timer9hasTickedEv+0x34>
    if (millis() >= this->nextTick) {
        this->ticked = true;
        return true;
    }

    return false;
    2cd2:	80 e0       	ldi	r24, 0x00	; 0
}
    2cd4:	df 91       	pop	r29
    2cd6:	cf 91       	pop	r28
    2cd8:	1f 91       	pop	r17
    2cda:	0f 91       	pop	r16
    2cdc:	08 95       	ret

00002cde <_ZN5Timer5resetEv>:

void Timer::reset() {
    2cde:	cf 93       	push	r28
    2ce0:	df 93       	push	r29
    2ce2:	ec 01       	movw	r28, r24
    this->nextTick = millis() + this->delay;
    2ce4:	0e 94 5b 1a 	call	0x34b6	; 0x34b6 <millis>
    2ce8:	2c 81       	ldd	r18, Y+4	; 0x04
    2cea:	3d 81       	ldd	r19, Y+5	; 0x05
    2cec:	dc 01       	movw	r26, r24
    2cee:	cb 01       	movw	r24, r22
    2cf0:	82 0f       	add	r24, r18
    2cf2:	93 1f       	adc	r25, r19
    2cf4:	a1 1d       	adc	r26, r1
    2cf6:	b1 1d       	adc	r27, r1
    2cf8:	88 83       	st	Y, r24
    2cfa:	99 83       	std	Y+1, r25	; 0x01
    2cfc:	aa 83       	std	Y+2, r26	; 0x02
    2cfe:	bb 83       	std	Y+3, r27	; 0x03
    this->ticked = false;
    2d00:	1e 82       	std	Y+6, r1	; 0x06
}
    2d02:	df 91       	pop	r29
    2d04:	cf 91       	pop	r28
    2d06:	08 95       	ret

00002d08 <_ZN2Ui5setupEv>:
    bool shouldDrawUpdate = false;
    bool shouldDisplay = false;
    bool shouldFullRedraw = false;


    void setup() {
    2d08:	0f 93       	push	r16
    2d0a:	cf 93       	push	r28
    2d0c:	df 93       	push	r29
        display.begin(OLED_VCCSTATE, OLED_ADDRESS);
    2d0e:	01 e0       	ldi	r16, 0x01	; 1
    2d10:	21 e0       	ldi	r18, 0x01	; 1
    2d12:	4c e3       	ldi	r20, 0x3C	; 60
    2d14:	62 e0       	ldi	r22, 0x02	; 2
    2d16:	86 eb       	ldi	r24, 0xB6	; 182
    2d18:	92 e0       	ldi	r25, 0x02	; 2
    2d1a:	0e 94 f4 28 	call	0x51e8	; 0x51e8 <_ZN16Adafruit_SSD13065beginEhhbb>
    @param   c   16-bit 5-6-5 Color to draw text with
    @note    For 'transparent' background, background and foreground
             are set to same color rather than using a separate flag.
  */
  /**********************************************************************/
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
    2d1e:	c6 eb       	ldi	r28, 0xB6	; 182
    2d20:	d2 e0       	ldi	r29, 0x02	; 2
    2d22:	81 e0       	ldi	r24, 0x01	; 1
    2d24:	90 e0       	ldi	r25, 0x00	; 0
    2d26:	9b 8b       	std	Y+19, r25	; 0x13
    2d28:	8a 8b       	std	Y+18, r24	; 0x12
    2d2a:	99 8b       	std	Y+17, r25	; 0x11
    2d2c:	88 8b       	std	Y+16, r24	; 0x10

        display.setTextColor(WHITE);
        display.setTextSize(1);
    2d2e:	61 e0       	ldi	r22, 0x01	; 1
    2d30:	ce 01       	movw	r24, r28
    2d32:	0e 94 64 26 	call	0x4cc8	; 0x4cc8 <_ZN12Adafruit_GFX11setTextSizeEh>
  @brief  Set whether text that is too long for the screen width should
          automatically wrap around to the next line (else clip right).
  @param  w  true for wrapping, false for clipping
  */
  /**********************************************************************/
  void setTextWrap(bool w) { wrap = w; }
    2d36:	1f 8a       	std	Y+23, r1	; 0x17
        display.setTextWrap(false);

        display.clearDisplay();
    2d38:	ce 01       	movw	r24, r28
    2d3a:	0e 94 d6 28 	call	0x51ac	; 0x51ac <_ZN16Adafruit_SSD130612clearDisplayEv>

        display.begin();
    2d3e:	21 e0       	ldi	r18, 0x01	; 1
    2d40:	40 e0       	ldi	r20, 0x00	; 0
    2d42:	62 e0       	ldi	r22, 0x02	; 2
    2d44:	ce 01       	movw	r24, r28
    2d46:	0e 94 f4 28 	call	0x51e8	; 0x51e8 <_ZN16Adafruit_SSD13065beginEhhbb>
    }
    2d4a:	df 91       	pop	r29
    2d4c:	cf 91       	pop	r28
    2d4e:	0f 91       	pop	r16
    2d50:	08 95       	ret

00002d52 <_ZN2Ui6updateEv>:

    void update() {
        if (shouldDisplay) {
    2d52:	80 91 b4 02 	lds	r24, 0x02B4	; 0x8002b4 <_ZN2Ui13shouldDisplayE>
    2d56:	88 23       	and	r24, r24
    2d58:	31 f0       	breq	.+12     	; 0x2d66 <_ZN2Ui6updateEv+0x14>
            display.display();
    2d5a:	86 eb       	ldi	r24, 0xB6	; 182
    2d5c:	92 e0       	ldi	r25, 0x02	; 2
    2d5e:	0e 94 6d 2c 	call	0x58da	; 0x58da <_ZN16Adafruit_SSD13067displayEv>
            shouldDisplay = false;
    2d62:	10 92 b4 02 	sts	0x02B4, r1	; 0x8002b4 <_ZN2Ui13shouldDisplayE>
    2d66:	08 95       	ret

00002d68 <_ZN2Ui5clearEv>:
            Ui::display.drawFastVLine(x, y + i, step / 2, INVERSE);
        }
    }

    void clear() {
        display.clearDisplay();
    2d68:	86 eb       	ldi	r24, 0xB6	; 182
    2d6a:	92 e0       	ldi	r25, 0x02	; 2
    2d6c:	0c 94 d6 28 	jmp	0x51ac	; 0x51ac <_ZN16Adafruit_SSD130612clearDisplayEv>

00002d70 <_ZN2Ui10needUpdateEv>:
        display.fillRect(x, y, w, h, BLACK);
    }


    void needUpdate() {
        shouldDrawUpdate = true;
    2d70:	81 e0       	ldi	r24, 0x01	; 1
    2d72:	80 93 b5 02 	sts	0x02B5, r24	; 0x8002b5 <_ZN2Ui16shouldDrawUpdateE>
    2d76:	08 95       	ret

00002d78 <_ZN2Ui11needDisplayEv>:
    }

    void needDisplay() {
        shouldDisplay = true;
    2d78:	81 e0       	ldi	r24, 0x01	; 1
    2d7a:	80 93 b4 02 	sts	0x02B4, r24	; 0x8002b4 <_ZN2Ui13shouldDisplayE>
    2d7e:	08 95       	ret

00002d80 <_ZN2Ui14needFullRedrawEv>:
    }

    void needFullRedraw() {
        shouldFullRedraw = true;
    2d80:	81 e0       	ldi	r24, 0x01	; 1
    2d82:	80 93 b3 02 	sts	0x02B3, r24	; 0x8002b3 <_ZN2Ui16shouldFullRedrawE>
    2d86:	08 95       	ret

00002d88 <_GLOBAL__sub_I__ZN2Ui7displayE>:
#include "settings_internal.h"
#include "ui.h"


namespace Ui {
    OLED_CLASS display;
    2d88:	6f ef       	ldi	r22, 0xFF	; 255
    2d8a:	86 eb       	ldi	r24, 0xB6	; 182
    2d8c:	92 e0       	ldi	r25, 0x02	; 2
    2d8e:	0c 94 56 27 	jmp	0x4eac	; 0x4eac <_ZN16Adafruit_SSD1306C1Ea>

00002d92 <_GLOBAL__sub_D__ZN2Ui7displayE>:
    2d92:	86 eb       	ldi	r24, 0xB6	; 182
    2d94:	92 e0       	ldi	r25, 0x02	; 2
    2d96:	0c 94 7a 27 	jmp	0x4ef4	; 0x4ef4 <_ZN16Adafruit_SSD1306D1Ev>

00002d9a <_ZN2Ui15drawDashedHLineEiiii>:
    void drawDashedHLine(
        const int x,
        const int y,
        const int w,
        const int step
    ) {
    2d9a:	6f 92       	push	r6
    2d9c:	7f 92       	push	r7
    2d9e:	8f 92       	push	r8
    2da0:	9f 92       	push	r9
    2da2:	af 92       	push	r10
    2da4:	bf 92       	push	r11
    2da6:	cf 92       	push	r12
    2da8:	df 92       	push	r13
    2daa:	ef 92       	push	r14
    2dac:	ff 92       	push	r15
    2dae:	0f 93       	push	r16
    2db0:	1f 93       	push	r17
    2db2:	cf 93       	push	r28
    2db4:	df 93       	push	r29
    2db6:	5c 01       	movw	r10, r24
    2db8:	3b 01       	movw	r6, r22
    2dba:	4a 01       	movw	r8, r20
    2dbc:	79 01       	movw	r14, r18
        for (int i = 0; i <= w; i += step) {
            Ui::display.drawFastHLine(x + i, y, step / 2, WHITE);
    2dbe:	69 01       	movw	r12, r18
    2dc0:	37 ff       	sbrs	r19, 7
    2dc2:	03 c0       	rjmp	.+6      	; 0x2dca <_ZN2Ui15drawDashedHLineEiiii+0x30>
    2dc4:	8f ef       	ldi	r24, 0xFF	; 255
    2dc6:	c8 1a       	sub	r12, r24
    2dc8:	d8 0a       	sbc	r13, r24
    2dca:	d5 94       	asr	r13
    2dcc:	c7 94       	ror	r12
        const int x,
        const int y,
        const int w,
        const int step
    ) {
        for (int i = 0; i <= w; i += step) {
    2dce:	c0 e0       	ldi	r28, 0x00	; 0
    2dd0:	d0 e0       	ldi	r29, 0x00	; 0
    2dd2:	8c 16       	cp	r8, r28
    2dd4:	9d 06       	cpc	r9, r29
    2dd6:	74 f0       	brlt	.+28     	; 0x2df4 <_ZN2Ui15drawDashedHLineEiiii+0x5a>
            Ui::display.drawFastHLine(x + i, y, step / 2, WHITE);
    2dd8:	be 01       	movw	r22, r28
    2dda:	6a 0d       	add	r22, r10
    2ddc:	7b 1d       	adc	r23, r11
    2dde:	01 e0       	ldi	r16, 0x01	; 1
    2de0:	10 e0       	ldi	r17, 0x00	; 0
    2de2:	96 01       	movw	r18, r12
    2de4:	a3 01       	movw	r20, r6
    2de6:	86 eb       	ldi	r24, 0xB6	; 182
    2de8:	92 e0       	ldi	r25, 0x02	; 2
    2dea:	0e 94 ea 2b 	call	0x57d4	; 0x57d4 <_ZN16Adafruit_SSD130613drawFastHLineEiiij>
        const int x,
        const int y,
        const int w,
        const int step
    ) {
        for (int i = 0; i <= w; i += step) {
    2dee:	ce 0d       	add	r28, r14
    2df0:	df 1d       	adc	r29, r15
    2df2:	ef cf       	rjmp	.-34     	; 0x2dd2 <_ZN2Ui15drawDashedHLineEiiii+0x38>
            Ui::display.drawFastHLine(x + i, y, step / 2, WHITE);
        }
    }
    2df4:	df 91       	pop	r29
    2df6:	cf 91       	pop	r28
    2df8:	1f 91       	pop	r17
    2dfa:	0f 91       	pop	r16
    2dfc:	ff 90       	pop	r15
    2dfe:	ef 90       	pop	r14
    2e00:	df 90       	pop	r13
    2e02:	cf 90       	pop	r12
    2e04:	bf 90       	pop	r11
    2e06:	af 90       	pop	r10
    2e08:	9f 90       	pop	r9
    2e0a:	8f 90       	pop	r8
    2e0c:	7f 90       	pop	r7
    2e0e:	6f 90       	pop	r6
    2e10:	08 95       	ret

00002e12 <_ZN2Ui15drawDashedVLineEiiii>:
    void drawDashedVLine(
        const int x,
        const int y,
        const int h,
        const int step
    ) {
    2e12:	6f 92       	push	r6
    2e14:	7f 92       	push	r7
    2e16:	8f 92       	push	r8
    2e18:	9f 92       	push	r9
    2e1a:	af 92       	push	r10
    2e1c:	bf 92       	push	r11
    2e1e:	cf 92       	push	r12
    2e20:	df 92       	push	r13
    2e22:	ef 92       	push	r14
    2e24:	ff 92       	push	r15
    2e26:	0f 93       	push	r16
    2e28:	1f 93       	push	r17
    2e2a:	cf 93       	push	r28
    2e2c:	df 93       	push	r29
    2e2e:	3c 01       	movw	r6, r24
    2e30:	5b 01       	movw	r10, r22
    2e32:	4a 01       	movw	r8, r20
    2e34:	79 01       	movw	r14, r18
        for (int i = 0; i <= h; i += step) {
            Ui::display.drawFastVLine(x, y + i, step / 2, INVERSE);
    2e36:	69 01       	movw	r12, r18
    2e38:	37 ff       	sbrs	r19, 7
    2e3a:	03 c0       	rjmp	.+6      	; 0x2e42 <_ZN2Ui15drawDashedVLineEiiii+0x30>
    2e3c:	8f ef       	ldi	r24, 0xFF	; 255
    2e3e:	c8 1a       	sub	r12, r24
    2e40:	d8 0a       	sbc	r13, r24
    2e42:	d5 94       	asr	r13
    2e44:	c7 94       	ror	r12
        const int x,
        const int y,
        const int h,
        const int step
    ) {
        for (int i = 0; i <= h; i += step) {
    2e46:	c0 e0       	ldi	r28, 0x00	; 0
    2e48:	d0 e0       	ldi	r29, 0x00	; 0
    2e4a:	8c 16       	cp	r8, r28
    2e4c:	9d 06       	cpc	r9, r29
    2e4e:	74 f0       	brlt	.+28     	; 0x2e6c <_ZN2Ui15drawDashedVLineEiiii+0x5a>
            Ui::display.drawFastVLine(x, y + i, step / 2, INVERSE);
    2e50:	ae 01       	movw	r20, r28
    2e52:	4a 0d       	add	r20, r10
    2e54:	5b 1d       	adc	r21, r11
    2e56:	02 e0       	ldi	r16, 0x02	; 2
    2e58:	10 e0       	ldi	r17, 0x00	; 0
    2e5a:	96 01       	movw	r18, r12
    2e5c:	b3 01       	movw	r22, r6
    2e5e:	86 eb       	ldi	r24, 0xB6	; 182
    2e60:	92 e0       	ldi	r25, 0x02	; 2
    2e62:	0e 94 2b 2c 	call	0x5856	; 0x5856 <_ZN16Adafruit_SSD130613drawFastVLineEiiij>
        const int x,
        const int y,
        const int h,
        const int step
    ) {
        for (int i = 0; i <= h; i += step) {
    2e66:	ce 0d       	add	r28, r14
    2e68:	df 1d       	adc	r29, r15
    2e6a:	ef cf       	rjmp	.-34     	; 0x2e4a <_ZN2Ui15drawDashedVLineEiiii+0x38>
            Ui::display.drawFastVLine(x, y + i, step / 2, INVERSE);
        }
    }
    2e6c:	df 91       	pop	r29
    2e6e:	cf 91       	pop	r28
    2e70:	1f 91       	pop	r17
    2e72:	0f 91       	pop	r16
    2e74:	ff 90       	pop	r15
    2e76:	ef 90       	pop	r14
    2e78:	df 90       	pop	r13
    2e7a:	cf 90       	pop	r12
    2e7c:	bf 90       	pop	r11
    2e7e:	af 90       	pop	r10
    2e80:	9f 90       	pop	r9
    2e82:	8f 90       	pop	r8
    2e84:	7f 90       	pop	r7
    2e86:	6f 90       	pop	r6
    2e88:	08 95       	ret

00002e8a <_ZN2Ui9clearRectEiiii>:

    void clear() {
        display.clearDisplay();
    }

    void clearRect(const int x, const int y, const int w, const int h) {
    2e8a:	ef 92       	push	r14
    2e8c:	ff 92       	push	r15
    2e8e:	0f 93       	push	r16
    2e90:	1f 93       	push	r17
        display.fillRect(x, y, w, h, BLACK);
    2e92:	e1 2c       	mov	r14, r1
    2e94:	f1 2c       	mov	r15, r1
    2e96:	89 01       	movw	r16, r18
    2e98:	9a 01       	movw	r18, r20
    2e9a:	ab 01       	movw	r20, r22
    2e9c:	bc 01       	movw	r22, r24
    2e9e:	86 eb       	ldi	r24, 0xB6	; 182
    2ea0:	92 e0       	ldi	r25, 0x02	; 2
    2ea2:	0e 94 7d 1d 	call	0x3afa	; 0x3afa <_ZN12Adafruit_GFX8fillRectEiiiij>
    }
    2ea6:	1f 91       	pop	r17
    2ea8:	0f 91       	pop	r16
    2eaa:	ff 90       	pop	r15
    2eac:	ef 90       	pop	r14
    2eae:	08 95       	ret

00002eb0 <_ZN2Ui9drawGraphEPKhhhhhhh>:
        const uint8_t dataScale,
        const uint8_t x,
        const uint8_t y,
        const uint8_t w,
        const uint8_t h
    ) {
    2eb0:	2f 92       	push	r2
    2eb2:	3f 92       	push	r3
    2eb4:	4f 92       	push	r4
    2eb6:	5f 92       	push	r5
    2eb8:	6f 92       	push	r6
    2eba:	7f 92       	push	r7
    2ebc:	8f 92       	push	r8
    2ebe:	9f 92       	push	r9
    2ec0:	af 92       	push	r10
    2ec2:	bf 92       	push	r11
    2ec4:	cf 92       	push	r12
    2ec6:	df 92       	push	r13
    2ec8:	ef 92       	push	r14
    2eca:	ff 92       	push	r15
    2ecc:	0f 93       	push	r16
    2ece:	1f 93       	push	r17
    2ed0:	cf 93       	push	r28
    2ed2:	df 93       	push	r29
    2ed4:	00 d0       	rcall	.+0      	; 0x2ed6 <_ZN2Ui9drawGraphEPKhhhhhhh+0x26>
    2ed6:	00 d0       	rcall	.+0      	; 0x2ed8 <_ZN2Ui9drawGraphEPKhhhhhhh+0x28>
    2ed8:	cd b7       	in	r28, 0x3d	; 61
    2eda:	de b7       	in	r29, 0x3e	; 62
    2edc:	3c 01       	movw	r6, r24
    2ede:	69 83       	std	Y+1, r22	; 0x01
    2ee0:	34 2e       	mov	r3, r20
    2ee2:	2b 83       	std	Y+3, r18	; 0x03
        #define SCALE_DATAPOINT(p) (p * h / dataScale)
        #define CLAMP_DATAPOINT(p) \
            (p > dataScale) ? dataScale : ((p < 0) ? 0 : p);

        Ui::clearRect(x, y, w - 1, h + 1);
    2ee4:	4e 2c       	mov	r4, r14
    2ee6:	51 2c       	mov	r5, r1
    2ee8:	a0 2e       	mov	r10, r16
    2eea:	b1 2c       	mov	r11, r1
    2eec:	2c 2d       	mov	r18, r12
    2eee:	30 e0       	ldi	r19, 0x00	; 0
    2ef0:	2f 5f       	subi	r18, 0xFF	; 255
    2ef2:	3f 4f       	sbci	r19, 0xFF	; 255
    2ef4:	a2 01       	movw	r20, r4
    2ef6:	41 50       	subi	r20, 0x01	; 1
    2ef8:	51 09       	sbc	r21, r1
    2efa:	b5 01       	movw	r22, r10
    2efc:	eb 81       	ldd	r30, Y+3	; 0x03
    2efe:	8e 2f       	mov	r24, r30
    2f00:	90 e0       	ldi	r25, 0x00	; 0
    2f02:	0e 94 45 17 	call	0x2e8a	; 0x2e8a <_ZN2Ui9clearRectEiiii>

        const uint8_t xScaler = w / (dataSize - 1);
    2f06:	69 81       	ldd	r22, Y+1	; 0x01
    2f08:	26 2f       	mov	r18, r22
    2f0a:	30 e0       	ldi	r19, 0x00	; 0
    2f0c:	49 01       	movw	r8, r18
    2f0e:	71 e0       	ldi	r23, 0x01	; 1
    2f10:	87 1a       	sub	r8, r23
    2f12:	91 08       	sbc	r9, r1
    2f14:	c2 01       	movw	r24, r4
    2f16:	b4 01       	movw	r22, r8
    2f18:	0e 94 94 31 	call	0x6328	; 0x6328 <__divmodhi4>
    2f1c:	6a 83       	std	Y+2, r22	; 0x02
            const uint8_t dataPointHeight = h - SCALE_DATAPOINT(dataPoint);
            const uint8_t dataPointNextHeight =
                h - SCALE_DATAPOINT(dataPointNext);

            const uint8_t xEnd = xNext + xScaler
                    + (i == 0 || i == dataSize - 2 ? (xScalarMissing + 1) / 2 : 0);
    2f1e:	68 9d       	mul	r22, r8
    2f20:	e0 18       	sub	r14, r0
    2f22:	11 24       	eor	r1, r1
    2f24:	f1 2c       	mov	r15, r1
    2f26:	8f ef       	ldi	r24, 0xFF	; 255
    2f28:	e8 1a       	sub	r14, r24
    2f2a:	f8 0a       	sbc	r15, r24
    2f2c:	f5 94       	asr	r15
    2f2e:	e7 94       	ror	r14
    2f30:	de 2c       	mov	r13, r14
        Ui::clearRect(x, y, w - 1, h + 1);

        const uint8_t xScaler = w / (dataSize - 1);
        const uint8_t xScalarMissing = w - (xScaler * (dataSize - 1));

        uint8_t xNext = x;
    2f32:	eb 81       	ldd	r30, Y+3	; 0x03

        for (uint8_t i = 0; i < dataSize - 1; i++) {
    2f34:	21 2c       	mov	r2, r1
            const uint8_t dataPoint = CLAMP_DATAPOINT(data[i]);
            const uint8_t dataPointNext = CLAMP_DATAPOINT(data[i + 1]);

            // Need to invert the heights so it shows the right way on the
            // screen.
            const uint8_t dataPointHeight = h - SCALE_DATAPOINT(dataPoint);
    2f36:	43 2c       	mov	r4, r3
    2f38:	51 2c       	mov	r5, r1
            const uint8_t dataPointNextHeight =
                h - SCALE_DATAPOINT(dataPointNext);

            const uint8_t xEnd = xNext + xScaler
                    + (i == 0 || i == dataSize - 2 ? (xScalarMissing + 1) / 2 : 0);
    2f3a:	b9 01       	movw	r22, r18
    2f3c:	62 50       	subi	r22, 0x02	; 2
    2f3e:	71 09       	sbc	r23, r1
    2f40:	7c 83       	std	Y+4, r23	; 0x04
    2f42:	6b 83       	std	Y+3, r22	; 0x03
        const uint8_t xScaler = w / (dataSize - 1);
        const uint8_t xScalarMissing = w - (xScaler * (dataSize - 1));

        uint8_t xNext = x;

        for (uint8_t i = 0; i < dataSize - 1; i++) {
    2f44:	22 2d       	mov	r18, r2
    2f46:	30 e0       	ldi	r19, 0x00	; 0
    2f48:	28 15       	cp	r18, r8
    2f4a:	39 05       	cpc	r19, r9
    2f4c:	0c f0       	brlt	.+2      	; 0x2f50 <_ZN2Ui9drawGraphEPKhhhhhhh+0xa0>
    2f4e:	3f c0       	rjmp	.+126    	; 0x2fce <_ZN2Ui9drawGraphEPKhhhhhhh+0x11e>
            const uint8_t dataPoint = CLAMP_DATAPOINT(data[i]);
    2f50:	d3 01       	movw	r26, r6
    2f52:	a2 0f       	add	r26, r18
    2f54:	b3 1f       	adc	r27, r19
    2f56:	8c 91       	ld	r24, X
    2f58:	38 16       	cp	r3, r24
    2f5a:	08 f4       	brcc	.+2      	; 0x2f5e <_ZN2Ui9drawGraphEPKhhhhhhh+0xae>
    2f5c:	83 2d       	mov	r24, r3
            const uint8_t dataPointNext = CLAMP_DATAPOINT(data[i + 1]);
    2f5e:	11 96       	adiw	r26, 0x01	; 1
    2f60:	fc 91       	ld	r31, X
    2f62:	3f 16       	cp	r3, r31
    2f64:	08 f4       	brcc	.+2      	; 0x2f68 <_ZN2Ui9drawGraphEPKhhhhhhh+0xb8>
    2f66:	f3 2d       	mov	r31, r3

            // Need to invert the heights so it shows the right way on the
            // screen.
            const uint8_t dataPointHeight = h - SCALE_DATAPOINT(dataPoint);
    2f68:	c8 9e       	mul	r12, r24
    2f6a:	c0 01       	movw	r24, r0
    2f6c:	11 24       	eor	r1, r1
    2f6e:	b2 01       	movw	r22, r4
    2f70:	0e 94 94 31 	call	0x6328	; 0x6328 <__divmodhi4>
    2f74:	4c 2d       	mov	r20, r12
    2f76:	46 1b       	sub	r20, r22
            const uint8_t dataPointNextHeight =
                h - SCALE_DATAPOINT(dataPointNext);
    2f78:	cf 9e       	mul	r12, r31
    2f7a:	c0 01       	movw	r24, r0
    2f7c:	11 24       	eor	r1, r1
    2f7e:	b2 01       	movw	r22, r4
    2f80:	0e 94 94 31 	call	0x6328	; 0x6328 <__divmodhi4>
    2f84:	9c 2d       	mov	r25, r12
    2f86:	96 1b       	sub	r25, r22

            const uint8_t xEnd = xNext + xScaler
                    + (i == 0 || i == dataSize - 2 ? (xScalarMissing + 1) / 2 : 0);
    2f88:	22 20       	and	r2, r2
    2f8a:	39 f0       	breq	.+14     	; 0x2f9a <_ZN2Ui9drawGraphEPKhhhhhhh+0xea>
    2f8c:	6b 81       	ldd	r22, Y+3	; 0x03
    2f8e:	7c 81       	ldd	r23, Y+4	; 0x04
    2f90:	26 17       	cp	r18, r22
    2f92:	37 07       	cpc	r19, r23
    2f94:	11 f0       	breq	.+4      	; 0x2f9a <_ZN2Ui9drawGraphEPKhhhhhhh+0xea>
    2f96:	80 e0       	ldi	r24, 0x00	; 0
    2f98:	01 c0       	rjmp	.+2      	; 0x2f9c <_ZN2Ui9drawGraphEPKhhhhhhh+0xec>
    2f9a:	8d 2d       	mov	r24, r13
    2f9c:	7a 81       	ldd	r23, Y+2	; 0x02
    2f9e:	87 0f       	add	r24, r23
    2fa0:	8e 0f       	add	r24, r30
    2fa2:	89 83       	std	Y+1, r24	; 0x01
                xNext,
                y + dataPointHeight,
                xEnd,
                y + dataPointNextHeight,
                WHITE
            );
    2fa4:	85 01       	movw	r16, r10
    2fa6:	09 0f       	add	r16, r25
    2fa8:	11 1d       	adc	r17, r1
    2faa:	28 2f       	mov	r18, r24
    2fac:	30 e0       	ldi	r19, 0x00	; 0
    2fae:	c5 01       	movw	r24, r10
    2fb0:	84 0f       	add	r24, r20
    2fb2:	91 1d       	adc	r25, r1
    2fb4:	ac 01       	movw	r20, r24
    2fb6:	6e 2f       	mov	r22, r30
    2fb8:	70 e0       	ldi	r23, 0x00	; 0
    2fba:	ee 24       	eor	r14, r14
    2fbc:	e3 94       	inc	r14
    2fbe:	f1 2c       	mov	r15, r1
    2fc0:	86 eb       	ldi	r24, 0xB6	; 182
    2fc2:	92 e0       	ldi	r25, 0x02	; 2
    2fc4:	0e 94 df 1d 	call	0x3bbe	; 0x3bbe <_ZN12Adafruit_GFX8drawLineEiiiij>
        const uint8_t xScaler = w / (dataSize - 1);
        const uint8_t xScalarMissing = w - (xScaler * (dataSize - 1));

        uint8_t xNext = x;

        for (uint8_t i = 0; i < dataSize - 1; i++) {
    2fc8:	23 94       	inc	r2
                xEnd,
                y + dataPointNextHeight,
                WHITE
            );

            xNext = xEnd;
    2fca:	e9 81       	ldd	r30, Y+1	; 0x01
        const uint8_t xScaler = w / (dataSize - 1);
        const uint8_t xScalarMissing = w - (xScaler * (dataSize - 1));

        uint8_t xNext = x;

        for (uint8_t i = 0; i < dataSize - 1; i++) {
    2fcc:	bb cf       	rjmp	.-138    	; 0x2f44 <_ZN2Ui9drawGraphEPKhhhhhhh+0x94>
            xNext = xEnd;
        }

        #undef SCALE_DATAPOINT
        #undef CLAMP_DATAPOINT
    }
    2fce:	0f 90       	pop	r0
    2fd0:	0f 90       	pop	r0
    2fd2:	0f 90       	pop	r0
    2fd4:	0f 90       	pop	r0
    2fd6:	df 91       	pop	r29
    2fd8:	cf 91       	pop	r28
    2fda:	1f 91       	pop	r17
    2fdc:	0f 91       	pop	r16
    2fde:	ff 90       	pop	r15
    2fe0:	ef 90       	pop	r14
    2fe2:	df 90       	pop	r13
    2fe4:	cf 90       	pop	r12
    2fe6:	bf 90       	pop	r11
    2fe8:	af 90       	pop	r10
    2fea:	9f 90       	pop	r9
    2fec:	8f 90       	pop	r8
    2fee:	7f 90       	pop	r7
    2ff0:	6f 90       	pop	r6
    2ff2:	5f 90       	pop	r5
    2ff4:	4f 90       	pop	r4
    2ff6:	3f 90       	pop	r3
    2ff8:	2f 90       	pop	r2
    2ffa:	08 95       	ret

00002ffc <_ZN2Ui10MenuHelper5resetEv>:
#include "ui.h"
#include "ui_menu.h"


void Ui::MenuHelper::reset() {
    this->activeItems = 0;
    2ffc:	fc 01       	movw	r30, r24
    2ffe:	11 8e       	std	Z+25, r1	; 0x19
    3000:	10 8e       	std	Z+24, r1	; 0x18
    this->selectedItem = 0;
    3002:	13 8e       	std	Z+27, r1	; 0x1b
    3004:	12 8e       	std	Z+26, r1	; 0x1a
    3006:	08 95       	ret

00003008 <_ZN2Ui10MenuHelper7addItemEPKcPKhPFvvE>:

void Ui::MenuHelper::addItem(
    const char* text,
    const unsigned char* icon,
    const Ui::MenuHandler handler
) {
    3008:	cf 93       	push	r28
    this->menuItems[this->activeItems].text = text;
    300a:	fc 01       	movw	r30, r24
    300c:	a0 8d       	ldd	r26, Z+24	; 0x18
    300e:	b1 8d       	ldd	r27, Z+25	; 0x19
    3010:	c6 e0       	ldi	r28, 0x06	; 6
    3012:	ca 9f       	mul	r28, r26
    3014:	f0 01       	movw	r30, r0
    3016:	cb 9f       	mul	r28, r27
    3018:	f0 0d       	add	r31, r0
    301a:	11 24       	eor	r1, r1
    301c:	e8 0f       	add	r30, r24
    301e:	f9 1f       	adc	r31, r25
    3020:	71 83       	std	Z+1, r23	; 0x01
    3022:	60 83       	st	Z, r22
    this->menuItems[this->activeItems].icon = icon;
    3024:	55 83       	std	Z+5, r21	; 0x05
    3026:	44 83       	std	Z+4, r20	; 0x04
    this->menuItems[this->activeItems].handler = handler;
    3028:	33 83       	std	Z+3, r19	; 0x03
    302a:	22 83       	std	Z+2, r18	; 0x02

    this->activeItems++;
    302c:	11 96       	adiw	r26, 0x01	; 1
    302e:	fc 01       	movw	r30, r24
    3030:	b1 8f       	std	Z+25, r27	; 0x19
    3032:	a0 8f       	std	Z+24, r26	; 0x18
}
    3034:	cf 91       	pop	r28
    3036:	08 95       	ret

00003038 <_ZN2Ui10MenuHelper14selectNextItemEv>:

void Ui::MenuHelper::selectNextItem() {
    3038:	fc 01       	movw	r30, r24
    if (++this->selectedItem >= this->activeItems)
    303a:	82 8d       	ldd	r24, Z+26	; 0x1a
    303c:	93 8d       	ldd	r25, Z+27	; 0x1b
    303e:	01 96       	adiw	r24, 0x01	; 1
    3040:	93 8f       	std	Z+27, r25	; 0x1b
    3042:	82 8f       	std	Z+26, r24	; 0x1a
    3044:	20 8d       	ldd	r18, Z+24	; 0x18
    3046:	31 8d       	ldd	r19, Z+25	; 0x19
    3048:	82 17       	cp	r24, r18
    304a:	93 07       	cpc	r25, r19
    304c:	14 f0       	brlt	.+4      	; 0x3052 <_ZN2Ui10MenuHelper14selectNextItemEv+0x1a>
        this->selectedItem = 0;
    304e:	13 8e       	std	Z+27, r1	; 0x1b
    3050:	12 8e       	std	Z+26, r1	; 0x1a
    3052:	08 95       	ret

00003054 <_ZN2Ui10MenuHelper18selectPreviousItemEv>:
}

void Ui::MenuHelper::selectPreviousItem() {
    3054:	fc 01       	movw	r30, r24
    if (--this->selectedItem < 0)
    3056:	82 8d       	ldd	r24, Z+26	; 0x1a
    3058:	93 8d       	ldd	r25, Z+27	; 0x1b
    305a:	01 97       	sbiw	r24, 0x01	; 1
    305c:	93 8f       	std	Z+27, r25	; 0x1b
    305e:	82 8f       	std	Z+26, r24	; 0x1a
    3060:	97 ff       	sbrs	r25, 7
    3062:	05 c0       	rjmp	.+10     	; 0x306e <_ZN2Ui10MenuHelper18selectPreviousItemEv+0x1a>
        this->selectedItem = this->activeItems - 1;
    3064:	80 8d       	ldd	r24, Z+24	; 0x18
    3066:	91 8d       	ldd	r25, Z+25	; 0x19
    3068:	01 97       	sbiw	r24, 0x01	; 1
    306a:	93 8f       	std	Z+27, r25	; 0x1b
    306c:	82 8f       	std	Z+26, r24	; 0x1a
    306e:	08 95       	ret

00003070 <_ZN2Ui10MenuHelper12activateItemEv>:
}


void Ui::MenuHelper::activateItem() {
    this->menuItems[this->selectedItem].handler();
    3070:	fc 01       	movw	r30, r24
    3072:	42 8d       	ldd	r20, Z+26	; 0x1a
    3074:	53 8d       	ldd	r21, Z+27	; 0x1b
    3076:	66 e0       	ldi	r22, 0x06	; 6
    3078:	64 9f       	mul	r22, r20
    307a:	90 01       	movw	r18, r0
    307c:	65 9f       	mul	r22, r21
    307e:	30 0d       	add	r19, r0
    3080:	11 24       	eor	r1, r1
    3082:	e2 0f       	add	r30, r18
    3084:	f3 1f       	adc	r31, r19
    3086:	02 80       	ldd	r0, Z+2	; 0x02
    3088:	f3 81       	ldd	r31, Z+3	; 0x03
    308a:	e0 2d       	mov	r30, r0
    308c:	09 94       	ijmp

0000308e <_ZN2Ui10MenuHelper14getCurrentItemEv>:
}


Ui::MenuItem* Ui::MenuHelper::getCurrentItem() {
    return &this->menuItems[this->selectedItem];
    308e:	fc 01       	movw	r30, r24
    3090:	42 8d       	ldd	r20, Z+26	; 0x1a
    3092:	53 8d       	ldd	r21, Z+27	; 0x1b
    3094:	66 e0       	ldi	r22, 0x06	; 6
    3096:	64 9f       	mul	r22, r20
    3098:	90 01       	movw	r18, r0
    309a:	65 9f       	mul	r22, r21
    309c:	30 0d       	add	r19, r0
    309e:	11 24       	eor	r1, r1
}
    30a0:	82 0f       	add	r24, r18
    30a2:	93 1f       	adc	r25, r19
    30a4:	08 95       	ret

000030a6 <_ZN2Ui15StateMenuHelper7addItemEPFPKhPvEPFvS3_E>:

void StateMenuHelper::addItem(
    const MenuIcon icon,
    const MenuHandler handler
) {
    this->menuItems[this->activeItems].icon = icon;
    30a6:	fc 01       	movw	r30, r24
    30a8:	22 89       	ldd	r18, Z+18	; 0x12
    30aa:	33 89       	ldd	r19, Z+19	; 0x13
    30ac:	f9 01       	movw	r30, r18
    30ae:	ee 0f       	add	r30, r30
    30b0:	ff 1f       	adc	r31, r31
    30b2:	ee 0f       	add	r30, r30
    30b4:	ff 1f       	adc	r31, r31
    30b6:	e8 0f       	add	r30, r24
    30b8:	f9 1f       	adc	r31, r25
    30ba:	71 83       	std	Z+1, r23	; 0x01
    30bc:	60 83       	st	Z, r22
    this->menuItems[this->activeItems].handler = handler;
    30be:	53 83       	std	Z+3, r21	; 0x03
    30c0:	42 83       	std	Z+2, r20	; 0x02

    this->activeItems++;
    30c2:	2f 5f       	subi	r18, 0xFF	; 255
    30c4:	3f 4f       	sbci	r19, 0xFF	; 255
    30c6:	fc 01       	movw	r30, r24
    30c8:	33 8b       	std	Z+19, r19	; 0x13
    30ca:	22 8b       	std	Z+18, r18	; 0x12
    30cc:	08 95       	ret

000030ce <_ZN2Ui15StateMenuHelper13handleButtonsE6ButtonN7Buttons9PressTypeE>:
}

bool StateMenuHelper::handleButtons(
    Button button,
    Buttons::PressType pressType
) {
    30ce:	1f 93       	push	r17
    30d0:	cf 93       	push	r28
    30d2:	df 93       	push	r29
    30d4:	ec 01       	movw	r28, r24
    if (button == Button::MODE && pressType == Buttons::PressType::LONG) {
    30d6:	62 30       	cpi	r22, 0x02	; 2
    30d8:	89 f4       	brne	.+34     	; 0x30fc <_ZN2Ui15StateMenuHelper13handleButtonsE6ButtonN7Buttons9PressTypeE+0x2e>
    30da:	41 30       	cpi	r20, 0x01	; 1
    30dc:	79 f4       	brne	.+30     	; 0x30fc <_ZN2Ui15StateMenuHelper13handleButtonsE6ButtonN7Buttons9PressTypeE+0x2e>
        this->visible = !this->visible;
    30de:	8e 89       	ldd	r24, Y+22	; 0x16
    30e0:	48 27       	eor	r20, r24
    30e2:	4e 8b       	std	Y+22, r20	; 0x16
        if (!this->visible)
    30e4:	41 11       	cpse	r20, r1
    30e6:	02 c0       	rjmp	.+4      	; 0x30ec <_ZN2Ui15StateMenuHelper13handleButtonsE6ButtonN7Buttons9PressTypeE+0x1e>
            Ui::needFullRedraw();
    30e8:	0e 94 c0 16 	call	0x2d80	; 0x2d80 <_ZN2Ui14needFullRedrawEv>

        if (this->visible) {
    30ec:	1e 89       	ldd	r17, Y+22	; 0x16
    30ee:	11 11       	cpse	r17, r1
    30f0:	02 c0       	rjmp	.+4      	; 0x30f6 <_ZN2Ui15StateMenuHelper13handleButtonsE6ButtonN7Buttons9PressTypeE+0x28>
            this->slideX = MENU_W;
        }

        return true;
    30f2:	11 e0       	ldi	r17, 0x01	; 1
    30f4:	33 c0       	rjmp	.+102    	; 0x315c <_ZN2Ui15StateMenuHelper13handleButtonsE6ButtonN7Buttons9PressTypeE+0x8e>
        this->visible = !this->visible;
        if (!this->visible)
            Ui::needFullRedraw();

        if (this->visible) {
            this->slideX = MENU_W;
    30f6:	80 e1       	ldi	r24, 0x10	; 16
    30f8:	8f 8b       	std	Y+23, r24	; 0x17
    30fa:	30 c0       	rjmp	.+96     	; 0x315c <_ZN2Ui15StateMenuHelper13handleButtonsE6ButtonN7Buttons9PressTypeE+0x8e>
    30fc:	1e 89       	ldd	r17, Y+22	; 0x16
        }

        return true;
    }

    if (!this->isVisible())
    30fe:	11 23       	and	r17, r17
    3100:	69 f1       	breq	.+90     	; 0x315c <_ZN2Ui15StateMenuHelper13handleButtonsE6ButtonN7Buttons9PressTypeE+0x8e>
        return false;

    switch (button) {
    3102:	61 30       	cpi	r22, 0x01	; 1
    3104:	f9 f0       	breq	.+62     	; 0x3144 <_ZN2Ui15StateMenuHelper13handleButtonsE6ButtonN7Buttons9PressTypeE+0x76>
    3106:	88 f0       	brcs	.+34     	; 0x312a <_ZN2Ui15StateMenuHelper13handleButtonsE6ButtonN7Buttons9PressTypeE+0x5c>
    3108:	62 30       	cpi	r22, 0x02	; 2
    310a:	41 f5       	brne	.+80     	; 0x315c <_ZN2Ui15StateMenuHelper13handleButtonsE6ButtonN7Buttons9PressTypeE+0x8e>
            if (++this->selectedItem >= this->activeItems)
                this->selectedItem = 0;
            break;

        case Button::MODE:
            this->menuItems[this->selectedItem].handler(this->state);
    310c:	ec 89       	ldd	r30, Y+20	; 0x14
    310e:	fd 89       	ldd	r31, Y+21	; 0x15
    3110:	ee 0f       	add	r30, r30
    3112:	ff 1f       	adc	r31, r31
    3114:	ee 0f       	add	r30, r30
    3116:	ff 1f       	adc	r31, r31
    3118:	ec 0f       	add	r30, r28
    311a:	fd 1f       	adc	r31, r29
    311c:	02 80       	ldd	r0, Z+2	; 0x02
    311e:	f3 81       	ldd	r31, Z+3	; 0x03
    3120:	e0 2d       	mov	r30, r0
    3122:	88 89       	ldd	r24, Y+16	; 0x10
    3124:	99 89       	ldd	r25, Y+17	; 0x11
    3126:	09 95       	icall
            break;
    3128:	19 c0       	rjmp	.+50     	; 0x315c <_ZN2Ui15StateMenuHelper13handleButtonsE6ButtonN7Buttons9PressTypeE+0x8e>
    if (!this->isVisible())
        return false;

    switch (button) {
        case Button::UP:
            if (--this->selectedItem < 0)
    312a:	8c 89       	ldd	r24, Y+20	; 0x14
    312c:	9d 89       	ldd	r25, Y+21	; 0x15
    312e:	01 97       	sbiw	r24, 0x01	; 1
    3130:	9d 8b       	std	Y+21, r25	; 0x15
    3132:	8c 8b       	std	Y+20, r24	; 0x14
    3134:	97 ff       	sbrs	r25, 7
    3136:	dd cf       	rjmp	.-70     	; 0x30f2 <_ZN2Ui15StateMenuHelper13handleButtonsE6ButtonN7Buttons9PressTypeE+0x24>
                this->selectedItem = this->activeItems - 1;
    3138:	8a 89       	ldd	r24, Y+18	; 0x12
    313a:	9b 89       	ldd	r25, Y+19	; 0x13
    313c:	01 97       	sbiw	r24, 0x01	; 1
    313e:	9d 8b       	std	Y+21, r25	; 0x15
    3140:	8c 8b       	std	Y+20, r24	; 0x14
    3142:	0c c0       	rjmp	.+24     	; 0x315c <_ZN2Ui15StateMenuHelper13handleButtonsE6ButtonN7Buttons9PressTypeE+0x8e>
            break;

        case Button::DOWN:
            if (++this->selectedItem >= this->activeItems)
    3144:	8c 89       	ldd	r24, Y+20	; 0x14
    3146:	9d 89       	ldd	r25, Y+21	; 0x15
    3148:	01 96       	adiw	r24, 0x01	; 1
    314a:	9d 8b       	std	Y+21, r25	; 0x15
    314c:	8c 8b       	std	Y+20, r24	; 0x14
    314e:	2a 89       	ldd	r18, Y+18	; 0x12
    3150:	3b 89       	ldd	r19, Y+19	; 0x13
    3152:	82 17       	cp	r24, r18
    3154:	93 07       	cpc	r25, r19
    3156:	6c f2       	brlt	.-102    	; 0x30f2 <_ZN2Ui15StateMenuHelper13handleButtonsE6ButtonN7Buttons9PressTypeE+0x24>
                this->selectedItem = 0;
    3158:	1d 8a       	std	Y+21, r1	; 0x15
    315a:	1c 8a       	std	Y+20, r1	; 0x14
            this->menuItems[this->selectedItem].handler(this->state);
            break;
    }

    return true;
}
    315c:	81 2f       	mov	r24, r17
    315e:	df 91       	pop	r29
    3160:	cf 91       	pop	r28
    3162:	1f 91       	pop	r17
    3164:	08 95       	ret

00003166 <_ZN2Ui15StateMenuHelper4drawEv>:

void StateMenuHelper::draw() {
    3166:	7f 92       	push	r7
    3168:	8f 92       	push	r8
    316a:	9f 92       	push	r9
    316c:	af 92       	push	r10
    316e:	bf 92       	push	r11
    3170:	cf 92       	push	r12
    3172:	df 92       	push	r13
    3174:	ef 92       	push	r14
    3176:	ff 92       	push	r15
    3178:	0f 93       	push	r16
    317a:	1f 93       	push	r17
    317c:	cf 93       	push	r28
    317e:	df 93       	push	r29
    3180:	ec 01       	movw	r28, r24
    if (!this->isVisible())
    3182:	8e 89       	ldd	r24, Y+22	; 0x16
    3184:	88 23       	and	r24, r24
    3186:	09 f4       	brne	.+2      	; 0x318a <_ZN2Ui15StateMenuHelper4drawEv+0x24>
    3188:	8b c0       	rjmp	.+278    	; 0x32a0 <_ZN2Ui15StateMenuHelper4drawEv+0x13a>
        return;

    if (MENU_X != MENU_TARGET_X) {
    318a:	8f 89       	ldd	r24, Y+23	; 0x17
    318c:	88 23       	and	r24, r24
    318e:	31 f0       	breq	.+12     	; 0x319c <_ZN2Ui15StateMenuHelper4drawEv+0x36>
        this->slideX -= 4;
    3190:	84 50       	subi	r24, 0x04	; 4
        if (this->slideX < 0)
    3192:	87 fd       	sbrc	r24, 7
    3194:	02 c0       	rjmp	.+4      	; 0x319a <_ZN2Ui15StateMenuHelper4drawEv+0x34>
void StateMenuHelper::draw() {
    if (!this->isVisible())
        return;

    if (MENU_X != MENU_TARGET_X) {
        this->slideX -= 4;
    3196:	8f 8b       	std	Y+23, r24	; 0x17
    3198:	01 c0       	rjmp	.+2      	; 0x319c <_ZN2Ui15StateMenuHelper4drawEv+0x36>
        if (this->slideX < 0)
            this->slideX = 0;
    319a:	1f 8a       	std	Y+23, r1	; 0x17
        MENU_X,
        0,
        MENU_W,
        MENU_H,
        BLACK
    );
    319c:	6f 89       	ldd	r22, Y+23	; 0x17
    319e:	06 2e       	mov	r0, r22
    31a0:	00 0c       	add	r0, r0
    31a2:	77 0b       	sbc	r23, r23
    31a4:	60 59       	subi	r22, 0x90	; 144
    31a6:	7f 4f       	sbci	r23, 0xFF	; 255
    31a8:	e1 2c       	mov	r14, r1
    31aa:	f1 2c       	mov	r15, r1
    31ac:	00 e4       	ldi	r16, 0x40	; 64
    31ae:	10 e0       	ldi	r17, 0x00	; 0
    31b0:	20 e1       	ldi	r18, 0x10	; 16
    31b2:	30 e0       	ldi	r19, 0x00	; 0
    31b4:	40 e0       	ldi	r20, 0x00	; 0
    31b6:	50 e0       	ldi	r21, 0x00	; 0
    31b8:	86 eb       	ldi	r24, 0xB6	; 182
    31ba:	92 e0       	ldi	r25, 0x02	; 2
    31bc:	0e 94 7d 1d 	call	0x3afa	; 0x3afa <_ZN12Adafruit_GFX8fillRectEiiiij>
    display.drawFastVLine(
        MENU_X - 1,
        0,
        MENU_H,
        WHITE
    );
    31c0:	6f 89       	ldd	r22, Y+23	; 0x17
    31c2:	06 2e       	mov	r0, r22
    31c4:	00 0c       	add	r0, r0
    31c6:	77 0b       	sbc	r23, r23
    31c8:	61 59       	subi	r22, 0x91	; 145
    31ca:	7f 4f       	sbci	r23, 0xFF	; 255
    31cc:	01 e0       	ldi	r16, 0x01	; 1
    31ce:	10 e0       	ldi	r17, 0x00	; 0
    31d0:	20 e4       	ldi	r18, 0x40	; 64
    31d2:	30 e0       	ldi	r19, 0x00	; 0
    31d4:	40 e0       	ldi	r20, 0x00	; 0
    31d6:	50 e0       	ldi	r21, 0x00	; 0
    31d8:	86 eb       	ldi	r24, 0xB6	; 182
    31da:	92 e0       	ldi	r25, 0x02	; 2
    31dc:	0e 94 2b 2c 	call	0x5856	; 0x5856 <_ZN16Adafruit_SSD130613drawFastVLineEiiij>

    const uint8_t yOffset =
        SCREEN_HEIGHT_MID - ((this->activeItems * MENU_ITEM_H) / 2);
    31e0:	8a 89       	ldd	r24, Y+18	; 0x12
    31e2:	9f e1       	ldi	r25, 0x1F	; 31
    31e4:	89 2e       	mov	r8, r25
    31e6:	28 e0       	ldi	r18, 0x08	; 8
    31e8:	82 9f       	mul	r24, r18
    31ea:	80 18       	sub	r8, r0
    31ec:	11 24       	eor	r1, r1

    for (uint8_t i = 0; i < this->activeItems; i++) {
    31ee:	71 2c       	mov	r7, r1
    31f0:	91 2c       	mov	r9, r1
    31f2:	a7 2c       	mov	r10, r7
    31f4:	b1 2c       	mov	r11, r1
    31f6:	8a 89       	ldd	r24, Y+18	; 0x12
    31f8:	9b 89       	ldd	r25, Y+19	; 0x13
    31fa:	a8 16       	cp	r10, r24
    31fc:	b9 06       	cpc	r11, r25
    31fe:	0c f0       	brlt	.+2      	; 0x3202 <_ZN2Ui15StateMenuHelper4drawEv+0x9c>
    3200:	4f c0       	rjmp	.+158    	; 0x32a0 <_ZN2Ui15StateMenuHelper4drawEv+0x13a>
        if (this->selectedItem == i) {
    3202:	8c 89       	ldd	r24, Y+20	; 0x14
    3204:	9d 89       	ldd	r25, Y+21	; 0x15
    3206:	a8 16       	cp	r10, r24
    3208:	b9 06       	cpc	r11, r25
    320a:	c9 f4       	brne	.+50     	; 0x323e <_ZN2Ui15StateMenuHelper4drawEv+0xd8>
                MENU_X,
                MENU_ITEM_H * i + yOffset,
                MENU_ITEM_W,
                MENU_ITEM_H,
                WHITE
            );
    320c:	a5 01       	movw	r20, r10
    320e:	64 e0       	ldi	r22, 0x04	; 4
    3210:	44 0f       	add	r20, r20
    3212:	55 1f       	adc	r21, r21
    3214:	6a 95       	dec	r22
    3216:	e1 f7       	brne	.-8      	; 0x3210 <_ZN2Ui15StateMenuHelper4drawEv+0xaa>
    3218:	48 0d       	add	r20, r8
    321a:	59 1d       	adc	r21, r9
    321c:	6f 89       	ldd	r22, Y+23	; 0x17
    321e:	06 2e       	mov	r0, r22
    3220:	00 0c       	add	r0, r0
    3222:	77 0b       	sbc	r23, r23
    3224:	60 59       	subi	r22, 0x90	; 144
    3226:	7f 4f       	sbci	r23, 0xFF	; 255
    3228:	ee 24       	eor	r14, r14
    322a:	e3 94       	inc	r14
    322c:	f1 2c       	mov	r15, r1
    322e:	00 e1       	ldi	r16, 0x10	; 16
    3230:	10 e0       	ldi	r17, 0x00	; 0
    3232:	20 e1       	ldi	r18, 0x10	; 16
    3234:	30 e0       	ldi	r19, 0x00	; 0
    3236:	86 eb       	ldi	r24, 0xB6	; 182
    3238:	92 e0       	ldi	r25, 0x02	; 2
    323a:	0e 94 7d 1d 	call	0x3afa	; 0x3afa <_ZN12Adafruit_GFX8fillRectEiiiij>
        }

        display.drawBitmap(
    323e:	cc 24       	eor	r12, r12
    3240:	c3 94       	inc	r12
    3242:	d1 2c       	mov	r13, r1
    3244:	8c 89       	ldd	r24, Y+20	; 0x14
    3246:	9d 89       	ldd	r25, Y+21	; 0x15
    3248:	8a 15       	cp	r24, r10
    324a:	9b 05       	cpc	r25, r11
    324c:	11 f4       	brne	.+4      	; 0x3252 <_ZN2Ui15StateMenuHelper4drawEv+0xec>
    324e:	c1 2c       	mov	r12, r1
    3250:	d1 2c       	mov	r13, r1
            MENU_X,
            MENU_ITEM_H * i + yOffset,
            this->menuItems[i].icon(this->state),
    3252:	f5 01       	movw	r30, r10
    3254:	ee 0f       	add	r30, r30
    3256:	ff 1f       	adc	r31, r31
    3258:	ee 0f       	add	r30, r30
    325a:	ff 1f       	adc	r31, r31
    325c:	ec 0f       	add	r30, r28
    325e:	fd 1f       	adc	r31, r29
                MENU_ITEM_H,
                WHITE
            );
        }

        display.drawBitmap(
    3260:	01 90       	ld	r0, Z+
    3262:	f0 81       	ld	r31, Z
    3264:	e0 2d       	mov	r30, r0
    3266:	88 89       	ldd	r24, Y+16	; 0x10
    3268:	99 89       	ldd	r25, Y+17	; 0x11
    326a:	09 95       	icall
            MENU_ITEM_H * i + yOffset,
            this->menuItems[i].icon(this->state),
            MENU_ITEM_W,
            MENU_ITEM_H,
            this->selectedItem == i ? BLACK : WHITE
        );
    326c:	a5 01       	movw	r20, r10
    326e:	24 e0       	ldi	r18, 0x04	; 4
    3270:	44 0f       	add	r20, r20
    3272:	55 1f       	adc	r21, r21
    3274:	2a 95       	dec	r18
    3276:	e1 f7       	brne	.-8      	; 0x3270 <_ZN2Ui15StateMenuHelper4drawEv+0x10a>
    3278:	48 0d       	add	r20, r8
    327a:	59 1d       	adc	r21, r9
    327c:	6f 89       	ldd	r22, Y+23	; 0x17
    327e:	06 2e       	mov	r0, r22
    3280:	00 0c       	add	r0, r0
    3282:	77 0b       	sbc	r23, r23
    3284:	60 59       	subi	r22, 0x90	; 144
    3286:	7f 4f       	sbci	r23, 0xFF	; 255
    3288:	30 e1       	ldi	r19, 0x10	; 16
    328a:	e3 2e       	mov	r14, r19
    328c:	f1 2c       	mov	r15, r1
    328e:	00 e1       	ldi	r16, 0x10	; 16
    3290:	10 e0       	ldi	r17, 0x00	; 0
    3292:	9c 01       	movw	r18, r24
    3294:	86 eb       	ldi	r24, 0xB6	; 182
    3296:	92 e0       	ldi	r25, 0x02	; 2
    3298:	0e 94 ae 22 	call	0x455c	; 0x455c <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij>
    );

    const uint8_t yOffset =
        SCREEN_HEIGHT_MID - ((this->activeItems * MENU_ITEM_H) / 2);

    for (uint8_t i = 0; i < this->activeItems; i++) {
    329c:	73 94       	inc	r7
    329e:	a9 cf       	rjmp	.-174    	; 0x31f2 <_ZN2Ui15StateMenuHelper4drawEv+0x8c>
            MENU_ITEM_W,
            MENU_ITEM_H,
            this->selectedItem == i ? BLACK : WHITE
        );
    }
}
    32a0:	df 91       	pop	r29
    32a2:	cf 91       	pop	r28
    32a4:	1f 91       	pop	r17
    32a6:	0f 91       	pop	r16
    32a8:	ff 90       	pop	r15
    32aa:	ef 90       	pop	r14
    32ac:	df 90       	pop	r13
    32ae:	cf 90       	pop	r12
    32b0:	bf 90       	pop	r11
    32b2:	af 90       	pop	r10
    32b4:	9f 90       	pop	r9
    32b6:	8f 90       	pop	r8
    32b8:	7f 90       	pop	r7
    32ba:	08 95       	ret

000032bc <initVariant>:
    32bc:	08 95       	ret

000032be <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    32be:	0e 94 d3 1a 	call	0x35a6	; 0x35a6 <init>

	initVariant();
    32c2:	0e 94 5e 19 	call	0x32bc	; 0x32bc <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    32c6:	0e 94 c0 0d 	call	0x1b80	; 0x1b80 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    32ca:	c0 e0       	ldi	r28, 0x00	; 0
    32cc:	d0 e0       	ldi	r29, 0x00	; 0
#endif
	
	setup();
    
	for (;;) {
		loop();
    32ce:	0e 94 e4 0d 	call	0x1bc8	; 0x1bc8 <loop>
		if (serialEventRun) serialEventRun();
    32d2:	20 97       	sbiw	r28, 0x00	; 0
    32d4:	e1 f3       	breq	.-8      	; 0x32ce <main+0x10>
    32d6:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    32da:	f9 cf       	rjmp	.-14     	; 0x32ce <main+0x10>

000032dc <_Znwj>:
    32dc:	0c 94 2c 32 	jmp	0x6458	; 0x6458 <malloc>

000032e0 <_ZN5Print17availableForWriteEv>:
size_t Print::println(unsigned char b, int base)
{
  size_t n = print(b, base);
  n += println();
  return n;
}
    32e0:	80 e0       	ldi	r24, 0x00	; 0
    32e2:	90 e0       	ldi	r25, 0x00	; 0
    32e4:	08 95       	ret

000032e6 <_ZN5Print5flushEv>:
    32e6:	08 95       	ret

000032e8 <_ZN5Print5writeEPKhj>:
    32e8:	cf 92       	push	r12
    32ea:	df 92       	push	r13
    32ec:	ef 92       	push	r14
    32ee:	ff 92       	push	r15
    32f0:	0f 93       	push	r16
    32f2:	1f 93       	push	r17
    32f4:	cf 93       	push	r28
    32f6:	df 93       	push	r29
    32f8:	6c 01       	movw	r12, r24
    32fa:	7a 01       	movw	r14, r20
    32fc:	8b 01       	movw	r16, r22
    32fe:	c0 e0       	ldi	r28, 0x00	; 0
    3300:	d0 e0       	ldi	r29, 0x00	; 0
    3302:	ce 15       	cp	r28, r14
    3304:	df 05       	cpc	r29, r15
    3306:	81 f0       	breq	.+32     	; 0x3328 <_ZN5Print5writeEPKhj+0x40>
    3308:	d8 01       	movw	r26, r16
    330a:	6d 91       	ld	r22, X+
    330c:	8d 01       	movw	r16, r26
    330e:	d6 01       	movw	r26, r12
    3310:	ed 91       	ld	r30, X+
    3312:	fc 91       	ld	r31, X
    3314:	01 90       	ld	r0, Z+
    3316:	f0 81       	ld	r31, Z
    3318:	e0 2d       	mov	r30, r0
    331a:	c6 01       	movw	r24, r12
    331c:	09 95       	icall
    331e:	89 2b       	or	r24, r25
    3320:	11 f0       	breq	.+4      	; 0x3326 <_ZN5Print5writeEPKhj+0x3e>
    3322:	21 96       	adiw	r28, 0x01	; 1
    3324:	ee cf       	rjmp	.-36     	; 0x3302 <_ZN5Print5writeEPKhj+0x1a>
    3326:	7e 01       	movw	r14, r28
    3328:	c7 01       	movw	r24, r14
    332a:	df 91       	pop	r29
    332c:	cf 91       	pop	r28
    332e:	1f 91       	pop	r17
    3330:	0f 91       	pop	r16
    3332:	ff 90       	pop	r15
    3334:	ef 90       	pop	r14
    3336:	df 90       	pop	r13
    3338:	cf 90       	pop	r12
    333a:	08 95       	ret

0000333c <_ZN5Print5writeEPKc>:
    333c:	61 15       	cp	r22, r1
    333e:	71 05       	cpc	r23, r1
    3340:	79 f0       	breq	.+30     	; 0x3360 <_ZN5Print5writeEPKc+0x24>
    3342:	fb 01       	movw	r30, r22
    3344:	01 90       	ld	r0, Z+
    3346:	00 20       	and	r0, r0
    3348:	e9 f7       	brne	.-6      	; 0x3344 <_ZN5Print5writeEPKc+0x8>
    334a:	31 97       	sbiw	r30, 0x01	; 1
    334c:	af 01       	movw	r20, r30
    334e:	46 1b       	sub	r20, r22
    3350:	57 0b       	sbc	r21, r23
    3352:	dc 01       	movw	r26, r24
    3354:	ed 91       	ld	r30, X+
    3356:	fc 91       	ld	r31, X
    3358:	02 80       	ldd	r0, Z+2	; 0x02
    335a:	f3 81       	ldd	r31, Z+3	; 0x03
    335c:	e0 2d       	mov	r30, r0
    335e:	09 94       	ijmp
    3360:	80 e0       	ldi	r24, 0x00	; 0
    3362:	90 e0       	ldi	r25, 0x00	; 0
    3364:	08 95       	ret

00003366 <_ZN5Print5printEPKc>:
    3366:	0c 94 9e 19 	jmp	0x333c	; 0x333c <_ZN5Print5writeEPKc>

0000336a <_ZN5Print11printNumberEmh>:
    336a:	8f 92       	push	r8
    336c:	9f 92       	push	r9
    336e:	af 92       	push	r10
    3370:	bf 92       	push	r11
    3372:	ef 92       	push	r14
    3374:	ff 92       	push	r15
    3376:	0f 93       	push	r16
    3378:	1f 93       	push	r17
    337a:	cf 93       	push	r28
    337c:	df 93       	push	r29
    337e:	cd b7       	in	r28, 0x3d	; 61
    3380:	de b7       	in	r29, 0x3e	; 62
    3382:	a1 97       	sbiw	r28, 0x21	; 33
    3384:	0f b6       	in	r0, 0x3f	; 63
    3386:	f8 94       	cli
    3388:	de bf       	out	0x3e, r29	; 62
    338a:	0f be       	out	0x3f, r0	; 63
    338c:	cd bf       	out	0x3d, r28	; 61
    338e:	7c 01       	movw	r14, r24
    3390:	fa 01       	movw	r30, r20
    3392:	cb 01       	movw	r24, r22
    3394:	19 a2       	std	Y+33, r1	; 0x21
    3396:	22 30       	cpi	r18, 0x02	; 2
    3398:	08 f4       	brcc	.+2      	; 0x339c <_ZN5Print11printNumberEmh+0x32>
    339a:	2a e0       	ldi	r18, 0x0A	; 10
    339c:	8e 01       	movw	r16, r28
    339e:	0f 5d       	subi	r16, 0xDF	; 223
    33a0:	1f 4f       	sbci	r17, 0xFF	; 255
    33a2:	82 2e       	mov	r8, r18
    33a4:	91 2c       	mov	r9, r1
    33a6:	a1 2c       	mov	r10, r1
    33a8:	b1 2c       	mov	r11, r1
    33aa:	bf 01       	movw	r22, r30
    33ac:	a5 01       	movw	r20, r10
    33ae:	94 01       	movw	r18, r8
    33b0:	0e 94 a8 31 	call	0x6350	; 0x6350 <__udivmodsi4>
    33b4:	f9 01       	movw	r30, r18
    33b6:	ca 01       	movw	r24, r20
    33b8:	01 50       	subi	r16, 0x01	; 1
    33ba:	11 09       	sbc	r17, r1
    33bc:	6a 30       	cpi	r22, 0x0A	; 10
    33be:	10 f4       	brcc	.+4      	; 0x33c4 <_ZN5Print11printNumberEmh+0x5a>
    33c0:	60 5d       	subi	r22, 0xD0	; 208
    33c2:	01 c0       	rjmp	.+2      	; 0x33c6 <_ZN5Print11printNumberEmh+0x5c>
    33c4:	69 5c       	subi	r22, 0xC9	; 201
    33c6:	d8 01       	movw	r26, r16
    33c8:	6c 93       	st	X, r22
    33ca:	23 2b       	or	r18, r19
    33cc:	24 2b       	or	r18, r20
    33ce:	25 2b       	or	r18, r21
    33d0:	61 f7       	brne	.-40     	; 0x33aa <_ZN5Print11printNumberEmh+0x40>
    33d2:	b8 01       	movw	r22, r16
    33d4:	c7 01       	movw	r24, r14
    33d6:	0e 94 9e 19 	call	0x333c	; 0x333c <_ZN5Print5writeEPKc>
    33da:	a1 96       	adiw	r28, 0x21	; 33
    33dc:	0f b6       	in	r0, 0x3f	; 63
    33de:	f8 94       	cli
    33e0:	de bf       	out	0x3e, r29	; 62
    33e2:	0f be       	out	0x3f, r0	; 63
    33e4:	cd bf       	out	0x3d, r28	; 61
    33e6:	df 91       	pop	r29
    33e8:	cf 91       	pop	r28
    33ea:	1f 91       	pop	r17
    33ec:	0f 91       	pop	r16
    33ee:	ff 90       	pop	r15
    33f0:	ef 90       	pop	r14
    33f2:	bf 90       	pop	r11
    33f4:	af 90       	pop	r10
    33f6:	9f 90       	pop	r9
    33f8:	8f 90       	pop	r8
    33fa:	08 95       	ret

000033fc <_ZN5Print5printEmi>:
    33fc:	21 15       	cp	r18, r1
    33fe:	31 05       	cpc	r19, r1
    3400:	41 f4       	brne	.+16     	; 0x3412 <_ZN5Print5printEmi+0x16>
    3402:	dc 01       	movw	r26, r24
    3404:	ed 91       	ld	r30, X+
    3406:	fc 91       	ld	r31, X
    3408:	01 90       	ld	r0, Z+
    340a:	f0 81       	ld	r31, Z
    340c:	e0 2d       	mov	r30, r0
    340e:	64 2f       	mov	r22, r20
    3410:	09 94       	ijmp
    3412:	0c 94 b5 19 	jmp	0x336a	; 0x336a <_ZN5Print11printNumberEmh>

00003416 <_ZN5Print5printEji>:
{
  return print((long) n, base);
}

size_t Print::print(unsigned int n, int base)
{
    3416:	9a 01       	movw	r18, r20
  return print((unsigned long) n, base);
    3418:	ab 01       	movw	r20, r22
    341a:	60 e0       	ldi	r22, 0x00	; 0
    341c:	70 e0       	ldi	r23, 0x00	; 0
    341e:	0c 94 fe 19 	jmp	0x33fc	; 0x33fc <_ZN5Print5printEmi>

00003422 <__vector_16>:
#if defined(TIM0_OVF_vect)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    3422:	1f 92       	push	r1
    3424:	0f 92       	push	r0
    3426:	0f b6       	in	r0, 0x3f	; 63
    3428:	0f 92       	push	r0
    342a:	11 24       	eor	r1, r1
    342c:	2f 93       	push	r18
    342e:	3f 93       	push	r19
    3430:	8f 93       	push	r24
    3432:	9f 93       	push	r25
    3434:	af 93       	push	r26
    3436:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    3438:	80 91 f7 02 	lds	r24, 0x02F7	; 0x8002f7 <timer0_millis>
    343c:	90 91 f8 02 	lds	r25, 0x02F8	; 0x8002f8 <timer0_millis+0x1>
    3440:	a0 91 f9 02 	lds	r26, 0x02F9	; 0x8002f9 <timer0_millis+0x2>
    3444:	b0 91 fa 02 	lds	r27, 0x02FA	; 0x8002fa <timer0_millis+0x3>
	unsigned char f = timer0_fract;
    3448:	30 91 f6 02 	lds	r19, 0x02F6	; 0x8002f6 <timer0_fract>

	m += MILLIS_INC;
	f += FRACT_INC;
    344c:	23 e0       	ldi	r18, 0x03	; 3
    344e:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
    3450:	2d 37       	cpi	r18, 0x7D	; 125
    3452:	20 f4       	brcc	.+8      	; 0x345c <__vector_16+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
    3454:	01 96       	adiw	r24, 0x01	; 1
    3456:	a1 1d       	adc	r26, r1
    3458:	b1 1d       	adc	r27, r1
    345a:	05 c0       	rjmp	.+10     	; 0x3466 <__vector_16+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
    345c:	26 e8       	ldi	r18, 0x86	; 134
    345e:	23 0f       	add	r18, r19
		m += 1;
    3460:	02 96       	adiw	r24, 0x02	; 2
    3462:	a1 1d       	adc	r26, r1
    3464:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    3466:	20 93 f6 02 	sts	0x02F6, r18	; 0x8002f6 <timer0_fract>
	timer0_millis = m;
    346a:	80 93 f7 02 	sts	0x02F7, r24	; 0x8002f7 <timer0_millis>
    346e:	90 93 f8 02 	sts	0x02F8, r25	; 0x8002f8 <timer0_millis+0x1>
    3472:	a0 93 f9 02 	sts	0x02F9, r26	; 0x8002f9 <timer0_millis+0x2>
    3476:	b0 93 fa 02 	sts	0x02FA, r27	; 0x8002fa <timer0_millis+0x3>
	timer0_overflow_count++;
    347a:	80 91 fb 02 	lds	r24, 0x02FB	; 0x8002fb <timer0_overflow_count>
    347e:	90 91 fc 02 	lds	r25, 0x02FC	; 0x8002fc <timer0_overflow_count+0x1>
    3482:	a0 91 fd 02 	lds	r26, 0x02FD	; 0x8002fd <timer0_overflow_count+0x2>
    3486:	b0 91 fe 02 	lds	r27, 0x02FE	; 0x8002fe <timer0_overflow_count+0x3>
    348a:	01 96       	adiw	r24, 0x01	; 1
    348c:	a1 1d       	adc	r26, r1
    348e:	b1 1d       	adc	r27, r1
    3490:	80 93 fb 02 	sts	0x02FB, r24	; 0x8002fb <timer0_overflow_count>
    3494:	90 93 fc 02 	sts	0x02FC, r25	; 0x8002fc <timer0_overflow_count+0x1>
    3498:	a0 93 fd 02 	sts	0x02FD, r26	; 0x8002fd <timer0_overflow_count+0x2>
    349c:	b0 93 fe 02 	sts	0x02FE, r27	; 0x8002fe <timer0_overflow_count+0x3>
}
    34a0:	bf 91       	pop	r27
    34a2:	af 91       	pop	r26
    34a4:	9f 91       	pop	r25
    34a6:	8f 91       	pop	r24
    34a8:	3f 91       	pop	r19
    34aa:	2f 91       	pop	r18
    34ac:	0f 90       	pop	r0
    34ae:	0f be       	out	0x3f, r0	; 63
    34b0:	0f 90       	pop	r0
    34b2:	1f 90       	pop	r1
    34b4:	18 95       	reti

000034b6 <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    34b6:	2f b7       	in	r18, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    34b8:	f8 94       	cli
	m = timer0_millis;
    34ba:	60 91 f7 02 	lds	r22, 0x02F7	; 0x8002f7 <timer0_millis>
    34be:	70 91 f8 02 	lds	r23, 0x02F8	; 0x8002f8 <timer0_millis+0x1>
    34c2:	80 91 f9 02 	lds	r24, 0x02F9	; 0x8002f9 <timer0_millis+0x2>
    34c6:	90 91 fa 02 	lds	r25, 0x02FA	; 0x8002fa <timer0_millis+0x3>
	SREG = oldSREG;
    34ca:	2f bf       	out	0x3f, r18	; 63

	return m;
}
    34cc:	08 95       	ret

000034ce <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    34ce:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
    34d0:	f8 94       	cli
	m = timer0_overflow_count;
    34d2:	80 91 fb 02 	lds	r24, 0x02FB	; 0x8002fb <timer0_overflow_count>
    34d6:	90 91 fc 02 	lds	r25, 0x02FC	; 0x8002fc <timer0_overflow_count+0x1>
    34da:	a0 91 fd 02 	lds	r26, 0x02FD	; 0x8002fd <timer0_overflow_count+0x2>
    34de:	b0 91 fe 02 	lds	r27, 0x02FE	; 0x8002fe <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
    34e2:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    34e4:	a8 9b       	sbis	0x15, 0	; 21
    34e6:	05 c0       	rjmp	.+10     	; 0x34f2 <micros+0x24>
    34e8:	2f 3f       	cpi	r18, 0xFF	; 255
    34ea:	19 f0       	breq	.+6      	; 0x34f2 <micros+0x24>
		m++;
    34ec:	01 96       	adiw	r24, 0x01	; 1
    34ee:	a1 1d       	adc	r26, r1
    34f0:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    34f2:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    34f4:	ba 2f       	mov	r27, r26
    34f6:	a9 2f       	mov	r26, r25
    34f8:	98 2f       	mov	r25, r24
    34fa:	88 27       	eor	r24, r24
    34fc:	82 0f       	add	r24, r18
    34fe:	91 1d       	adc	r25, r1
    3500:	a1 1d       	adc	r26, r1
    3502:	b1 1d       	adc	r27, r1
    3504:	bc 01       	movw	r22, r24
    3506:	cd 01       	movw	r24, r26
    3508:	42 e0       	ldi	r20, 0x02	; 2
    350a:	66 0f       	add	r22, r22
    350c:	77 1f       	adc	r23, r23
    350e:	88 1f       	adc	r24, r24
    3510:	99 1f       	adc	r25, r25
    3512:	4a 95       	dec	r20
    3514:	d1 f7       	brne	.-12     	; 0x350a <micros+0x3c>
}
    3516:	08 95       	ret

00003518 <delay>:

void delay(unsigned long ms)
{
    3518:	8f 92       	push	r8
    351a:	9f 92       	push	r9
    351c:	af 92       	push	r10
    351e:	bf 92       	push	r11
    3520:	cf 92       	push	r12
    3522:	df 92       	push	r13
    3524:	ef 92       	push	r14
    3526:	ff 92       	push	r15
    3528:	6b 01       	movw	r12, r22
    352a:	7c 01       	movw	r14, r24
	uint32_t start = micros();
    352c:	0e 94 67 1a 	call	0x34ce	; 0x34ce <micros>
    3530:	4b 01       	movw	r8, r22
    3532:	5c 01       	movw	r10, r24

	while (ms > 0) {
    3534:	c1 14       	cp	r12, r1
    3536:	d1 04       	cpc	r13, r1
    3538:	e1 04       	cpc	r14, r1
    353a:	f1 04       	cpc	r15, r1
    353c:	01 f1       	breq	.+64     	; 0x357e <delay+0x66>
		yield();
    353e:	0e 94 a1 2e 	call	0x5d42	; 0x5d42 <yield>
		while ( ms > 0 && (micros() - start) >= 1000) {
    3542:	0e 94 67 1a 	call	0x34ce	; 0x34ce <micros>
    3546:	dc 01       	movw	r26, r24
    3548:	cb 01       	movw	r24, r22
    354a:	88 19       	sub	r24, r8
    354c:	99 09       	sbc	r25, r9
    354e:	aa 09       	sbc	r26, r10
    3550:	bb 09       	sbc	r27, r11
    3552:	88 3e       	cpi	r24, 0xE8	; 232
    3554:	93 40       	sbci	r25, 0x03	; 3
    3556:	a1 05       	cpc	r26, r1
    3558:	b1 05       	cpc	r27, r1
    355a:	60 f3       	brcs	.-40     	; 0x3534 <delay+0x1c>
			ms--;
    355c:	21 e0       	ldi	r18, 0x01	; 1
    355e:	c2 1a       	sub	r12, r18
    3560:	d1 08       	sbc	r13, r1
    3562:	e1 08       	sbc	r14, r1
    3564:	f1 08       	sbc	r15, r1
			start += 1000;
    3566:	88 ee       	ldi	r24, 0xE8	; 232
    3568:	88 0e       	add	r8, r24
    356a:	83 e0       	ldi	r24, 0x03	; 3
    356c:	98 1e       	adc	r9, r24
    356e:	a1 1c       	adc	r10, r1
    3570:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
    3572:	c1 14       	cp	r12, r1
    3574:	d1 04       	cpc	r13, r1
    3576:	e1 04       	cpc	r14, r1
    3578:	f1 04       	cpc	r15, r1
    357a:	19 f7       	brne	.-58     	; 0x3542 <delay+0x2a>
    357c:	db cf       	rjmp	.-74     	; 0x3534 <delay+0x1c>
			ms--;
			start += 1000;
		}
	}
}
    357e:	ff 90       	pop	r15
    3580:	ef 90       	pop	r14
    3582:	df 90       	pop	r13
    3584:	cf 90       	pop	r12
    3586:	bf 90       	pop	r11
    3588:	af 90       	pop	r10
    358a:	9f 90       	pop	r9
    358c:	8f 90       	pop	r8
    358e:	08 95       	ret

00003590 <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
    3590:	82 30       	cpi	r24, 0x02	; 2
    3592:	91 05       	cpc	r25, r1
    3594:	38 f0       	brcs	.+14     	; 0x35a4 <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
    3596:	88 0f       	add	r24, r24
    3598:	99 1f       	adc	r25, r25
    359a:	88 0f       	add	r24, r24
    359c:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
    359e:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
    35a0:	01 97       	sbiw	r24, 0x01	; 1
    35a2:	f1 f7       	brne	.-4      	; 0x35a0 <delayMicroseconds+0x10>
    35a4:	08 95       	ret

000035a6 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    35a6:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    35a8:	84 b5       	in	r24, 0x24	; 36
    35aa:	82 60       	ori	r24, 0x02	; 2
    35ac:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    35ae:	84 b5       	in	r24, 0x24	; 36
    35b0:	81 60       	ori	r24, 0x01	; 1
    35b2:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    35b4:	85 b5       	in	r24, 0x25	; 37
    35b6:	82 60       	ori	r24, 0x02	; 2
    35b8:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    35ba:	85 b5       	in	r24, 0x25	; 37
    35bc:	81 60       	ori	r24, 0x01	; 1
    35be:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    35c0:	ee e6       	ldi	r30, 0x6E	; 110
    35c2:	f0 e0       	ldi	r31, 0x00	; 0
    35c4:	80 81       	ld	r24, Z
    35c6:	81 60       	ori	r24, 0x01	; 1
    35c8:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    35ca:	e1 e8       	ldi	r30, 0x81	; 129
    35cc:	f0 e0       	ldi	r31, 0x00	; 0
    35ce:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    35d0:	80 81       	ld	r24, Z
    35d2:	82 60       	ori	r24, 0x02	; 2
    35d4:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    35d6:	80 81       	ld	r24, Z
    35d8:	81 60       	ori	r24, 0x01	; 1
    35da:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    35dc:	e0 e8       	ldi	r30, 0x80	; 128
    35de:	f0 e0       	ldi	r31, 0x00	; 0
    35e0:	80 81       	ld	r24, Z
    35e2:	81 60       	ori	r24, 0x01	; 1
    35e4:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    35e6:	e1 eb       	ldi	r30, 0xB1	; 177
    35e8:	f0 e0       	ldi	r31, 0x00	; 0
    35ea:	80 81       	ld	r24, Z
    35ec:	84 60       	ori	r24, 0x04	; 4
    35ee:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    35f0:	e0 eb       	ldi	r30, 0xB0	; 176
    35f2:	f0 e0       	ldi	r31, 0x00	; 0
    35f4:	80 81       	ld	r24, Z
    35f6:	81 60       	ori	r24, 0x01	; 1
    35f8:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    35fa:	ea e7       	ldi	r30, 0x7A	; 122
    35fc:	f0 e0       	ldi	r31, 0x00	; 0
    35fe:	80 81       	ld	r24, Z
    3600:	84 60       	ori	r24, 0x04	; 4
    3602:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    3604:	80 81       	ld	r24, Z
    3606:	82 60       	ori	r24, 0x02	; 2
    3608:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    360a:	80 81       	ld	r24, Z
    360c:	81 60       	ori	r24, 0x01	; 1
    360e:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    3610:	80 81       	ld	r24, Z
    3612:	80 68       	ori	r24, 0x80	; 128
    3614:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    3616:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    361a:	08 95       	ret

0000361c <analogRead>:
#elif defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
#elif defined(__AVR_ATmega1284__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega644__) || defined(__AVR_ATmega644A__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__)
	if (pin >= 24) pin -= 24; // allow for channel or pin numbers
#else
	if (pin >= 14) pin -= 14; // allow for channel or pin numbers
    361c:	8e 30       	cpi	r24, 0x0E	; 14
    361e:	08 f0       	brcs	.+2      	; 0x3622 <analogRead+0x6>
    3620:	8e 50       	subi	r24, 0x0E	; 14
	// to 0 (the default).
#if defined(ADMUX)
#if defined(__AVR_ATtiny25__) || defined(__AVR_ATtiny45__) || defined(__AVR_ATtiny85__)
	ADMUX = (analog_reference << 4) | (pin & 0x07);
#else
	ADMUX = (analog_reference << 6) | (pin & 0x07);
    3622:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <analog_reference>
    3626:	90 e4       	ldi	r25, 0x40	; 64
    3628:	29 9f       	mul	r18, r25
    362a:	90 01       	movw	r18, r0
    362c:	11 24       	eor	r1, r1
    362e:	87 70       	andi	r24, 0x07	; 7
    3630:	82 2b       	or	r24, r18
    3632:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
    3636:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    363a:	80 64       	ori	r24, 0x40	; 64
    363c:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
    3640:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    3644:	86 fd       	sbrc	r24, 6
    3646:	fc cf       	rjmp	.-8      	; 0x3640 <analogRead+0x24>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
    3648:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
	high = ADCH;
    364c:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
	low  = 0;
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
    3650:	90 e0       	ldi	r25, 0x00	; 0
}
    3652:	92 2b       	or	r25, r18
    3654:	08 95       	ret

00003656 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    3656:	83 30       	cpi	r24, 0x03	; 3
    3658:	81 f0       	breq	.+32     	; 0x367a <turnOffPWM+0x24>
    365a:	28 f4       	brcc	.+10     	; 0x3666 <turnOffPWM+0x10>
    365c:	81 30       	cpi	r24, 0x01	; 1
    365e:	99 f0       	breq	.+38     	; 0x3686 <turnOffPWM+0x30>
    3660:	82 30       	cpi	r24, 0x02	; 2
    3662:	a1 f0       	breq	.+40     	; 0x368c <turnOffPWM+0x36>
    3664:	08 95       	ret
    3666:	87 30       	cpi	r24, 0x07	; 7
    3668:	a9 f0       	breq	.+42     	; 0x3694 <turnOffPWM+0x3e>
    366a:	88 30       	cpi	r24, 0x08	; 8
    366c:	b9 f0       	breq	.+46     	; 0x369c <turnOffPWM+0x46>
    366e:	84 30       	cpi	r24, 0x04	; 4
    3670:	d1 f4       	brne	.+52     	; 0x36a6 <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    3672:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    3676:	8f 7d       	andi	r24, 0xDF	; 223
    3678:	03 c0       	rjmp	.+6      	; 0x3680 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    367a:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    367e:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    3680:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    3684:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    3686:	84 b5       	in	r24, 0x24	; 36
    3688:	8f 77       	andi	r24, 0x7F	; 127
    368a:	02 c0       	rjmp	.+4      	; 0x3690 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    368c:	84 b5       	in	r24, 0x24	; 36
    368e:	8f 7d       	andi	r24, 0xDF	; 223
    3690:	84 bd       	out	0x24, r24	; 36
    3692:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    3694:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    3698:	8f 77       	andi	r24, 0x7F	; 127
    369a:	03 c0       	rjmp	.+6      	; 0x36a2 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    369c:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    36a0:	8f 7d       	andi	r24, 0xDF	; 223
    36a2:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    36a6:	08 95       	ret

000036a8 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    36a8:	cf 93       	push	r28
    36aa:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    36ac:	90 e0       	ldi	r25, 0x00	; 0
    36ae:	fc 01       	movw	r30, r24
    36b0:	e3 54       	subi	r30, 0x43	; 67
    36b2:	f7 4f       	sbci	r31, 0xF7	; 247
    36b4:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    36b6:	fc 01       	movw	r30, r24
    36b8:	ef 52       	subi	r30, 0x2F	; 47
    36ba:	f7 4f       	sbci	r31, 0xF7	; 247
    36bc:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    36be:	88 23       	and	r24, r24
    36c0:	61 f1       	breq	.+88     	; 0x371a <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    36c2:	90 e0       	ldi	r25, 0x00	; 0
    36c4:	88 0f       	add	r24, r24
    36c6:	99 1f       	adc	r25, r25
    36c8:	fc 01       	movw	r30, r24
    36ca:	e7 50       	subi	r30, 0x07	; 7
    36cc:	f7 4f       	sbci	r31, 0xF7	; 247
    36ce:	c5 91       	lpm	r28, Z+
    36d0:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    36d2:	fc 01       	movw	r30, r24
    36d4:	e1 51       	subi	r30, 0x11	; 17
    36d6:	f7 4f       	sbci	r31, 0xF7	; 247
    36d8:	a5 91       	lpm	r26, Z+
    36da:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    36dc:	61 11       	cpse	r22, r1
    36de:	09 c0       	rjmp	.+18     	; 0x36f2 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    36e0:	9f b7       	in	r25, 0x3f	; 63
                cli();
    36e2:	f8 94       	cli
		*reg &= ~bit;
    36e4:	88 81       	ld	r24, Y
    36e6:	20 95       	com	r18
    36e8:	82 23       	and	r24, r18
    36ea:	88 83       	st	Y, r24
		*out &= ~bit;
    36ec:	ec 91       	ld	r30, X
    36ee:	2e 23       	and	r18, r30
    36f0:	0b c0       	rjmp	.+22     	; 0x3708 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    36f2:	62 30       	cpi	r22, 0x02	; 2
    36f4:	61 f4       	brne	.+24     	; 0x370e <pinMode+0x66>
		uint8_t oldSREG = SREG;
    36f6:	9f b7       	in	r25, 0x3f	; 63
                cli();
    36f8:	f8 94       	cli
		*reg &= ~bit;
    36fa:	88 81       	ld	r24, Y
    36fc:	32 2f       	mov	r19, r18
    36fe:	30 95       	com	r19
    3700:	83 23       	and	r24, r19
    3702:	88 83       	st	Y, r24
		*out |= bit;
    3704:	ec 91       	ld	r30, X
    3706:	2e 2b       	or	r18, r30
    3708:	2c 93       	st	X, r18
		SREG = oldSREG;
    370a:	9f bf       	out	0x3f, r25	; 63
    370c:	06 c0       	rjmp	.+12     	; 0x371a <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    370e:	8f b7       	in	r24, 0x3f	; 63
                cli();
    3710:	f8 94       	cli
		*reg |= bit;
    3712:	e8 81       	ld	r30, Y
    3714:	2e 2b       	or	r18, r30
    3716:	28 83       	st	Y, r18
		SREG = oldSREG;
    3718:	8f bf       	out	0x3f, r24	; 63
	}
}
    371a:	df 91       	pop	r29
    371c:	cf 91       	pop	r28
    371e:	08 95       	ret

00003720 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    3720:	1f 93       	push	r17
    3722:	cf 93       	push	r28
    3724:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    3726:	28 2f       	mov	r18, r24
    3728:	30 e0       	ldi	r19, 0x00	; 0
    372a:	f9 01       	movw	r30, r18
    372c:	e7 55       	subi	r30, 0x57	; 87
    372e:	f7 4f       	sbci	r31, 0xF7	; 247
    3730:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    3732:	f9 01       	movw	r30, r18
    3734:	e3 54       	subi	r30, 0x43	; 67
    3736:	f7 4f       	sbci	r31, 0xF7	; 247
    3738:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    373a:	f9 01       	movw	r30, r18
    373c:	ef 52       	subi	r30, 0x2F	; 47
    373e:	f7 4f       	sbci	r31, 0xF7	; 247
    3740:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    3742:	cc 23       	and	r28, r28
    3744:	c1 f0       	breq	.+48     	; 0x3776 <digitalWrite+0x56>
    3746:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    3748:	81 11       	cpse	r24, r1
    374a:	0e 94 2b 1b 	call	0x3656	; 0x3656 <turnOffPWM>

	out = portOutputRegister(port);
    374e:	ec 2f       	mov	r30, r28
    3750:	f0 e0       	ldi	r31, 0x00	; 0
    3752:	ee 0f       	add	r30, r30
    3754:	ff 1f       	adc	r31, r31
    3756:	e1 51       	subi	r30, 0x11	; 17
    3758:	f7 4f       	sbci	r31, 0xF7	; 247
    375a:	a5 91       	lpm	r26, Z+
    375c:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    375e:	9f b7       	in	r25, 0x3f	; 63
	cli();
    3760:	f8 94       	cli

	if (val == LOW) {
    3762:	11 11       	cpse	r17, r1
    3764:	04 c0       	rjmp	.+8      	; 0x376e <digitalWrite+0x4e>
		*out &= ~bit;
    3766:	8c 91       	ld	r24, X
    3768:	d0 95       	com	r29
    376a:	d8 23       	and	r29, r24
    376c:	02 c0       	rjmp	.+4      	; 0x3772 <digitalWrite+0x52>
	} else {
		*out |= bit;
    376e:	ec 91       	ld	r30, X
    3770:	de 2b       	or	r29, r30
    3772:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    3774:	9f bf       	out	0x3f, r25	; 63
}
    3776:	df 91       	pop	r29
    3778:	cf 91       	pop	r28
    377a:	1f 91       	pop	r17
    377c:	08 95       	ret

0000377e <digitalRead>:

int digitalRead(uint8_t pin)
{
    377e:	cf 93       	push	r28
    3780:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    3782:	28 2f       	mov	r18, r24
    3784:	30 e0       	ldi	r19, 0x00	; 0
    3786:	f9 01       	movw	r30, r18
    3788:	e7 55       	subi	r30, 0x57	; 87
    378a:	f7 4f       	sbci	r31, 0xF7	; 247
    378c:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    378e:	f9 01       	movw	r30, r18
    3790:	e3 54       	subi	r30, 0x43	; 67
    3792:	f7 4f       	sbci	r31, 0xF7	; 247
    3794:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    3796:	f9 01       	movw	r30, r18
    3798:	ef 52       	subi	r30, 0x2F	; 47
    379a:	f7 4f       	sbci	r31, 0xF7	; 247
    379c:	c4 91       	lpm	r28, Z

	if (port == NOT_A_PIN) return LOW;
    379e:	cc 23       	and	r28, r28
    37a0:	91 f0       	breq	.+36     	; 0x37c6 <digitalRead+0x48>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    37a2:	81 11       	cpse	r24, r1
    37a4:	0e 94 2b 1b 	call	0x3656	; 0x3656 <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
    37a8:	ec 2f       	mov	r30, r28
    37aa:	f0 e0       	ldi	r31, 0x00	; 0
    37ac:	ee 0f       	add	r30, r30
    37ae:	ff 1f       	adc	r31, r31
    37b0:	eb 51       	subi	r30, 0x1B	; 27
    37b2:	f7 4f       	sbci	r31, 0xF7	; 247
    37b4:	a5 91       	lpm	r26, Z+
    37b6:	b4 91       	lpm	r27, Z
    37b8:	ec 91       	ld	r30, X
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
    37ba:	ed 23       	and	r30, r29
    37bc:	81 e0       	ldi	r24, 0x01	; 1
    37be:	90 e0       	ldi	r25, 0x00	; 0
    37c0:	21 f4       	brne	.+8      	; 0x37ca <digitalRead+0x4c>
    37c2:	80 e0       	ldi	r24, 0x00	; 0
    37c4:	02 c0       	rjmp	.+4      	; 0x37ca <digitalRead+0x4c>
    37c6:	80 e0       	ldi	r24, 0x00	; 0
    37c8:	90 e0       	ldi	r25, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
    37ca:	df 91       	pop	r29
    37cc:	cf 91       	pop	r28
    37ce:	08 95       	ret

000037d0 <_Z3maplllll>:
  long diff = howbig - howsmall;
  return random(diff) + howsmall;
}

long map(long x, long in_min, long in_max, long out_min, long out_max)
{
    37d0:	4f 92       	push	r4
    37d2:	5f 92       	push	r5
    37d4:	6f 92       	push	r6
    37d6:	7f 92       	push	r7
    37d8:	af 92       	push	r10
    37da:	bf 92       	push	r11
    37dc:	cf 92       	push	r12
    37de:	df 92       	push	r13
    37e0:	ef 92       	push	r14
    37e2:	ff 92       	push	r15
    37e4:	0f 93       	push	r16
    37e6:	1f 93       	push	r17
    37e8:	cf 93       	push	r28
    37ea:	df 93       	push	r29
    37ec:	cd b7       	in	r28, 0x3d	; 61
    37ee:	de b7       	in	r29, 0x3e	; 62
    37f0:	29 01       	movw	r4, r18
    37f2:	3a 01       	movw	r6, r20
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    37f4:	9b 01       	movw	r18, r22
    37f6:	ac 01       	movw	r20, r24
    37f8:	24 19       	sub	r18, r4
    37fa:	35 09       	sbc	r19, r5
    37fc:	46 09       	sbc	r20, r6
    37fe:	57 09       	sbc	r21, r7
    3800:	89 89       	ldd	r24, Y+17	; 0x11
    3802:	9a 89       	ldd	r25, Y+18	; 0x12
    3804:	ab 89       	ldd	r26, Y+19	; 0x13
    3806:	bc 89       	ldd	r27, Y+20	; 0x14
    3808:	bc 01       	movw	r22, r24
    380a:	cd 01       	movw	r24, r26
    380c:	6a 19       	sub	r22, r10
    380e:	7b 09       	sbc	r23, r11
    3810:	8c 09       	sbc	r24, r12
    3812:	9d 09       	sbc	r25, r13
    3814:	0e 94 84 31 	call	0x6308	; 0x6308 <__mulsi3>
    3818:	a8 01       	movw	r20, r16
    381a:	97 01       	movw	r18, r14
    381c:	24 19       	sub	r18, r4
    381e:	35 09       	sbc	r19, r5
    3820:	46 09       	sbc	r20, r6
    3822:	57 09       	sbc	r21, r7
    3824:	0e 94 ca 31 	call	0x6394	; 0x6394 <__divmodsi4>
    3828:	ca 01       	movw	r24, r20
    382a:	b9 01       	movw	r22, r18
    382c:	6a 0d       	add	r22, r10
    382e:	7b 1d       	adc	r23, r11
    3830:	8c 1d       	adc	r24, r12
    3832:	9d 1d       	adc	r25, r13
}
    3834:	df 91       	pop	r29
    3836:	cf 91       	pop	r28
    3838:	1f 91       	pop	r17
    383a:	0f 91       	pop	r16
    383c:	ff 90       	pop	r15
    383e:	ef 90       	pop	r14
    3840:	df 90       	pop	r13
    3842:	cf 90       	pop	r12
    3844:	bf 90       	pop	r11
    3846:	af 90       	pop	r10
    3848:	7f 90       	pop	r7
    384a:	6f 90       	pop	r6
    384c:	5f 90       	pop	r5
    384e:	4f 90       	pop	r4
    3850:	08 95       	ret

00003852 <_ZN12Adafruit_GFX9writeLineEiiiij>:
*/
/**************************************************************************/
void Adafruit_GFX::drawChar(int16_t x, int16_t y, unsigned char c,
                            uint16_t color, uint16_t bg, uint8_t size) {
  drawChar(x, y, c, color, bg, size, size);
}
    3852:	2f 92       	push	r2
    3854:	3f 92       	push	r3
    3856:	4f 92       	push	r4
    3858:	5f 92       	push	r5
    385a:	6f 92       	push	r6
    385c:	7f 92       	push	r7
    385e:	8f 92       	push	r8
    3860:	9f 92       	push	r9
    3862:	af 92       	push	r10
    3864:	bf 92       	push	r11
    3866:	cf 92       	push	r12
    3868:	df 92       	push	r13
    386a:	ef 92       	push	r14
    386c:	ff 92       	push	r15
    386e:	0f 93       	push	r16
    3870:	1f 93       	push	r17
    3872:	cf 93       	push	r28
    3874:	df 93       	push	r29
    3876:	00 d0       	rcall	.+0      	; 0x3878 <_ZN12Adafruit_GFX9writeLineEiiiij+0x26>
    3878:	00 d0       	rcall	.+0      	; 0x387a <_ZN12Adafruit_GFX9writeLineEiiiij+0x28>
    387a:	00 d0       	rcall	.+0      	; 0x387c <_ZN12Adafruit_GFX9writeLineEiiiij+0x2a>
    387c:	cd b7       	in	r28, 0x3d	; 61
    387e:	de b7       	in	r29, 0x3e	; 62
    3880:	2c 01       	movw	r4, r24
    3882:	7e 83       	std	Y+6, r23	; 0x06
    3884:	6d 83       	std	Y+5, r22	; 0x05
    3886:	6a 01       	movw	r12, r20
    3888:	59 01       	movw	r10, r18
    388a:	c8 01       	movw	r24, r16
    388c:	fc 82       	std	Y+4, r15	; 0x04
    388e:	eb 82       	std	Y+3, r14	; 0x03
    3890:	48 01       	movw	r8, r16
    3892:	84 1a       	sub	r8, r20
    3894:	95 0a       	sbc	r9, r21
    3896:	97 fe       	sbrs	r9, 7
    3898:	03 c0       	rjmp	.+6      	; 0x38a0 <_ZN12Adafruit_GFX9writeLineEiiiij+0x4e>
    389a:	91 94       	neg	r9
    389c:	81 94       	neg	r8
    389e:	91 08       	sbc	r9, r1
    38a0:	35 01       	movw	r6, r10
    38a2:	2d 81       	ldd	r18, Y+5	; 0x05
    38a4:	3e 81       	ldd	r19, Y+6	; 0x06
    38a6:	62 1a       	sub	r6, r18
    38a8:	73 0a       	sbc	r7, r19
    38aa:	77 fe       	sbrs	r7, 7
    38ac:	03 c0       	rjmp	.+6      	; 0x38b4 <_ZN12Adafruit_GFX9writeLineEiiiij+0x62>
    38ae:	71 94       	neg	r7
    38b0:	61 94       	neg	r6
    38b2:	71 08       	sbc	r7, r1
    38b4:	68 14       	cp	r6, r8
    38b6:	79 04       	cpc	r7, r9
    38b8:	5c f4       	brge	.+22     	; 0x38d0 <_ZN12Adafruit_GFX9writeLineEiiiij+0x7e>
    38ba:	3a 2d       	mov	r19, r10
    38bc:	2b 2d       	mov	r18, r11
    38be:	5c 01       	movw	r10, r24
    38c0:	83 2f       	mov	r24, r19
    38c2:	92 2f       	mov	r25, r18
    38c4:	3d 81       	ldd	r19, Y+5	; 0x05
    38c6:	2e 81       	ldd	r18, Y+6	; 0x06
    38c8:	de 82       	std	Y+6, r13	; 0x06
    38ca:	cd 82       	std	Y+5, r12	; 0x05
    38cc:	c3 2e       	mov	r12, r19
    38ce:	d2 2e       	mov	r13, r18
    38d0:	ad 81       	ldd	r26, Y+5	; 0x05
    38d2:	be 81       	ldd	r27, Y+6	; 0x06
    38d4:	aa 16       	cp	r10, r26
    38d6:	bb 06       	cpc	r11, r27
    38d8:	5c f4       	brge	.+22     	; 0x38f0 <_ZN12Adafruit_GFX9writeLineEiiiij+0x9e>
    38da:	3c 2d       	mov	r19, r12
    38dc:	2d 2d       	mov	r18, r13
    38de:	6c 01       	movw	r12, r24
    38e0:	83 2f       	mov	r24, r19
    38e2:	92 2f       	mov	r25, r18
    38e4:	3d 81       	ldd	r19, Y+5	; 0x05
    38e6:	2e 81       	ldd	r18, Y+6	; 0x06
    38e8:	be 82       	std	Y+6, r11	; 0x06
    38ea:	ad 82       	std	Y+5, r10	; 0x05
    38ec:	a3 2e       	mov	r10, r19
    38ee:	b2 2e       	mov	r11, r18
    38f0:	85 01       	movw	r16, r10
    38f2:	2d 81       	ldd	r18, Y+5	; 0x05
    38f4:	3e 81       	ldd	r19, Y+6	; 0x06
    38f6:	02 1b       	sub	r16, r18
    38f8:	13 0b       	sbc	r17, r19
    38fa:	1c 01       	movw	r2, r24
    38fc:	2c 18       	sub	r2, r12
    38fe:	3d 08       	sbc	r3, r13
    3900:	37 fe       	sbrs	r3, 7
    3902:	03 c0       	rjmp	.+6      	; 0x390a <_ZN12Adafruit_GFX9writeLineEiiiij+0xb8>
    3904:	31 94       	neg	r3
    3906:	21 94       	neg	r2
    3908:	31 08       	sbc	r3, r1
    390a:	78 01       	movw	r14, r16
    390c:	17 ff       	sbrs	r17, 7
    390e:	03 c0       	rjmp	.+6      	; 0x3916 <_ZN12Adafruit_GFX9writeLineEiiiij+0xc4>
    3910:	3f ef       	ldi	r19, 0xFF	; 255
    3912:	e3 1a       	sub	r14, r19
    3914:	f3 0a       	sbc	r15, r19
    3916:	f5 94       	asr	r15
    3918:	e7 94       	ror	r14
    391a:	c8 16       	cp	r12, r24
    391c:	d9 06       	cpc	r13, r25
    391e:	2c f0       	brlt	.+10     	; 0x392a <_ZN12Adafruit_GFX9writeLineEiiiij+0xd8>
    3920:	8f ef       	ldi	r24, 0xFF	; 255
    3922:	9f ef       	ldi	r25, 0xFF	; 255
    3924:	9a 83       	std	Y+2, r25	; 0x02
    3926:	89 83       	std	Y+1, r24	; 0x01
    3928:	04 c0       	rjmp	.+8      	; 0x3932 <_ZN12Adafruit_GFX9writeLineEiiiij+0xe0>
    392a:	a1 e0       	ldi	r26, 0x01	; 1
    392c:	b0 e0       	ldi	r27, 0x00	; 0
    392e:	ba 83       	std	Y+2, r27	; 0x02
    3930:	a9 83       	std	Y+1, r26	; 0x01
    3932:	2d 81       	ldd	r18, Y+5	; 0x05
    3934:	3e 81       	ldd	r19, Y+6	; 0x06
    3936:	a2 16       	cp	r10, r18
    3938:	b3 06       	cpc	r11, r19
    393a:	24 f1       	brlt	.+72     	; 0x3984 <_ZN12Adafruit_GFX9writeLineEiiiij+0x132>
    393c:	d2 01       	movw	r26, r4
    393e:	ed 91       	ld	r30, X+
    3940:	fc 91       	ld	r31, X
    3942:	04 84       	ldd	r0, Z+12	; 0x0c
    3944:	f5 85       	ldd	r31, Z+13	; 0x0d
    3946:	e0 2d       	mov	r30, r0
    3948:	2b 81       	ldd	r18, Y+3	; 0x03
    394a:	3c 81       	ldd	r19, Y+4	; 0x04
    394c:	68 14       	cp	r6, r8
    394e:	79 04       	cpc	r7, r9
    3950:	24 f4       	brge	.+8      	; 0x395a <_ZN12Adafruit_GFX9writeLineEiiiij+0x108>
    3952:	4d 81       	ldd	r20, Y+5	; 0x05
    3954:	5e 81       	ldd	r21, Y+6	; 0x06
    3956:	b6 01       	movw	r22, r12
    3958:	03 c0       	rjmp	.+6      	; 0x3960 <_ZN12Adafruit_GFX9writeLineEiiiij+0x10e>
    395a:	a6 01       	movw	r20, r12
    395c:	6d 81       	ldd	r22, Y+5	; 0x05
    395e:	7e 81       	ldd	r23, Y+6	; 0x06
    3960:	c2 01       	movw	r24, r4
    3962:	09 95       	icall
    3964:	e2 18       	sub	r14, r2
    3966:	f3 08       	sbc	r15, r3
    3968:	f7 fe       	sbrs	r15, 7
    396a:	06 c0       	rjmp	.+12     	; 0x3978 <_ZN12Adafruit_GFX9writeLineEiiiij+0x126>
    396c:	29 81       	ldd	r18, Y+1	; 0x01
    396e:	3a 81       	ldd	r19, Y+2	; 0x02
    3970:	c2 0e       	add	r12, r18
    3972:	d3 1e       	adc	r13, r19
    3974:	e0 0e       	add	r14, r16
    3976:	f1 1e       	adc	r15, r17
    3978:	8d 81       	ldd	r24, Y+5	; 0x05
    397a:	9e 81       	ldd	r25, Y+6	; 0x06
    397c:	01 96       	adiw	r24, 0x01	; 1
    397e:	9e 83       	std	Y+6, r25	; 0x06
    3980:	8d 83       	std	Y+5, r24	; 0x05
    3982:	d7 cf       	rjmp	.-82     	; 0x3932 <_ZN12Adafruit_GFX9writeLineEiiiij+0xe0>
    3984:	26 96       	adiw	r28, 0x06	; 6
    3986:	0f b6       	in	r0, 0x3f	; 63
    3988:	f8 94       	cli
    398a:	de bf       	out	0x3e, r29	; 62
    398c:	0f be       	out	0x3f, r0	; 63
    398e:	cd bf       	out	0x3d, r28	; 61
    3990:	df 91       	pop	r29
    3992:	cf 91       	pop	r28
    3994:	1f 91       	pop	r17
    3996:	0f 91       	pop	r16
    3998:	ff 90       	pop	r15
    399a:	ef 90       	pop	r14
    399c:	df 90       	pop	r13
    399e:	cf 90       	pop	r12
    39a0:	bf 90       	pop	r11
    39a2:	af 90       	pop	r10
    39a4:	9f 90       	pop	r9
    39a6:	8f 90       	pop	r8
    39a8:	7f 90       	pop	r7
    39aa:	6f 90       	pop	r6
    39ac:	5f 90       	pop	r5
    39ae:	4f 90       	pop	r4
    39b0:	3f 90       	pop	r3
    39b2:	2f 90       	pop	r2
    39b4:	08 95       	ret

000039b6 <_ZN12Adafruit_GFX10writePixelEiij>:
    39b6:	dc 01       	movw	r26, r24
    39b8:	ed 91       	ld	r30, X+
    39ba:	fc 91       	ld	r31, X
    39bc:	00 84       	ldd	r0, Z+8	; 0x08
    39be:	f1 85       	ldd	r31, Z+9	; 0x09
    39c0:	e0 2d       	mov	r30, r0
    39c2:	09 94       	ijmp

000039c4 <_ZN12Adafruit_GFX14writeFastVLineEiiij>:
    39c4:	0f 93       	push	r16
    39c6:	1f 93       	push	r17
    39c8:	dc 01       	movw	r26, r24
    39ca:	ed 91       	ld	r30, X+
    39cc:	fc 91       	ld	r31, X
    39ce:	04 8c       	ldd	r0, Z+28	; 0x1c
    39d0:	f5 8d       	ldd	r31, Z+29	; 0x1d
    39d2:	e0 2d       	mov	r30, r0
    39d4:	09 95       	icall
    39d6:	1f 91       	pop	r17
    39d8:	0f 91       	pop	r16
    39da:	08 95       	ret

000039dc <_ZN12Adafruit_GFX14writeFastHLineEiiij>:
    39dc:	0f 93       	push	r16
    39de:	1f 93       	push	r17
    39e0:	dc 01       	movw	r26, r24
    39e2:	ed 91       	ld	r30, X+
    39e4:	fc 91       	ld	r31, X
    39e6:	06 8c       	ldd	r0, Z+30	; 0x1e
    39e8:	f7 8d       	ldd	r31, Z+31	; 0x1f
    39ea:	e0 2d       	mov	r30, r0
    39ec:	09 95       	icall
    39ee:	1f 91       	pop	r17
    39f0:	0f 91       	pop	r16
    39f2:	08 95       	ret

000039f4 <_ZN12Adafruit_GFX13writeFillRectEiiiij>:
    39f4:	ef 92       	push	r14
    39f6:	ff 92       	push	r15
    39f8:	0f 93       	push	r16
    39fa:	1f 93       	push	r17
    39fc:	dc 01       	movw	r26, r24
    39fe:	ed 91       	ld	r30, X+
    3a00:	fc 91       	ld	r31, X
    3a02:	00 a0       	ldd	r0, Z+32	; 0x20
    3a04:	f1 a1       	ldd	r31, Z+33	; 0x21
    3a06:	e0 2d       	mov	r30, r0
    3a08:	09 95       	icall
    3a0a:	1f 91       	pop	r17
    3a0c:	0f 91       	pop	r16
    3a0e:	ff 90       	pop	r15
    3a10:	ef 90       	pop	r14
    3a12:	08 95       	ret

00003a14 <_ZN12Adafruit_GFX10startWriteEv>:
    3a14:	08 95       	ret

00003a16 <_ZN12Adafruit_GFX13drawFastVLineEiiij>:
    3a16:	8f 92       	push	r8
    3a18:	9f 92       	push	r9
    3a1a:	af 92       	push	r10
    3a1c:	bf 92       	push	r11
    3a1e:	cf 92       	push	r12
    3a20:	df 92       	push	r13
    3a22:	ef 92       	push	r14
    3a24:	ff 92       	push	r15
    3a26:	0f 93       	push	r16
    3a28:	1f 93       	push	r17
    3a2a:	cf 93       	push	r28
    3a2c:	df 93       	push	r29
    3a2e:	ec 01       	movw	r28, r24
    3a30:	5b 01       	movw	r10, r22
    3a32:	4a 01       	movw	r8, r20
    3a34:	69 01       	movw	r12, r18
    3a36:	78 01       	movw	r14, r16
    3a38:	e8 81       	ld	r30, Y
    3a3a:	f9 81       	ldd	r31, Y+1	; 0x01
    3a3c:	02 84       	ldd	r0, Z+10	; 0x0a
    3a3e:	f3 85       	ldd	r31, Z+11	; 0x0b
    3a40:	e0 2d       	mov	r30, r0
    3a42:	09 95       	icall
    3a44:	c8 0c       	add	r12, r8
    3a46:	d9 1c       	adc	r13, r9
    3a48:	86 01       	movw	r16, r12
    3a4a:	01 50       	subi	r16, 0x01	; 1
    3a4c:	11 09       	sbc	r17, r1
    3a4e:	e8 81       	ld	r30, Y
    3a50:	f9 81       	ldd	r31, Y+1	; 0x01
    3a52:	04 88       	ldd	r0, Z+20	; 0x14
    3a54:	f5 89       	ldd	r31, Z+21	; 0x15
    3a56:	e0 2d       	mov	r30, r0
    3a58:	95 01       	movw	r18, r10
    3a5a:	a4 01       	movw	r20, r8
    3a5c:	b5 01       	movw	r22, r10
    3a5e:	ce 01       	movw	r24, r28
    3a60:	09 95       	icall
    3a62:	e8 81       	ld	r30, Y
    3a64:	f9 81       	ldd	r31, Y+1	; 0x01
    3a66:	06 88       	ldd	r0, Z+22	; 0x16
    3a68:	f7 89       	ldd	r31, Z+23	; 0x17
    3a6a:	e0 2d       	mov	r30, r0
    3a6c:	ce 01       	movw	r24, r28
    3a6e:	df 91       	pop	r29
    3a70:	cf 91       	pop	r28
    3a72:	1f 91       	pop	r17
    3a74:	0f 91       	pop	r16
    3a76:	ff 90       	pop	r15
    3a78:	ef 90       	pop	r14
    3a7a:	df 90       	pop	r13
    3a7c:	cf 90       	pop	r12
    3a7e:	bf 90       	pop	r11
    3a80:	af 90       	pop	r10
    3a82:	9f 90       	pop	r9
    3a84:	8f 90       	pop	r8
    3a86:	09 94       	ijmp

00003a88 <_ZN12Adafruit_GFX13drawFastHLineEiiij>:
    3a88:	8f 92       	push	r8
    3a8a:	9f 92       	push	r9
    3a8c:	af 92       	push	r10
    3a8e:	bf 92       	push	r11
    3a90:	cf 92       	push	r12
    3a92:	df 92       	push	r13
    3a94:	ef 92       	push	r14
    3a96:	ff 92       	push	r15
    3a98:	0f 93       	push	r16
    3a9a:	1f 93       	push	r17
    3a9c:	cf 93       	push	r28
    3a9e:	df 93       	push	r29
    3aa0:	ec 01       	movw	r28, r24
    3aa2:	5b 01       	movw	r10, r22
    3aa4:	4a 01       	movw	r8, r20
    3aa6:	69 01       	movw	r12, r18
    3aa8:	e8 81       	ld	r30, Y
    3aaa:	f9 81       	ldd	r31, Y+1	; 0x01
    3aac:	02 84       	ldd	r0, Z+10	; 0x0a
    3aae:	f3 85       	ldd	r31, Z+11	; 0x0b
    3ab0:	e0 2d       	mov	r30, r0
    3ab2:	09 95       	icall
    3ab4:	95 01       	movw	r18, r10
    3ab6:	2c 0d       	add	r18, r12
    3ab8:	3d 1d       	adc	r19, r13
    3aba:	21 50       	subi	r18, 0x01	; 1
    3abc:	31 09       	sbc	r19, r1
    3abe:	e8 81       	ld	r30, Y
    3ac0:	f9 81       	ldd	r31, Y+1	; 0x01
    3ac2:	04 88       	ldd	r0, Z+20	; 0x14
    3ac4:	f5 89       	ldd	r31, Z+21	; 0x15
    3ac6:	e0 2d       	mov	r30, r0
    3ac8:	78 01       	movw	r14, r16
    3aca:	84 01       	movw	r16, r8
    3acc:	a4 01       	movw	r20, r8
    3ace:	b5 01       	movw	r22, r10
    3ad0:	ce 01       	movw	r24, r28
    3ad2:	09 95       	icall
    3ad4:	e8 81       	ld	r30, Y
    3ad6:	f9 81       	ldd	r31, Y+1	; 0x01
    3ad8:	06 88       	ldd	r0, Z+22	; 0x16
    3ada:	f7 89       	ldd	r31, Z+23	; 0x17
    3adc:	e0 2d       	mov	r30, r0
    3ade:	ce 01       	movw	r24, r28
    3ae0:	df 91       	pop	r29
    3ae2:	cf 91       	pop	r28
    3ae4:	1f 91       	pop	r17
    3ae6:	0f 91       	pop	r16
    3ae8:	ff 90       	pop	r15
    3aea:	ef 90       	pop	r14
    3aec:	df 90       	pop	r13
    3aee:	cf 90       	pop	r12
    3af0:	bf 90       	pop	r11
    3af2:	af 90       	pop	r10
    3af4:	9f 90       	pop	r9
    3af6:	8f 90       	pop	r8
    3af8:	09 94       	ijmp

00003afa <_ZN12Adafruit_GFX8fillRectEiiiij>:
    3afa:	4f 92       	push	r4
    3afc:	5f 92       	push	r5
    3afe:	6f 92       	push	r6
    3b00:	7f 92       	push	r7
    3b02:	8f 92       	push	r8
    3b04:	9f 92       	push	r9
    3b06:	af 92       	push	r10
    3b08:	bf 92       	push	r11
    3b0a:	cf 92       	push	r12
    3b0c:	df 92       	push	r13
    3b0e:	ef 92       	push	r14
    3b10:	ff 92       	push	r15
    3b12:	0f 93       	push	r16
    3b14:	1f 93       	push	r17
    3b16:	cf 93       	push	r28
    3b18:	df 93       	push	r29
    3b1a:	6c 01       	movw	r12, r24
    3b1c:	2b 01       	movw	r4, r22
    3b1e:	5a 01       	movw	r10, r20
    3b20:	39 01       	movw	r6, r18
    3b22:	48 01       	movw	r8, r16
    3b24:	dc 01       	movw	r26, r24
    3b26:	ed 91       	ld	r30, X+
    3b28:	fc 91       	ld	r31, X
    3b2a:	02 84       	ldd	r0, Z+10	; 0x0a
    3b2c:	f3 85       	ldd	r31, Z+11	; 0x0b
    3b2e:	e0 2d       	mov	r30, r0
    3b30:	09 95       	icall
    3b32:	e2 01       	movw	r28, r4
    3b34:	64 0c       	add	r6, r4
    3b36:	75 1c       	adc	r7, r5
    3b38:	d6 01       	movw	r26, r12
    3b3a:	ed 91       	ld	r30, X+
    3b3c:	fc 91       	ld	r31, X
    3b3e:	c6 15       	cp	r28, r6
    3b40:	d7 05       	cpc	r29, r7
    3b42:	5c f4       	brge	.+22     	; 0x3b5a <_ZN12Adafruit_GFX8fillRectEiiiij+0x60>
    3b44:	00 88       	ldd	r0, Z+16	; 0x10
    3b46:	f1 89       	ldd	r31, Z+17	; 0x11
    3b48:	e0 2d       	mov	r30, r0
    3b4a:	87 01       	movw	r16, r14
    3b4c:	94 01       	movw	r18, r8
    3b4e:	a5 01       	movw	r20, r10
    3b50:	be 01       	movw	r22, r28
    3b52:	c6 01       	movw	r24, r12
    3b54:	09 95       	icall
    3b56:	21 96       	adiw	r28, 0x01	; 1
    3b58:	ef cf       	rjmp	.-34     	; 0x3b38 <_ZN12Adafruit_GFX8fillRectEiiiij+0x3e>
    3b5a:	06 88       	ldd	r0, Z+22	; 0x16
    3b5c:	f7 89       	ldd	r31, Z+23	; 0x17
    3b5e:	e0 2d       	mov	r30, r0
    3b60:	c6 01       	movw	r24, r12
    3b62:	df 91       	pop	r29
    3b64:	cf 91       	pop	r28
    3b66:	1f 91       	pop	r17
    3b68:	0f 91       	pop	r16
    3b6a:	ff 90       	pop	r15
    3b6c:	ef 90       	pop	r14
    3b6e:	df 90       	pop	r13
    3b70:	cf 90       	pop	r12
    3b72:	bf 90       	pop	r11
    3b74:	af 90       	pop	r10
    3b76:	9f 90       	pop	r9
    3b78:	8f 90       	pop	r8
    3b7a:	7f 90       	pop	r7
    3b7c:	6f 90       	pop	r6
    3b7e:	5f 90       	pop	r5
    3b80:	4f 90       	pop	r4
    3b82:	09 94       	ijmp

00003b84 <_ZN12Adafruit_GFX10fillScreenEj>:
    3b84:	ef 92       	push	r14
    3b86:	ff 92       	push	r15
    3b88:	0f 93       	push	r16
    3b8a:	1f 93       	push	r17
    3b8c:	dc 01       	movw	r26, r24
    3b8e:	1a 96       	adiw	r26, 0x0a	; 10
    3b90:	0d 91       	ld	r16, X+
    3b92:	1c 91       	ld	r17, X
    3b94:	1b 97       	sbiw	r26, 0x0b	; 11
    3b96:	18 96       	adiw	r26, 0x08	; 8
    3b98:	2d 91       	ld	r18, X+
    3b9a:	3c 91       	ld	r19, X
    3b9c:	19 97       	sbiw	r26, 0x09	; 9
    3b9e:	ed 91       	ld	r30, X+
    3ba0:	fc 91       	ld	r31, X
    3ba2:	00 a0       	ldd	r0, Z+32	; 0x20
    3ba4:	f1 a1       	ldd	r31, Z+33	; 0x21
    3ba6:	e0 2d       	mov	r30, r0
    3ba8:	7b 01       	movw	r14, r22
    3baa:	40 e0       	ldi	r20, 0x00	; 0
    3bac:	50 e0       	ldi	r21, 0x00	; 0
    3bae:	60 e0       	ldi	r22, 0x00	; 0
    3bb0:	70 e0       	ldi	r23, 0x00	; 0
    3bb2:	09 95       	icall
    3bb4:	1f 91       	pop	r17
    3bb6:	0f 91       	pop	r16
    3bb8:	ff 90       	pop	r15
    3bba:	ef 90       	pop	r14
    3bbc:	08 95       	ret

00003bbe <_ZN12Adafruit_GFX8drawLineEiiiij>:
    3bbe:	8f 92       	push	r8
    3bc0:	9f 92       	push	r9
    3bc2:	af 92       	push	r10
    3bc4:	bf 92       	push	r11
    3bc6:	cf 92       	push	r12
    3bc8:	df 92       	push	r13
    3bca:	ef 92       	push	r14
    3bcc:	ff 92       	push	r15
    3bce:	0f 93       	push	r16
    3bd0:	1f 93       	push	r17
    3bd2:	cf 93       	push	r28
    3bd4:	df 93       	push	r29
    3bd6:	4c 01       	movw	r8, r24
    3bd8:	6b 01       	movw	r12, r22
    3bda:	5a 01       	movw	r10, r20
    3bdc:	e9 01       	movw	r28, r18
    3bde:	dc 01       	movw	r26, r24
    3be0:	ed 91       	ld	r30, X+
    3be2:	fc 91       	ld	r31, X
    3be4:	62 17       	cp	r22, r18
    3be6:	73 07       	cpc	r23, r19
    3be8:	81 f4       	brne	.+32     	; 0x3c0a <_ZN12Adafruit_GFX8drawLineEiiiij+0x4c>
    3bea:	04 17       	cp	r16, r20
    3bec:	15 07       	cpc	r17, r21
    3bee:	24 f4       	brge	.+8      	; 0x3bf8 <_ZN12Adafruit_GFX8drawLineEiiiij+0x3a>
    3bf0:	8b 2d       	mov	r24, r11
    3bf2:	58 01       	movw	r10, r16
    3bf4:	04 2f       	mov	r16, r20
    3bf6:	18 2f       	mov	r17, r24
    3bf8:	0a 19       	sub	r16, r10
    3bfa:	1b 09       	sbc	r17, r11
    3bfc:	98 01       	movw	r18, r16
    3bfe:	2f 5f       	subi	r18, 0xFF	; 255
    3c00:	3f 4f       	sbci	r19, 0xFF	; 255
    3c02:	04 8c       	ldd	r0, Z+28	; 0x1c
    3c04:	f5 8d       	ldd	r31, Z+29	; 0x1d
    3c06:	e0 2d       	mov	r30, r0
    3c08:	12 c0       	rjmp	.+36     	; 0x3c2e <_ZN12Adafruit_GFX8drawLineEiiiij+0x70>
    3c0a:	40 17       	cp	r20, r16
    3c0c:	51 07       	cpc	r21, r17
    3c0e:	09 f5       	brne	.+66     	; 0x3c52 <_ZN12Adafruit_GFX8drawLineEiiiij+0x94>
    3c10:	26 17       	cp	r18, r22
    3c12:	37 07       	cpc	r19, r23
    3c14:	24 f4       	brge	.+8      	; 0x3c1e <_ZN12Adafruit_GFX8drawLineEiiiij+0x60>
    3c16:	8d 2d       	mov	r24, r13
    3c18:	69 01       	movw	r12, r18
    3c1a:	c6 2f       	mov	r28, r22
    3c1c:	d8 2f       	mov	r29, r24
    3c1e:	9e 01       	movw	r18, r28
    3c20:	2c 19       	sub	r18, r12
    3c22:	3d 09       	sbc	r19, r13
    3c24:	2f 5f       	subi	r18, 0xFF	; 255
    3c26:	3f 4f       	sbci	r19, 0xFF	; 255
    3c28:	06 8c       	ldd	r0, Z+30	; 0x1e
    3c2a:	f7 8d       	ldd	r31, Z+31	; 0x1f
    3c2c:	e0 2d       	mov	r30, r0
    3c2e:	87 01       	movw	r16, r14
    3c30:	a5 01       	movw	r20, r10
    3c32:	b6 01       	movw	r22, r12
    3c34:	c4 01       	movw	r24, r8
    3c36:	09 95       	icall
    3c38:	df 91       	pop	r29
    3c3a:	cf 91       	pop	r28
    3c3c:	1f 91       	pop	r17
    3c3e:	0f 91       	pop	r16
    3c40:	ff 90       	pop	r15
    3c42:	ef 90       	pop	r14
    3c44:	df 90       	pop	r13
    3c46:	cf 90       	pop	r12
    3c48:	bf 90       	pop	r11
    3c4a:	af 90       	pop	r10
    3c4c:	9f 90       	pop	r9
    3c4e:	8f 90       	pop	r8
    3c50:	08 95       	ret
    3c52:	02 84       	ldd	r0, Z+10	; 0x0a
    3c54:	f3 85       	ldd	r31, Z+11	; 0x0b
    3c56:	e0 2d       	mov	r30, r0
    3c58:	09 95       	icall
    3c5a:	d4 01       	movw	r26, r8
    3c5c:	ed 91       	ld	r30, X+
    3c5e:	fc 91       	ld	r31, X
    3c60:	04 88       	ldd	r0, Z+20	; 0x14
    3c62:	f5 89       	ldd	r31, Z+21	; 0x15
    3c64:	e0 2d       	mov	r30, r0
    3c66:	9e 01       	movw	r18, r28
    3c68:	a5 01       	movw	r20, r10
    3c6a:	b6 01       	movw	r22, r12
    3c6c:	c4 01       	movw	r24, r8
    3c6e:	09 95       	icall
    3c70:	d4 01       	movw	r26, r8
    3c72:	ed 91       	ld	r30, X+
    3c74:	fc 91       	ld	r31, X
    3c76:	06 88       	ldd	r0, Z+22	; 0x16
    3c78:	f7 89       	ldd	r31, Z+23	; 0x17
    3c7a:	e0 2d       	mov	r30, r0
    3c7c:	c4 01       	movw	r24, r8
    3c7e:	df 91       	pop	r29
    3c80:	cf 91       	pop	r28
    3c82:	1f 91       	pop	r17
    3c84:	0f 91       	pop	r16
    3c86:	ff 90       	pop	r15
    3c88:	ef 90       	pop	r14
    3c8a:	df 90       	pop	r13
    3c8c:	cf 90       	pop	r12
    3c8e:	bf 90       	pop	r11
    3c90:	af 90       	pop	r10
    3c92:	9f 90       	pop	r9
    3c94:	8f 90       	pop	r8
    3c96:	09 94       	ijmp

00003c98 <_ZN12Adafruit_GFX8drawRectEiiiij>:
    3c98:	6f 92       	push	r6
    3c9a:	7f 92       	push	r7
    3c9c:	8f 92       	push	r8
    3c9e:	9f 92       	push	r9
    3ca0:	af 92       	push	r10
    3ca2:	bf 92       	push	r11
    3ca4:	cf 92       	push	r12
    3ca6:	df 92       	push	r13
    3ca8:	ef 92       	push	r14
    3caa:	ff 92       	push	r15
    3cac:	0f 93       	push	r16
    3cae:	1f 93       	push	r17
    3cb0:	cf 93       	push	r28
    3cb2:	df 93       	push	r29
    3cb4:	ec 01       	movw	r28, r24
    3cb6:	4b 01       	movw	r8, r22
    3cb8:	5a 01       	movw	r10, r20
    3cba:	69 01       	movw	r12, r18
    3cbc:	38 01       	movw	r6, r16
    3cbe:	e8 81       	ld	r30, Y
    3cc0:	f9 81       	ldd	r31, Y+1	; 0x01
    3cc2:	02 84       	ldd	r0, Z+10	; 0x0a
    3cc4:	f3 85       	ldd	r31, Z+11	; 0x0b
    3cc6:	e0 2d       	mov	r30, r0
    3cc8:	09 95       	icall
    3cca:	e8 81       	ld	r30, Y
    3ccc:	f9 81       	ldd	r31, Y+1	; 0x01
    3cce:	02 88       	ldd	r0, Z+18	; 0x12
    3cd0:	f3 89       	ldd	r31, Z+19	; 0x13
    3cd2:	e0 2d       	mov	r30, r0
    3cd4:	87 01       	movw	r16, r14
    3cd6:	96 01       	movw	r18, r12
    3cd8:	a5 01       	movw	r20, r10
    3cda:	b4 01       	movw	r22, r8
    3cdc:	ce 01       	movw	r24, r28
    3cde:	09 95       	icall
    3ce0:	a5 01       	movw	r20, r10
    3ce2:	46 0d       	add	r20, r6
    3ce4:	57 1d       	adc	r21, r7
    3ce6:	41 50       	subi	r20, 0x01	; 1
    3ce8:	51 09       	sbc	r21, r1
    3cea:	e8 81       	ld	r30, Y
    3cec:	f9 81       	ldd	r31, Y+1	; 0x01
    3cee:	02 88       	ldd	r0, Z+18	; 0x12
    3cf0:	f3 89       	ldd	r31, Z+19	; 0x13
    3cf2:	e0 2d       	mov	r30, r0
    3cf4:	96 01       	movw	r18, r12
    3cf6:	b4 01       	movw	r22, r8
    3cf8:	ce 01       	movw	r24, r28
    3cfa:	09 95       	icall
    3cfc:	e8 81       	ld	r30, Y
    3cfe:	f9 81       	ldd	r31, Y+1	; 0x01
    3d00:	00 88       	ldd	r0, Z+16	; 0x10
    3d02:	f1 89       	ldd	r31, Z+17	; 0x11
    3d04:	e0 2d       	mov	r30, r0
    3d06:	93 01       	movw	r18, r6
    3d08:	a5 01       	movw	r20, r10
    3d0a:	b4 01       	movw	r22, r8
    3d0c:	ce 01       	movw	r24, r28
    3d0e:	09 95       	icall
    3d10:	c8 0c       	add	r12, r8
    3d12:	d9 1c       	adc	r13, r9
    3d14:	b6 01       	movw	r22, r12
    3d16:	61 50       	subi	r22, 0x01	; 1
    3d18:	71 09       	sbc	r23, r1
    3d1a:	e8 81       	ld	r30, Y
    3d1c:	f9 81       	ldd	r31, Y+1	; 0x01
    3d1e:	00 88       	ldd	r0, Z+16	; 0x10
    3d20:	f1 89       	ldd	r31, Z+17	; 0x11
    3d22:	e0 2d       	mov	r30, r0
    3d24:	93 01       	movw	r18, r6
    3d26:	a5 01       	movw	r20, r10
    3d28:	ce 01       	movw	r24, r28
    3d2a:	09 95       	icall
    3d2c:	e8 81       	ld	r30, Y
    3d2e:	f9 81       	ldd	r31, Y+1	; 0x01
    3d30:	06 88       	ldd	r0, Z+22	; 0x16
    3d32:	f7 89       	ldd	r31, Z+23	; 0x17
    3d34:	e0 2d       	mov	r30, r0
    3d36:	ce 01       	movw	r24, r28
    3d38:	df 91       	pop	r29
    3d3a:	cf 91       	pop	r28
    3d3c:	1f 91       	pop	r17
    3d3e:	0f 91       	pop	r16
    3d40:	ff 90       	pop	r15
    3d42:	ef 90       	pop	r14
    3d44:	df 90       	pop	r13
    3d46:	cf 90       	pop	r12
    3d48:	bf 90       	pop	r11
    3d4a:	af 90       	pop	r10
    3d4c:	9f 90       	pop	r9
    3d4e:	8f 90       	pop	r8
    3d50:	7f 90       	pop	r7
    3d52:	6f 90       	pop	r6
    3d54:	09 94       	ijmp

00003d56 <_ZN12Adafruit_GFX13invertDisplayEb>:
    3d56:	08 95       	ret

00003d58 <_ZN12Adafruit_GFX11setRotationEh>:
    3d58:	fc 01       	movw	r30, r24
    3d5a:	63 70       	andi	r22, 0x03	; 3
    3d5c:	66 8b       	std	Z+22, r22	; 0x16
    3d5e:	84 81       	ldd	r24, Z+4	; 0x04
    3d60:	95 81       	ldd	r25, Z+5	; 0x05
    3d62:	26 81       	ldd	r18, Z+6	; 0x06
    3d64:	37 81       	ldd	r19, Z+7	; 0x07
    3d66:	61 30       	cpi	r22, 0x01	; 1
    3d68:	39 f0       	breq	.+14     	; 0x3d78 <_ZN12Adafruit_GFX11setRotationEh+0x20>
    3d6a:	63 30       	cpi	r22, 0x03	; 3
    3d6c:	29 f0       	breq	.+10     	; 0x3d78 <_ZN12Adafruit_GFX11setRotationEh+0x20>
    3d6e:	91 87       	std	Z+9, r25	; 0x09
    3d70:	80 87       	std	Z+8, r24	; 0x08
    3d72:	33 87       	std	Z+11, r19	; 0x0b
    3d74:	22 87       	std	Z+10, r18	; 0x0a
    3d76:	08 95       	ret
    3d78:	31 87       	std	Z+9, r19	; 0x09
    3d7a:	20 87       	std	Z+8, r18	; 0x08
    3d7c:	93 87       	std	Z+11, r25	; 0x0b
    3d7e:	82 87       	std	Z+10, r24	; 0x0a
    3d80:	08 95       	ret

00003d82 <_ZN12Adafruit_GFXC1Eii>:
    3d82:	fc 01       	movw	r30, r24
    3d84:	13 82       	std	Z+3, r1	; 0x03
    3d86:	12 82       	std	Z+2, r1	; 0x02
    3d88:	8b e6       	ldi	r24, 0x6B	; 107
    3d8a:	91 e0       	ldi	r25, 0x01	; 1
    3d8c:	91 83       	std	Z+1, r25	; 0x01
    3d8e:	80 83       	st	Z, r24
    3d90:	75 83       	std	Z+5, r23	; 0x05
    3d92:	64 83       	std	Z+4, r22	; 0x04
    3d94:	57 83       	std	Z+7, r21	; 0x07
    3d96:	46 83       	std	Z+6, r20	; 0x06
    3d98:	71 87       	std	Z+9, r23	; 0x09
    3d9a:	60 87       	std	Z+8, r22	; 0x08
    3d9c:	53 87       	std	Z+11, r21	; 0x0b
    3d9e:	42 87       	std	Z+10, r20	; 0x0a
    3da0:	16 8a       	std	Z+22, r1	; 0x16
    3da2:	15 86       	std	Z+13, r1	; 0x0d
    3da4:	14 86       	std	Z+12, r1	; 0x0c
    3da6:	17 86       	std	Z+15, r1	; 0x0f
    3da8:	16 86       	std	Z+14, r1	; 0x0e
    3daa:	81 e0       	ldi	r24, 0x01	; 1
    3dac:	85 8b       	std	Z+21, r24	; 0x15
    3dae:	84 8b       	std	Z+20, r24	; 0x14
    3db0:	2f ef       	ldi	r18, 0xFF	; 255
    3db2:	3f ef       	ldi	r19, 0xFF	; 255
    3db4:	33 8b       	std	Z+19, r19	; 0x13
    3db6:	22 8b       	std	Z+18, r18	; 0x12
    3db8:	31 8b       	std	Z+17, r19	; 0x11
    3dba:	20 8b       	std	Z+16, r18	; 0x10
    3dbc:	87 8b       	std	Z+23, r24	; 0x17
    3dbe:	10 8e       	std	Z+24, r1	; 0x18
    3dc0:	12 8e       	std	Z+26, r1	; 0x1a
    3dc2:	11 8e       	std	Z+25, r1	; 0x19
    3dc4:	08 95       	ret

00003dc6 <_ZN12Adafruit_GFX16drawCircleHelperEiiihj>:
    3dc6:	2f 92       	push	r2
    3dc8:	3f 92       	push	r3
    3dca:	4f 92       	push	r4
    3dcc:	5f 92       	push	r5
    3dce:	6f 92       	push	r6
    3dd0:	7f 92       	push	r7
    3dd2:	8f 92       	push	r8
    3dd4:	9f 92       	push	r9
    3dd6:	af 92       	push	r10
    3dd8:	bf 92       	push	r11
    3dda:	cf 92       	push	r12
    3ddc:	df 92       	push	r13
    3dde:	ef 92       	push	r14
    3de0:	ff 92       	push	r15
    3de2:	0f 93       	push	r16
    3de4:	1f 93       	push	r17
    3de6:	cf 93       	push	r28
    3de8:	df 93       	push	r29
    3dea:	00 d0       	rcall	.+0      	; 0x3dec <_ZN12Adafruit_GFX16drawCircleHelperEiiihj+0x26>
    3dec:	00 d0       	rcall	.+0      	; 0x3dee <_ZN12Adafruit_GFX16drawCircleHelperEiiihj+0x28>
    3dee:	00 d0       	rcall	.+0      	; 0x3df0 <_ZN12Adafruit_GFX16drawCircleHelperEiiihj+0x2a>
    3df0:	cd b7       	in	r28, 0x3d	; 61
    3df2:	de b7       	in	r29, 0x3e	; 62
    3df4:	9e 83       	std	Y+6, r25	; 0x06
    3df6:	8d 83       	std	Y+5, r24	; 0x05
    3df8:	4b 01       	movw	r8, r22
    3dfa:	3a 01       	movw	r6, r20
    3dfc:	69 01       	movw	r12, r18
    3dfe:	80 2f       	mov	r24, r16
    3e00:	21 e0       	ldi	r18, 0x01	; 1
    3e02:	30 e0       	ldi	r19, 0x00	; 0
    3e04:	29 01       	movw	r4, r18
    3e06:	4c 18       	sub	r4, r12
    3e08:	5d 08       	sbc	r5, r13
    3e0a:	22 24       	eor	r2, r2
    3e0c:	33 24       	eor	r3, r3
    3e0e:	2c 18       	sub	r2, r12
    3e10:	3d 08       	sbc	r3, r13
    3e12:	22 0c       	add	r2, r2
    3e14:	33 1c       	adc	r3, r3
    3e16:	aa 24       	eor	r10, r10
    3e18:	a3 94       	inc	r10
    3e1a:	b1 2c       	mov	r11, r1
    3e1c:	01 e0       	ldi	r16, 0x01	; 1
    3e1e:	10 e0       	ldi	r17, 0x00	; 0
    3e20:	98 2f       	mov	r25, r24
    3e22:	94 70       	andi	r25, 0x04	; 4
    3e24:	99 83       	std	Y+1, r25	; 0x01
    3e26:	a8 2f       	mov	r26, r24
    3e28:	a2 70       	andi	r26, 0x02	; 2
    3e2a:	aa 83       	std	Y+2, r26	; 0x02
    3e2c:	b8 2f       	mov	r27, r24
    3e2e:	b8 70       	andi	r27, 0x08	; 8
    3e30:	bb 83       	std	Y+3, r27	; 0x03
    3e32:	81 70       	andi	r24, 0x01	; 1
    3e34:	8c 83       	std	Y+4, r24	; 0x04
    3e36:	c5 01       	movw	r24, r10
    3e38:	01 97       	sbiw	r24, 0x01	; 1
    3e3a:	8c 15       	cp	r24, r12
    3e3c:	9d 05       	cpc	r25, r13
    3e3e:	0c f0       	brlt	.+2      	; 0x3e42 <_ZN12Adafruit_GFX16drawCircleHelperEiiihj+0x7c>
    3e40:	a7 c0       	rjmp	.+334    	; 0x3f90 <_ZN12Adafruit_GFX16drawCircleHelperEiiihj+0x1ca>
    3e42:	57 fc       	sbrc	r5, 7
    3e44:	08 c0       	rjmp	.+16     	; 0x3e56 <_ZN12Adafruit_GFX16drawCircleHelperEiiihj+0x90>
    3e46:	91 e0       	ldi	r25, 0x01	; 1
    3e48:	c9 1a       	sub	r12, r25
    3e4a:	d1 08       	sbc	r13, r1
    3e4c:	a2 e0       	ldi	r26, 0x02	; 2
    3e4e:	2a 0e       	add	r2, r26
    3e50:	31 1c       	adc	r3, r1
    3e52:	42 0c       	add	r4, r2
    3e54:	53 1c       	adc	r5, r3
    3e56:	0e 5f       	subi	r16, 0xFE	; 254
    3e58:	1f 4f       	sbci	r17, 0xFF	; 255
    3e5a:	40 0e       	add	r4, r16
    3e5c:	51 1e       	adc	r5, r17
    3e5e:	b9 81       	ldd	r27, Y+1	; 0x01
    3e60:	bb 23       	and	r27, r27
    3e62:	11 f1       	breq	.+68     	; 0x3ea8 <_ZN12Adafruit_GFX16drawCircleHelperEiiihj+0xe2>
    3e64:	ad 81       	ldd	r26, Y+5	; 0x05
    3e66:	be 81       	ldd	r27, Y+6	; 0x06
    3e68:	ed 91       	ld	r30, X+
    3e6a:	fc 91       	ld	r31, X
    3e6c:	11 97       	sbiw	r26, 0x01	; 1
    3e6e:	04 84       	ldd	r0, Z+12	; 0x0c
    3e70:	f5 85       	ldd	r31, Z+13	; 0x0d
    3e72:	e0 2d       	mov	r30, r0
    3e74:	97 01       	movw	r18, r14
    3e76:	a6 01       	movw	r20, r12
    3e78:	46 0d       	add	r20, r6
    3e7a:	57 1d       	adc	r21, r7
    3e7c:	b4 01       	movw	r22, r8
    3e7e:	6a 0d       	add	r22, r10
    3e80:	7b 1d       	adc	r23, r11
    3e82:	cd 01       	movw	r24, r26
    3e84:	09 95       	icall
    3e86:	ad 81       	ldd	r26, Y+5	; 0x05
    3e88:	be 81       	ldd	r27, Y+6	; 0x06
    3e8a:	ed 91       	ld	r30, X+
    3e8c:	fc 91       	ld	r31, X
    3e8e:	11 97       	sbiw	r26, 0x01	; 1
    3e90:	04 84       	ldd	r0, Z+12	; 0x0c
    3e92:	f5 85       	ldd	r31, Z+13	; 0x0d
    3e94:	e0 2d       	mov	r30, r0
    3e96:	97 01       	movw	r18, r14
    3e98:	a3 01       	movw	r20, r6
    3e9a:	4a 0d       	add	r20, r10
    3e9c:	5b 1d       	adc	r21, r11
    3e9e:	b6 01       	movw	r22, r12
    3ea0:	68 0d       	add	r22, r8
    3ea2:	79 1d       	adc	r23, r9
    3ea4:	cd 01       	movw	r24, r26
    3ea6:	09 95       	icall
    3ea8:	ba 81       	ldd	r27, Y+2	; 0x02
    3eaa:	bb 23       	and	r27, r27
    3eac:	11 f1       	breq	.+68     	; 0x3ef2 <_ZN12Adafruit_GFX16drawCircleHelperEiiihj+0x12c>
    3eae:	ad 81       	ldd	r26, Y+5	; 0x05
    3eb0:	be 81       	ldd	r27, Y+6	; 0x06
    3eb2:	ed 91       	ld	r30, X+
    3eb4:	fc 91       	ld	r31, X
    3eb6:	11 97       	sbiw	r26, 0x01	; 1
    3eb8:	04 84       	ldd	r0, Z+12	; 0x0c
    3eba:	f5 85       	ldd	r31, Z+13	; 0x0d
    3ebc:	e0 2d       	mov	r30, r0
    3ebe:	97 01       	movw	r18, r14
    3ec0:	a3 01       	movw	r20, r6
    3ec2:	4c 19       	sub	r20, r12
    3ec4:	5d 09       	sbc	r21, r13
    3ec6:	b4 01       	movw	r22, r8
    3ec8:	6a 0d       	add	r22, r10
    3eca:	7b 1d       	adc	r23, r11
    3ecc:	cd 01       	movw	r24, r26
    3ece:	09 95       	icall
    3ed0:	ad 81       	ldd	r26, Y+5	; 0x05
    3ed2:	be 81       	ldd	r27, Y+6	; 0x06
    3ed4:	ed 91       	ld	r30, X+
    3ed6:	fc 91       	ld	r31, X
    3ed8:	11 97       	sbiw	r26, 0x01	; 1
    3eda:	04 84       	ldd	r0, Z+12	; 0x0c
    3edc:	f5 85       	ldd	r31, Z+13	; 0x0d
    3ede:	e0 2d       	mov	r30, r0
    3ee0:	97 01       	movw	r18, r14
    3ee2:	a3 01       	movw	r20, r6
    3ee4:	4a 19       	sub	r20, r10
    3ee6:	5b 09       	sbc	r21, r11
    3ee8:	b6 01       	movw	r22, r12
    3eea:	68 0d       	add	r22, r8
    3eec:	79 1d       	adc	r23, r9
    3eee:	cd 01       	movw	r24, r26
    3ef0:	09 95       	icall
    3ef2:	bb 81       	ldd	r27, Y+3	; 0x03
    3ef4:	bb 23       	and	r27, r27
    3ef6:	11 f1       	breq	.+68     	; 0x3f3c <_ZN12Adafruit_GFX16drawCircleHelperEiiihj+0x176>
    3ef8:	ad 81       	ldd	r26, Y+5	; 0x05
    3efa:	be 81       	ldd	r27, Y+6	; 0x06
    3efc:	ed 91       	ld	r30, X+
    3efe:	fc 91       	ld	r31, X
    3f00:	11 97       	sbiw	r26, 0x01	; 1
    3f02:	04 84       	ldd	r0, Z+12	; 0x0c
    3f04:	f5 85       	ldd	r31, Z+13	; 0x0d
    3f06:	e0 2d       	mov	r30, r0
    3f08:	97 01       	movw	r18, r14
    3f0a:	a3 01       	movw	r20, r6
    3f0c:	4a 0d       	add	r20, r10
    3f0e:	5b 1d       	adc	r21, r11
    3f10:	b4 01       	movw	r22, r8
    3f12:	6c 19       	sub	r22, r12
    3f14:	7d 09       	sbc	r23, r13
    3f16:	cd 01       	movw	r24, r26
    3f18:	09 95       	icall
    3f1a:	ad 81       	ldd	r26, Y+5	; 0x05
    3f1c:	be 81       	ldd	r27, Y+6	; 0x06
    3f1e:	ed 91       	ld	r30, X+
    3f20:	fc 91       	ld	r31, X
    3f22:	11 97       	sbiw	r26, 0x01	; 1
    3f24:	04 84       	ldd	r0, Z+12	; 0x0c
    3f26:	f5 85       	ldd	r31, Z+13	; 0x0d
    3f28:	e0 2d       	mov	r30, r0
    3f2a:	97 01       	movw	r18, r14
    3f2c:	a6 01       	movw	r20, r12
    3f2e:	46 0d       	add	r20, r6
    3f30:	57 1d       	adc	r21, r7
    3f32:	b4 01       	movw	r22, r8
    3f34:	6a 19       	sub	r22, r10
    3f36:	7b 09       	sbc	r23, r11
    3f38:	cd 01       	movw	r24, r26
    3f3a:	09 95       	icall
    3f3c:	bc 81       	ldd	r27, Y+4	; 0x04
    3f3e:	b1 11       	cpse	r27, r1
    3f40:	04 c0       	rjmp	.+8      	; 0x3f4a <_ZN12Adafruit_GFX16drawCircleHelperEiiihj+0x184>
    3f42:	8f ef       	ldi	r24, 0xFF	; 255
    3f44:	a8 1a       	sub	r10, r24
    3f46:	b8 0a       	sbc	r11, r24
    3f48:	76 cf       	rjmp	.-276    	; 0x3e36 <_ZN12Adafruit_GFX16drawCircleHelperEiiihj+0x70>
    3f4a:	ad 81       	ldd	r26, Y+5	; 0x05
    3f4c:	be 81       	ldd	r27, Y+6	; 0x06
    3f4e:	ed 91       	ld	r30, X+
    3f50:	fc 91       	ld	r31, X
    3f52:	11 97       	sbiw	r26, 0x01	; 1
    3f54:	04 84       	ldd	r0, Z+12	; 0x0c
    3f56:	f5 85       	ldd	r31, Z+13	; 0x0d
    3f58:	e0 2d       	mov	r30, r0
    3f5a:	97 01       	movw	r18, r14
    3f5c:	a3 01       	movw	r20, r6
    3f5e:	4a 19       	sub	r20, r10
    3f60:	5b 09       	sbc	r21, r11
    3f62:	b4 01       	movw	r22, r8
    3f64:	6c 19       	sub	r22, r12
    3f66:	7d 09       	sbc	r23, r13
    3f68:	cd 01       	movw	r24, r26
    3f6a:	09 95       	icall
    3f6c:	ad 81       	ldd	r26, Y+5	; 0x05
    3f6e:	be 81       	ldd	r27, Y+6	; 0x06
    3f70:	ed 91       	ld	r30, X+
    3f72:	fc 91       	ld	r31, X
    3f74:	11 97       	sbiw	r26, 0x01	; 1
    3f76:	04 84       	ldd	r0, Z+12	; 0x0c
    3f78:	f5 85       	ldd	r31, Z+13	; 0x0d
    3f7a:	e0 2d       	mov	r30, r0
    3f7c:	97 01       	movw	r18, r14
    3f7e:	a3 01       	movw	r20, r6
    3f80:	4c 19       	sub	r20, r12
    3f82:	5d 09       	sbc	r21, r13
    3f84:	b4 01       	movw	r22, r8
    3f86:	6a 19       	sub	r22, r10
    3f88:	7b 09       	sbc	r23, r11
    3f8a:	cd 01       	movw	r24, r26
    3f8c:	09 95       	icall
    3f8e:	d9 cf       	rjmp	.-78     	; 0x3f42 <_ZN12Adafruit_GFX16drawCircleHelperEiiihj+0x17c>
    3f90:	26 96       	adiw	r28, 0x06	; 6
    3f92:	0f b6       	in	r0, 0x3f	; 63
    3f94:	f8 94       	cli
    3f96:	de bf       	out	0x3e, r29	; 62
    3f98:	0f be       	out	0x3f, r0	; 63
    3f9a:	cd bf       	out	0x3d, r28	; 61
    3f9c:	df 91       	pop	r29
    3f9e:	cf 91       	pop	r28
    3fa0:	1f 91       	pop	r17
    3fa2:	0f 91       	pop	r16
    3fa4:	ff 90       	pop	r15
    3fa6:	ef 90       	pop	r14
    3fa8:	df 90       	pop	r13
    3faa:	cf 90       	pop	r12
    3fac:	bf 90       	pop	r11
    3fae:	af 90       	pop	r10
    3fb0:	9f 90       	pop	r9
    3fb2:	8f 90       	pop	r8
    3fb4:	7f 90       	pop	r7
    3fb6:	6f 90       	pop	r6
    3fb8:	5f 90       	pop	r5
    3fba:	4f 90       	pop	r4
    3fbc:	3f 90       	pop	r3
    3fbe:	2f 90       	pop	r2
    3fc0:	08 95       	ret

00003fc2 <_ZN12Adafruit_GFX13drawRoundRectEiiiiij>:
    3fc2:	2f 92       	push	r2
    3fc4:	3f 92       	push	r3
    3fc6:	4f 92       	push	r4
    3fc8:	5f 92       	push	r5
    3fca:	6f 92       	push	r6
    3fcc:	7f 92       	push	r7
    3fce:	8f 92       	push	r8
    3fd0:	9f 92       	push	r9
    3fd2:	af 92       	push	r10
    3fd4:	bf 92       	push	r11
    3fd6:	cf 92       	push	r12
    3fd8:	df 92       	push	r13
    3fda:	ef 92       	push	r14
    3fdc:	ff 92       	push	r15
    3fde:	0f 93       	push	r16
    3fe0:	1f 93       	push	r17
    3fe2:	cf 93       	push	r28
    3fe4:	df 93       	push	r29
    3fe6:	cd b7       	in	r28, 0x3d	; 61
    3fe8:	de b7       	in	r29, 0x3e	; 62
    3fea:	28 97       	sbiw	r28, 0x08	; 8
    3fec:	0f b6       	in	r0, 0x3f	; 63
    3fee:	f8 94       	cli
    3ff0:	de bf       	out	0x3e, r29	; 62
    3ff2:	0f be       	out	0x3f, r0	; 63
    3ff4:	cd bf       	out	0x3d, r28	; 61
    3ff6:	5c 01       	movw	r10, r24
    3ff8:	7a 83       	std	Y+2, r23	; 0x02
    3ffa:	69 83       	std	Y+1, r22	; 0x01
    3ffc:	2a 01       	movw	r4, r20
    3ffe:	39 01       	movw	r6, r18
    4000:	48 01       	movw	r8, r16
    4002:	20 17       	cp	r18, r16
    4004:	31 07       	cpc	r19, r17
    4006:	34 f4       	brge	.+12     	; 0x4014 <_ZN12Adafruit_GFX13drawRoundRectEiiiiij+0x52>
    4008:	3c 83       	std	Y+4, r19	; 0x04
    400a:	2b 83       	std	Y+3, r18	; 0x03
    400c:	37 ff       	sbrs	r19, 7
    400e:	0a c0       	rjmp	.+20     	; 0x4024 <_ZN12Adafruit_GFX13drawRoundRectEiiiiij+0x62>
    4010:	c9 01       	movw	r24, r18
    4012:	05 c0       	rjmp	.+10     	; 0x401e <_ZN12Adafruit_GFX13drawRoundRectEiiiiij+0x5c>
    4014:	1c 83       	std	Y+4, r17	; 0x04
    4016:	0b 83       	std	Y+3, r16	; 0x03
    4018:	17 ff       	sbrs	r17, 7
    401a:	04 c0       	rjmp	.+8      	; 0x4024 <_ZN12Adafruit_GFX13drawRoundRectEiiiiij+0x62>
    401c:	c8 01       	movw	r24, r16
    401e:	01 96       	adiw	r24, 0x01	; 1
    4020:	9c 83       	std	Y+4, r25	; 0x04
    4022:	8b 83       	std	Y+3, r24	; 0x03
    4024:	ab 81       	ldd	r26, Y+3	; 0x03
    4026:	bc 81       	ldd	r27, Y+4	; 0x04
    4028:	b5 95       	asr	r27
    402a:	a7 95       	ror	r26
    402c:	bc 83       	std	Y+4, r27	; 0x04
    402e:	ab 83       	std	Y+3, r26	; 0x03
    4030:	8b 81       	ldd	r24, Y+3	; 0x03
    4032:	9c 81       	ldd	r25, Y+4	; 0x04
    4034:	98 87       	std	Y+8, r25	; 0x08
    4036:	8f 83       	std	Y+7, r24	; 0x07
    4038:	e8 16       	cp	r14, r24
    403a:	f9 06       	cpc	r15, r25
    403c:	14 f4       	brge	.+4      	; 0x4042 <_ZN12Adafruit_GFX13drawRoundRectEiiiiij+0x80>
    403e:	f8 86       	std	Y+8, r15	; 0x08
    4040:	ef 82       	std	Y+7, r14	; 0x07
    4042:	d5 01       	movw	r26, r10
    4044:	ed 91       	ld	r30, X+
    4046:	fc 91       	ld	r31, X
    4048:	02 84       	ldd	r0, Z+10	; 0x0a
    404a:	f3 85       	ldd	r31, Z+11	; 0x0b
    404c:	e0 2d       	mov	r30, r0
    404e:	c5 01       	movw	r24, r10
    4050:	09 95       	icall
    4052:	8f 81       	ldd	r24, Y+7	; 0x07
    4054:	98 85       	ldd	r25, Y+8	; 0x08
    4056:	88 0f       	add	r24, r24
    4058:	99 1f       	adc	r25, r25
    405a:	9c 83       	std	Y+4, r25	; 0x04
    405c:	8b 83       	std	Y+3, r24	; 0x03
    405e:	73 01       	movw	r14, r6
    4060:	e8 1a       	sub	r14, r24
    4062:	f9 0a       	sbc	r15, r25
    4064:	29 80       	ldd	r2, Y+1	; 0x01
    4066:	3a 80       	ldd	r3, Y+2	; 0x02
    4068:	af 81       	ldd	r26, Y+7	; 0x07
    406a:	b8 85       	ldd	r27, Y+8	; 0x08
    406c:	2a 0e       	add	r2, r26
    406e:	3b 1e       	adc	r3, r27
    4070:	d5 01       	movw	r26, r10
    4072:	ed 91       	ld	r30, X+
    4074:	fc 91       	ld	r31, X
    4076:	02 88       	ldd	r0, Z+18	; 0x12
    4078:	f3 89       	ldd	r31, Z+19	; 0x13
    407a:	e0 2d       	mov	r30, r0
    407c:	86 01       	movw	r16, r12
    407e:	97 01       	movw	r18, r14
    4080:	a2 01       	movw	r20, r4
    4082:	b1 01       	movw	r22, r2
    4084:	c5 01       	movw	r24, r10
    4086:	09 95       	icall
    4088:	c4 01       	movw	r24, r8
    408a:	84 0d       	add	r24, r4
    408c:	95 1d       	adc	r25, r5
    408e:	9e 83       	std	Y+6, r25	; 0x06
    4090:	8d 83       	std	Y+5, r24	; 0x05
    4092:	ac 01       	movw	r20, r24
    4094:	41 50       	subi	r20, 0x01	; 1
    4096:	51 09       	sbc	r21, r1
    4098:	d5 01       	movw	r26, r10
    409a:	ed 91       	ld	r30, X+
    409c:	fc 91       	ld	r31, X
    409e:	02 88       	ldd	r0, Z+18	; 0x12
    40a0:	f3 89       	ldd	r31, Z+19	; 0x13
    40a2:	e0 2d       	mov	r30, r0
    40a4:	97 01       	movw	r18, r14
    40a6:	b1 01       	movw	r22, r2
    40a8:	c5 01       	movw	r24, r10
    40aa:	09 95       	icall
    40ac:	8b 81       	ldd	r24, Y+3	; 0x03
    40ae:	9c 81       	ldd	r25, Y+4	; 0x04
    40b0:	88 1a       	sub	r8, r24
    40b2:	99 0a       	sbc	r9, r25
    40b4:	af 81       	ldd	r26, Y+7	; 0x07
    40b6:	b8 85       	ldd	r27, Y+8	; 0x08
    40b8:	4a 0e       	add	r4, r26
    40ba:	5b 1e       	adc	r5, r27
    40bc:	d5 01       	movw	r26, r10
    40be:	ed 91       	ld	r30, X+
    40c0:	fc 91       	ld	r31, X
    40c2:	00 88       	ldd	r0, Z+16	; 0x10
    40c4:	f1 89       	ldd	r31, Z+17	; 0x11
    40c6:	e0 2d       	mov	r30, r0
    40c8:	94 01       	movw	r18, r8
    40ca:	a2 01       	movw	r20, r4
    40cc:	69 81       	ldd	r22, Y+1	; 0x01
    40ce:	7a 81       	ldd	r23, Y+2	; 0x02
    40d0:	c5 01       	movw	r24, r10
    40d2:	09 95       	icall
    40d4:	89 81       	ldd	r24, Y+1	; 0x01
    40d6:	9a 81       	ldd	r25, Y+2	; 0x02
    40d8:	68 0e       	add	r6, r24
    40da:	79 1e       	adc	r7, r25
    40dc:	b3 01       	movw	r22, r6
    40de:	61 50       	subi	r22, 0x01	; 1
    40e0:	71 09       	sbc	r23, r1
    40e2:	d5 01       	movw	r26, r10
    40e4:	ed 91       	ld	r30, X+
    40e6:	fc 91       	ld	r31, X
    40e8:	00 88       	ldd	r0, Z+16	; 0x10
    40ea:	f1 89       	ldd	r31, Z+17	; 0x11
    40ec:	e0 2d       	mov	r30, r0
    40ee:	94 01       	movw	r18, r8
    40f0:	a2 01       	movw	r20, r4
    40f2:	c5 01       	movw	r24, r10
    40f4:	09 95       	icall
    40f6:	76 01       	movw	r14, r12
    40f8:	01 e0       	ldi	r16, 0x01	; 1
    40fa:	2f 81       	ldd	r18, Y+7	; 0x07
    40fc:	38 85       	ldd	r19, Y+8	; 0x08
    40fe:	a2 01       	movw	r20, r4
    4100:	b1 01       	movw	r22, r2
    4102:	c5 01       	movw	r24, r10
    4104:	0e 94 e3 1e 	call	0x3dc6	; 0x3dc6 <_ZN12Adafruit_GFX16drawCircleHelperEiiihj>
    4108:	8f 81       	ldd	r24, Y+7	; 0x07
    410a:	98 85       	ldd	r25, Y+8	; 0x08
    410c:	68 1a       	sub	r6, r24
    410e:	79 0a       	sbc	r7, r25
    4110:	91 e0       	ldi	r25, 0x01	; 1
    4112:	69 1a       	sub	r6, r25
    4114:	71 08       	sbc	r7, r1
    4116:	02 e0       	ldi	r16, 0x02	; 2
    4118:	2f 81       	ldd	r18, Y+7	; 0x07
    411a:	38 85       	ldd	r19, Y+8	; 0x08
    411c:	a2 01       	movw	r20, r4
    411e:	b3 01       	movw	r22, r6
    4120:	c5 01       	movw	r24, r10
    4122:	0e 94 e3 1e 	call	0x3dc6	; 0x3dc6 <_ZN12Adafruit_GFX16drawCircleHelperEiiihj>
    4126:	8d 80       	ldd	r8, Y+5	; 0x05
    4128:	9e 80       	ldd	r9, Y+6	; 0x06
    412a:	af 81       	ldd	r26, Y+7	; 0x07
    412c:	b8 85       	ldd	r27, Y+8	; 0x08
    412e:	8a 1a       	sub	r8, r26
    4130:	9b 0a       	sbc	r9, r27
    4132:	b1 e0       	ldi	r27, 0x01	; 1
    4134:	8b 1a       	sub	r8, r27
    4136:	91 08       	sbc	r9, r1
    4138:	04 e0       	ldi	r16, 0x04	; 4
    413a:	2f 81       	ldd	r18, Y+7	; 0x07
    413c:	38 85       	ldd	r19, Y+8	; 0x08
    413e:	a4 01       	movw	r20, r8
    4140:	b3 01       	movw	r22, r6
    4142:	c5 01       	movw	r24, r10
    4144:	0e 94 e3 1e 	call	0x3dc6	; 0x3dc6 <_ZN12Adafruit_GFX16drawCircleHelperEiiihj>
    4148:	08 e0       	ldi	r16, 0x08	; 8
    414a:	2f 81       	ldd	r18, Y+7	; 0x07
    414c:	38 85       	ldd	r19, Y+8	; 0x08
    414e:	a4 01       	movw	r20, r8
    4150:	b1 01       	movw	r22, r2
    4152:	c5 01       	movw	r24, r10
    4154:	0e 94 e3 1e 	call	0x3dc6	; 0x3dc6 <_ZN12Adafruit_GFX16drawCircleHelperEiiihj>
    4158:	d5 01       	movw	r26, r10
    415a:	ed 91       	ld	r30, X+
    415c:	fc 91       	ld	r31, X
    415e:	06 88       	ldd	r0, Z+22	; 0x16
    4160:	f7 89       	ldd	r31, Z+23	; 0x17
    4162:	e0 2d       	mov	r30, r0
    4164:	c5 01       	movw	r24, r10
    4166:	28 96       	adiw	r28, 0x08	; 8
    4168:	0f b6       	in	r0, 0x3f	; 63
    416a:	f8 94       	cli
    416c:	de bf       	out	0x3e, r29	; 62
    416e:	0f be       	out	0x3f, r0	; 63
    4170:	cd bf       	out	0x3d, r28	; 61
    4172:	df 91       	pop	r29
    4174:	cf 91       	pop	r28
    4176:	1f 91       	pop	r17
    4178:	0f 91       	pop	r16
    417a:	ff 90       	pop	r15
    417c:	ef 90       	pop	r14
    417e:	df 90       	pop	r13
    4180:	cf 90       	pop	r12
    4182:	bf 90       	pop	r11
    4184:	af 90       	pop	r10
    4186:	9f 90       	pop	r9
    4188:	8f 90       	pop	r8
    418a:	7f 90       	pop	r7
    418c:	6f 90       	pop	r6
    418e:	5f 90       	pop	r5
    4190:	4f 90       	pop	r4
    4192:	3f 90       	pop	r3
    4194:	2f 90       	pop	r2
    4196:	09 94       	ijmp

00004198 <_ZN12Adafruit_GFX12fillTriangleEiiiiiij>:
    4198:	2f 92       	push	r2
    419a:	3f 92       	push	r3
    419c:	4f 92       	push	r4
    419e:	5f 92       	push	r5
    41a0:	6f 92       	push	r6
    41a2:	7f 92       	push	r7
    41a4:	8f 92       	push	r8
    41a6:	9f 92       	push	r9
    41a8:	af 92       	push	r10
    41aa:	bf 92       	push	r11
    41ac:	cf 92       	push	r12
    41ae:	df 92       	push	r13
    41b0:	ef 92       	push	r14
    41b2:	ff 92       	push	r15
    41b4:	0f 93       	push	r16
    41b6:	1f 93       	push	r17
    41b8:	cf 93       	push	r28
    41ba:	df 93       	push	r29
    41bc:	cd b7       	in	r28, 0x3d	; 61
    41be:	de b7       	in	r29, 0x3e	; 62
    41c0:	aa 97       	sbiw	r28, 0x2a	; 42
    41c2:	0f b6       	in	r0, 0x3f	; 63
    41c4:	f8 94       	cli
    41c6:	de bf       	out	0x3e, r29	; 62
    41c8:	0f be       	out	0x3f, r0	; 63
    41ca:	cd bf       	out	0x3d, r28	; 61
    41cc:	9a 83       	std	Y+2, r25	; 0x02
    41ce:	89 83       	std	Y+1, r24	; 0x01
    41d0:	7a a7       	std	Y+42, r23	; 0x2a
    41d2:	69 a7       	std	Y+41, r22	; 0x29
    41d4:	4a 01       	movw	r8, r20
    41d6:	19 01       	movw	r2, r18
    41d8:	38 01       	movw	r6, r16
    41da:	ba 8a       	std	Y+18, r11	; 0x12
    41dc:	a9 8a       	std	Y+17, r10	; 0x11
    41de:	04 17       	cp	r16, r20
    41e0:	15 07       	cpc	r17, r21
    41e2:	54 f4       	brge	.+20     	; 0x41f8 <_ZN12Adafruit_GFX12fillTriangleEiiiiiij+0x60>
    41e4:	c4 16       	cp	r12, r20
    41e6:	d5 06       	cpc	r13, r21
    41e8:	a4 f4       	brge	.+40     	; 0x4212 <_ZN12Adafruit_GFX12fillTriangleEiiiiiij+0x7a>
    41ea:	5c 83       	std	Y+4, r21	; 0x04
    41ec:	4b 83       	std	Y+3, r20	; 0x03
    41ee:	48 01       	movw	r8, r16
    41f0:	5b 01       	movw	r10, r22
    41f2:	3a a7       	std	Y+42, r19	; 0x2a
    41f4:	29 a7       	std	Y+41, r18	; 0x29
    41f6:	07 c0       	rjmp	.+14     	; 0x4206 <_ZN12Adafruit_GFX12fillTriangleEiiiiiij+0x6e>
    41f8:	c0 16       	cp	r12, r16
    41fa:	d1 06       	cpc	r13, r17
    41fc:	0c f0       	brlt	.+2      	; 0x4200 <_ZN12Adafruit_GFX12fillTriangleEiiiiiij+0x68>
    41fe:	aa c1       	rjmp	.+852    	; 0x4554 <_ZN12Adafruit_GFX12fillTriangleEiiiiiij+0x3bc>
    4200:	7c 82       	std	Y+4, r7	; 0x04
    4202:	6b 82       	std	Y+3, r6	; 0x03
    4204:	51 01       	movw	r10, r2
    4206:	c8 14       	cp	r12, r8
    4208:	d9 04       	cpc	r13, r9
    420a:	84 f0       	brlt	.+32     	; 0x422c <_ZN12Adafruit_GFX12fillTriangleEiiiiiij+0x94>
    420c:	36 01       	movw	r6, r12
    420e:	17 01       	movw	r2, r14
    4210:	13 c0       	rjmp	.+38     	; 0x4238 <_ZN12Adafruit_GFX12fillTriangleEiiiiiij+0xa0>
    4212:	dc 82       	std	Y+4, r13	; 0x04
    4214:	cb 82       	std	Y+3, r12	; 0x03
    4216:	57 01       	movw	r10, r14
    4218:	87 2d       	mov	r24, r7
    421a:	3a 01       	movw	r6, r20
    421c:	80 2e       	mov	r8, r16
    421e:	98 2e       	mov	r9, r24
    4220:	83 2d       	mov	r24, r3
    4222:	29 a4       	ldd	r2, Y+41	; 0x29
    4224:	3a a4       	ldd	r3, Y+42	; 0x2a
    4226:	29 a7       	std	Y+41, r18	; 0x29
    4228:	8a a7       	std	Y+42, r24	; 0x2a
    422a:	06 c0       	rjmp	.+12     	; 0x4238 <_ZN12Adafruit_GFX12fillTriangleEiiiiiij+0xa0>
    422c:	34 01       	movw	r6, r8
    422e:	29 a4       	ldd	r2, Y+41	; 0x29
    4230:	3a a4       	ldd	r3, Y+42	; 0x2a
    4232:	46 01       	movw	r8, r12
    4234:	e9 a6       	std	Y+41, r14	; 0x29
    4236:	fa a6       	std	Y+42, r15	; 0x2a
    4238:	a9 81       	ldd	r26, Y+1	; 0x01
    423a:	ba 81       	ldd	r27, Y+2	; 0x02
    423c:	ed 91       	ld	r30, X+
    423e:	fc 91       	ld	r31, X
    4240:	11 97       	sbiw	r26, 0x01	; 1
    4242:	02 84       	ldd	r0, Z+10	; 0x0a
    4244:	f3 85       	ldd	r31, Z+11	; 0x0b
    4246:	e0 2d       	mov	r30, r0
    4248:	cd 01       	movw	r24, r26
    424a:	09 95       	icall
    424c:	2b 81       	ldd	r18, Y+3	; 0x03
    424e:	3c 81       	ldd	r19, Y+4	; 0x04
    4250:	82 16       	cp	r8, r18
    4252:	93 06       	cpc	r9, r19
    4254:	81 f5       	brne	.+96     	; 0x42b6 <_ZN12Adafruit_GFX12fillTriangleEiiiiiij+0x11e>
    4256:	49 a5       	ldd	r20, Y+41	; 0x29
    4258:	5a a5       	ldd	r21, Y+42	; 0x2a
    425a:	24 16       	cp	r2, r20
    425c:	35 06       	cpc	r3, r21
    425e:	5c f0       	brlt	.+22     	; 0x4276 <_ZN12Adafruit_GFX12fillTriangleEiiiiiij+0xde>
    4260:	99 a5       	ldd	r25, Y+41	; 0x29
    4262:	8a a5       	ldd	r24, Y+42	; 0x2a
    4264:	42 15       	cp	r20, r2
    4266:	53 05       	cpc	r21, r3
    4268:	14 f4       	brge	.+4      	; 0x426e <_ZN12Adafruit_GFX12fillTriangleEiiiiiij+0xd6>
    426a:	92 2d       	mov	r25, r2
    426c:	83 2d       	mov	r24, r3
    426e:	29 a4       	ldd	r2, Y+41	; 0x29
    4270:	3a a4       	ldd	r3, Y+42	; 0x2a
    4272:	99 a7       	std	Y+41, r25	; 0x29
    4274:	8a a7       	std	Y+42, r24	; 0x2a
    4276:	a2 14       	cp	r10, r2
    4278:	b3 04       	cpc	r11, r3
    427a:	44 f0       	brlt	.+16     	; 0x428c <_ZN12Adafruit_GFX12fillTriangleEiiiiiij+0xf4>
    427c:	69 a5       	ldd	r22, Y+41	; 0x29
    427e:	7a a5       	ldd	r23, Y+42	; 0x2a
    4280:	6a 15       	cp	r22, r10
    4282:	7b 05       	cpc	r23, r11
    4284:	14 f4       	brge	.+4      	; 0x428a <_ZN12Adafruit_GFX12fillTriangleEiiiiiij+0xf2>
    4286:	ba a6       	std	Y+42, r11	; 0x2a
    4288:	a9 a6       	std	Y+41, r10	; 0x29
    428a:	51 01       	movw	r10, r2
    428c:	29 a5       	ldd	r18, Y+41	; 0x29
    428e:	3a a5       	ldd	r19, Y+42	; 0x2a
    4290:	2a 19       	sub	r18, r10
    4292:	3b 09       	sbc	r19, r11
    4294:	2f 5f       	subi	r18, 0xFF	; 255
    4296:	3f 4f       	sbci	r19, 0xFF	; 255
    4298:	a9 81       	ldd	r26, Y+1	; 0x01
    429a:	ba 81       	ldd	r27, Y+2	; 0x02
    429c:	ed 91       	ld	r30, X+
    429e:	fc 91       	ld	r31, X
    42a0:	11 97       	sbiw	r26, 0x01	; 1
    42a2:	02 88       	ldd	r0, Z+18	; 0x12
    42a4:	f3 89       	ldd	r31, Z+19	; 0x13
    42a6:	e0 2d       	mov	r30, r0
    42a8:	09 89       	ldd	r16, Y+17	; 0x11
    42aa:	1a 89       	ldd	r17, Y+18	; 0x12
    42ac:	a4 01       	movw	r20, r8
    42ae:	b5 01       	movw	r22, r10
    42b0:	cd 01       	movw	r24, r26
    42b2:	09 95       	icall
    42b4:	2d c1       	rjmp	.+602    	; 0x4510 <_ZN12Adafruit_GFX12fillTriangleEiiiiiij+0x378>
    42b6:	c1 01       	movw	r24, r2
    42b8:	29 a5       	ldd	r18, Y+41	; 0x29
    42ba:	3a a5       	ldd	r19, Y+42	; 0x2a
    42bc:	82 1b       	sub	r24, r18
    42be:	93 0b       	sbc	r25, r19
    42c0:	93 01       	movw	r18, r6
    42c2:	28 19       	sub	r18, r8
    42c4:	39 09       	sbc	r19, r9
    42c6:	65 01       	movw	r12, r10
    42c8:	49 a5       	ldd	r20, Y+41	; 0x29
    42ca:	5a a5       	ldd	r21, Y+42	; 0x2a
    42cc:	c4 1a       	sub	r12, r20
    42ce:	d5 0a       	sbc	r13, r21
    42d0:	6b 81       	ldd	r22, Y+3	; 0x03
    42d2:	7c 81       	ldd	r23, Y+4	; 0x04
    42d4:	68 19       	sub	r22, r8
    42d6:	79 09       	sbc	r23, r9
    42d8:	7a 87       	std	Y+10, r23	; 0x0a
    42da:	69 87       	std	Y+9, r22	; 0x09
    42dc:	25 01       	movw	r4, r10
    42de:	42 18       	sub	r4, r2
    42e0:	53 08       	sbc	r5, r3
    42e2:	ab 81       	ldd	r26, Y+3	; 0x03
    42e4:	bc 81       	ldd	r27, Y+4	; 0x04
    42e6:	a6 19       	sub	r26, r6
    42e8:	b7 09       	sbc	r27, r7
    42ea:	bc 8b       	std	Y+20, r27	; 0x14
    42ec:	ab 8b       	std	Y+19, r26	; 0x13
    42ee:	4b 81       	ldd	r20, Y+3	; 0x03
    42f0:	5c 81       	ldd	r21, Y+4	; 0x04
    42f2:	64 16       	cp	r6, r20
    42f4:	75 06       	cpc	r7, r21
    42f6:	31 f0       	breq	.+12     	; 0x4304 <_ZN12Adafruit_GFX12fillTriangleEiiiiiij+0x16c>
    42f8:	b3 01       	movw	r22, r6
    42fa:	61 50       	subi	r22, 0x01	; 1
    42fc:	71 09       	sbc	r23, r1
    42fe:	78 8f       	std	Y+24, r23	; 0x18
    4300:	6f 8b       	std	Y+23, r22	; 0x17
    4302:	02 c0       	rjmp	.+4      	; 0x4308 <_ZN12Adafruit_GFX12fillTriangleEiiiiiij+0x170>
    4304:	78 8e       	std	Y+24, r7	; 0x18
    4306:	6f 8a       	std	Y+23, r6	; 0x17
    4308:	54 01       	movw	r10, r8
    430a:	1d 86       	std	Y+13, r1	; 0x0d
    430c:	1e 86       	std	Y+14, r1	; 0x0e
    430e:	1f 86       	std	Y+15, r1	; 0x0f
    4310:	18 8a       	std	Y+16, r1	; 0x10
    4312:	1d 82       	std	Y+5, r1	; 0x05
    4314:	1e 82       	std	Y+6, r1	; 0x06
    4316:	1f 82       	std	Y+7, r1	; 0x07
    4318:	18 86       	std	Y+8, r1	; 0x08
    431a:	a6 01       	movw	r20, r12
    431c:	0d 2c       	mov	r0, r13
    431e:	00 0c       	add	r0, r0
    4320:	66 0b       	sbc	r22, r22
    4322:	77 0b       	sbc	r23, r23
    4324:	49 8f       	std	Y+25, r20	; 0x19
    4326:	5a 8f       	std	Y+26, r21	; 0x1a
    4328:	6b 8f       	std	Y+27, r22	; 0x1b
    432a:	7c 8f       	std	Y+28, r23	; 0x1c
    432c:	a9 01       	movw	r20, r18
    432e:	33 0f       	add	r19, r19
    4330:	66 0b       	sbc	r22, r22
    4332:	77 0b       	sbc	r23, r23
    4334:	4d 8f       	std	Y+29, r20	; 0x1d
    4336:	5e 8f       	std	Y+30, r21	; 0x1e
    4338:	6f 8f       	std	Y+31, r22	; 0x1f
    433a:	78 a3       	std	Y+32, r23	; 0x20
    433c:	29 85       	ldd	r18, Y+9	; 0x09
    433e:	3a 85       	ldd	r19, Y+10	; 0x0a
    4340:	03 2e       	mov	r0, r19
    4342:	00 0c       	add	r0, r0
    4344:	44 0b       	sbc	r20, r20
    4346:	55 0b       	sbc	r21, r21
    4348:	29 a3       	std	Y+33, r18	; 0x21
    434a:	3a a3       	std	Y+34, r19	; 0x22
    434c:	4b a3       	std	Y+35, r20	; 0x23
    434e:	5c a3       	std	Y+36, r21	; 0x24
    4350:	ac 01       	movw	r20, r24
    4352:	99 0f       	add	r25, r25
    4354:	66 0b       	sbc	r22, r22
    4356:	77 0b       	sbc	r23, r23
    4358:	4d a3       	std	Y+37, r20	; 0x25
    435a:	5e a3       	std	Y+38, r21	; 0x26
    435c:	6f a3       	std	Y+39, r22	; 0x27
    435e:	78 a7       	std	Y+40, r23	; 0x28
    4360:	6f 89       	ldd	r22, Y+23	; 0x17
    4362:	78 8d       	ldd	r23, Y+24	; 0x18
    4364:	6a 15       	cp	r22, r10
    4366:	7b 05       	cpc	r23, r11
    4368:	0c f4       	brge	.+2      	; 0x436c <_ZN12Adafruit_GFX12fillTriangleEiiiiiij+0x1d4>
    436a:	5a c0       	rjmp	.+180    	; 0x4420 <_ZN12Adafruit_GFX12fillTriangleEiiiiiij+0x288>
    436c:	6d 81       	ldd	r22, Y+5	; 0x05
    436e:	7e 81       	ldd	r23, Y+6	; 0x06
    4370:	8f 81       	ldd	r24, Y+7	; 0x07
    4372:	98 85       	ldd	r25, Y+8	; 0x08
    4374:	2d 8d       	ldd	r18, Y+29	; 0x1d
    4376:	3e 8d       	ldd	r19, Y+30	; 0x1e
    4378:	4f 8d       	ldd	r20, Y+31	; 0x1f
    437a:	58 a1       	ldd	r21, Y+32	; 0x20
    437c:	0e 94 ca 31 	call	0x6394	; 0x6394 <__divmodsi4>
    4380:	e9 a4       	ldd	r14, Y+41	; 0x29
    4382:	fa a4       	ldd	r15, Y+42	; 0x2a
    4384:	e2 0e       	add	r14, r18
    4386:	f3 1e       	adc	r15, r19
    4388:	6d 85       	ldd	r22, Y+13	; 0x0d
    438a:	7e 85       	ldd	r23, Y+14	; 0x0e
    438c:	8f 85       	ldd	r24, Y+15	; 0x0f
    438e:	98 89       	ldd	r25, Y+16	; 0x10
    4390:	29 a1       	ldd	r18, Y+33	; 0x21
    4392:	3a a1       	ldd	r19, Y+34	; 0x22
    4394:	4b a1       	ldd	r20, Y+35	; 0x23
    4396:	5c a1       	ldd	r21, Y+36	; 0x24
    4398:	0e 94 ca 31 	call	0x6394	; 0x6394 <__divmodsi4>
    439c:	89 a5       	ldd	r24, Y+41	; 0x29
    439e:	9a a5       	ldd	r25, Y+42	; 0x2a
    43a0:	28 0f       	add	r18, r24
    43a2:	39 1f       	adc	r19, r25
    43a4:	4d 81       	ldd	r20, Y+5	; 0x05
    43a6:	5e 81       	ldd	r21, Y+6	; 0x06
    43a8:	6f 81       	ldd	r22, Y+7	; 0x07
    43aa:	78 85       	ldd	r23, Y+8	; 0x08
    43ac:	8d a1       	ldd	r24, Y+37	; 0x25
    43ae:	9e a1       	ldd	r25, Y+38	; 0x26
    43b0:	af a1       	ldd	r26, Y+39	; 0x27
    43b2:	b8 a5       	ldd	r27, Y+40	; 0x28
    43b4:	48 0f       	add	r20, r24
    43b6:	59 1f       	adc	r21, r25
    43b8:	6a 1f       	adc	r22, r26
    43ba:	7b 1f       	adc	r23, r27
    43bc:	4d 83       	std	Y+5, r20	; 0x05
    43be:	5e 83       	std	Y+6, r21	; 0x06
    43c0:	6f 83       	std	Y+7, r22	; 0x07
    43c2:	78 87       	std	Y+8, r23	; 0x08
    43c4:	4d 85       	ldd	r20, Y+13	; 0x0d
    43c6:	5e 85       	ldd	r21, Y+14	; 0x0e
    43c8:	6f 85       	ldd	r22, Y+15	; 0x0f
    43ca:	78 89       	ldd	r23, Y+16	; 0x10
    43cc:	89 8d       	ldd	r24, Y+25	; 0x19
    43ce:	9a 8d       	ldd	r25, Y+26	; 0x1a
    43d0:	ab 8d       	ldd	r26, Y+27	; 0x1b
    43d2:	bc 8d       	ldd	r27, Y+28	; 0x1c
    43d4:	48 0f       	add	r20, r24
    43d6:	59 1f       	adc	r21, r25
    43d8:	6a 1f       	adc	r22, r26
    43da:	7b 1f       	adc	r23, r27
    43dc:	4d 87       	std	Y+13, r20	; 0x0d
    43de:	5e 87       	std	Y+14, r21	; 0x0e
    43e0:	6f 87       	std	Y+15, r22	; 0x0f
    43e2:	78 8b       	std	Y+16, r23	; 0x10
    43e4:	2e 15       	cp	r18, r14
    43e6:	3f 05       	cpc	r19, r15
    43e8:	2c f4       	brge	.+10     	; 0x43f4 <_ZN12Adafruit_GFX12fillTriangleEiiiiiij+0x25c>
    43ea:	9e 2d       	mov	r25, r14
    43ec:	8f 2d       	mov	r24, r15
    43ee:	79 01       	movw	r14, r18
    43f0:	29 2f       	mov	r18, r25
    43f2:	38 2f       	mov	r19, r24
    43f4:	2e 19       	sub	r18, r14
    43f6:	3f 09       	sbc	r19, r15
    43f8:	2f 5f       	subi	r18, 0xFF	; 255
    43fa:	3f 4f       	sbci	r19, 0xFF	; 255
    43fc:	a9 81       	ldd	r26, Y+1	; 0x01
    43fe:	ba 81       	ldd	r27, Y+2	; 0x02
    4400:	ed 91       	ld	r30, X+
    4402:	fc 91       	ld	r31, X
    4404:	11 97       	sbiw	r26, 0x01	; 1
    4406:	02 88       	ldd	r0, Z+18	; 0x12
    4408:	f3 89       	ldd	r31, Z+19	; 0x13
    440a:	e0 2d       	mov	r30, r0
    440c:	09 89       	ldd	r16, Y+17	; 0x11
    440e:	1a 89       	ldd	r17, Y+18	; 0x12
    4410:	a5 01       	movw	r20, r10
    4412:	b7 01       	movw	r22, r14
    4414:	cd 01       	movw	r24, r26
    4416:	09 95       	icall
    4418:	bf ef       	ldi	r27, 0xFF	; 255
    441a:	ab 1a       	sub	r10, r27
    441c:	bb 0a       	sbc	r11, r27
    441e:	a0 cf       	rjmp	.-192    	; 0x4360 <_ZN12Adafruit_GFX12fillTriangleEiiiiiij+0x1c8>
    4420:	92 01       	movw	r18, r4
    4422:	05 2c       	mov	r0, r5
    4424:	00 0c       	add	r0, r0
    4426:	44 0b       	sbc	r20, r20
    4428:	55 0b       	sbc	r21, r21
    442a:	2d 83       	std	Y+5, r18	; 0x05
    442c:	3e 83       	std	Y+6, r19	; 0x06
    442e:	4f 83       	std	Y+7, r20	; 0x07
    4430:	58 87       	std	Y+8, r21	; 0x08
    4432:	d5 01       	movw	r26, r10
    4434:	a6 19       	sub	r26, r6
    4436:	b7 09       	sbc	r27, r7
    4438:	92 01       	movw	r18, r4
    443a:	0e 94 e9 31 	call	0x63d2	; 0x63d2 <__mulhisi3>
    443e:	2b 01       	movw	r4, r22
    4440:	3c 01       	movw	r6, r24
    4442:	d5 01       	movw	r26, r10
    4444:	a8 19       	sub	r26, r8
    4446:	b9 09       	sbc	r27, r9
    4448:	96 01       	movw	r18, r12
    444a:	0e 94 e9 31 	call	0x63d2	; 0x63d2 <__mulhisi3>
    444e:	6b 01       	movw	r12, r22
    4450:	7c 01       	movw	r14, r24
    4452:	4b 89       	ldd	r20, Y+19	; 0x13
    4454:	5c 89       	ldd	r21, Y+20	; 0x14
    4456:	05 2e       	mov	r0, r21
    4458:	00 0c       	add	r0, r0
    445a:	66 0b       	sbc	r22, r22
    445c:	77 0b       	sbc	r23, r23
    445e:	4b 8b       	std	Y+19, r20	; 0x13
    4460:	5c 8b       	std	Y+20, r21	; 0x14
    4462:	6d 8b       	std	Y+21, r22	; 0x15
    4464:	7e 8b       	std	Y+22, r23	; 0x16
    4466:	69 85       	ldd	r22, Y+9	; 0x09
    4468:	7a 85       	ldd	r23, Y+10	; 0x0a
    446a:	07 2e       	mov	r0, r23
    446c:	00 0c       	add	r0, r0
    446e:	88 0b       	sbc	r24, r24
    4470:	99 0b       	sbc	r25, r25
    4472:	69 87       	std	Y+9, r22	; 0x09
    4474:	7a 87       	std	Y+10, r23	; 0x0a
    4476:	8b 87       	std	Y+11, r24	; 0x0b
    4478:	9c 87       	std	Y+12, r25	; 0x0c
    447a:	8b 81       	ldd	r24, Y+3	; 0x03
    447c:	9c 81       	ldd	r25, Y+4	; 0x04
    447e:	8a 15       	cp	r24, r10
    4480:	9b 05       	cpc	r25, r11
    4482:	0c f4       	brge	.+2      	; 0x4486 <_ZN12Adafruit_GFX12fillTriangleEiiiiiij+0x2ee>
    4484:	45 c0       	rjmp	.+138    	; 0x4510 <_ZN12Adafruit_GFX12fillTriangleEiiiiiij+0x378>
    4486:	c3 01       	movw	r24, r6
    4488:	b2 01       	movw	r22, r4
    448a:	2b 89       	ldd	r18, Y+19	; 0x13
    448c:	3c 89       	ldd	r19, Y+20	; 0x14
    448e:	4d 89       	ldd	r20, Y+21	; 0x15
    4490:	5e 89       	ldd	r21, Y+22	; 0x16
    4492:	0e 94 ca 31 	call	0x6394	; 0x6394 <__divmodsi4>
    4496:	41 01       	movw	r8, r2
    4498:	82 0e       	add	r8, r18
    449a:	93 1e       	adc	r9, r19
    449c:	c7 01       	movw	r24, r14
    449e:	b6 01       	movw	r22, r12
    44a0:	29 85       	ldd	r18, Y+9	; 0x09
    44a2:	3a 85       	ldd	r19, Y+10	; 0x0a
    44a4:	4b 85       	ldd	r20, Y+11	; 0x0b
    44a6:	5c 85       	ldd	r21, Y+12	; 0x0c
    44a8:	0e 94 ca 31 	call	0x6394	; 0x6394 <__divmodsi4>
    44ac:	a9 a5       	ldd	r26, Y+41	; 0x29
    44ae:	ba a5       	ldd	r27, Y+42	; 0x2a
    44b0:	2a 0f       	add	r18, r26
    44b2:	3b 1f       	adc	r19, r27
    44b4:	4d 81       	ldd	r20, Y+5	; 0x05
    44b6:	5e 81       	ldd	r21, Y+6	; 0x06
    44b8:	6f 81       	ldd	r22, Y+7	; 0x07
    44ba:	78 85       	ldd	r23, Y+8	; 0x08
    44bc:	44 0e       	add	r4, r20
    44be:	55 1e       	adc	r5, r21
    44c0:	66 1e       	adc	r6, r22
    44c2:	77 1e       	adc	r7, r23
    44c4:	69 8d       	ldd	r22, Y+25	; 0x19
    44c6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    44c8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    44ca:	9c 8d       	ldd	r25, Y+28	; 0x1c
    44cc:	c6 0e       	add	r12, r22
    44ce:	d7 1e       	adc	r13, r23
    44d0:	e8 1e       	adc	r14, r24
    44d2:	f9 1e       	adc	r15, r25
    44d4:	28 15       	cp	r18, r8
    44d6:	39 05       	cpc	r19, r9
    44d8:	2c f4       	brge	.+10     	; 0x44e4 <_ZN12Adafruit_GFX12fillTriangleEiiiiiij+0x34c>
    44da:	98 2d       	mov	r25, r8
    44dc:	89 2d       	mov	r24, r9
    44de:	49 01       	movw	r8, r18
    44e0:	29 2f       	mov	r18, r25
    44e2:	38 2f       	mov	r19, r24
    44e4:	28 19       	sub	r18, r8
    44e6:	39 09       	sbc	r19, r9
    44e8:	2f 5f       	subi	r18, 0xFF	; 255
    44ea:	3f 4f       	sbci	r19, 0xFF	; 255
    44ec:	a9 81       	ldd	r26, Y+1	; 0x01
    44ee:	ba 81       	ldd	r27, Y+2	; 0x02
    44f0:	ed 91       	ld	r30, X+
    44f2:	fc 91       	ld	r31, X
    44f4:	11 97       	sbiw	r26, 0x01	; 1
    44f6:	02 88       	ldd	r0, Z+18	; 0x12
    44f8:	f3 89       	ldd	r31, Z+19	; 0x13
    44fa:	e0 2d       	mov	r30, r0
    44fc:	09 89       	ldd	r16, Y+17	; 0x11
    44fe:	1a 89       	ldd	r17, Y+18	; 0x12
    4500:	a5 01       	movw	r20, r10
    4502:	b4 01       	movw	r22, r8
    4504:	cd 01       	movw	r24, r26
    4506:	09 95       	icall
    4508:	bf ef       	ldi	r27, 0xFF	; 255
    450a:	ab 1a       	sub	r10, r27
    450c:	bb 0a       	sbc	r11, r27
    450e:	b5 cf       	rjmp	.-150    	; 0x447a <_ZN12Adafruit_GFX12fillTriangleEiiiiiij+0x2e2>
    4510:	a9 81       	ldd	r26, Y+1	; 0x01
    4512:	ba 81       	ldd	r27, Y+2	; 0x02
    4514:	ed 91       	ld	r30, X+
    4516:	fc 91       	ld	r31, X
    4518:	11 97       	sbiw	r26, 0x01	; 1
    451a:	06 88       	ldd	r0, Z+22	; 0x16
    451c:	f7 89       	ldd	r31, Z+23	; 0x17
    451e:	e0 2d       	mov	r30, r0
    4520:	cd 01       	movw	r24, r26
    4522:	aa 96       	adiw	r28, 0x2a	; 42
    4524:	0f b6       	in	r0, 0x3f	; 63
    4526:	f8 94       	cli
    4528:	de bf       	out	0x3e, r29	; 62
    452a:	0f be       	out	0x3f, r0	; 63
    452c:	cd bf       	out	0x3d, r28	; 61
    452e:	df 91       	pop	r29
    4530:	cf 91       	pop	r28
    4532:	1f 91       	pop	r17
    4534:	0f 91       	pop	r16
    4536:	ff 90       	pop	r15
    4538:	ef 90       	pop	r14
    453a:	df 90       	pop	r13
    453c:	cf 90       	pop	r12
    453e:	bf 90       	pop	r11
    4540:	af 90       	pop	r10
    4542:	9f 90       	pop	r9
    4544:	8f 90       	pop	r8
    4546:	7f 90       	pop	r7
    4548:	6f 90       	pop	r6
    454a:	5f 90       	pop	r5
    454c:	4f 90       	pop	r4
    454e:	3f 90       	pop	r3
    4550:	2f 90       	pop	r2
    4552:	09 94       	ijmp
    4554:	dc 82       	std	Y+4, r13	; 0x04
    4556:	cb 82       	std	Y+3, r12	; 0x03
    4558:	57 01       	movw	r10, r14
    455a:	6e ce       	rjmp	.-804    	; 0x4238 <_ZN12Adafruit_GFX12fillTriangleEiiiiiij+0xa0>

0000455c <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij>:
    455c:	3f 92       	push	r3
    455e:	4f 92       	push	r4
    4560:	5f 92       	push	r5
    4562:	6f 92       	push	r6
    4564:	7f 92       	push	r7
    4566:	8f 92       	push	r8
    4568:	9f 92       	push	r9
    456a:	af 92       	push	r10
    456c:	bf 92       	push	r11
    456e:	cf 92       	push	r12
    4570:	df 92       	push	r13
    4572:	ef 92       	push	r14
    4574:	ff 92       	push	r15
    4576:	0f 93       	push	r16
    4578:	1f 93       	push	r17
    457a:	cf 93       	push	r28
    457c:	df 93       	push	r29
    457e:	cd b7       	in	r28, 0x3d	; 61
    4580:	de b7       	in	r29, 0x3e	; 62
    4582:	2a 97       	sbiw	r28, 0x0a	; 10
    4584:	0f b6       	in	r0, 0x3f	; 63
    4586:	f8 94       	cli
    4588:	de bf       	out	0x3e, r29	; 62
    458a:	0f be       	out	0x3f, r0	; 63
    458c:	cd bf       	out	0x3d, r28	; 61
    458e:	5c 01       	movw	r10, r24
    4590:	7e 83       	std	Y+6, r23	; 0x06
    4592:	6d 83       	std	Y+5, r22	; 0x05
    4594:	58 87       	std	Y+8, r21	; 0x08
    4596:	4f 83       	std	Y+7, r20	; 0x07
    4598:	29 01       	movw	r4, r18
    459a:	37 01       	movw	r6, r14
    459c:	dc 01       	movw	r26, r24
    459e:	ed 91       	ld	r30, X+
    45a0:	fc 91       	ld	r31, X
    45a2:	02 84       	ldd	r0, Z+10	; 0x0a
    45a4:	f3 85       	ldd	r31, Z+11	; 0x0b
    45a6:	e0 2d       	mov	r30, r0
    45a8:	09 95       	icall
    45aa:	c8 01       	movw	r24, r16
    45ac:	07 96       	adiw	r24, 0x07	; 7
    45ae:	97 fd       	sbrc	r25, 7
    45b0:	07 96       	adiw	r24, 0x07	; 7
    45b2:	9c 01       	movw	r18, r24
    45b4:	93 e0       	ldi	r25, 0x03	; 3
    45b6:	35 95       	asr	r19
    45b8:	27 95       	ror	r18
    45ba:	9a 95       	dec	r25
    45bc:	e1 f7       	brne	.-8      	; 0x45b6 <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij+0x5a>
    45be:	3a 83       	std	Y+2, r19	; 0x02
    45c0:	29 83       	std	Y+1, r18	; 0x01
    45c2:	81 2c       	mov	r8, r1
    45c4:	91 2c       	mov	r9, r1
    45c6:	e1 2c       	mov	r14, r1
    45c8:	f1 2c       	mov	r15, r1
    45ca:	31 2c       	mov	r3, r1
    45cc:	8f 81       	ldd	r24, Y+7	; 0x07
    45ce:	98 85       	ldd	r25, Y+8	; 0x08
    45d0:	8e 0d       	add	r24, r14
    45d2:	9f 1d       	adc	r25, r15
    45d4:	9c 83       	std	Y+4, r25	; 0x04
    45d6:	8b 83       	std	Y+3, r24	; 0x03
    45d8:	e6 14       	cp	r14, r6
    45da:	f7 04       	cpc	r15, r7
    45dc:	0c f0       	brlt	.+2      	; 0x45e0 <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij+0x84>
    45de:	3d c0       	rjmp	.+122    	; 0x465a <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij+0xfe>
    45e0:	1a 86       	std	Y+10, r1	; 0x0a
    45e2:	19 86       	std	Y+9, r1	; 0x09
    45e4:	a9 85       	ldd	r26, Y+9	; 0x09
    45e6:	ba 85       	ldd	r27, Y+10	; 0x0a
    45e8:	a0 17       	cp	r26, r16
    45ea:	b1 07       	cpc	r27, r17
    45ec:	74 f5       	brge	.+92     	; 0x464a <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij+0xee>
    45ee:	cd 01       	movw	r24, r26
    45f0:	87 70       	andi	r24, 0x07	; 7
    45f2:	99 27       	eor	r25, r25
    45f4:	89 2b       	or	r24, r25
    45f6:	11 f0       	breq	.+4      	; 0x45fc <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij+0xa0>
    45f8:	33 0c       	add	r3, r3
    45fa:	0e c0       	rjmp	.+28     	; 0x4618 <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij+0xbc>
    45fc:	e9 85       	ldd	r30, Y+9	; 0x09
    45fe:	fa 85       	ldd	r31, Y+10	; 0x0a
    4600:	f7 fd       	sbrc	r31, 7
    4602:	37 96       	adiw	r30, 0x07	; 7
    4604:	83 e0       	ldi	r24, 0x03	; 3
    4606:	f5 95       	asr	r31
    4608:	e7 95       	ror	r30
    460a:	8a 95       	dec	r24
    460c:	e1 f7       	brne	.-8      	; 0x4606 <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij+0xaa>
    460e:	e8 0d       	add	r30, r8
    4610:	f9 1d       	adc	r31, r9
    4612:	e4 0d       	add	r30, r4
    4614:	f5 1d       	adc	r31, r5
    4616:	34 90       	lpm	r3, Z
    4618:	37 fe       	sbrs	r3, 7
    461a:	11 c0       	rjmp	.+34     	; 0x463e <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij+0xe2>
    461c:	d5 01       	movw	r26, r10
    461e:	ed 91       	ld	r30, X+
    4620:	fc 91       	ld	r31, X
    4622:	04 84       	ldd	r0, Z+12	; 0x0c
    4624:	f5 85       	ldd	r31, Z+13	; 0x0d
    4626:	e0 2d       	mov	r30, r0
    4628:	96 01       	movw	r18, r12
    462a:	4b 81       	ldd	r20, Y+3	; 0x03
    462c:	5c 81       	ldd	r21, Y+4	; 0x04
    462e:	6d 81       	ldd	r22, Y+5	; 0x05
    4630:	7e 81       	ldd	r23, Y+6	; 0x06
    4632:	89 85       	ldd	r24, Y+9	; 0x09
    4634:	9a 85       	ldd	r25, Y+10	; 0x0a
    4636:	68 0f       	add	r22, r24
    4638:	79 1f       	adc	r23, r25
    463a:	c5 01       	movw	r24, r10
    463c:	09 95       	icall
    463e:	a9 85       	ldd	r26, Y+9	; 0x09
    4640:	ba 85       	ldd	r27, Y+10	; 0x0a
    4642:	11 96       	adiw	r26, 0x01	; 1
    4644:	ba 87       	std	Y+10, r27	; 0x0a
    4646:	a9 87       	std	Y+9, r26	; 0x09
    4648:	cd cf       	rjmp	.-102    	; 0x45e4 <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij+0x88>
    464a:	bf ef       	ldi	r27, 0xFF	; 255
    464c:	eb 1a       	sub	r14, r27
    464e:	fb 0a       	sbc	r15, r27
    4650:	29 81       	ldd	r18, Y+1	; 0x01
    4652:	3a 81       	ldd	r19, Y+2	; 0x02
    4654:	82 0e       	add	r8, r18
    4656:	93 1e       	adc	r9, r19
    4658:	b9 cf       	rjmp	.-142    	; 0x45cc <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij+0x70>
    465a:	d5 01       	movw	r26, r10
    465c:	ed 91       	ld	r30, X+
    465e:	fc 91       	ld	r31, X
    4660:	06 88       	ldd	r0, Z+22	; 0x16
    4662:	f7 89       	ldd	r31, Z+23	; 0x17
    4664:	e0 2d       	mov	r30, r0
    4666:	c5 01       	movw	r24, r10
    4668:	2a 96       	adiw	r28, 0x0a	; 10
    466a:	0f b6       	in	r0, 0x3f	; 63
    466c:	f8 94       	cli
    466e:	de bf       	out	0x3e, r29	; 62
    4670:	0f be       	out	0x3f, r0	; 63
    4672:	cd bf       	out	0x3d, r28	; 61
    4674:	df 91       	pop	r29
    4676:	cf 91       	pop	r28
    4678:	1f 91       	pop	r17
    467a:	0f 91       	pop	r16
    467c:	ff 90       	pop	r15
    467e:	ef 90       	pop	r14
    4680:	df 90       	pop	r13
    4682:	cf 90       	pop	r12
    4684:	bf 90       	pop	r11
    4686:	af 90       	pop	r10
    4688:	9f 90       	pop	r9
    468a:	8f 90       	pop	r8
    468c:	7f 90       	pop	r7
    468e:	6f 90       	pop	r6
    4690:	5f 90       	pop	r5
    4692:	4f 90       	pop	r4
    4694:	3f 90       	pop	r3
    4696:	09 94       	ijmp

00004698 <_ZN12Adafruit_GFX8drawCharEiihjjhh>:
    4698:	2f 92       	push	r2
    469a:	3f 92       	push	r3
    469c:	4f 92       	push	r4
    469e:	5f 92       	push	r5
    46a0:	6f 92       	push	r6
    46a2:	7f 92       	push	r7
    46a4:	8f 92       	push	r8
    46a6:	9f 92       	push	r9
    46a8:	af 92       	push	r10
    46aa:	bf 92       	push	r11
    46ac:	cf 92       	push	r12
    46ae:	df 92       	push	r13
    46b0:	ef 92       	push	r14
    46b2:	ff 92       	push	r15
    46b4:	0f 93       	push	r16
    46b6:	1f 93       	push	r17
    46b8:	cf 93       	push	r28
    46ba:	df 93       	push	r29
    46bc:	cd b7       	in	r28, 0x3d	; 61
    46be:	de b7       	in	r29, 0x3e	; 62
    46c0:	6b 97       	sbiw	r28, 0x1b	; 27
    46c2:	0f b6       	in	r0, 0x3f	; 63
    46c4:	f8 94       	cli
    46c6:	de bf       	out	0x3e, r29	; 62
    46c8:	0f be       	out	0x3f, r0	; 63
    46ca:	cd bf       	out	0x3d, r28	; 61
    46cc:	9b 8f       	std	Y+27, r25	; 0x1b
    46ce:	8a 8f       	std	Y+26, r24	; 0x1a
    46d0:	2b 01       	movw	r4, r22
    46d2:	5a 83       	std	Y+2, r21	; 0x02
    46d4:	49 83       	std	Y+1, r20	; 0x01
    46d6:	d2 2e       	mov	r13, r18
    46d8:	19 87       	std	Y+9, r17	; 0x09
    46da:	08 87       	std	Y+8, r16	; 0x08
    46dc:	47 01       	movw	r8, r14
    46de:	ab 82       	std	Y+3, r10	; 0x03
    46e0:	dc 01       	movw	r26, r24
    46e2:	59 96       	adiw	r26, 0x19	; 25
    46e4:	2d 91       	ld	r18, X+
    46e6:	3c 91       	ld	r19, X
    46e8:	5a 97       	sbiw	r26, 0x1a	; 26
    46ea:	21 15       	cp	r18, r1
    46ec:	31 05       	cpc	r19, r1
    46ee:	09 f0       	breq	.+2      	; 0x46f2 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x5a>
    46f0:	00 c1       	rjmp	.+512    	; 0x48f2 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x25a>
    46f2:	18 96       	adiw	r26, 0x08	; 8
    46f4:	8d 91       	ld	r24, X+
    46f6:	9c 91       	ld	r25, X
    46f8:	19 97       	sbiw	r26, 0x09	; 9
    46fa:	68 17       	cp	r22, r24
    46fc:	79 07       	cpc	r23, r25
    46fe:	0c f0       	brlt	.+2      	; 0x4702 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x6a>
    4700:	e7 c1       	rjmp	.+974    	; 0x4ad0 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x438>
    4702:	1a 96       	adiw	r26, 0x0a	; 10
    4704:	8d 91       	ld	r24, X+
    4706:	9c 91       	ld	r25, X
    4708:	1b 97       	sbiw	r26, 0x0b	; 11
    470a:	48 17       	cp	r20, r24
    470c:	59 07       	cpc	r21, r25
    470e:	0c f0       	brlt	.+2      	; 0x4712 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x7a>
    4710:	df c1       	rjmp	.+958    	; 0x4ad0 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x438>
    4712:	2c 2c       	mov	r2, r12
    4714:	31 2c       	mov	r3, r1
    4716:	fb 01       	movw	r30, r22
    4718:	26 e0       	ldi	r18, 0x06	; 6
    471a:	c2 9e       	mul	r12, r18
    471c:	e0 0d       	add	r30, r0
    471e:	f1 1d       	adc	r31, r1
    4720:	11 24       	eor	r1, r1
    4722:	fd 87       	std	Y+13, r31	; 0x0d
    4724:	ec 87       	std	Y+12, r30	; 0x0c
    4726:	1e 16       	cp	r1, r30
    4728:	1f 06       	cpc	r1, r31
    472a:	0c f0       	brlt	.+2      	; 0x472e <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x96>
    472c:	d1 c1       	rjmp	.+930    	; 0x4ad0 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x438>
    472e:	4a 2d       	mov	r20, r10
    4730:	50 e0       	ldi	r21, 0x00	; 0
    4732:	5b 87       	std	Y+11, r21	; 0x0b
    4734:	4a 87       	std	Y+10, r20	; 0x0a
    4736:	83 e0       	ldi	r24, 0x03	; 3
    4738:	44 0f       	add	r20, r20
    473a:	55 1f       	adc	r21, r21
    473c:	8a 95       	dec	r24
    473e:	e1 f7       	brne	.-8      	; 0x4738 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0xa0>
    4740:	5f 87       	std	Y+15, r21	; 0x0f
    4742:	4e 87       	std	Y+14, r20	; 0x0e
    4744:	89 81       	ldd	r24, Y+1	; 0x01
    4746:	9a 81       	ldd	r25, Y+2	; 0x02
    4748:	84 0f       	add	r24, r20
    474a:	95 1f       	adc	r25, r21
    474c:	18 16       	cp	r1, r24
    474e:	19 06       	cpc	r1, r25
    4750:	0c f0       	brlt	.+2      	; 0x4754 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0xbc>
    4752:	be c1       	rjmp	.+892    	; 0x4ad0 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x438>
    4754:	58 96       	adiw	r26, 0x18	; 24
    4756:	8c 91       	ld	r24, X
    4758:	81 11       	cpse	r24, r1
    475a:	04 c0       	rjmp	.+8      	; 0x4764 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0xcc>
    475c:	6f ea       	ldi	r22, 0xAF	; 175
    475e:	6d 15       	cp	r22, r13
    4760:	08 f4       	brcc	.+2      	; 0x4764 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0xcc>
    4762:	d3 94       	inc	r13
    4764:	aa 8d       	ldd	r26, Y+26	; 0x1a
    4766:	bb 8d       	ldd	r27, Y+27	; 0x1b
    4768:	ed 91       	ld	r30, X+
    476a:	fc 91       	ld	r31, X
    476c:	11 97       	sbiw	r26, 0x01	; 1
    476e:	02 84       	ldd	r0, Z+10	; 0x0a
    4770:	f3 85       	ldd	r31, Z+11	; 0x0b
    4772:	e0 2d       	mov	r30, r0
    4774:	cd 01       	movw	r24, r26
    4776:	09 95       	icall
    4778:	b5 e0       	ldi	r27, 0x05	; 5
    477a:	db 9e       	mul	r13, r27
    477c:	c0 01       	movw	r24, r0
    477e:	11 24       	eor	r1, r1
    4780:	ec 2d       	mov	r30, r12
    4782:	f0 e0       	ldi	r31, 0x00	; 0
    4784:	f9 8b       	std	Y+17, r31	; 0x11
    4786:	e8 8b       	std	Y+16, r30	; 0x10
    4788:	92 01       	movw	r18, r4
    478a:	2b 5f       	subi	r18, 0xFB	; 251
    478c:	3f 4f       	sbci	r19, 0xFF	; 255
    478e:	3b 8b       	std	Y+19, r19	; 0x13
    4790:	2a 8b       	std	Y+18, r18	; 0x12
    4792:	32 01       	movw	r6, r4
    4794:	5d 82       	std	Y+5, r5	; 0x05
    4796:	4c 82       	std	Y+4, r4	; 0x04
    4798:	ac 01       	movw	r20, r24
    479a:	44 19       	sub	r20, r4
    479c:	55 09       	sbc	r21, r5
    479e:	5d 8b       	std	Y+21, r21	; 0x15
    47a0:	4c 8b       	std	Y+20, r20	; 0x14
    47a2:	7b 81       	ldd	r23, Y+3	; 0x03
    47a4:	67 2f       	mov	r22, r23
    47a6:	70 e0       	ldi	r23, 0x00	; 0
    47a8:	7f 8b       	std	Y+23, r23	; 0x17
    47aa:	6e 8b       	std	Y+22, r22	; 0x16
    47ac:	89 81       	ldd	r24, Y+1	; 0x01
    47ae:	9a 81       	ldd	r25, Y+2	; 0x02
    47b0:	08 96       	adiw	r24, 0x08	; 8
    47b2:	99 8f       	std	Y+25, r25	; 0x19
    47b4:	88 8f       	std	Y+24, r24	; 0x18
    47b6:	ec 89       	ldd	r30, Y+20	; 0x14
    47b8:	fd 89       	ldd	r31, Y+21	; 0x15
    47ba:	e6 0d       	add	r30, r6
    47bc:	f7 1d       	adc	r31, r7
    47be:	ed 5f       	subi	r30, 0xFD	; 253
    47c0:	f6 4f       	sbci	r31, 0xF6	; 246
    47c2:	d4 90       	lpm	r13, Z
    47c4:	a9 81       	ldd	r26, Y+1	; 0x01
    47c6:	ba 81       	ldd	r27, Y+2	; 0x02
    47c8:	bf 83       	std	Y+7, r27	; 0x07
    47ca:	ae 83       	std	Y+6, r26	; 0x06
    47cc:	5d 01       	movw	r10, r26
    47ce:	d0 fe       	sbrs	r13, 0
    47d0:	16 c0       	rjmp	.+44     	; 0x47fe <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x166>
    47d2:	aa 8d       	ldd	r26, Y+26	; 0x1a
    47d4:	bb 8d       	ldd	r27, Y+27	; 0x1b
    47d6:	ed 91       	ld	r30, X+
    47d8:	fc 91       	ld	r31, X
    47da:	b1 e0       	ldi	r27, 0x01	; 1
    47dc:	cb 12       	cpse	r12, r27
    47de:	09 c0       	rjmp	.+18     	; 0x47f2 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x15a>
    47e0:	2b 81       	ldd	r18, Y+3	; 0x03
    47e2:	21 30       	cpi	r18, 0x01	; 1
    47e4:	31 f4       	brne	.+12     	; 0x47f2 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x15a>
    47e6:	04 84       	ldd	r0, Z+12	; 0x0c
    47e8:	f5 85       	ldd	r31, Z+13	; 0x0d
    47ea:	e0 2d       	mov	r30, r0
    47ec:	28 85       	ldd	r18, Y+8	; 0x08
    47ee:	39 85       	ldd	r19, Y+9	; 0x09
    47f0:	19 c0       	rjmp	.+50     	; 0x4824 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x18c>
    47f2:	06 84       	ldd	r0, Z+14	; 0x0e
    47f4:	f7 85       	ldd	r31, Z+15	; 0x0f
    47f6:	e0 2d       	mov	r30, r0
    47f8:	e8 84       	ldd	r14, Y+8	; 0x08
    47fa:	f9 84       	ldd	r15, Y+9	; 0x09
    47fc:	1d c0       	rjmp	.+58     	; 0x4838 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x1a0>
    47fe:	48 85       	ldd	r20, Y+8	; 0x08
    4800:	59 85       	ldd	r21, Y+9	; 0x09
    4802:	48 15       	cp	r20, r8
    4804:	59 05       	cpc	r21, r9
    4806:	11 f1       	breq	.+68     	; 0x484c <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x1b4>
    4808:	aa 8d       	ldd	r26, Y+26	; 0x1a
    480a:	bb 8d       	ldd	r27, Y+27	; 0x1b
    480c:	ed 91       	ld	r30, X+
    480e:	fc 91       	ld	r31, X
    4810:	b1 e0       	ldi	r27, 0x01	; 1
    4812:	cb 12       	cpse	r12, r27
    4814:	0d c0       	rjmp	.+26     	; 0x4830 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x198>
    4816:	2b 81       	ldd	r18, Y+3	; 0x03
    4818:	21 30       	cpi	r18, 0x01	; 1
    481a:	51 f4       	brne	.+20     	; 0x4830 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x198>
    481c:	04 84       	ldd	r0, Z+12	; 0x0c
    481e:	f5 85       	ldd	r31, Z+13	; 0x0d
    4820:	e0 2d       	mov	r30, r0
    4822:	94 01       	movw	r18, r8
    4824:	a5 01       	movw	r20, r10
    4826:	b3 01       	movw	r22, r6
    4828:	8a 8d       	ldd	r24, Y+26	; 0x1a
    482a:	9b 8d       	ldd	r25, Y+27	; 0x1b
    482c:	09 95       	icall
    482e:	0e c0       	rjmp	.+28     	; 0x484c <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x1b4>
    4830:	06 84       	ldd	r0, Z+14	; 0x0e
    4832:	f7 85       	ldd	r31, Z+15	; 0x0f
    4834:	e0 2d       	mov	r30, r0
    4836:	74 01       	movw	r14, r8
    4838:	0a 85       	ldd	r16, Y+10	; 0x0a
    483a:	1b 85       	ldd	r17, Y+11	; 0x0b
    483c:	91 01       	movw	r18, r2
    483e:	4e 81       	ldd	r20, Y+6	; 0x06
    4840:	5f 81       	ldd	r21, Y+7	; 0x07
    4842:	6c 81       	ldd	r22, Y+4	; 0x04
    4844:	7d 81       	ldd	r23, Y+5	; 0x05
    4846:	8a 8d       	ldd	r24, Y+26	; 0x1a
    4848:	9b 8d       	ldd	r25, Y+27	; 0x1b
    484a:	09 95       	icall
    484c:	d6 94       	lsr	r13
    484e:	4e 81       	ldd	r20, Y+6	; 0x06
    4850:	5f 81       	ldd	r21, Y+7	; 0x07
    4852:	6e 89       	ldd	r22, Y+22	; 0x16
    4854:	7f 89       	ldd	r23, Y+23	; 0x17
    4856:	46 0f       	add	r20, r22
    4858:	57 1f       	adc	r21, r23
    485a:	5f 83       	std	Y+7, r21	; 0x07
    485c:	4e 83       	std	Y+6, r20	; 0x06
    485e:	7f ef       	ldi	r23, 0xFF	; 255
    4860:	a7 1a       	sub	r10, r23
    4862:	b7 0a       	sbc	r11, r23
    4864:	88 8d       	ldd	r24, Y+24	; 0x18
    4866:	99 8d       	ldd	r25, Y+25	; 0x19
    4868:	a8 16       	cp	r10, r24
    486a:	b9 06       	cpc	r11, r25
    486c:	09 f0       	breq	.+2      	; 0x4870 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x1d8>
    486e:	af cf       	rjmp	.-162    	; 0x47ce <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x136>
    4870:	ac 81       	ldd	r26, Y+4	; 0x04
    4872:	bd 81       	ldd	r27, Y+5	; 0x05
    4874:	e8 89       	ldd	r30, Y+16	; 0x10
    4876:	f9 89       	ldd	r31, Y+17	; 0x11
    4878:	ae 0f       	add	r26, r30
    487a:	bf 1f       	adc	r27, r31
    487c:	bd 83       	std	Y+5, r27	; 0x05
    487e:	ac 83       	std	Y+4, r26	; 0x04
    4880:	ff ef       	ldi	r31, 0xFF	; 255
    4882:	6f 1a       	sub	r6, r31
    4884:	7f 0a       	sbc	r7, r31
    4886:	2a 89       	ldd	r18, Y+18	; 0x12
    4888:	3b 89       	ldd	r19, Y+19	; 0x13
    488a:	62 16       	cp	r6, r18
    488c:	73 06       	cpc	r7, r19
    488e:	09 f0       	breq	.+2      	; 0x4892 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x1fa>
    4890:	92 cf       	rjmp	.-220    	; 0x47b6 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x11e>
    4892:	48 85       	ldd	r20, Y+8	; 0x08
    4894:	59 85       	ldd	r21, Y+9	; 0x09
    4896:	48 15       	cp	r20, r8
    4898:	59 05       	cpc	r21, r9
    489a:	09 f4       	brne	.+2      	; 0x489e <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x206>
    489c:	f7 c0       	rjmp	.+494    	; 0x4a8c <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x3f4>
    489e:	aa 8d       	ldd	r26, Y+26	; 0x1a
    48a0:	bb 8d       	ldd	r27, Y+27	; 0x1b
    48a2:	ed 91       	ld	r30, X+
    48a4:	fc 91       	ld	r31, X
    48a6:	b1 e0       	ldi	r27, 0x01	; 1
    48a8:	cb 12       	cpse	r12, r27
    48aa:	12 c0       	rjmp	.+36     	; 0x48d0 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x238>
    48ac:	2b 81       	ldd	r18, Y+3	; 0x03
    48ae:	21 30       	cpi	r18, 0x01	; 1
    48b0:	79 f4       	brne	.+30     	; 0x48d0 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x238>
    48b2:	b2 01       	movw	r22, r4
    48b4:	6b 5f       	subi	r22, 0xFB	; 251
    48b6:	7f 4f       	sbci	r23, 0xFF	; 255
    48b8:	00 88       	ldd	r0, Z+16	; 0x10
    48ba:	f1 89       	ldd	r31, Z+17	; 0x11
    48bc:	e0 2d       	mov	r30, r0
    48be:	84 01       	movw	r16, r8
    48c0:	28 e0       	ldi	r18, 0x08	; 8
    48c2:	30 e0       	ldi	r19, 0x00	; 0
    48c4:	49 81       	ldd	r20, Y+1	; 0x01
    48c6:	5a 81       	ldd	r21, Y+2	; 0x02
    48c8:	8a 8d       	ldd	r24, Y+26	; 0x1a
    48ca:	9b 8d       	ldd	r25, Y+27	; 0x1b
    48cc:	09 95       	icall
    48ce:	de c0       	rjmp	.+444    	; 0x4a8c <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x3f4>
    48d0:	6c 85       	ldd	r22, Y+12	; 0x0c
    48d2:	7d 85       	ldd	r23, Y+13	; 0x0d
    48d4:	62 19       	sub	r22, r2
    48d6:	73 09       	sbc	r23, r3
    48d8:	06 84       	ldd	r0, Z+14	; 0x0e
    48da:	f7 85       	ldd	r31, Z+15	; 0x0f
    48dc:	e0 2d       	mov	r30, r0
    48de:	74 01       	movw	r14, r8
    48e0:	0e 85       	ldd	r16, Y+14	; 0x0e
    48e2:	1f 85       	ldd	r17, Y+15	; 0x0f
    48e4:	91 01       	movw	r18, r2
    48e6:	49 81       	ldd	r20, Y+1	; 0x01
    48e8:	5a 81       	ldd	r21, Y+2	; 0x02
    48ea:	8a 8d       	ldd	r24, Y+26	; 0x1a
    48ec:	9b 8d       	ldd	r25, Y+27	; 0x1b
    48ee:	09 95       	icall
    48f0:	cd c0       	rjmp	.+410    	; 0x4a8c <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x3f4>
    48f2:	f9 01       	movw	r30, r18
    48f4:	34 96       	adiw	r30, 0x04	; 4
    48f6:	e4 91       	lpm	r30, Z
    48f8:	de 1a       	sub	r13, r30
    48fa:	f9 01       	movw	r30, r18
    48fc:	32 96       	adiw	r30, 0x02	; 2
    48fe:	85 91       	lpm	r24, Z+
    4900:	94 91       	lpm	r25, Z
    4902:	b7 e0       	ldi	r27, 0x07	; 7
    4904:	db 9e       	mul	r13, r27
    4906:	80 0d       	add	r24, r0
    4908:	91 1d       	adc	r25, r1
    490a:	11 24       	eor	r1, r1
    490c:	f9 01       	movw	r30, r18
    490e:	25 91       	lpm	r18, Z+
    4910:	34 91       	lpm	r19, Z
    4912:	39 8b       	std	Y+17, r19	; 0x11
    4914:	28 8b       	std	Y+16, r18	; 0x10
    4916:	fc 01       	movw	r30, r24
    4918:	25 90       	lpm	r2, Z+
    491a:	34 90       	lpm	r3, Z
    491c:	fc 01       	movw	r30, r24
    491e:	32 96       	adiw	r30, 0x02	; 2
    4920:	74 90       	lpm	r7, Z
    4922:	31 96       	adiw	r30, 0x01	; 1
    4924:	a4 90       	lpm	r10, Z
    4926:	32 96       	adiw	r30, 0x02	; 2
    4928:	94 90       	lpm	r9, Z
    492a:	31 96       	adiw	r30, 0x01	; 1
    492c:	b4 90       	lpm	r11, Z
    492e:	31 e0       	ldi	r19, 0x01	; 1
    4930:	3c 15       	cp	r19, r12
    4932:	18 f0       	brcs	.+6      	; 0x493a <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x2a2>
    4934:	4b 81       	ldd	r20, Y+3	; 0x03
    4936:	42 30       	cpi	r20, 0x02	; 2
    4938:	68 f0       	brcs	.+26     	; 0x4954 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x2bc>
    493a:	69 2d       	mov	r22, r9
    493c:	09 2c       	mov	r0, r9
    493e:	00 0c       	add	r0, r0
    4940:	77 0b       	sbc	r23, r23
    4942:	7d 83       	std	Y+5, r23	; 0x05
    4944:	6c 83       	std	Y+4, r22	; 0x04
    4946:	8b 2d       	mov	r24, r11
    4948:	0b 2c       	mov	r0, r11
    494a:	00 0c       	add	r0, r0
    494c:	99 0b       	sbc	r25, r25
    494e:	9f 83       	std	Y+7, r25	; 0x07
    4950:	8e 83       	std	Y+6, r24	; 0x06
    4952:	04 c0       	rjmp	.+8      	; 0x495c <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x2c4>
    4954:	1f 82       	std	Y+7, r1	; 0x07
    4956:	1e 82       	std	Y+6, r1	; 0x06
    4958:	1d 82       	std	Y+5, r1	; 0x05
    495a:	1c 82       	std	Y+4, r1	; 0x04
    495c:	aa 8d       	ldd	r26, Y+26	; 0x1a
    495e:	bb 8d       	ldd	r27, Y+27	; 0x1b
    4960:	ed 91       	ld	r30, X+
    4962:	fc 91       	ld	r31, X
    4964:	11 97       	sbiw	r26, 0x01	; 1
    4966:	02 84       	ldd	r0, Z+10	; 0x0a
    4968:	f3 85       	ldd	r31, Z+11	; 0x0b
    496a:	e0 2d       	mov	r30, r0
    496c:	cd 01       	movw	r24, r26
    496e:	09 95       	icall
    4970:	61 2c       	mov	r6, r1
    4972:	d1 2c       	mov	r13, r1
    4974:	81 2c       	mov	r8, r1
    4976:	fb 81       	ldd	r31, Y+3	; 0x03
    4978:	ef 2f       	mov	r30, r31
    497a:	f0 e0       	ldi	r31, 0x00	; 0
    497c:	fb 87       	std	Y+11, r31	; 0x0b
    497e:	ea 87       	std	Y+10, r30	; 0x0a
    4980:	2c 2d       	mov	r18, r12
    4982:	30 e0       	ldi	r19, 0x00	; 0
    4984:	3d 87       	std	Y+13, r19	; 0x0d
    4986:	2c 87       	std	Y+12, r18	; 0x0c
    4988:	49 81       	ldd	r20, Y+1	; 0x01
    498a:	5a 81       	ldd	r21, Y+2	; 0x02
    498c:	4b 0d       	add	r20, r11
    498e:	51 1d       	adc	r21, r1
    4990:	b7 fc       	sbrc	r11, 7
    4992:	5a 95       	dec	r21
    4994:	5d 8b       	std	Y+21, r21	; 0x15
    4996:	4c 8b       	std	Y+20, r20	; 0x14
    4998:	b2 01       	movw	r22, r4
    499a:	69 0d       	add	r22, r9
    499c:	71 1d       	adc	r23, r1
    499e:	97 fc       	sbrc	r9, 7
    49a0:	7a 95       	dec	r23
    49a2:	7f 8b       	std	Y+23, r23	; 0x17
    49a4:	6e 8b       	std	Y+22, r22	; 0x16
    49a6:	8a 14       	cp	r8, r10
    49a8:	08 f0       	brcs	.+2      	; 0x49ac <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x314>
    49aa:	70 c0       	rjmp	.+224    	; 0x4a8c <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x3f4>
    49ac:	28 2d       	mov	r18, r8
    49ae:	30 e0       	ldi	r19, 0x00	; 0
    49b0:	4e 81       	ldd	r20, Y+6	; 0x06
    49b2:	5f 81       	ldd	r21, Y+7	; 0x07
    49b4:	42 0f       	add	r20, r18
    49b6:	53 1f       	adc	r21, r19
    49b8:	aa 85       	ldd	r26, Y+10	; 0x0a
    49ba:	bb 85       	ldd	r27, Y+11	; 0x0b
    49bc:	a4 9f       	mul	r26, r20
    49be:	c0 01       	movw	r24, r0
    49c0:	a5 9f       	mul	r26, r21
    49c2:	90 0d       	add	r25, r0
    49c4:	b4 9f       	mul	r27, r20
    49c6:	90 0d       	add	r25, r0
    49c8:	11 24       	eor	r1, r1
    49ca:	e9 81       	ldd	r30, Y+1	; 0x01
    49cc:	fa 81       	ldd	r31, Y+2	; 0x02
    49ce:	e8 0f       	add	r30, r24
    49d0:	f9 1f       	adc	r31, r25
    49d2:	ff 87       	std	Y+15, r31	; 0x0f
    49d4:	ee 87       	std	Y+14, r30	; 0x0e
    49d6:	86 2d       	mov	r24, r6
    49d8:	91 2c       	mov	r9, r1
    49da:	4c 89       	ldd	r20, Y+20	; 0x14
    49dc:	5d 89       	ldd	r21, Y+21	; 0x15
    49de:	42 0f       	add	r20, r18
    49e0:	53 1f       	adc	r21, r19
    49e2:	5b 8b       	std	Y+19, r21	; 0x13
    49e4:	4a 8b       	std	Y+18, r20	; 0x12
    49e6:	97 14       	cp	r9, r7
    49e8:	08 f0       	brcs	.+2      	; 0x49ec <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x354>
    49ea:	4d c0       	rjmp	.+154    	; 0x4a86 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x3ee>
    49ec:	bb 24       	eor	r11, r11
    49ee:	b3 94       	inc	r11
    49f0:	b8 0e       	add	r11, r24
    49f2:	87 70       	andi	r24, 0x07	; 7
    49f4:	41 f4       	brne	.+16     	; 0x4a06 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x36e>
    49f6:	c1 01       	movw	r24, r2
    49f8:	01 96       	adiw	r24, 0x01	; 1
    49fa:	e8 89       	ldd	r30, Y+16	; 0x10
    49fc:	f9 89       	ldd	r31, Y+17	; 0x11
    49fe:	e2 0d       	add	r30, r2
    4a00:	f3 1d       	adc	r31, r3
    4a02:	d4 90       	lpm	r13, Z
    4a04:	1c 01       	movw	r2, r24
    4a06:	d7 fe       	sbrs	r13, 7
    4a08:	3a c0       	rjmp	.+116    	; 0x4a7e <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x3e6>
    4a0a:	51 e0       	ldi	r21, 0x01	; 1
    4a0c:	c5 12       	cpse	r12, r21
    4a0e:	16 c0       	rjmp	.+44     	; 0x4a3c <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x3a4>
    4a10:	6b 81       	ldd	r22, Y+3	; 0x03
    4a12:	61 30       	cpi	r22, 0x01	; 1
    4a14:	99 f4       	brne	.+38     	; 0x4a3c <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x3a4>
    4a16:	aa 8d       	ldd	r26, Y+26	; 0x1a
    4a18:	bb 8d       	ldd	r27, Y+27	; 0x1b
    4a1a:	ed 91       	ld	r30, X+
    4a1c:	fc 91       	ld	r31, X
    4a1e:	11 97       	sbiw	r26, 0x01	; 1
    4a20:	04 84       	ldd	r0, Z+12	; 0x0c
    4a22:	f5 85       	ldd	r31, Z+13	; 0x0d
    4a24:	e0 2d       	mov	r30, r0
    4a26:	28 85       	ldd	r18, Y+8	; 0x08
    4a28:	39 85       	ldd	r19, Y+9	; 0x09
    4a2a:	4a 89       	ldd	r20, Y+18	; 0x12
    4a2c:	5b 89       	ldd	r21, Y+19	; 0x13
    4a2e:	6e 89       	ldd	r22, Y+22	; 0x16
    4a30:	7f 89       	ldd	r23, Y+23	; 0x17
    4a32:	69 0d       	add	r22, r9
    4a34:	71 1d       	adc	r23, r1
    4a36:	cd 01       	movw	r24, r26
    4a38:	09 95       	icall
    4a3a:	21 c0       	rjmp	.+66     	; 0x4a7e <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x3e6>
    4a3c:	8c 81       	ldd	r24, Y+4	; 0x04
    4a3e:	9d 81       	ldd	r25, Y+5	; 0x05
    4a40:	89 0d       	add	r24, r9
    4a42:	91 1d       	adc	r25, r1
    4a44:	ec 85       	ldd	r30, Y+12	; 0x0c
    4a46:	fd 85       	ldd	r31, Y+13	; 0x0d
    4a48:	8e 9f       	mul	r24, r30
    4a4a:	b0 01       	movw	r22, r0
    4a4c:	8f 9f       	mul	r24, r31
    4a4e:	70 0d       	add	r23, r0
    4a50:	9e 9f       	mul	r25, r30
    4a52:	70 0d       	add	r23, r0
    4a54:	11 24       	eor	r1, r1
    4a56:	64 0d       	add	r22, r4
    4a58:	75 1d       	adc	r23, r5
    4a5a:	aa 8d       	ldd	r26, Y+26	; 0x1a
    4a5c:	bb 8d       	ldd	r27, Y+27	; 0x1b
    4a5e:	ed 91       	ld	r30, X+
    4a60:	fc 91       	ld	r31, X
    4a62:	11 97       	sbiw	r26, 0x01	; 1
    4a64:	06 84       	ldd	r0, Z+14	; 0x0e
    4a66:	f7 85       	ldd	r31, Z+15	; 0x0f
    4a68:	e0 2d       	mov	r30, r0
    4a6a:	e8 84       	ldd	r14, Y+8	; 0x08
    4a6c:	f9 84       	ldd	r15, Y+9	; 0x09
    4a6e:	0a 85       	ldd	r16, Y+10	; 0x0a
    4a70:	1b 85       	ldd	r17, Y+11	; 0x0b
    4a72:	2c 85       	ldd	r18, Y+12	; 0x0c
    4a74:	3d 85       	ldd	r19, Y+13	; 0x0d
    4a76:	4e 85       	ldd	r20, Y+14	; 0x0e
    4a78:	5f 85       	ldd	r21, Y+15	; 0x0f
    4a7a:	cd 01       	movw	r24, r26
    4a7c:	09 95       	icall
    4a7e:	dd 0c       	add	r13, r13
    4a80:	93 94       	inc	r9
    4a82:	8b 2d       	mov	r24, r11
    4a84:	b0 cf       	rjmp	.-160    	; 0x49e6 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x34e>
    4a86:	67 0c       	add	r6, r7
    4a88:	83 94       	inc	r8
    4a8a:	8d cf       	rjmp	.-230    	; 0x49a6 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x30e>
    4a8c:	aa 8d       	ldd	r26, Y+26	; 0x1a
    4a8e:	bb 8d       	ldd	r27, Y+27	; 0x1b
    4a90:	ed 91       	ld	r30, X+
    4a92:	fc 91       	ld	r31, X
    4a94:	11 97       	sbiw	r26, 0x01	; 1
    4a96:	06 88       	ldd	r0, Z+22	; 0x16
    4a98:	f7 89       	ldd	r31, Z+23	; 0x17
    4a9a:	e0 2d       	mov	r30, r0
    4a9c:	cd 01       	movw	r24, r26
    4a9e:	6b 96       	adiw	r28, 0x1b	; 27
    4aa0:	0f b6       	in	r0, 0x3f	; 63
    4aa2:	f8 94       	cli
    4aa4:	de bf       	out	0x3e, r29	; 62
    4aa6:	0f be       	out	0x3f, r0	; 63
    4aa8:	cd bf       	out	0x3d, r28	; 61
    4aaa:	df 91       	pop	r29
    4aac:	cf 91       	pop	r28
    4aae:	1f 91       	pop	r17
    4ab0:	0f 91       	pop	r16
    4ab2:	ff 90       	pop	r15
    4ab4:	ef 90       	pop	r14
    4ab6:	df 90       	pop	r13
    4ab8:	cf 90       	pop	r12
    4aba:	bf 90       	pop	r11
    4abc:	af 90       	pop	r10
    4abe:	9f 90       	pop	r9
    4ac0:	8f 90       	pop	r8
    4ac2:	7f 90       	pop	r7
    4ac4:	6f 90       	pop	r6
    4ac6:	5f 90       	pop	r5
    4ac8:	4f 90       	pop	r4
    4aca:	3f 90       	pop	r3
    4acc:	2f 90       	pop	r2
    4ace:	09 94       	ijmp
    4ad0:	6b 96       	adiw	r28, 0x1b	; 27
    4ad2:	0f b6       	in	r0, 0x3f	; 63
    4ad4:	f8 94       	cli
    4ad6:	de bf       	out	0x3e, r29	; 62
    4ad8:	0f be       	out	0x3f, r0	; 63
    4ada:	cd bf       	out	0x3d, r28	; 61
    4adc:	df 91       	pop	r29
    4ade:	cf 91       	pop	r28
    4ae0:	1f 91       	pop	r17
    4ae2:	0f 91       	pop	r16
    4ae4:	ff 90       	pop	r15
    4ae6:	ef 90       	pop	r14
    4ae8:	df 90       	pop	r13
    4aea:	cf 90       	pop	r12
    4aec:	bf 90       	pop	r11
    4aee:	af 90       	pop	r10
    4af0:	9f 90       	pop	r9
    4af2:	8f 90       	pop	r8
    4af4:	7f 90       	pop	r7
    4af6:	6f 90       	pop	r6
    4af8:	5f 90       	pop	r5
    4afa:	4f 90       	pop	r4
    4afc:	3f 90       	pop	r3
    4afe:	2f 90       	pop	r2
    4b00:	08 95       	ret

00004b02 <_ZN12Adafruit_GFX5writeEh>:
/*!
    @brief  Print one byte/character of data, used to support print()
    @param  c  The 8-bit ascii character to write
*/
/**************************************************************************/
size_t Adafruit_GFX::write(uint8_t c) {
    4b02:	8f 92       	push	r8
    4b04:	9f 92       	push	r9
    4b06:	af 92       	push	r10
    4b08:	cf 92       	push	r12
    4b0a:	ef 92       	push	r14
    4b0c:	ff 92       	push	r15
    4b0e:	0f 93       	push	r16
    4b10:	1f 93       	push	r17
    4b12:	cf 93       	push	r28
    4b14:	df 93       	push	r29
    4b16:	ec 01       	movw	r28, r24
    4b18:	26 2f       	mov	r18, r22
  if (!gfxFont) { // 'Classic' built-in font
    4b1a:	89 8d       	ldd	r24, Y+25	; 0x19
    4b1c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    4b1e:	00 97       	sbiw	r24, 0x00	; 0
    4b20:	09 f0       	breq	.+2      	; 0x4b24 <_ZN12Adafruit_GFX5writeEh+0x22>
    4b22:	42 c0       	rjmp	.+132    	; 0x4ba8 <_ZN12Adafruit_GFX5writeEh+0xa6>

    if (c == '\n') {              // Newline?
    4b24:	6a 30       	cpi	r22, 0x0A	; 10
    4b26:	59 f4       	brne	.+22     	; 0x4b3e <_ZN12Adafruit_GFX5writeEh+0x3c>
      cursor_x = 0;               // Reset x to zero,
    4b28:	1d 86       	std	Y+13, r1	; 0x0d
    4b2a:	1c 86       	std	Y+12, r1	; 0x0c
      cursor_y += textsize_y * 8; // advance y one line
    4b2c:	2d 89       	ldd	r18, Y+21	; 0x15
    4b2e:	8e 85       	ldd	r24, Y+14	; 0x0e
    4b30:	9f 85       	ldd	r25, Y+15	; 0x0f
    4b32:	38 e0       	ldi	r19, 0x08	; 8
    4b34:	23 9f       	mul	r18, r19
    4b36:	80 0d       	add	r24, r0
    4b38:	91 1d       	adc	r25, r1
    4b3a:	11 24       	eor	r1, r1
    4b3c:	43 c0       	rjmp	.+134    	; 0x4bc4 <_ZN12Adafruit_GFX5writeEh+0xc2>
    } else if (c != '\r') {       // Ignore carriage returns
    4b3e:	6d 30       	cpi	r22, 0x0D	; 13
    4b40:	09 f4       	brne	.+2      	; 0x4b44 <_ZN12Adafruit_GFX5writeEh+0x42>
    4b42:	aa c0       	rjmp	.+340    	; 0x4c98 <_ZN12Adafruit_GFX5writeEh+0x196>
      if (wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
    4b44:	8f 89       	ldd	r24, Y+23	; 0x17
    4b46:	88 23       	and	r24, r24
    4b48:	c9 f0       	breq	.+50     	; 0x4b7c <_ZN12Adafruit_GFX5writeEh+0x7a>
    4b4a:	3c 89       	ldd	r19, Y+20	; 0x14
    4b4c:	8c 85       	ldd	r24, Y+12	; 0x0c
    4b4e:	9d 85       	ldd	r25, Y+13	; 0x0d
    4b50:	46 e0       	ldi	r20, 0x06	; 6
    4b52:	34 9f       	mul	r19, r20
    4b54:	80 0d       	add	r24, r0
    4b56:	91 1d       	adc	r25, r1
    4b58:	11 24       	eor	r1, r1
    4b5a:	48 85       	ldd	r20, Y+8	; 0x08
    4b5c:	59 85       	ldd	r21, Y+9	; 0x09
    4b5e:	48 17       	cp	r20, r24
    4b60:	59 07       	cpc	r21, r25
    4b62:	64 f4       	brge	.+24     	; 0x4b7c <_ZN12Adafruit_GFX5writeEh+0x7a>
        cursor_x = 0;                                       // Reset x to zero,
    4b64:	1d 86       	std	Y+13, r1	; 0x0d
    4b66:	1c 86       	std	Y+12, r1	; 0x0c
        cursor_y += textsize_y * 8; // advance y one line
    4b68:	3d 89       	ldd	r19, Y+21	; 0x15
    4b6a:	8e 85       	ldd	r24, Y+14	; 0x0e
    4b6c:	9f 85       	ldd	r25, Y+15	; 0x0f
    4b6e:	48 e0       	ldi	r20, 0x08	; 8
    4b70:	34 9f       	mul	r19, r20
    4b72:	80 0d       	add	r24, r0
    4b74:	91 1d       	adc	r25, r1
    4b76:	11 24       	eor	r1, r1
    4b78:	9f 87       	std	Y+15, r25	; 0x0f
    4b7a:	8e 87       	std	Y+14, r24	; 0x0e
      }
      drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x,
               textsize_y);
    4b7c:	ea 88       	ldd	r14, Y+18	; 0x12
    4b7e:	fb 88       	ldd	r15, Y+19	; 0x13
    4b80:	08 89       	ldd	r16, Y+16	; 0x10
    4b82:	19 89       	ldd	r17, Y+17	; 0x11
    4b84:	4e 85       	ldd	r20, Y+14	; 0x0e
    4b86:	5f 85       	ldd	r21, Y+15	; 0x0f
    4b88:	6c 85       	ldd	r22, Y+12	; 0x0c
    4b8a:	7d 85       	ldd	r23, Y+13	; 0x0d
    4b8c:	ad 88       	ldd	r10, Y+21	; 0x15
    4b8e:	cc 88       	ldd	r12, Y+20	; 0x14
    4b90:	ce 01       	movw	r24, r28
    4b92:	0e 94 4c 23 	call	0x4698	; 0x4698 <_ZN12Adafruit_GFX8drawCharEiihjjhh>
      cursor_x += textsize_x * 6; // Advance x one char
    4b96:	2c 89       	ldd	r18, Y+20	; 0x14
    4b98:	8c 85       	ldd	r24, Y+12	; 0x0c
    4b9a:	9d 85       	ldd	r25, Y+13	; 0x0d
    4b9c:	36 e0       	ldi	r19, 0x06	; 6
    4b9e:	23 9f       	mul	r18, r19
    4ba0:	80 0d       	add	r24, r0
    4ba2:	91 1d       	adc	r25, r1
    4ba4:	11 24       	eor	r1, r1
    4ba6:	3e c0       	rjmp	.+124    	; 0x4c24 <_ZN12Adafruit_GFX5writeEh+0x122>
    }

  } else { // Custom font

    if (c == '\n') {
    4ba8:	6a 30       	cpi	r22, 0x0A	; 10
    4baa:	79 f4       	brne	.+30     	; 0x4bca <_ZN12Adafruit_GFX5writeEh+0xc8>
      cursor_x = 0;
    4bac:	1d 86       	std	Y+13, r1	; 0x0d
    4bae:	1c 86       	std	Y+12, r1	; 0x0c
      cursor_y +=
          (int16_t)textsize_y * (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
    4bb0:	2d 89       	ldd	r18, Y+21	; 0x15
    4bb2:	fc 01       	movw	r30, r24
    4bb4:	38 96       	adiw	r30, 0x08	; 8
    4bb6:	e4 91       	lpm	r30, Z
    4bb8:	8e 85       	ldd	r24, Y+14	; 0x0e
    4bba:	9f 85       	ldd	r25, Y+15	; 0x0f
    4bbc:	2e 9f       	mul	r18, r30
    4bbe:	80 0d       	add	r24, r0
    4bc0:	91 1d       	adc	r25, r1
    4bc2:	11 24       	eor	r1, r1
    4bc4:	9f 87       	std	Y+15, r25	; 0x0f
    4bc6:	8e 87       	std	Y+14, r24	; 0x0e
    4bc8:	67 c0       	rjmp	.+206    	; 0x4c98 <_ZN12Adafruit_GFX5writeEh+0x196>
    } else if (c != '\r') {
    4bca:	6d 30       	cpi	r22, 0x0D	; 13
    4bcc:	09 f4       	brne	.+2      	; 0x4bd0 <_ZN12Adafruit_GFX5writeEh+0xce>
    4bce:	64 c0       	rjmp	.+200    	; 0x4c98 <_ZN12Adafruit_GFX5writeEh+0x196>
      uint8_t first = pgm_read_byte(&gfxFont->first);
    4bd0:	fc 01       	movw	r30, r24
    4bd2:	34 96       	adiw	r30, 0x04	; 4
    4bd4:	34 91       	lpm	r19, Z
      if ((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
    4bd6:	63 17       	cp	r22, r19
    4bd8:	08 f4       	brcc	.+2      	; 0x4bdc <_ZN12Adafruit_GFX5writeEh+0xda>
    4bda:	5e c0       	rjmp	.+188    	; 0x4c98 <_ZN12Adafruit_GFX5writeEh+0x196>
    4bdc:	32 96       	adiw	r30, 0x02	; 2
    4bde:	e4 91       	lpm	r30, Z
    4be0:	e6 17       	cp	r30, r22
    4be2:	08 f4       	brcc	.+2      	; 0x4be6 <_ZN12Adafruit_GFX5writeEh+0xe4>
    4be4:	59 c0       	rjmp	.+178    	; 0x4c98 <_ZN12Adafruit_GFX5writeEh+0x196>
        GFXglyph *glyph = pgm_read_glyph_ptr(gfxFont, c - first);
    4be6:	46 2f       	mov	r20, r22
    4be8:	43 1b       	sub	r20, r19
    4bea:	34 2f       	mov	r19, r20
#define pgm_read_pointer(addr) ((void *)pgm_read_word(addr))
#endif

inline GFXglyph *pgm_read_glyph_ptr(const GFXfont *gfxFont, uint8_t c) {
#ifdef __AVR__
  return &(((GFXglyph *)pgm_read_pointer(&gfxFont->glyph))[c]);
    4bec:	fc 01       	movw	r30, r24
    4bee:	32 96       	adiw	r30, 0x02	; 2
    4bf0:	85 90       	lpm	r8, Z+
    4bf2:	94 90       	lpm	r9, Z
    4bf4:	47 e0       	ldi	r20, 0x07	; 7
    4bf6:	34 9f       	mul	r19, r20
    4bf8:	80 0c       	add	r8, r0
    4bfa:	91 1c       	adc	r9, r1
    4bfc:	11 24       	eor	r1, r1
          (int16_t)textsize_y * (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
    } else if (c != '\r') {
      uint8_t first = pgm_read_byte(&gfxFont->first);
      if ((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
        GFXglyph *glyph = pgm_read_glyph_ptr(gfxFont, c - first);
        uint8_t w = pgm_read_byte(&glyph->width),
    4bfe:	f4 01       	movw	r30, r8
    4c00:	32 96       	adiw	r30, 0x02	; 2
    4c02:	34 91       	lpm	r19, Z
                h = pgm_read_byte(&glyph->height);
    4c04:	31 96       	adiw	r30, 0x01	; 1
    4c06:	e4 91       	lpm	r30, Z
        if ((w > 0) && (h > 0)) { // Is there an associated bitmap?
    4c08:	33 23       	and	r19, r19
    4c0a:	11 f0       	breq	.+4      	; 0x4c10 <_ZN12Adafruit_GFX5writeEh+0x10e>
    4c0c:	e1 11       	cpse	r30, r1
    4c0e:	0d c0       	rjmp	.+26     	; 0x4c2a <_ZN12Adafruit_GFX5writeEh+0x128>
          }
          drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x,
                   textsize_y);
        }
        cursor_x +=
            (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
    4c10:	f4 01       	movw	r30, r8
    4c12:	34 96       	adiw	r30, 0x04	; 4
    4c14:	e4 91       	lpm	r30, Z
    4c16:	2c 89       	ldd	r18, Y+20	; 0x14
    4c18:	8c 85       	ldd	r24, Y+12	; 0x0c
    4c1a:	9d 85       	ldd	r25, Y+13	; 0x0d
    4c1c:	e2 9f       	mul	r30, r18
    4c1e:	80 0d       	add	r24, r0
    4c20:	91 1d       	adc	r25, r1
    4c22:	11 24       	eor	r1, r1
    4c24:	9d 87       	std	Y+13, r25	; 0x0d
    4c26:	8c 87       	std	Y+12, r24	; 0x0c
      }
    }
  }
  return 1;
    4c28:	37 c0       	rjmp	.+110    	; 0x4c98 <_ZN12Adafruit_GFX5writeEh+0x196>
      if ((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
        GFXglyph *glyph = pgm_read_glyph_ptr(gfxFont, c - first);
        uint8_t w = pgm_read_byte(&glyph->width),
                h = pgm_read_byte(&glyph->height);
        if ((w > 0) && (h > 0)) { // Is there an associated bitmap?
          int16_t xo = (int8_t)pgm_read_byte(&glyph->xOffset); // sic
    4c2a:	f4 01       	movw	r30, r8
    4c2c:	35 96       	adiw	r30, 0x05	; 5
    4c2e:	44 91       	lpm	r20, Z
          if (wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
    4c30:	5f 89       	ldd	r21, Y+23	; 0x17
    4c32:	55 23       	and	r21, r21
    4c34:	19 f1       	breq	.+70     	; 0x4c7c <_ZN12Adafruit_GFX5writeEh+0x17a>
    4c36:	5c 89       	ldd	r21, Y+20	; 0x14
    4c38:	e3 2f       	mov	r30, r19
    4c3a:	f0 e0       	ldi	r31, 0x00	; 0
    4c3c:	e4 0f       	add	r30, r20
    4c3e:	f1 1d       	adc	r31, r1
    4c40:	47 fd       	sbrc	r20, 7
    4c42:	fa 95       	dec	r31
    4c44:	5e 9f       	mul	r21, r30
    4c46:	b0 01       	movw	r22, r0
    4c48:	5f 9f       	mul	r21, r31
    4c4a:	70 0d       	add	r23, r0
    4c4c:	11 24       	eor	r1, r1
    4c4e:	4c 85       	ldd	r20, Y+12	; 0x0c
    4c50:	5d 85       	ldd	r21, Y+13	; 0x0d
    4c52:	46 0f       	add	r20, r22
    4c54:	57 1f       	adc	r21, r23
    4c56:	68 85       	ldd	r22, Y+8	; 0x08
    4c58:	79 85       	ldd	r23, Y+9	; 0x09
    4c5a:	64 17       	cp	r22, r20
    4c5c:	75 07       	cpc	r23, r21
    4c5e:	74 f4       	brge	.+28     	; 0x4c7c <_ZN12Adafruit_GFX5writeEh+0x17a>
            cursor_x = 0;
    4c60:	1d 86       	std	Y+13, r1	; 0x0d
    4c62:	1c 86       	std	Y+12, r1	; 0x0c
            cursor_y += (int16_t)textsize_y *
    4c64:	3d 89       	ldd	r19, Y+21	; 0x15
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
    4c66:	fc 01       	movw	r30, r24
    4c68:	38 96       	adiw	r30, 0x08	; 8
    4c6a:	e4 91       	lpm	r30, Z
    4c6c:	8e 85       	ldd	r24, Y+14	; 0x0e
    4c6e:	9f 85       	ldd	r25, Y+15	; 0x0f
    4c70:	3e 9f       	mul	r19, r30
    4c72:	80 0d       	add	r24, r0
    4c74:	91 1d       	adc	r25, r1
    4c76:	11 24       	eor	r1, r1
    4c78:	9f 87       	std	Y+15, r25	; 0x0f
    4c7a:	8e 87       	std	Y+14, r24	; 0x0e
          }
          drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x,
                   textsize_y);
    4c7c:	ea 88       	ldd	r14, Y+18	; 0x12
    4c7e:	fb 88       	ldd	r15, Y+19	; 0x13
    4c80:	08 89       	ldd	r16, Y+16	; 0x10
    4c82:	19 89       	ldd	r17, Y+17	; 0x11
    4c84:	4e 85       	ldd	r20, Y+14	; 0x0e
    4c86:	5f 85       	ldd	r21, Y+15	; 0x0f
    4c88:	6c 85       	ldd	r22, Y+12	; 0x0c
    4c8a:	7d 85       	ldd	r23, Y+13	; 0x0d
    4c8c:	ad 88       	ldd	r10, Y+21	; 0x15
    4c8e:	cc 88       	ldd	r12, Y+20	; 0x14
    4c90:	ce 01       	movw	r24, r28
    4c92:	0e 94 4c 23 	call	0x4698	; 0x4698 <_ZN12Adafruit_GFX8drawCharEiihjjhh>
    4c96:	bc cf       	rjmp	.-136    	; 0x4c10 <_ZN12Adafruit_GFX5writeEh+0x10e>
            (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
      }
    }
  }
  return 1;
}
    4c98:	81 e0       	ldi	r24, 0x01	; 1
    4c9a:	90 e0       	ldi	r25, 0x00	; 0
    4c9c:	df 91       	pop	r29
    4c9e:	cf 91       	pop	r28
    4ca0:	1f 91       	pop	r17
    4ca2:	0f 91       	pop	r16
    4ca4:	ff 90       	pop	r15
    4ca6:	ef 90       	pop	r14
    4ca8:	cf 90       	pop	r12
    4caa:	af 90       	pop	r10
    4cac:	9f 90       	pop	r9
    4cae:	8f 90       	pop	r8
    4cb0:	08 95       	ret

00004cb2 <_ZN12Adafruit_GFX11setTextSizeEhh>:
    @param  s_x  Desired text width magnification level in X-axis. 1 is default
    @param  s_y  Desired text width magnification level in Y-axis. 1 is default
*/
/**************************************************************************/
void Adafruit_GFX::setTextSize(uint8_t s_x, uint8_t s_y) {
  textsize_x = (s_x > 0) ? s_x : 1;
    4cb2:	61 11       	cpse	r22, r1
    4cb4:	01 c0       	rjmp	.+2      	; 0x4cb8 <_ZN12Adafruit_GFX11setTextSizeEhh+0x6>
    4cb6:	61 e0       	ldi	r22, 0x01	; 1
    4cb8:	fc 01       	movw	r30, r24
    4cba:	64 8b       	std	Z+20, r22	; 0x14
  textsize_y = (s_y > 0) ? s_y : 1;
    4cbc:	41 11       	cpse	r20, r1
    4cbe:	01 c0       	rjmp	.+2      	; 0x4cc2 <_ZN12Adafruit_GFX11setTextSizeEhh+0x10>
    4cc0:	41 e0       	ldi	r20, 0x01	; 1
    4cc2:	fc 01       	movw	r30, r24
    4cc4:	45 8b       	std	Z+21, r20	; 0x15
    4cc6:	08 95       	ret

00004cc8 <_ZN12Adafruit_GFX11setTextSizeEh>:
    @brief   Set text 'magnification' size. Each increase in s makes 1 pixel
   that much bigger.
    @param  s  Desired text size. 1 is default 6x8, 2 is 12x16, 3 is 18x24, etc
*/
/**************************************************************************/
void Adafruit_GFX::setTextSize(uint8_t s) { setTextSize(s, s); }
    4cc8:	46 2f       	mov	r20, r22
    4cca:	0c 94 59 26 	jmp	0x4cb2	; 0x4cb2 <_ZN12Adafruit_GFX11setTextSizeEhh>

00004cce <_ZN16Adafruit_SSD13069drawPixelEiij>:
/*!
    @brief  Get base address of display buffer for direct reading or writing.
    @return Pointer to an unsigned 8-bit array, column-major, columns padded
            to full byte boundary if needed.
*/
uint8_t *Adafruit_SSD1306::getBuffer(void) { return buffer; }
    4cce:	fc 01       	movw	r30, r24
    4cd0:	77 fd       	sbrc	r23, 7
    4cd2:	b9 c0       	rjmp	.+370    	; 0x4e46 <_ZN16Adafruit_SSD13069drawPixelEiij+0x178>
    4cd4:	80 85       	ldd	r24, Z+8	; 0x08
    4cd6:	91 85       	ldd	r25, Z+9	; 0x09
    4cd8:	68 17       	cp	r22, r24
    4cda:	79 07       	cpc	r23, r25
    4cdc:	0c f0       	brlt	.+2      	; 0x4ce0 <_ZN16Adafruit_SSD13069drawPixelEiij+0x12>
    4cde:	b3 c0       	rjmp	.+358    	; 0x4e46 <_ZN16Adafruit_SSD13069drawPixelEiij+0x178>
    4ce0:	57 fd       	sbrc	r21, 7
    4ce2:	b1 c0       	rjmp	.+354    	; 0x4e46 <_ZN16Adafruit_SSD13069drawPixelEiij+0x178>
    4ce4:	82 85       	ldd	r24, Z+10	; 0x0a
    4ce6:	93 85       	ldd	r25, Z+11	; 0x0b
    4ce8:	48 17       	cp	r20, r24
    4cea:	59 07       	cpc	r21, r25
    4cec:	0c f0       	brlt	.+2      	; 0x4cf0 <_ZN16Adafruit_SSD13069drawPixelEiij+0x22>
    4cee:	08 95       	ret
    4cf0:	86 89       	ldd	r24, Z+22	; 0x16
    4cf2:	82 30       	cpi	r24, 0x02	; 2
    4cf4:	79 f4       	brne	.+30     	; 0x4d14 <_ZN16Adafruit_SSD13069drawPixelEiij+0x46>
    4cf6:	84 81       	ldd	r24, Z+4	; 0x04
    4cf8:	95 81       	ldd	r25, Z+5	; 0x05
    4cfa:	dc 01       	movw	r26, r24
    4cfc:	a6 1b       	sub	r26, r22
    4cfe:	b7 0b       	sbc	r27, r23
    4d00:	bd 01       	movw	r22, r26
    4d02:	61 50       	subi	r22, 0x01	; 1
    4d04:	71 09       	sbc	r23, r1
    4d06:	86 81       	ldd	r24, Z+6	; 0x06
    4d08:	97 81       	ldd	r25, Z+7	; 0x07
    4d0a:	dc 01       	movw	r26, r24
    4d0c:	a4 1b       	sub	r26, r20
    4d0e:	b5 0b       	sbc	r27, r21
    4d10:	ad 01       	movw	r20, r26
    4d12:	0e c0       	rjmp	.+28     	; 0x4d30 <_ZN16Adafruit_SSD13069drawPixelEiij+0x62>
    4d14:	83 30       	cpi	r24, 0x03	; 3
    4d16:	09 f0       	breq	.+2      	; 0x4d1a <_ZN16Adafruit_SSD13069drawPixelEiij+0x4c>
    4d18:	84 c0       	rjmp	.+264    	; 0x4e22 <_ZN16Adafruit_SSD13069drawPixelEiij+0x154>
    4d1a:	64 27       	eor	r22, r20
    4d1c:	75 27       	eor	r23, r21
    4d1e:	ca 01       	movw	r24, r20
    4d20:	86 27       	eor	r24, r22
    4d22:	97 27       	eor	r25, r23
    4d24:	68 27       	eor	r22, r24
    4d26:	79 27       	eor	r23, r25
    4d28:	46 81       	ldd	r20, Z+6	; 0x06
    4d2a:	57 81       	ldd	r21, Z+7	; 0x07
    4d2c:	48 1b       	sub	r20, r24
    4d2e:	59 0b       	sbc	r21, r25
    4d30:	41 50       	subi	r20, 0x01	; 1
    4d32:	51 09       	sbc	r21, r1
    4d34:	21 30       	cpi	r18, 0x01	; 1
    4d36:	31 05       	cpc	r19, r1
    4d38:	31 f0       	breq	.+12     	; 0x4d46 <_ZN16Adafruit_SSD13069drawPixelEiij+0x78>
    4d3a:	48 f1       	brcs	.+82     	; 0x4d8e <_ZN16Adafruit_SSD13069drawPixelEiij+0xc0>
    4d3c:	22 30       	cpi	r18, 0x02	; 2
    4d3e:	31 05       	cpc	r19, r1
    4d40:	09 f4       	brne	.+2      	; 0x4d44 <_ZN16Adafruit_SSD13069drawPixelEiij+0x76>
    4d42:	4a c0       	rjmp	.+148    	; 0x4dd8 <_ZN16Adafruit_SSD13069drawPixelEiij+0x10a>
    4d44:	08 95       	ret
    4d46:	ca 01       	movw	r24, r20
    4d48:	57 fd       	sbrc	r21, 7
    4d4a:	07 96       	adiw	r24, 0x07	; 7
    4d4c:	9c 01       	movw	r18, r24
    4d4e:	a3 e0       	ldi	r26, 0x03	; 3
    4d50:	35 95       	asr	r19
    4d52:	27 95       	ror	r18
    4d54:	aa 95       	dec	r26
    4d56:	e1 f7       	brne	.-8      	; 0x4d50 <_ZN16Adafruit_SSD13069drawPixelEiij+0x82>
    4d58:	a4 81       	ldd	r26, Z+4	; 0x04
    4d5a:	b5 81       	ldd	r27, Z+5	; 0x05
    4d5c:	2a 9f       	mul	r18, r26
    4d5e:	c0 01       	movw	r24, r0
    4d60:	2b 9f       	mul	r18, r27
    4d62:	90 0d       	add	r25, r0
    4d64:	3a 9f       	mul	r19, r26
    4d66:	90 0d       	add	r25, r0
    4d68:	11 24       	eor	r1, r1
    4d6a:	68 0f       	add	r22, r24
    4d6c:	79 1f       	adc	r23, r25
    4d6e:	07 8c       	ldd	r0, Z+31	; 0x1f
    4d70:	f0 a1       	ldd	r31, Z+32	; 0x20
    4d72:	e0 2d       	mov	r30, r0
    4d74:	e6 0f       	add	r30, r22
    4d76:	f7 1f       	adc	r31, r23
    4d78:	47 70       	andi	r20, 0x07	; 7
    4d7a:	55 27       	eor	r21, r21
    4d7c:	81 e0       	ldi	r24, 0x01	; 1
    4d7e:	90 e0       	ldi	r25, 0x00	; 0
    4d80:	01 c0       	rjmp	.+2      	; 0x4d84 <_ZN16Adafruit_SSD13069drawPixelEiij+0xb6>
    4d82:	88 0f       	add	r24, r24
    4d84:	4a 95       	dec	r20
    4d86:	ea f7       	brpl	.-6      	; 0x4d82 <_ZN16Adafruit_SSD13069drawPixelEiij+0xb4>
    4d88:	90 81       	ld	r25, Z
    4d8a:	89 2b       	or	r24, r25
    4d8c:	48 c0       	rjmp	.+144    	; 0x4e1e <_ZN16Adafruit_SSD13069drawPixelEiij+0x150>
    4d8e:	ca 01       	movw	r24, r20
    4d90:	57 fd       	sbrc	r21, 7
    4d92:	07 96       	adiw	r24, 0x07	; 7
    4d94:	9c 01       	movw	r18, r24
    4d96:	93 e0       	ldi	r25, 0x03	; 3
    4d98:	35 95       	asr	r19
    4d9a:	27 95       	ror	r18
    4d9c:	9a 95       	dec	r25
    4d9e:	e1 f7       	brne	.-8      	; 0x4d98 <_ZN16Adafruit_SSD13069drawPixelEiij+0xca>
    4da0:	a4 81       	ldd	r26, Z+4	; 0x04
    4da2:	b5 81       	ldd	r27, Z+5	; 0x05
    4da4:	2a 9f       	mul	r18, r26
    4da6:	c0 01       	movw	r24, r0
    4da8:	2b 9f       	mul	r18, r27
    4daa:	90 0d       	add	r25, r0
    4dac:	3a 9f       	mul	r19, r26
    4dae:	90 0d       	add	r25, r0
    4db0:	11 24       	eor	r1, r1
    4db2:	68 0f       	add	r22, r24
    4db4:	79 1f       	adc	r23, r25
    4db6:	07 8c       	ldd	r0, Z+31	; 0x1f
    4db8:	f0 a1       	ldd	r31, Z+32	; 0x20
    4dba:	e0 2d       	mov	r30, r0
    4dbc:	e6 0f       	add	r30, r22
    4dbe:	f7 1f       	adc	r31, r23
    4dc0:	47 70       	andi	r20, 0x07	; 7
    4dc2:	55 27       	eor	r21, r21
    4dc4:	81 e0       	ldi	r24, 0x01	; 1
    4dc6:	90 e0       	ldi	r25, 0x00	; 0
    4dc8:	01 c0       	rjmp	.+2      	; 0x4dcc <_ZN16Adafruit_SSD13069drawPixelEiij+0xfe>
    4dca:	88 0f       	add	r24, r24
    4dcc:	4a 95       	dec	r20
    4dce:	ea f7       	brpl	.-6      	; 0x4dca <_ZN16Adafruit_SSD13069drawPixelEiij+0xfc>
    4dd0:	80 95       	com	r24
    4dd2:	90 81       	ld	r25, Z
    4dd4:	89 23       	and	r24, r25
    4dd6:	23 c0       	rjmp	.+70     	; 0x4e1e <_ZN16Adafruit_SSD13069drawPixelEiij+0x150>
    4dd8:	ca 01       	movw	r24, r20
    4dda:	57 fd       	sbrc	r21, 7
    4ddc:	07 96       	adiw	r24, 0x07	; 7
    4dde:	9c 01       	movw	r18, r24
    4de0:	83 e0       	ldi	r24, 0x03	; 3
    4de2:	35 95       	asr	r19
    4de4:	27 95       	ror	r18
    4de6:	8a 95       	dec	r24
    4de8:	e1 f7       	brne	.-8      	; 0x4de2 <_ZN16Adafruit_SSD13069drawPixelEiij+0x114>
    4dea:	a4 81       	ldd	r26, Z+4	; 0x04
    4dec:	b5 81       	ldd	r27, Z+5	; 0x05
    4dee:	2a 9f       	mul	r18, r26
    4df0:	c0 01       	movw	r24, r0
    4df2:	2b 9f       	mul	r18, r27
    4df4:	90 0d       	add	r25, r0
    4df6:	3a 9f       	mul	r19, r26
    4df8:	90 0d       	add	r25, r0
    4dfa:	11 24       	eor	r1, r1
    4dfc:	68 0f       	add	r22, r24
    4dfe:	79 1f       	adc	r23, r25
    4e00:	07 8c       	ldd	r0, Z+31	; 0x1f
    4e02:	f0 a1       	ldd	r31, Z+32	; 0x20
    4e04:	e0 2d       	mov	r30, r0
    4e06:	e6 0f       	add	r30, r22
    4e08:	f7 1f       	adc	r31, r23
    4e0a:	47 70       	andi	r20, 0x07	; 7
    4e0c:	55 27       	eor	r21, r21
    4e0e:	81 e0       	ldi	r24, 0x01	; 1
    4e10:	90 e0       	ldi	r25, 0x00	; 0
    4e12:	01 c0       	rjmp	.+2      	; 0x4e16 <_ZN16Adafruit_SSD13069drawPixelEiij+0x148>
    4e14:	88 0f       	add	r24, r24
    4e16:	4a 95       	dec	r20
    4e18:	ea f7       	brpl	.-6      	; 0x4e14 <_ZN16Adafruit_SSD13069drawPixelEiij+0x146>
    4e1a:	90 81       	ld	r25, Z
    4e1c:	89 27       	eor	r24, r25
    4e1e:	80 83       	st	Z, r24
    4e20:	08 95       	ret
    4e22:	81 30       	cpi	r24, 0x01	; 1
    4e24:	09 f0       	breq	.+2      	; 0x4e28 <_ZN16Adafruit_SSD13069drawPixelEiij+0x15a>
    4e26:	86 cf       	rjmp	.-244    	; 0x4d34 <_ZN16Adafruit_SSD13069drawPixelEiij+0x66>
    4e28:	64 27       	eor	r22, r20
    4e2a:	75 27       	eor	r23, r21
    4e2c:	46 27       	eor	r20, r22
    4e2e:	57 27       	eor	r21, r23
    4e30:	64 27       	eor	r22, r20
    4e32:	75 27       	eor	r23, r21
    4e34:	84 81       	ldd	r24, Z+4	; 0x04
    4e36:	95 81       	ldd	r25, Z+5	; 0x05
    4e38:	dc 01       	movw	r26, r24
    4e3a:	a6 1b       	sub	r26, r22
    4e3c:	b7 0b       	sbc	r27, r23
    4e3e:	bd 01       	movw	r22, r26
    4e40:	61 50       	subi	r22, 0x01	; 1
    4e42:	71 09       	sbc	r23, r1
    4e44:	77 cf       	rjmp	.-274    	; 0x4d34 <_ZN16Adafruit_SSD13069drawPixelEiij+0x66>
    4e46:	08 95       	ret

00004e48 <_ZN8SPIClass16beginTransactionE11SPISettings>:
    4e48:	20 91 01 03 	lds	r18, 0x0301	; 0x800301 <_ZN8SPIClass13interruptModeE>
    4e4c:	22 23       	and	r18, r18
    4e4e:	99 f0       	breq	.+38     	; 0x4e76 <_ZN8SPIClass16beginTransactionE11SPISettings+0x2e>
    4e50:	4f b7       	in	r20, 0x3f	; 63
    4e52:	f8 94       	cli
    4e54:	20 91 01 03 	lds	r18, 0x0301	; 0x800301 <_ZN8SPIClass13interruptModeE>
    4e58:	21 30       	cpi	r18, 0x01	; 1
    4e5a:	59 f4       	brne	.+22     	; 0x4e72 <_ZN8SPIClass16beginTransactionE11SPISettings+0x2a>
    4e5c:	2d b3       	in	r18, 0x1d	; 29
    4e5e:	20 93 ff 02 	sts	0x02FF, r18	; 0x8002ff <_ZN8SPIClass13interruptSaveE>
    4e62:	3d b3       	in	r19, 0x1d	; 29
    4e64:	20 91 00 03 	lds	r18, 0x0300	; 0x800300 <_ZN8SPIClass13interruptMaskE>
    4e68:	20 95       	com	r18
    4e6a:	23 23       	and	r18, r19
    4e6c:	2d bb       	out	0x1d, r18	; 29
    4e6e:	4f bf       	out	0x3f, r20	; 63
    4e70:	02 c0       	rjmp	.+4      	; 0x4e76 <_ZN8SPIClass16beginTransactionE11SPISettings+0x2e>
    4e72:	40 93 ff 02 	sts	0x02FF, r20	; 0x8002ff <_ZN8SPIClass13interruptSaveE>
    4e76:	8c bd       	out	0x2c, r24	; 44
    4e78:	9d bd       	out	0x2d, r25	; 45
    4e7a:	08 95       	ret

00004e7c <_ZN8SPIClass8transferEh>:
    4e7c:	8e bd       	out	0x2e, r24	; 46
    4e7e:	00 00       	nop
    4e80:	0d b4       	in	r0, 0x2d	; 45
    4e82:	07 fe       	sbrs	r0, 7
    4e84:	fd cf       	rjmp	.-6      	; 0x4e80 <_ZN8SPIClass8transferEh+0x4>
    4e86:	8e b5       	in	r24, 0x2e	; 46
    4e88:	08 95       	ret

00004e8a <_ZN8SPIClass14endTransactionEv>:
    4e8a:	80 91 01 03 	lds	r24, 0x0301	; 0x800301 <_ZN8SPIClass13interruptModeE>
    4e8e:	88 23       	and	r24, r24
    4e90:	61 f0       	breq	.+24     	; 0x4eaa <_ZN8SPIClass14endTransactionEv+0x20>
    4e92:	9f b7       	in	r25, 0x3f	; 63
    4e94:	f8 94       	cli
    4e96:	20 91 01 03 	lds	r18, 0x0301	; 0x800301 <_ZN8SPIClass13interruptModeE>
    4e9a:	80 91 ff 02 	lds	r24, 0x02FF	; 0x8002ff <_ZN8SPIClass13interruptSaveE>
    4e9e:	21 30       	cpi	r18, 0x01	; 1
    4ea0:	19 f4       	brne	.+6      	; 0x4ea8 <_ZN8SPIClass14endTransactionEv+0x1e>
    4ea2:	8d bb       	out	0x1d, r24	; 29
    4ea4:	9f bf       	out	0x3f, r25	; 63
    4ea6:	08 95       	ret
    4ea8:	8f bf       	out	0x3f, r24	; 63
    4eaa:	08 95       	ret

00004eac <_ZN16Adafruit_SSD1306C1Ea>:
    4eac:	1f 93       	push	r17
    4eae:	cf 93       	push	r28
    4eb0:	df 93       	push	r29
    4eb2:	ec 01       	movw	r28, r24
    4eb4:	16 2f       	mov	r17, r22
    4eb6:	40 e4       	ldi	r20, 0x40	; 64
    4eb8:	50 e0       	ldi	r21, 0x00	; 0
    4eba:	60 e8       	ldi	r22, 0x80	; 128
    4ebc:	70 e0       	ldi	r23, 0x00	; 0
    4ebe:	0e 94 c1 1e 	call	0x3d82	; 0x3d82 <_ZN12Adafruit_GFXC1Eii>
    4ec2:	87 e9       	ldi	r24, 0x97	; 151
    4ec4:	91 e0       	ldi	r25, 0x01	; 1
    4ec6:	99 83       	std	Y+1, r25	; 0x01
    4ec8:	88 83       	st	Y, r24
    4eca:	1c 8e       	std	Y+28, r1	; 0x1c
    4ecc:	1b 8e       	std	Y+27, r1	; 0x1b
    4ece:	83 e0       	ldi	r24, 0x03	; 3
    4ed0:	93 e0       	ldi	r25, 0x03	; 3
    4ed2:	9e 8f       	std	Y+30, r25	; 0x1e
    4ed4:	8d 8f       	std	Y+29, r24	; 0x1d
    4ed6:	18 a2       	std	Y+32, r1	; 0x20
    4ed8:	1f 8e       	std	Y+31, r1	; 0x1f
    4eda:	8f ef       	ldi	r24, 0xFF	; 255
    4edc:	8c a3       	std	Y+36, r24	; 0x24
    4ede:	8d a3       	std	Y+37, r24	; 0x25
    4ee0:	8e a3       	std	Y+38, r24	; 0x26
    4ee2:	8f a3       	std	Y+39, r24	; 0x27
    4ee4:	18 a7       	std	Y+40, r17	; 0x28
    4ee6:	80 e5       	ldi	r24, 0x50	; 80
    4ee8:	8e af       	std	Y+62, r24	; 0x3e
    4eea:	1f ae       	std	Y+63, r1	; 0x3f
    4eec:	df 91       	pop	r29
    4eee:	cf 91       	pop	r28
    4ef0:	1f 91       	pop	r17
    4ef2:	08 95       	ret

00004ef4 <_ZN16Adafruit_SSD1306D1Ev>:
    4ef4:	27 e9       	ldi	r18, 0x97	; 151
    4ef6:	31 e0       	ldi	r19, 0x01	; 1
    4ef8:	fc 01       	movw	r30, r24
    4efa:	31 83       	std	Z+1, r19	; 0x01
    4efc:	20 83       	st	Z, r18
    4efe:	87 8d       	ldd	r24, Z+31	; 0x1f
    4f00:	90 a1       	ldd	r25, Z+32	; 0x20
    4f02:	00 97       	sbiw	r24, 0x00	; 0
    4f04:	11 f0       	breq	.+4      	; 0x4f0a <_ZN16Adafruit_SSD1306D1Ev+0x16>
    4f06:	0c 94 c4 32 	jmp	0x6588	; 0x6588 <free>
    4f0a:	08 95       	ret

00004f0c <_ZN16Adafruit_SSD130616ssd1306_command1Eh>:
    4f0c:	1f 93       	push	r17
    4f0e:	cf 93       	push	r28
    4f10:	df 93       	push	r29
    4f12:	fc 01       	movw	r30, r24
    4f14:	85 8d       	ldd	r24, Z+29	; 0x1d
    4f16:	96 8d       	ldd	r25, Z+30	; 0x1e
    4f18:	00 97       	sbiw	r24, 0x00	; 0
    4f1a:	19 f1       	breq	.+70     	; 0x4f62 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x56>
    4f1c:	16 2f       	mov	r17, r22
    4f1e:	ef 01       	movw	r28, r30
    4f20:	61 a1       	ldd	r22, Z+33	; 0x21
    4f22:	06 2e       	mov	r0, r22
    4f24:	00 0c       	add	r0, r0
    4f26:	77 0b       	sbc	r23, r23
    4f28:	0e 94 83 2e 	call	0x5d06	; 0x5d06 <_ZN7TwoWire17beginTransmissionEi>
    4f2c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4f2e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4f30:	dc 01       	movw	r26, r24
    4f32:	ed 91       	ld	r30, X+
    4f34:	fc 91       	ld	r31, X
    4f36:	01 90       	ld	r0, Z+
    4f38:	f0 81       	ld	r31, Z
    4f3a:	e0 2d       	mov	r30, r0
    4f3c:	60 e0       	ldi	r22, 0x00	; 0
    4f3e:	09 95       	icall
    4f40:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4f42:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4f44:	dc 01       	movw	r26, r24
    4f46:	ed 91       	ld	r30, X+
    4f48:	fc 91       	ld	r31, X
    4f4a:	01 90       	ld	r0, Z+
    4f4c:	f0 81       	ld	r31, Z
    4f4e:	e0 2d       	mov	r30, r0
    4f50:	61 2f       	mov	r22, r17
    4f52:	09 95       	icall
    4f54:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4f56:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4f58:	df 91       	pop	r29
    4f5a:	cf 91       	pop	r28
    4f5c:	1f 91       	pop	r17
    4f5e:	0c 94 98 2e 	jmp	0x5d30	; 0x5d30 <_ZN7TwoWire15endTransmissionEv>
    4f62:	a5 a5       	ldd	r26, Z+45	; 0x2d
    4f64:	b6 a5       	ldd	r27, Z+46	; 0x2e
    4f66:	9c 91       	ld	r25, X
    4f68:	83 a9       	ldd	r24, Z+51	; 0x33
    4f6a:	80 95       	com	r24
    4f6c:	89 23       	and	r24, r25
    4f6e:	8c 93       	st	X, r24
    4f70:	83 8d       	ldd	r24, Z+27	; 0x1b
    4f72:	94 8d       	ldd	r25, Z+28	; 0x1c
    4f74:	89 2b       	or	r24, r25
    4f76:	31 f0       	breq	.+12     	; 0x4f84 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x78>
    4f78:	86 2f       	mov	r24, r22
    4f7a:	df 91       	pop	r29
    4f7c:	cf 91       	pop	r28
    4f7e:	1f 91       	pop	r17
    4f80:	0c 94 3e 27 	jmp	0x4e7c	; 0x4e7c <_ZN8SPIClass8transferEh>
    4f84:	28 e0       	ldi	r18, 0x08	; 8
    4f86:	30 e0       	ldi	r19, 0x00	; 0
    4f88:	80 e8       	ldi	r24, 0x80	; 128
    4f8a:	a1 a5       	ldd	r26, Z+41	; 0x29
    4f8c:	b2 a5       	ldd	r27, Z+42	; 0x2a
    4f8e:	91 a9       	ldd	r25, Z+49	; 0x31
    4f90:	46 2f       	mov	r20, r22
    4f92:	48 23       	and	r20, r24
    4f94:	19 f0       	breq	.+6      	; 0x4f9c <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x90>
    4f96:	4c 91       	ld	r20, X
    4f98:	94 2b       	or	r25, r20
    4f9a:	03 c0       	rjmp	.+6      	; 0x4fa2 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x96>
    4f9c:	4c 91       	ld	r20, X
    4f9e:	90 95       	com	r25
    4fa0:	94 23       	and	r25, r20
    4fa2:	9c 93       	st	X, r25
    4fa4:	a3 a5       	ldd	r26, Z+43	; 0x2b
    4fa6:	b4 a5       	ldd	r27, Z+44	; 0x2c
    4fa8:	4c 91       	ld	r20, X
    4faa:	92 a9       	ldd	r25, Z+50	; 0x32
    4fac:	94 2b       	or	r25, r20
    4fae:	9c 93       	st	X, r25
    4fb0:	a3 a5       	ldd	r26, Z+43	; 0x2b
    4fb2:	b4 a5       	ldd	r27, Z+44	; 0x2c
    4fb4:	4c 91       	ld	r20, X
    4fb6:	92 a9       	ldd	r25, Z+50	; 0x32
    4fb8:	90 95       	com	r25
    4fba:	94 23       	and	r25, r20
    4fbc:	9c 93       	st	X, r25
    4fbe:	86 95       	lsr	r24
    4fc0:	21 50       	subi	r18, 0x01	; 1
    4fc2:	31 09       	sbc	r19, r1
    4fc4:	11 f7       	brne	.-60     	; 0x4f8a <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x7e>
    4fc6:	df 91       	pop	r29
    4fc8:	cf 91       	pop	r28
    4fca:	1f 91       	pop	r17
    4fcc:	08 95       	ret

00004fce <_ZN16Adafruit_SSD130613invertDisplayEb>:
    4fce:	1f 93       	push	r17
    4fd0:	cf 93       	push	r28
    4fd2:	df 93       	push	r29
    4fd4:	ec 01       	movw	r28, r24
    4fd6:	16 2f       	mov	r17, r22
    4fd8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4fda:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4fdc:	00 97       	sbiw	r24, 0x00	; 0
    4fde:	39 f0       	breq	.+14     	; 0x4fee <_ZN16Adafruit_SSD130613invertDisplayEb+0x20>
    4fe0:	4d a9       	ldd	r20, Y+53	; 0x35
    4fe2:	5e a9       	ldd	r21, Y+54	; 0x36
    4fe4:	6f a9       	ldd	r22, Y+55	; 0x37
    4fe6:	78 ad       	ldd	r23, Y+56	; 0x38
    4fe8:	0e 94 75 2e 	call	0x5cea	; 0x5cea <_ZN7TwoWire8setClockEm>
    4fec:	0f c0       	rjmp	.+30     	; 0x500c <_ZN16Adafruit_SSD130613invertDisplayEb+0x3e>
    4fee:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4ff0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4ff2:	89 2b       	or	r24, r25
    4ff4:	21 f0       	breq	.+8      	; 0x4ffe <_ZN16Adafruit_SSD130613invertDisplayEb+0x30>
    4ff6:	8e ad       	ldd	r24, Y+62	; 0x3e
    4ff8:	9f ad       	ldd	r25, Y+63	; 0x3f
    4ffa:	0e 94 24 27 	call	0x4e48	; 0x4e48 <_ZN8SPIClass16beginTransactionE11SPISettings>
    4ffe:	ef a5       	ldd	r30, Y+47	; 0x2f
    5000:	f8 a9       	ldd	r31, Y+48	; 0x30
    5002:	90 81       	ld	r25, Z
    5004:	8c a9       	ldd	r24, Y+52	; 0x34
    5006:	80 95       	com	r24
    5008:	89 23       	and	r24, r25
    500a:	80 83       	st	Z, r24
    500c:	11 11       	cpse	r17, r1
    500e:	02 c0       	rjmp	.+4      	; 0x5014 <_ZN16Adafruit_SSD130613invertDisplayEb+0x46>
    5010:	66 ea       	ldi	r22, 0xA6	; 166
    5012:	01 c0       	rjmp	.+2      	; 0x5016 <_ZN16Adafruit_SSD130613invertDisplayEb+0x48>
    5014:	67 ea       	ldi	r22, 0xA7	; 167
    5016:	ce 01       	movw	r24, r28
    5018:	0e 94 86 27 	call	0x4f0c	; 0x4f0c <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
    501c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    501e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5020:	00 97       	sbiw	r24, 0x00	; 0
    5022:	49 f0       	breq	.+18     	; 0x5036 <_ZN16Adafruit_SSD130613invertDisplayEb+0x68>
    5024:	49 ad       	ldd	r20, Y+57	; 0x39
    5026:	5a ad       	ldd	r21, Y+58	; 0x3a
    5028:	6b ad       	ldd	r22, Y+59	; 0x3b
    502a:	7c ad       	ldd	r23, Y+60	; 0x3c
    502c:	df 91       	pop	r29
    502e:	cf 91       	pop	r28
    5030:	1f 91       	pop	r17
    5032:	0c 94 75 2e 	jmp	0x5cea	; 0x5cea <_ZN7TwoWire8setClockEm>
    5036:	ef a5       	ldd	r30, Y+47	; 0x2f
    5038:	f8 a9       	ldd	r31, Y+48	; 0x30
    503a:	90 81       	ld	r25, Z
    503c:	8c a9       	ldd	r24, Y+52	; 0x34
    503e:	89 2b       	or	r24, r25
    5040:	80 83       	st	Z, r24
    5042:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5044:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5046:	89 2b       	or	r24, r25
    5048:	29 f0       	breq	.+10     	; 0x5054 <_ZN16Adafruit_SSD130613invertDisplayEb+0x86>
    504a:	df 91       	pop	r29
    504c:	cf 91       	pop	r28
    504e:	1f 91       	pop	r17
    5050:	0c 94 45 27 	jmp	0x4e8a	; 0x4e8a <_ZN8SPIClass14endTransactionEv>
    5054:	df 91       	pop	r29
    5056:	cf 91       	pop	r28
    5058:	1f 91       	pop	r17
    505a:	08 95       	ret

0000505c <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>:
    505c:	bf 92       	push	r11
    505e:	cf 92       	push	r12
    5060:	df 92       	push	r13
    5062:	ef 92       	push	r14
    5064:	ff 92       	push	r15
    5066:	0f 93       	push	r16
    5068:	1f 93       	push	r17
    506a:	cf 93       	push	r28
    506c:	df 93       	push	r29
    506e:	ec 01       	movw	r28, r24
    5070:	b6 2e       	mov	r11, r22
    5072:	07 2f       	mov	r16, r23
    5074:	14 2f       	mov	r17, r20
    5076:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5078:	9e 8d       	ldd	r25, Y+30	; 0x1e
    507a:	00 97       	sbiw	r24, 0x00	; 0
    507c:	09 f4       	brne	.+2      	; 0x5080 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x24>
    507e:	52 c0       	rjmp	.+164    	; 0x5124 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0xc8>
    5080:	69 a1       	ldd	r22, Y+33	; 0x21
    5082:	06 2e       	mov	r0, r22
    5084:	00 0c       	add	r0, r0
    5086:	77 0b       	sbc	r23, r23
    5088:	0e 94 83 2e 	call	0x5d06	; 0x5d06 <_ZN7TwoWire17beginTransmissionEi>
    508c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    508e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5090:	dc 01       	movw	r26, r24
    5092:	ed 91       	ld	r30, X+
    5094:	fc 91       	ld	r31, X
    5096:	01 90       	ld	r0, Z+
    5098:	f0 81       	ld	r31, Z
    509a:	e0 2d       	mov	r30, r0
    509c:	60 e0       	ldi	r22, 0x00	; 0
    509e:	09 95       	icall
    50a0:	cb 2c       	mov	r12, r11
    50a2:	d0 2e       	mov	r13, r16
    50a4:	ee 24       	eor	r14, r14
    50a6:	e3 94       	inc	r14
    50a8:	f1 2c       	mov	r15, r1
    50aa:	8d 8d       	ldd	r24, Y+29	; 0x1d
    50ac:	9e 8d       	ldd	r25, Y+30	; 0x1e
    50ae:	11 23       	and	r17, r17
    50b0:	71 f1       	breq	.+92     	; 0x510e <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0xb2>
    50b2:	b0 e2       	ldi	r27, 0x20	; 32
    50b4:	eb 16       	cp	r14, r27
    50b6:	f1 04       	cpc	r15, r1
    50b8:	b8 f0       	brcs	.+46     	; 0x50e8 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x8c>
    50ba:	0e 94 98 2e 	call	0x5d30	; 0x5d30 <_ZN7TwoWire15endTransmissionEv>
    50be:	69 a1       	ldd	r22, Y+33	; 0x21
    50c0:	06 2e       	mov	r0, r22
    50c2:	00 0c       	add	r0, r0
    50c4:	77 0b       	sbc	r23, r23
    50c6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    50c8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    50ca:	0e 94 83 2e 	call	0x5d06	; 0x5d06 <_ZN7TwoWire17beginTransmissionEi>
    50ce:	8d 8d       	ldd	r24, Y+29	; 0x1d
    50d0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    50d2:	dc 01       	movw	r26, r24
    50d4:	ed 91       	ld	r30, X+
    50d6:	fc 91       	ld	r31, X
    50d8:	01 90       	ld	r0, Z+
    50da:	f0 81       	ld	r31, Z
    50dc:	e0 2d       	mov	r30, r0
    50de:	60 e0       	ldi	r22, 0x00	; 0
    50e0:	09 95       	icall
    50e2:	ee 24       	eor	r14, r14
    50e4:	e3 94       	inc	r14
    50e6:	f1 2c       	mov	r15, r1
    50e8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    50ea:	9e 8d       	ldd	r25, Y+30	; 0x1e
    50ec:	f6 01       	movw	r30, r12
    50ee:	64 91       	lpm	r22, Z
    50f0:	dc 01       	movw	r26, r24
    50f2:	ed 91       	ld	r30, X+
    50f4:	fc 91       	ld	r31, X
    50f6:	01 90       	ld	r0, Z+
    50f8:	f0 81       	ld	r31, Z
    50fa:	e0 2d       	mov	r30, r0
    50fc:	09 95       	icall
    50fe:	bf ef       	ldi	r27, 0xFF	; 255
    5100:	eb 1a       	sub	r14, r27
    5102:	fb 0a       	sbc	r15, r27
    5104:	11 50       	subi	r17, 0x01	; 1
    5106:	f6 01       	movw	r30, r12
    5108:	31 96       	adiw	r30, 0x01	; 1
    510a:	6f 01       	movw	r12, r30
    510c:	ce cf       	rjmp	.-100    	; 0x50aa <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x4e>
    510e:	df 91       	pop	r29
    5110:	cf 91       	pop	r28
    5112:	1f 91       	pop	r17
    5114:	0f 91       	pop	r16
    5116:	ff 90       	pop	r15
    5118:	ef 90       	pop	r14
    511a:	df 90       	pop	r13
    511c:	cf 90       	pop	r12
    511e:	bf 90       	pop	r11
    5120:	0c 94 98 2e 	jmp	0x5d30	; 0x5d30 <_ZN7TwoWire15endTransmissionEv>
    5124:	ed a5       	ldd	r30, Y+45	; 0x2d
    5126:	fe a5       	ldd	r31, Y+46	; 0x2e
    5128:	90 81       	ld	r25, Z
    512a:	8b a9       	ldd	r24, Y+51	; 0x33
    512c:	80 95       	com	r24
    512e:	89 23       	and	r24, r25
    5130:	80 83       	st	Z, r24
    5132:	e6 2e       	mov	r14, r22
    5134:	f7 2e       	mov	r15, r23
    5136:	11 23       	and	r17, r17
    5138:	79 f1       	breq	.+94     	; 0x5198 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x13c>
    513a:	f7 01       	movw	r30, r14
    513c:	84 91       	lpm	r24, Z
    513e:	2b 8d       	ldd	r18, Y+27	; 0x1b
    5140:	3c 8d       	ldd	r19, Y+28	; 0x1c
    5142:	23 2b       	or	r18, r19
    5144:	39 f0       	breq	.+14     	; 0x5154 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0xf8>
    5146:	0e 94 3e 27 	call	0x4e7c	; 0x4e7c <_ZN8SPIClass8transferEh>
    514a:	11 50       	subi	r17, 0x01	; 1
    514c:	c7 01       	movw	r24, r14
    514e:	01 96       	adiw	r24, 0x01	; 1
    5150:	7c 01       	movw	r14, r24
    5152:	f1 cf       	rjmp	.-30     	; 0x5136 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0xda>
    5154:	28 e0       	ldi	r18, 0x08	; 8
    5156:	30 e0       	ldi	r19, 0x00	; 0
    5158:	40 e8       	ldi	r20, 0x80	; 128
    515a:	e9 a5       	ldd	r30, Y+41	; 0x29
    515c:	fa a5       	ldd	r31, Y+42	; 0x2a
    515e:	99 a9       	ldd	r25, Y+49	; 0x31
    5160:	58 2f       	mov	r21, r24
    5162:	54 23       	and	r21, r20
    5164:	19 f0       	breq	.+6      	; 0x516c <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x110>
    5166:	50 81       	ld	r21, Z
    5168:	95 2b       	or	r25, r21
    516a:	03 c0       	rjmp	.+6      	; 0x5172 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x116>
    516c:	50 81       	ld	r21, Z
    516e:	90 95       	com	r25
    5170:	95 23       	and	r25, r21
    5172:	90 83       	st	Z, r25
    5174:	eb a5       	ldd	r30, Y+43	; 0x2b
    5176:	fc a5       	ldd	r31, Y+44	; 0x2c
    5178:	50 81       	ld	r21, Z
    517a:	9a a9       	ldd	r25, Y+50	; 0x32
    517c:	95 2b       	or	r25, r21
    517e:	90 83       	st	Z, r25
    5180:	eb a5       	ldd	r30, Y+43	; 0x2b
    5182:	fc a5       	ldd	r31, Y+44	; 0x2c
    5184:	50 81       	ld	r21, Z
    5186:	9a a9       	ldd	r25, Y+50	; 0x32
    5188:	90 95       	com	r25
    518a:	95 23       	and	r25, r21
    518c:	90 83       	st	Z, r25
    518e:	46 95       	lsr	r20
    5190:	21 50       	subi	r18, 0x01	; 1
    5192:	31 09       	sbc	r19, r1
    5194:	11 f7       	brne	.-60     	; 0x515a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0xfe>
    5196:	d9 cf       	rjmp	.-78     	; 0x514a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0xee>
    5198:	df 91       	pop	r29
    519a:	cf 91       	pop	r28
    519c:	1f 91       	pop	r17
    519e:	0f 91       	pop	r16
    51a0:	ff 90       	pop	r15
    51a2:	ef 90       	pop	r14
    51a4:	df 90       	pop	r13
    51a6:	cf 90       	pop	r12
    51a8:	bf 90       	pop	r11
    51aa:	08 95       	ret

000051ac <_ZN16Adafruit_SSD130612clearDisplayEv>:
    51ac:	fc 01       	movw	r30, r24
    51ae:	86 81       	ldd	r24, Z+6	; 0x06
    51b0:	97 81       	ldd	r25, Z+7	; 0x07
    51b2:	9c 01       	movw	r18, r24
    51b4:	29 5f       	subi	r18, 0xF9	; 249
    51b6:	3f 4f       	sbci	r19, 0xFF	; 255
    51b8:	37 ff       	sbrs	r19, 7
    51ba:	02 c0       	rjmp	.+4      	; 0x51c0 <_ZN16Adafruit_SSD130612clearDisplayEv+0x14>
    51bc:	29 5f       	subi	r18, 0xF9	; 249
    51be:	3f 4f       	sbci	r19, 0xFF	; 255
    51c0:	83 e0       	ldi	r24, 0x03	; 3
    51c2:	35 95       	asr	r19
    51c4:	27 95       	ror	r18
    51c6:	8a 95       	dec	r24
    51c8:	e1 f7       	brne	.-8      	; 0x51c2 <_ZN16Adafruit_SSD130612clearDisplayEv+0x16>
    51ca:	84 81       	ldd	r24, Z+4	; 0x04
    51cc:	95 81       	ldd	r25, Z+5	; 0x05
    51ce:	28 9f       	mul	r18, r24
    51d0:	a0 01       	movw	r20, r0
    51d2:	29 9f       	mul	r18, r25
    51d4:	50 0d       	add	r21, r0
    51d6:	38 9f       	mul	r19, r24
    51d8:	50 0d       	add	r21, r0
    51da:	11 24       	eor	r1, r1
    51dc:	60 e0       	ldi	r22, 0x00	; 0
    51de:	70 e0       	ldi	r23, 0x00	; 0
    51e0:	87 8d       	ldd	r24, Z+31	; 0x1f
    51e2:	90 a1       	ldd	r25, Z+32	; 0x20
    51e4:	0c 94 5b 33 	jmp	0x66b6	; 0x66b6 <memset>

000051e8 <_ZN16Adafruit_SSD13065beginEhhbb>:
    51e8:	8f 92       	push	r8
    51ea:	9f 92       	push	r9
    51ec:	af 92       	push	r10
    51ee:	bf 92       	push	r11
    51f0:	cf 92       	push	r12
    51f2:	df 92       	push	r13
    51f4:	ef 92       	push	r14
    51f6:	ff 92       	push	r15
    51f8:	0f 93       	push	r16
    51fa:	1f 93       	push	r17
    51fc:	cf 93       	push	r28
    51fe:	df 93       	push	r29
    5200:	ec 01       	movw	r28, r24
    5202:	86 2e       	mov	r8, r22
    5204:	b4 2e       	mov	r11, r20
    5206:	a2 2e       	mov	r10, r18
    5208:	90 2e       	mov	r9, r16
    520a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    520c:	98 a1       	ldd	r25, Y+32	; 0x20
    520e:	89 2b       	or	r24, r25
    5210:	e9 f4       	brne	.+58     	; 0x524c <_ZN16Adafruit_SSD13065beginEhhbb+0x64>
    5212:	2e 81       	ldd	r18, Y+6	; 0x06
    5214:	3f 81       	ldd	r19, Y+7	; 0x07
    5216:	c9 01       	movw	r24, r18
    5218:	07 96       	adiw	r24, 0x07	; 7
    521a:	97 fd       	sbrc	r25, 7
    521c:	07 96       	adiw	r24, 0x07	; 7
    521e:	23 e0       	ldi	r18, 0x03	; 3
    5220:	95 95       	asr	r25
    5222:	87 95       	ror	r24
    5224:	2a 95       	dec	r18
    5226:	e1 f7       	brne	.-8      	; 0x5220 <_ZN16Adafruit_SSD13065beginEhhbb+0x38>
    5228:	2c 81       	ldd	r18, Y+4	; 0x04
    522a:	3d 81       	ldd	r19, Y+5	; 0x05
    522c:	ac 01       	movw	r20, r24
    522e:	42 9f       	mul	r20, r18
    5230:	c0 01       	movw	r24, r0
    5232:	43 9f       	mul	r20, r19
    5234:	90 0d       	add	r25, r0
    5236:	52 9f       	mul	r21, r18
    5238:	90 0d       	add	r25, r0
    523a:	11 24       	eor	r1, r1
    523c:	0e 94 2c 32 	call	0x6458	; 0x6458 <malloc>
    5240:	98 a3       	std	Y+32, r25	; 0x20
    5242:	8f 8f       	std	Y+31, r24	; 0x1f
    5244:	89 2b       	or	r24, r25
    5246:	11 f4       	brne	.+4      	; 0x524c <_ZN16Adafruit_SSD13065beginEhhbb+0x64>
    5248:	80 e0       	ldi	r24, 0x00	; 0
    524a:	92 c1       	rjmp	.+804    	; 0x5570 <_ZN16Adafruit_SSD13065beginEhhbb+0x388>
    524c:	ce 01       	movw	r24, r28
    524e:	0e 94 d6 28 	call	0x51ac	; 0x51ac <_ZN16Adafruit_SSD130612clearDisplayEv>
    5252:	8e 81       	ldd	r24, Y+6	; 0x06
    5254:	9f 81       	ldd	r25, Y+7	; 0x07
    5256:	6c 81       	ldd	r22, Y+4	; 0x04
    5258:	7d 81       	ldd	r23, Y+5	; 0x05
    525a:	81 32       	cpi	r24, 0x21	; 33
    525c:	91 05       	cpc	r25, r1
    525e:	e4 f0       	brlt	.+56     	; 0x5298 <_ZN16Adafruit_SSD13065beginEhhbb+0xb0>
    5260:	ac 01       	movw	r20, r24
    5262:	40 54       	subi	r20, 0x40	; 64
    5264:	51 09       	sbc	r21, r1
    5266:	57 ff       	sbrs	r21, 7
    5268:	02 c0       	rjmp	.+4      	; 0x526e <_ZN16Adafruit_SSD13065beginEhhbb+0x86>
    526a:	4f 5f       	subi	r20, 0xFF	; 255
    526c:	5f 4f       	sbci	r21, 0xFF	; 255
    526e:	55 95       	asr	r21
    5270:	47 95       	ror	r20
    5272:	62 55       	subi	r22, 0x52	; 82
    5274:	71 09       	sbc	r23, r1
    5276:	77 ff       	sbrs	r23, 7
    5278:	02 c0       	rjmp	.+4      	; 0x527e <_ZN16Adafruit_SSD13065beginEhhbb+0x96>
    527a:	6f 5f       	subi	r22, 0xFF	; 255
    527c:	7f 4f       	sbci	r23, 0xFF	; 255
    527e:	75 95       	asr	r23
    5280:	67 95       	ror	r22
    5282:	cc 24       	eor	r12, r12
    5284:	c3 94       	inc	r12
    5286:	d1 2c       	mov	r13, r1
    5288:	80 e4       	ldi	r24, 0x40	; 64
    528a:	e8 2e       	mov	r14, r24
    528c:	f1 2c       	mov	r15, r1
    528e:	02 e5       	ldi	r16, 0x52	; 82
    5290:	10 e0       	ldi	r17, 0x00	; 0
    5292:	2a e0       	ldi	r18, 0x0A	; 10
    5294:	30 e1       	ldi	r19, 0x10	; 16
    5296:	1b c0       	rjmp	.+54     	; 0x52ce <_ZN16Adafruit_SSD13065beginEhhbb+0xe6>
    5298:	ac 01       	movw	r20, r24
    529a:	40 52       	subi	r20, 0x20	; 32
    529c:	51 09       	sbc	r21, r1
    529e:	57 ff       	sbrs	r21, 7
    52a0:	02 c0       	rjmp	.+4      	; 0x52a6 <_ZN16Adafruit_SSD13065beginEhhbb+0xbe>
    52a2:	4f 5f       	subi	r20, 0xFF	; 255
    52a4:	5f 4f       	sbci	r21, 0xFF	; 255
    52a6:	55 95       	asr	r21
    52a8:	47 95       	ror	r20
    52aa:	63 57       	subi	r22, 0x73	; 115
    52ac:	71 09       	sbc	r23, r1
    52ae:	77 ff       	sbrs	r23, 7
    52b0:	02 c0       	rjmp	.+4      	; 0x52b6 <_ZN16Adafruit_SSD13065beginEhhbb+0xce>
    52b2:	6f 5f       	subi	r22, 0xFF	; 255
    52b4:	7f 4f       	sbci	r23, 0xFF	; 255
    52b6:	75 95       	asr	r23
    52b8:	67 95       	ror	r22
    52ba:	cc 24       	eor	r12, r12
    52bc:	c3 94       	inc	r12
    52be:	d1 2c       	mov	r13, r1
    52c0:	a0 e2       	ldi	r26, 0x20	; 32
    52c2:	ea 2e       	mov	r14, r26
    52c4:	f1 2c       	mov	r15, r1
    52c6:	03 e7       	ldi	r16, 0x73	; 115
    52c8:	10 e0       	ldi	r17, 0x00	; 0
    52ca:	2a e2       	ldi	r18, 0x2A	; 42
    52cc:	3e e0       	ldi	r19, 0x0E	; 14
    52ce:	ce 01       	movw	r24, r28
    52d0:	0e 94 ae 22 	call	0x455c	; 0x455c <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij>
    52d4:	8a a2       	std	Y+34, r8	; 0x22
    52d6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    52d8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    52da:	00 97       	sbiw	r24, 0x00	; 0
    52dc:	99 f0       	breq	.+38     	; 0x5304 <_ZN16Adafruit_SSD13065beginEhhbb+0x11c>
    52de:	b1 10       	cpse	r11, r1
    52e0:	07 c0       	rjmp	.+14     	; 0x52f0 <_ZN16Adafruit_SSD13065beginEhhbb+0x108>
    52e2:	2e 81       	ldd	r18, Y+6	; 0x06
    52e4:	3f 81       	ldd	r19, Y+7	; 0x07
    52e6:	20 32       	cpi	r18, 0x20	; 32
    52e8:	31 05       	cpc	r19, r1
    52ea:	21 f4       	brne	.+8      	; 0x52f4 <_ZN16Adafruit_SSD13065beginEhhbb+0x10c>
    52ec:	2c e3       	ldi	r18, 0x3C	; 60
    52ee:	03 c0       	rjmp	.+6      	; 0x52f6 <_ZN16Adafruit_SSD13065beginEhhbb+0x10e>
    52f0:	2b 2d       	mov	r18, r11
    52f2:	01 c0       	rjmp	.+2      	; 0x52f6 <_ZN16Adafruit_SSD13065beginEhhbb+0x10e>
    52f4:	2d e3       	ldi	r18, 0x3D	; 61
    52f6:	29 a3       	std	Y+33, r18	; 0x21
    52f8:	99 20       	and	r9, r9
    52fa:	09 f4       	brne	.+2      	; 0x52fe <_ZN16Adafruit_SSD13065beginEhhbb+0x116>
    52fc:	36 c1       	rjmp	.+620    	; 0x556a <_ZN16Adafruit_SSD13065beginEhhbb+0x382>
    52fe:	0e 94 63 2e 	call	0x5cc6	; 0x5cc6 <_ZN7TwoWire5beginEv>
    5302:	79 c0       	rjmp	.+242    	; 0x53f6 <_ZN16Adafruit_SSD13065beginEhhbb+0x20e>
    5304:	61 e0       	ldi	r22, 0x01	; 1
    5306:	8e a1       	ldd	r24, Y+38	; 0x26
    5308:	0e 94 54 1b 	call	0x36a8	; 0x36a8 <pinMode>
    530c:	61 e0       	ldi	r22, 0x01	; 1
    530e:	8f a1       	ldd	r24, Y+39	; 0x27
    5310:	0e 94 54 1b 	call	0x36a8	; 0x36a8 <pinMode>
    5314:	8e a1       	ldd	r24, Y+38	; 0x26
    5316:	08 2e       	mov	r0, r24
    5318:	00 0c       	add	r0, r0
    531a:	99 0b       	sbc	r25, r25
    531c:	fc 01       	movw	r30, r24
    531e:	ef 52       	subi	r30, 0x2F	; 47
    5320:	f7 4f       	sbci	r31, 0xF7	; 247
    5322:	e4 91       	lpm	r30, Z
    5324:	f0 e0       	ldi	r31, 0x00	; 0
    5326:	ee 0f       	add	r30, r30
    5328:	ff 1f       	adc	r31, r31
    532a:	e1 51       	subi	r30, 0x11	; 17
    532c:	f7 4f       	sbci	r31, 0xF7	; 247
    532e:	25 91       	lpm	r18, Z+
    5330:	34 91       	lpm	r19, Z
    5332:	3e a7       	std	Y+46, r19	; 0x2e
    5334:	2d a7       	std	Y+45, r18	; 0x2d
    5336:	fc 01       	movw	r30, r24
    5338:	e3 54       	subi	r30, 0x43	; 67
    533a:	f7 4f       	sbci	r31, 0xF7	; 247
    533c:	e4 91       	lpm	r30, Z
    533e:	eb ab       	std	Y+51, r30	; 0x33
    5340:	8f a1       	ldd	r24, Y+39	; 0x27
    5342:	08 2e       	mov	r0, r24
    5344:	00 0c       	add	r0, r0
    5346:	99 0b       	sbc	r25, r25
    5348:	fc 01       	movw	r30, r24
    534a:	ef 52       	subi	r30, 0x2F	; 47
    534c:	f7 4f       	sbci	r31, 0xF7	; 247
    534e:	e4 91       	lpm	r30, Z
    5350:	f0 e0       	ldi	r31, 0x00	; 0
    5352:	ee 0f       	add	r30, r30
    5354:	ff 1f       	adc	r31, r31
    5356:	e1 51       	subi	r30, 0x11	; 17
    5358:	f7 4f       	sbci	r31, 0xF7	; 247
    535a:	a5 91       	lpm	r26, Z+
    535c:	b4 91       	lpm	r27, Z
    535e:	b8 ab       	std	Y+48, r27	; 0x30
    5360:	af a7       	std	Y+47, r26	; 0x2f
    5362:	fc 01       	movw	r30, r24
    5364:	e3 54       	subi	r30, 0x43	; 67
    5366:	f7 4f       	sbci	r31, 0xF7	; 247
    5368:	e4 91       	lpm	r30, Z
    536a:	ec ab       	std	Y+52, r30	; 0x34
    536c:	8c 91       	ld	r24, X
    536e:	e8 2b       	or	r30, r24
    5370:	ec 93       	st	X, r30
    5372:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5374:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5376:	89 2b       	or	r24, r25
    5378:	31 f0       	breq	.+12     	; 0x5386 <_ZN16Adafruit_SSD13065beginEhhbb+0x19e>
    537a:	99 20       	and	r9, r9
    537c:	09 f4       	brne	.+2      	; 0x5380 <_ZN16Adafruit_SSD13065beginEhhbb+0x198>
    537e:	3b c0       	rjmp	.+118    	; 0x53f6 <_ZN16Adafruit_SSD13065beginEhhbb+0x20e>
    5380:	0e 94 5f 2d 	call	0x5abe	; 0x5abe <_ZN8SPIClass5beginEv>
    5384:	38 c0       	rjmp	.+112    	; 0x53f6 <_ZN16Adafruit_SSD13065beginEhhbb+0x20e>
    5386:	61 e0       	ldi	r22, 0x01	; 1
    5388:	8c a1       	ldd	r24, Y+36	; 0x24
    538a:	0e 94 54 1b 	call	0x36a8	; 0x36a8 <pinMode>
    538e:	61 e0       	ldi	r22, 0x01	; 1
    5390:	8d a1       	ldd	r24, Y+37	; 0x25
    5392:	0e 94 54 1b 	call	0x36a8	; 0x36a8 <pinMode>
    5396:	8c a1       	ldd	r24, Y+36	; 0x24
    5398:	08 2e       	mov	r0, r24
    539a:	00 0c       	add	r0, r0
    539c:	99 0b       	sbc	r25, r25
    539e:	fc 01       	movw	r30, r24
    53a0:	ef 52       	subi	r30, 0x2F	; 47
    53a2:	f7 4f       	sbci	r31, 0xF7	; 247
    53a4:	e4 91       	lpm	r30, Z
    53a6:	f0 e0       	ldi	r31, 0x00	; 0
    53a8:	ee 0f       	add	r30, r30
    53aa:	ff 1f       	adc	r31, r31
    53ac:	e1 51       	subi	r30, 0x11	; 17
    53ae:	f7 4f       	sbci	r31, 0xF7	; 247
    53b0:	25 91       	lpm	r18, Z+
    53b2:	34 91       	lpm	r19, Z
    53b4:	3a a7       	std	Y+42, r19	; 0x2a
    53b6:	29 a7       	std	Y+41, r18	; 0x29
    53b8:	fc 01       	movw	r30, r24
    53ba:	e3 54       	subi	r30, 0x43	; 67
    53bc:	f7 4f       	sbci	r31, 0xF7	; 247
    53be:	e4 91       	lpm	r30, Z
    53c0:	e9 ab       	std	Y+49, r30	; 0x31
    53c2:	8d a1       	ldd	r24, Y+37	; 0x25
    53c4:	08 2e       	mov	r0, r24
    53c6:	00 0c       	add	r0, r0
    53c8:	99 0b       	sbc	r25, r25
    53ca:	fc 01       	movw	r30, r24
    53cc:	ef 52       	subi	r30, 0x2F	; 47
    53ce:	f7 4f       	sbci	r31, 0xF7	; 247
    53d0:	e4 91       	lpm	r30, Z
    53d2:	f0 e0       	ldi	r31, 0x00	; 0
    53d4:	ee 0f       	add	r30, r30
    53d6:	ff 1f       	adc	r31, r31
    53d8:	e1 51       	subi	r30, 0x11	; 17
    53da:	f7 4f       	sbci	r31, 0xF7	; 247
    53dc:	a5 91       	lpm	r26, Z+
    53de:	b4 91       	lpm	r27, Z
    53e0:	bc a7       	std	Y+44, r27	; 0x2c
    53e2:	ab a7       	std	Y+43, r26	; 0x2b
    53e4:	fc 01       	movw	r30, r24
    53e6:	e3 54       	subi	r30, 0x43	; 67
    53e8:	f7 4f       	sbci	r31, 0xF7	; 247
    53ea:	e4 91       	lpm	r30, Z
    53ec:	ea ab       	std	Y+50, r30	; 0x32
    53ee:	8c 91       	ld	r24, X
    53f0:	e0 95       	com	r30
    53f2:	e8 23       	and	r30, r24
    53f4:	ec 93       	st	X, r30
    53f6:	aa 20       	and	r10, r10
    53f8:	f1 f0       	breq	.+60     	; 0x5436 <_ZN16Adafruit_SSD13065beginEhhbb+0x24e>
    53fa:	88 a5       	ldd	r24, Y+40	; 0x28
    53fc:	87 fd       	sbrc	r24, 7
    53fe:	1b c0       	rjmp	.+54     	; 0x5436 <_ZN16Adafruit_SSD13065beginEhhbb+0x24e>
    5400:	61 e0       	ldi	r22, 0x01	; 1
    5402:	0e 94 54 1b 	call	0x36a8	; 0x36a8 <pinMode>
    5406:	61 e0       	ldi	r22, 0x01	; 1
    5408:	88 a5       	ldd	r24, Y+40	; 0x28
    540a:	0e 94 90 1b 	call	0x3720	; 0x3720 <digitalWrite>
    540e:	61 e0       	ldi	r22, 0x01	; 1
    5410:	70 e0       	ldi	r23, 0x00	; 0
    5412:	80 e0       	ldi	r24, 0x00	; 0
    5414:	90 e0       	ldi	r25, 0x00	; 0
    5416:	0e 94 8c 1a 	call	0x3518	; 0x3518 <delay>
    541a:	60 e0       	ldi	r22, 0x00	; 0
    541c:	88 a5       	ldd	r24, Y+40	; 0x28
    541e:	0e 94 90 1b 	call	0x3720	; 0x3720 <digitalWrite>
    5422:	6a e0       	ldi	r22, 0x0A	; 10
    5424:	70 e0       	ldi	r23, 0x00	; 0
    5426:	80 e0       	ldi	r24, 0x00	; 0
    5428:	90 e0       	ldi	r25, 0x00	; 0
    542a:	0e 94 8c 1a 	call	0x3518	; 0x3518 <delay>
    542e:	61 e0       	ldi	r22, 0x01	; 1
    5430:	88 a5       	ldd	r24, Y+40	; 0x28
    5432:	0e 94 90 1b 	call	0x3720	; 0x3720 <digitalWrite>
    5436:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5438:	9e 8d       	ldd	r25, Y+30	; 0x1e
    543a:	00 97       	sbiw	r24, 0x00	; 0
    543c:	39 f0       	breq	.+14     	; 0x544c <_ZN16Adafruit_SSD13065beginEhhbb+0x264>
    543e:	4d a9       	ldd	r20, Y+53	; 0x35
    5440:	5e a9       	ldd	r21, Y+54	; 0x36
    5442:	6f a9       	ldd	r22, Y+55	; 0x37
    5444:	78 ad       	ldd	r23, Y+56	; 0x38
    5446:	0e 94 75 2e 	call	0x5cea	; 0x5cea <_ZN7TwoWire8setClockEm>
    544a:	0f c0       	rjmp	.+30     	; 0x546a <_ZN16Adafruit_SSD13065beginEhhbb+0x282>
    544c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    544e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5450:	89 2b       	or	r24, r25
    5452:	21 f0       	breq	.+8      	; 0x545c <_ZN16Adafruit_SSD13065beginEhhbb+0x274>
    5454:	8e ad       	ldd	r24, Y+62	; 0x3e
    5456:	9f ad       	ldd	r25, Y+63	; 0x3f
    5458:	0e 94 24 27 	call	0x4e48	; 0x4e48 <_ZN8SPIClass16beginTransactionE11SPISettings>
    545c:	ef a5       	ldd	r30, Y+47	; 0x2f
    545e:	f8 a9       	ldd	r31, Y+48	; 0x30
    5460:	90 81       	ld	r25, Z
    5462:	8c a9       	ldd	r24, Y+52	; 0x34
    5464:	80 95       	com	r24
    5466:	89 23       	and	r24, r25
    5468:	80 83       	st	Z, r24
    546a:	44 e0       	ldi	r20, 0x04	; 4
    546c:	66 e2       	ldi	r22, 0x26	; 38
    546e:	7e e0       	ldi	r23, 0x0E	; 14
    5470:	ce 01       	movw	r24, r28
    5472:	0e 94 2e 28 	call	0x505c	; 0x505c <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    5476:	6e 81       	ldd	r22, Y+6	; 0x06
    5478:	61 50       	subi	r22, 0x01	; 1
    547a:	ce 01       	movw	r24, r28
    547c:	0e 94 86 27 	call	0x4f0c	; 0x4f0c <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
    5480:	44 e0       	ldi	r20, 0x04	; 4
    5482:	62 e2       	ldi	r22, 0x22	; 34
    5484:	7e e0       	ldi	r23, 0x0E	; 14
    5486:	ce 01       	movw	r24, r28
    5488:	0e 94 2e 28 	call	0x505c	; 0x505c <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    548c:	8a a1       	ldd	r24, Y+34	; 0x22
    548e:	81 30       	cpi	r24, 0x01	; 1
    5490:	11 f4       	brne	.+4      	; 0x5496 <_ZN16Adafruit_SSD13065beginEhhbb+0x2ae>
    5492:	60 e1       	ldi	r22, 0x10	; 16
    5494:	01 c0       	rjmp	.+2      	; 0x5498 <_ZN16Adafruit_SSD13065beginEhhbb+0x2b0>
    5496:	64 e1       	ldi	r22, 0x14	; 20
    5498:	ce 01       	movw	r24, r28
    549a:	0e 94 86 27 	call	0x4f0c	; 0x4f0c <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
    549e:	44 e0       	ldi	r20, 0x04	; 4
    54a0:	6e e1       	ldi	r22, 0x1E	; 30
    54a2:	7e e0       	ldi	r23, 0x0E	; 14
    54a4:	ce 01       	movw	r24, r28
    54a6:	0e 94 2e 28 	call	0x505c	; 0x505c <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    54aa:	8f e8       	ldi	r24, 0x8F	; 143
    54ac:	8d af       	std	Y+61, r24	; 0x3d
    54ae:	8c 81       	ldd	r24, Y+4	; 0x04
    54b0:	9d 81       	ldd	r25, Y+5	; 0x05
    54b2:	80 38       	cpi	r24, 0x80	; 128
    54b4:	91 05       	cpc	r25, r1
    54b6:	71 f4       	brne	.+28     	; 0x54d4 <_ZN16Adafruit_SSD13065beginEhhbb+0x2ec>
    54b8:	8e 81       	ldd	r24, Y+6	; 0x06
    54ba:	9f 81       	ldd	r25, Y+7	; 0x07
    54bc:	80 34       	cpi	r24, 0x40	; 64
    54be:	91 05       	cpc	r25, r1
    54c0:	b9 f4       	brne	.+46     	; 0x54f0 <_ZN16Adafruit_SSD13065beginEhhbb+0x308>
    54c2:	8a a1       	ldd	r24, Y+34	; 0x22
    54c4:	81 30       	cpi	r24, 0x01	; 1
    54c6:	11 f4       	brne	.+4      	; 0x54cc <_ZN16Adafruit_SSD13065beginEhhbb+0x2e4>
    54c8:	8f e9       	ldi	r24, 0x9F	; 159
    54ca:	01 c0       	rjmp	.+2      	; 0x54ce <_ZN16Adafruit_SSD13065beginEhhbb+0x2e6>
    54cc:	8f ec       	ldi	r24, 0xCF	; 207
    54ce:	8d af       	std	Y+61, r24	; 0x3d
    54d0:	12 e1       	ldi	r17, 0x12	; 18
    54d2:	0f c0       	rjmp	.+30     	; 0x54f2 <_ZN16Adafruit_SSD13065beginEhhbb+0x30a>
    54d4:	80 36       	cpi	r24, 0x60	; 96
    54d6:	91 05       	cpc	r25, r1
    54d8:	59 f4       	brne	.+22     	; 0x54f0 <_ZN16Adafruit_SSD13065beginEhhbb+0x308>
    54da:	8e 81       	ldd	r24, Y+6	; 0x06
    54dc:	9f 81       	ldd	r25, Y+7	; 0x07
    54de:	40 97       	sbiw	r24, 0x10	; 16
    54e0:	39 f4       	brne	.+14     	; 0x54f0 <_ZN16Adafruit_SSD13065beginEhhbb+0x308>
    54e2:	8a a1       	ldd	r24, Y+34	; 0x22
    54e4:	81 30       	cpi	r24, 0x01	; 1
    54e6:	11 f4       	brne	.+4      	; 0x54ec <_ZN16Adafruit_SSD13065beginEhhbb+0x304>
    54e8:	80 e1       	ldi	r24, 0x10	; 16
    54ea:	01 c0       	rjmp	.+2      	; 0x54ee <_ZN16Adafruit_SSD13065beginEhhbb+0x306>
    54ec:	8f ea       	ldi	r24, 0xAF	; 175
    54ee:	8d af       	std	Y+61, r24	; 0x3d
    54f0:	12 e0       	ldi	r17, 0x02	; 2
    54f2:	6a ed       	ldi	r22, 0xDA	; 218
    54f4:	ce 01       	movw	r24, r28
    54f6:	0e 94 86 27 	call	0x4f0c	; 0x4f0c <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
    54fa:	61 2f       	mov	r22, r17
    54fc:	ce 01       	movw	r24, r28
    54fe:	0e 94 86 27 	call	0x4f0c	; 0x4f0c <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
    5502:	61 e8       	ldi	r22, 0x81	; 129
    5504:	ce 01       	movw	r24, r28
    5506:	0e 94 86 27 	call	0x4f0c	; 0x4f0c <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
    550a:	6d ad       	ldd	r22, Y+61	; 0x3d
    550c:	ce 01       	movw	r24, r28
    550e:	0e 94 86 27 	call	0x4f0c	; 0x4f0c <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
    5512:	69 ed       	ldi	r22, 0xD9	; 217
    5514:	ce 01       	movw	r24, r28
    5516:	0e 94 86 27 	call	0x4f0c	; 0x4f0c <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
    551a:	8a a1       	ldd	r24, Y+34	; 0x22
    551c:	81 30       	cpi	r24, 0x01	; 1
    551e:	11 f4       	brne	.+4      	; 0x5524 <_ZN16Adafruit_SSD13065beginEhhbb+0x33c>
    5520:	62 e2       	ldi	r22, 0x22	; 34
    5522:	01 c0       	rjmp	.+2      	; 0x5526 <_ZN16Adafruit_SSD13065beginEhhbb+0x33e>
    5524:	61 ef       	ldi	r22, 0xF1	; 241
    5526:	ce 01       	movw	r24, r28
    5528:	0e 94 86 27 	call	0x4f0c	; 0x4f0c <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
    552c:	46 e0       	ldi	r20, 0x06	; 6
    552e:	68 e1       	ldi	r22, 0x18	; 24
    5530:	7e e0       	ldi	r23, 0x0E	; 14
    5532:	ce 01       	movw	r24, r28
    5534:	0e 94 2e 28 	call	0x505c	; 0x505c <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    5538:	8d 8d       	ldd	r24, Y+29	; 0x1d
    553a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    553c:	00 97       	sbiw	r24, 0x00	; 0
    553e:	39 f0       	breq	.+14     	; 0x554e <_ZN16Adafruit_SSD13065beginEhhbb+0x366>
    5540:	49 ad       	ldd	r20, Y+57	; 0x39
    5542:	5a ad       	ldd	r21, Y+58	; 0x3a
    5544:	6b ad       	ldd	r22, Y+59	; 0x3b
    5546:	7c ad       	ldd	r23, Y+60	; 0x3c
    5548:	0e 94 75 2e 	call	0x5cea	; 0x5cea <_ZN7TwoWire8setClockEm>
    554c:	0c c0       	rjmp	.+24     	; 0x5566 <_ZN16Adafruit_SSD13065beginEhhbb+0x37e>
    554e:	ef a5       	ldd	r30, Y+47	; 0x2f
    5550:	f8 a9       	ldd	r31, Y+48	; 0x30
    5552:	90 81       	ld	r25, Z
    5554:	8c a9       	ldd	r24, Y+52	; 0x34
    5556:	89 2b       	or	r24, r25
    5558:	80 83       	st	Z, r24
    555a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    555c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    555e:	89 2b       	or	r24, r25
    5560:	11 f0       	breq	.+4      	; 0x5566 <_ZN16Adafruit_SSD13065beginEhhbb+0x37e>
    5562:	0e 94 45 27 	call	0x4e8a	; 0x4e8a <_ZN8SPIClass14endTransactionEv>
    5566:	81 e0       	ldi	r24, 0x01	; 1
    5568:	03 c0       	rjmp	.+6      	; 0x5570 <_ZN16Adafruit_SSD13065beginEhhbb+0x388>
    556a:	a1 10       	cpse	r10, r1
    556c:	46 cf       	rjmp	.-372    	; 0x53fa <_ZN16Adafruit_SSD13065beginEhhbb+0x212>
    556e:	67 cf       	rjmp	.-306    	; 0x543e <_ZN16Adafruit_SSD13065beginEhhbb+0x256>
    5570:	df 91       	pop	r29
    5572:	cf 91       	pop	r28
    5574:	1f 91       	pop	r17
    5576:	0f 91       	pop	r16
    5578:	ff 90       	pop	r15
    557a:	ef 90       	pop	r14
    557c:	df 90       	pop	r13
    557e:	cf 90       	pop	r12
    5580:	bf 90       	pop	r11
    5582:	af 90       	pop	r10
    5584:	9f 90       	pop	r9
    5586:	8f 90       	pop	r8
    5588:	08 95       	ret

0000558a <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij>:
    558a:	0f 93       	push	r16
    558c:	1f 93       	push	r17
    558e:	cf 93       	push	r28
    5590:	df 93       	push	r29
    5592:	dc 01       	movw	r26, r24
    5594:	57 fd       	sbrc	r21, 7
    5596:	64 c0       	rjmp	.+200    	; 0x5660 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xd6>
    5598:	16 96       	adiw	r26, 0x06	; 6
    559a:	8d 91       	ld	r24, X+
    559c:	9c 91       	ld	r25, X
    559e:	17 97       	sbiw	r26, 0x07	; 7
    55a0:	48 17       	cp	r20, r24
    55a2:	59 07       	cpc	r21, r25
    55a4:	0c f0       	brlt	.+2      	; 0x55a8 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0x1e>
    55a6:	5c c0       	rjmp	.+184    	; 0x5660 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xd6>
    55a8:	77 ff       	sbrs	r23, 7
    55aa:	04 c0       	rjmp	.+8      	; 0x55b4 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0x2a>
    55ac:	26 0f       	add	r18, r22
    55ae:	37 1f       	adc	r19, r23
    55b0:	60 e0       	ldi	r22, 0x00	; 0
    55b2:	70 e0       	ldi	r23, 0x00	; 0
    55b4:	14 96       	adiw	r26, 0x04	; 4
    55b6:	cd 91       	ld	r28, X+
    55b8:	dc 91       	ld	r29, X
    55ba:	15 97       	sbiw	r26, 0x05	; 5
    55bc:	cb 01       	movw	r24, r22
    55be:	82 0f       	add	r24, r18
    55c0:	93 1f       	adc	r25, r19
    55c2:	c8 17       	cp	r28, r24
    55c4:	d9 07       	cpc	r29, r25
    55c6:	1c f4       	brge	.+6      	; 0x55ce <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0x44>
    55c8:	9e 01       	movw	r18, r28
    55ca:	26 1b       	sub	r18, r22
    55cc:	37 0b       	sbc	r19, r23
    55ce:	12 16       	cp	r1, r18
    55d0:	13 06       	cpc	r1, r19
    55d2:	0c f0       	brlt	.+2      	; 0x55d6 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0x4c>
    55d4:	45 c0       	rjmp	.+138    	; 0x5660 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xd6>
    55d6:	fa 01       	movw	r30, r20
    55d8:	57 fd       	sbrc	r21, 7
    55da:	37 96       	adiw	r30, 0x07	; 7
    55dc:	cf 01       	movw	r24, r30
    55de:	e3 e0       	ldi	r30, 0x03	; 3
    55e0:	95 95       	asr	r25
    55e2:	87 95       	ror	r24
    55e4:	ea 95       	dec	r30
    55e6:	e1 f7       	brne	.-8      	; 0x55e0 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0x56>
    55e8:	8c 9f       	mul	r24, r28
    55ea:	f0 01       	movw	r30, r0
    55ec:	8d 9f       	mul	r24, r29
    55ee:	f0 0d       	add	r31, r0
    55f0:	9c 9f       	mul	r25, r28
    55f2:	f0 0d       	add	r31, r0
    55f4:	11 24       	eor	r1, r1
    55f6:	6e 0f       	add	r22, r30
    55f8:	7f 1f       	adc	r23, r31
    55fa:	5f 96       	adiw	r26, 0x1f	; 31
    55fc:	ed 91       	ld	r30, X+
    55fe:	fc 91       	ld	r31, X
    5600:	90 97       	sbiw	r26, 0x20	; 32
    5602:	e6 0f       	add	r30, r22
    5604:	f7 1f       	adc	r31, r23
    5606:	47 70       	andi	r20, 0x07	; 7
    5608:	55 27       	eor	r21, r21
    560a:	81 e0       	ldi	r24, 0x01	; 1
    560c:	90 e0       	ldi	r25, 0x00	; 0
    560e:	01 c0       	rjmp	.+2      	; 0x5612 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0x88>
    5610:	88 0f       	add	r24, r24
    5612:	4a 95       	dec	r20
    5614:	ea f7       	brpl	.-6      	; 0x5610 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0x86>
    5616:	48 2f       	mov	r20, r24
    5618:	01 30       	cpi	r16, 0x01	; 1
    561a:	11 05       	cpc	r17, r1
    561c:	39 f0       	breq	.+14     	; 0x562c <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xa2>
    561e:	78 f0       	brcs	.+30     	; 0x563e <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xb4>
    5620:	02 30       	cpi	r16, 0x02	; 2
    5622:	11 05       	cpc	r17, r1
    5624:	e9 f4       	brne	.+58     	; 0x5660 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xd6>
    5626:	2e 0f       	add	r18, r30
    5628:	3f 1f       	adc	r19, r31
    562a:	13 c0       	rjmp	.+38     	; 0x5652 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xc8>
    562c:	2e 0f       	add	r18, r30
    562e:	3f 1f       	adc	r19, r31
    5630:	e2 17       	cp	r30, r18
    5632:	f3 07       	cpc	r31, r19
    5634:	a9 f0       	breq	.+42     	; 0x5660 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xd6>
    5636:	80 81       	ld	r24, Z
    5638:	84 2b       	or	r24, r20
    563a:	81 93       	st	Z+, r24
    563c:	f9 cf       	rjmp	.-14     	; 0x5630 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xa6>
    563e:	80 95       	com	r24
    5640:	2e 0f       	add	r18, r30
    5642:	3f 1f       	adc	r19, r31
    5644:	e2 17       	cp	r30, r18
    5646:	f3 07       	cpc	r31, r19
    5648:	59 f0       	breq	.+22     	; 0x5660 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xd6>
    564a:	90 81       	ld	r25, Z
    564c:	98 23       	and	r25, r24
    564e:	91 93       	st	Z+, r25
    5650:	f9 cf       	rjmp	.-14     	; 0x5644 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xba>
    5652:	e2 17       	cp	r30, r18
    5654:	f3 07       	cpc	r31, r19
    5656:	21 f0       	breq	.+8      	; 0x5660 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xd6>
    5658:	80 81       	ld	r24, Z
    565a:	84 27       	eor	r24, r20
    565c:	81 93       	st	Z+, r24
    565e:	f9 cf       	rjmp	.-14     	; 0x5652 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xc8>
    5660:	df 91       	pop	r29
    5662:	cf 91       	pop	r28
    5664:	1f 91       	pop	r17
    5666:	0f 91       	pop	r16
    5668:	08 95       	ret

0000566a <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij>:
    566a:	ef 92       	push	r14
    566c:	ff 92       	push	r15
    566e:	0f 93       	push	r16
    5670:	1f 93       	push	r17
    5672:	cf 93       	push	r28
    5674:	df 93       	push	r29
    5676:	ec 01       	movw	r28, r24
    5678:	77 fd       	sbrc	r23, 7
    567a:	a5 c0       	rjmp	.+330    	; 0x57c6 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x15c>
    567c:	ec 80       	ldd	r14, Y+4	; 0x04
    567e:	fd 80       	ldd	r15, Y+5	; 0x05
    5680:	6e 15       	cp	r22, r14
    5682:	7f 05       	cpc	r23, r15
    5684:	0c f0       	brlt	.+2      	; 0x5688 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x1e>
    5686:	9f c0       	rjmp	.+318    	; 0x57c6 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x15c>
    5688:	57 ff       	sbrs	r21, 7
    568a:	04 c0       	rjmp	.+8      	; 0x5694 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x2a>
    568c:	24 0f       	add	r18, r20
    568e:	35 1f       	adc	r19, r21
    5690:	40 e0       	ldi	r20, 0x00	; 0
    5692:	50 e0       	ldi	r21, 0x00	; 0
    5694:	8e 81       	ldd	r24, Y+6	; 0x06
    5696:	9f 81       	ldd	r25, Y+7	; 0x07
    5698:	fa 01       	movw	r30, r20
    569a:	e2 0f       	add	r30, r18
    569c:	f3 1f       	adc	r31, r19
    569e:	8e 17       	cp	r24, r30
    56a0:	9f 07       	cpc	r25, r31
    56a2:	1c f4       	brge	.+6      	; 0x56aa <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x40>
    56a4:	9c 01       	movw	r18, r24
    56a6:	24 1b       	sub	r18, r20
    56a8:	35 0b       	sbc	r19, r21
    56aa:	12 16       	cp	r1, r18
    56ac:	13 06       	cpc	r1, r19
    56ae:	0c f0       	brlt	.+2      	; 0x56b2 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x48>
    56b0:	8a c0       	rjmp	.+276    	; 0x57c6 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x15c>
    56b2:	92 2f       	mov	r25, r18
    56b4:	84 2f       	mov	r24, r20
    56b6:	86 95       	lsr	r24
    56b8:	86 95       	lsr	r24
    56ba:	86 95       	lsr	r24
    56bc:	8e 9d       	mul	r24, r14
    56be:	d0 01       	movw	r26, r0
    56c0:	8f 9d       	mul	r24, r15
    56c2:	b0 0d       	add	r27, r0
    56c4:	11 24       	eor	r1, r1
    56c6:	6a 0f       	add	r22, r26
    56c8:	7b 1f       	adc	r23, r27
    56ca:	af 8d       	ldd	r26, Y+31	; 0x1f
    56cc:	b8 a1       	ldd	r27, Y+32	; 0x20
    56ce:	a6 0f       	add	r26, r22
    56d0:	b7 1f       	adc	r27, r23
    56d2:	47 70       	andi	r20, 0x07	; 7
    56d4:	b1 f1       	breq	.+108    	; 0x5742 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xd8>
    56d6:	88 e0       	ldi	r24, 0x08	; 8
    56d8:	84 1b       	sub	r24, r20
    56da:	48 2f       	mov	r20, r24
    56dc:	68 2f       	mov	r22, r24
    56de:	70 e0       	ldi	r23, 0x00	; 0
    56e0:	fb 01       	movw	r30, r22
    56e2:	e0 5f       	subi	r30, 0xF0	; 240
    56e4:	f1 4f       	sbci	r31, 0xF1	; 241
    56e6:	e4 91       	lpm	r30, Z
    56e8:	28 17       	cp	r18, r24
    56ea:	98 f4       	brcc	.+38     	; 0x5712 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xa8>
    56ec:	62 1b       	sub	r22, r18
    56ee:	71 09       	sbc	r23, r1
    56f0:	2f ef       	ldi	r18, 0xFF	; 255
    56f2:	30 e0       	ldi	r19, 0x00	; 0
    56f4:	02 c0       	rjmp	.+4      	; 0x56fa <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x90>
    56f6:	35 95       	asr	r19
    56f8:	27 95       	ror	r18
    56fa:	6a 95       	dec	r22
    56fc:	e2 f7       	brpl	.-8      	; 0x56f6 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x8c>
    56fe:	e2 23       	and	r30, r18
    5700:	01 30       	cpi	r16, 0x01	; 1
    5702:	11 05       	cpc	r17, r1
    5704:	49 f0       	breq	.+18     	; 0x5718 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xae>
    5706:	78 f0       	brcs	.+30     	; 0x5726 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xbc>
    5708:	02 30       	cpi	r16, 0x02	; 2
    570a:	11 05       	cpc	r17, r1
    570c:	09 f0       	breq	.+2      	; 0x5710 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xa6>
    570e:	5b c0       	rjmp	.+182    	; 0x57c6 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x15c>
    5710:	0e c0       	rjmp	.+28     	; 0x572e <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xc4>
    5712:	01 30       	cpi	r16, 0x01	; 1
    5714:	11 05       	cpc	r17, r1
    5716:	19 f4       	brne	.+6      	; 0x571e <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xb4>
    5718:	8c 91       	ld	r24, X
    571a:	e8 2b       	or	r30, r24
    571c:	0a c0       	rjmp	.+20     	; 0x5732 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xc8>
    571e:	01 30       	cpi	r16, 0x01	; 1
    5720:	11 05       	cpc	r17, r1
    5722:	08 f0       	brcs	.+2      	; 0x5726 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xbc>
    5724:	49 c0       	rjmp	.+146    	; 0x57b8 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x14e>
    5726:	e0 95       	com	r30
    5728:	8c 91       	ld	r24, X
    572a:	e8 23       	and	r30, r24
    572c:	02 c0       	rjmp	.+4      	; 0x5732 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xc8>
    572e:	8c 91       	ld	r24, X
    5730:	e8 27       	eor	r30, r24
    5732:	ec 93       	st	X, r30
    5734:	94 17       	cp	r25, r20
    5736:	08 f4       	brcc	.+2      	; 0x573a <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xd0>
    5738:	46 c0       	rjmp	.+140    	; 0x57c6 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x15c>
    573a:	2c 81       	ldd	r18, Y+4	; 0x04
    573c:	3d 81       	ldd	r19, Y+5	; 0x05
    573e:	a2 0f       	add	r26, r18
    5740:	b3 1f       	adc	r27, r19
    5742:	e9 2f       	mov	r30, r25
    5744:	e4 1b       	sub	r30, r20
    5746:	e8 30       	cpi	r30, 0x08	; 8
    5748:	f8 f0       	brcs	.+62     	; 0x5788 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x11e>
    574a:	02 30       	cpi	r16, 0x02	; 2
    574c:	11 05       	cpc	r17, r1
    574e:	61 f4       	brne	.+24     	; 0x5768 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xfe>
    5750:	8e 2f       	mov	r24, r30
    5752:	9c 91       	ld	r25, X
    5754:	90 95       	com	r25
    5756:	9c 93       	st	X, r25
    5758:	2c 81       	ldd	r18, Y+4	; 0x04
    575a:	3d 81       	ldd	r19, Y+5	; 0x05
    575c:	a2 0f       	add	r26, r18
    575e:	b3 1f       	adc	r27, r19
    5760:	88 50       	subi	r24, 0x08	; 8
    5762:	88 30       	cpi	r24, 0x08	; 8
    5764:	b0 f7       	brcc	.-20     	; 0x5752 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xe8>
    5766:	0f c0       	rjmp	.+30     	; 0x5786 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x11c>
    5768:	81 e0       	ldi	r24, 0x01	; 1
    576a:	01 15       	cp	r16, r1
    576c:	11 05       	cpc	r17, r1
    576e:	09 f4       	brne	.+2      	; 0x5772 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x108>
    5770:	80 e0       	ldi	r24, 0x00	; 0
    5772:	81 95       	neg	r24
    5774:	9e 2f       	mov	r25, r30
    5776:	8c 93       	st	X, r24
    5778:	2c 81       	ldd	r18, Y+4	; 0x04
    577a:	3d 81       	ldd	r19, Y+5	; 0x05
    577c:	a2 0f       	add	r26, r18
    577e:	b3 1f       	adc	r27, r19
    5780:	98 50       	subi	r25, 0x08	; 8
    5782:	98 30       	cpi	r25, 0x08	; 8
    5784:	c0 f7       	brcc	.-16     	; 0x5776 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x10c>
    5786:	e7 70       	andi	r30, 0x07	; 7
    5788:	ee 23       	and	r30, r30
    578a:	e9 f0       	breq	.+58     	; 0x57c6 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x15c>
    578c:	f0 e0       	ldi	r31, 0x00	; 0
    578e:	e8 5f       	subi	r30, 0xF8	; 248
    5790:	f1 4f       	sbci	r31, 0xF1	; 241
    5792:	e4 91       	lpm	r30, Z
    5794:	01 30       	cpi	r16, 0x01	; 1
    5796:	11 05       	cpc	r17, r1
    5798:	39 f0       	breq	.+14     	; 0x57a8 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x13e>
    579a:	48 f0       	brcs	.+18     	; 0x57ae <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x144>
    579c:	02 30       	cpi	r16, 0x02	; 2
    579e:	11 05       	cpc	r17, r1
    57a0:	91 f4       	brne	.+36     	; 0x57c6 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x15c>
    57a2:	8c 91       	ld	r24, X
    57a4:	e8 27       	eor	r30, r24
    57a6:	06 c0       	rjmp	.+12     	; 0x57b4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x14a>
    57a8:	8c 91       	ld	r24, X
    57aa:	e8 2b       	or	r30, r24
    57ac:	03 c0       	rjmp	.+6      	; 0x57b4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x14a>
    57ae:	e0 95       	com	r30
    57b0:	8c 91       	ld	r24, X
    57b2:	e8 23       	and	r30, r24
    57b4:	ec 93       	st	X, r30
    57b6:	07 c0       	rjmp	.+14     	; 0x57c6 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x15c>
    57b8:	02 30       	cpi	r16, 0x02	; 2
    57ba:	11 05       	cpc	r17, r1
    57bc:	09 f4       	brne	.+2      	; 0x57c0 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x156>
    57be:	b7 cf       	rjmp	.-146    	; 0x572e <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xc4>
    57c0:	ae 0d       	add	r26, r14
    57c2:	bf 1d       	adc	r27, r15
    57c4:	be cf       	rjmp	.-132    	; 0x5742 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xd8>
    57c6:	df 91       	pop	r29
    57c8:	cf 91       	pop	r28
    57ca:	1f 91       	pop	r17
    57cc:	0f 91       	pop	r16
    57ce:	ff 90       	pop	r15
    57d0:	ef 90       	pop	r14
    57d2:	08 95       	ret

000057d4 <_ZN16Adafruit_SSD130613drawFastHLineEiiij>:
    57d4:	0f 93       	push	r16
    57d6:	1f 93       	push	r17
    57d8:	dc 01       	movw	r26, r24
    57da:	56 96       	adiw	r26, 0x16	; 22
    57dc:	ec 91       	ld	r30, X
    57de:	56 97       	sbiw	r26, 0x16	; 22
    57e0:	e2 30       	cpi	r30, 0x02	; 2
    57e2:	61 f0       	breq	.+24     	; 0x57fc <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x28>
    57e4:	e3 30       	cpi	r30, 0x03	; 3
    57e6:	09 f1       	breq	.+66     	; 0x582a <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x56>
    57e8:	e1 30       	cpi	r30, 0x01	; 1
    57ea:	81 f5       	brne	.+96     	; 0x584c <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x78>
    57ec:	14 96       	adiw	r26, 0x04	; 4
    57ee:	ed 91       	ld	r30, X+
    57f0:	fc 91       	ld	r31, X
    57f2:	15 97       	sbiw	r26, 0x05	; 5
    57f4:	e4 1b       	sub	r30, r20
    57f6:	f5 0b       	sbc	r31, r21
    57f8:	31 97       	sbiw	r30, 0x01	; 1
    57fa:	23 c0       	rjmp	.+70     	; 0x5842 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x6e>
    57fc:	dc 01       	movw	r26, r24
    57fe:	14 96       	adiw	r26, 0x04	; 4
    5800:	ed 91       	ld	r30, X+
    5802:	fc 91       	ld	r31, X
    5804:	15 97       	sbiw	r26, 0x05	; 5
    5806:	df 01       	movw	r26, r30
    5808:	a6 1b       	sub	r26, r22
    580a:	b7 0b       	sbc	r27, r23
    580c:	bd 01       	movw	r22, r26
    580e:	dc 01       	movw	r26, r24
    5810:	16 96       	adiw	r26, 0x06	; 6
    5812:	ed 91       	ld	r30, X+
    5814:	fc 91       	ld	r31, X
    5816:	17 97       	sbiw	r26, 0x07	; 7
    5818:	df 01       	movw	r26, r30
    581a:	a4 1b       	sub	r26, r20
    581c:	b5 0b       	sbc	r27, r21
    581e:	ad 01       	movw	r20, r26
    5820:	41 50       	subi	r20, 0x01	; 1
    5822:	51 09       	sbc	r21, r1
    5824:	62 1b       	sub	r22, r18
    5826:	73 0b       	sbc	r23, r19
    5828:	11 c0       	rjmp	.+34     	; 0x584c <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x78>
    582a:	fa 01       	movw	r30, r20
    582c:	dc 01       	movw	r26, r24
    582e:	16 96       	adiw	r26, 0x06	; 6
    5830:	4d 91       	ld	r20, X+
    5832:	5c 91       	ld	r21, X
    5834:	17 97       	sbiw	r26, 0x07	; 7
    5836:	da 01       	movw	r26, r20
    5838:	a6 1b       	sub	r26, r22
    583a:	b7 0b       	sbc	r27, r23
    583c:	bd 01       	movw	r22, r26
    583e:	62 1b       	sub	r22, r18
    5840:	73 0b       	sbc	r23, r19
    5842:	ab 01       	movw	r20, r22
    5844:	bf 01       	movw	r22, r30
    5846:	0e 94 35 2b 	call	0x566a	; 0x566a <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij>
    584a:	02 c0       	rjmp	.+4      	; 0x5850 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x7c>
    584c:	0e 94 c5 2a 	call	0x558a	; 0x558a <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij>
    5850:	1f 91       	pop	r17
    5852:	0f 91       	pop	r16
    5854:	08 95       	ret

00005856 <_ZN16Adafruit_SSD130613drawFastVLineEiiij>:
    5856:	0f 93       	push	r16
    5858:	1f 93       	push	r17
    585a:	dc 01       	movw	r26, r24
    585c:	56 96       	adiw	r26, 0x16	; 22
    585e:	ec 91       	ld	r30, X
    5860:	56 97       	sbiw	r26, 0x16	; 22
    5862:	e2 30       	cpi	r30, 0x02	; 2
    5864:	69 f0       	breq	.+26     	; 0x5880 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x2a>
    5866:	e3 30       	cpi	r30, 0x03	; 3
    5868:	11 f1       	breq	.+68     	; 0x58ae <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x58>
    586a:	e1 30       	cpi	r30, 0x01	; 1
    586c:	89 f5       	brne	.+98     	; 0x58d0 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x7a>
    586e:	14 96       	adiw	r26, 0x04	; 4
    5870:	ed 91       	ld	r30, X+
    5872:	fc 91       	ld	r31, X
    5874:	15 97       	sbiw	r26, 0x05	; 5
    5876:	e4 1b       	sub	r30, r20
    5878:	f5 0b       	sbc	r31, r21
    587a:	e2 1b       	sub	r30, r18
    587c:	f3 0b       	sbc	r31, r19
    587e:	23 c0       	rjmp	.+70     	; 0x58c6 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x70>
    5880:	dc 01       	movw	r26, r24
    5882:	14 96       	adiw	r26, 0x04	; 4
    5884:	ed 91       	ld	r30, X+
    5886:	fc 91       	ld	r31, X
    5888:	15 97       	sbiw	r26, 0x05	; 5
    588a:	df 01       	movw	r26, r30
    588c:	a6 1b       	sub	r26, r22
    588e:	b7 0b       	sbc	r27, r23
    5890:	bd 01       	movw	r22, r26
    5892:	61 50       	subi	r22, 0x01	; 1
    5894:	71 09       	sbc	r23, r1
    5896:	dc 01       	movw	r26, r24
    5898:	16 96       	adiw	r26, 0x06	; 6
    589a:	ed 91       	ld	r30, X+
    589c:	fc 91       	ld	r31, X
    589e:	17 97       	sbiw	r26, 0x07	; 7
    58a0:	df 01       	movw	r26, r30
    58a2:	a4 1b       	sub	r26, r20
    58a4:	b5 0b       	sbc	r27, r21
    58a6:	ad 01       	movw	r20, r26
    58a8:	42 1b       	sub	r20, r18
    58aa:	53 0b       	sbc	r21, r19
    58ac:	11 c0       	rjmp	.+34     	; 0x58d0 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x7a>
    58ae:	fa 01       	movw	r30, r20
    58b0:	dc 01       	movw	r26, r24
    58b2:	16 96       	adiw	r26, 0x06	; 6
    58b4:	4d 91       	ld	r20, X+
    58b6:	5c 91       	ld	r21, X
    58b8:	17 97       	sbiw	r26, 0x07	; 7
    58ba:	da 01       	movw	r26, r20
    58bc:	a6 1b       	sub	r26, r22
    58be:	b7 0b       	sbc	r27, r23
    58c0:	bd 01       	movw	r22, r26
    58c2:	61 50       	subi	r22, 0x01	; 1
    58c4:	71 09       	sbc	r23, r1
    58c6:	ab 01       	movw	r20, r22
    58c8:	bf 01       	movw	r22, r30
    58ca:	0e 94 c5 2a 	call	0x558a	; 0x558a <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij>
    58ce:	02 c0       	rjmp	.+4      	; 0x58d4 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x7e>
    58d0:	0e 94 35 2b 	call	0x566a	; 0x566a <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij>
    58d4:	1f 91       	pop	r17
    58d6:	0f 91       	pop	r16
    58d8:	08 95       	ret

000058da <_ZN16Adafruit_SSD13067displayEv>:
    @return None (void).
    @note   Drawing operations are not visible until this function is
            called. Call after each graphics command, or after a whole set
            of graphics commands, as best needed by one's own application.
*/
void Adafruit_SSD1306::display(void) {
    58da:	cf 92       	push	r12
    58dc:	df 92       	push	r13
    58de:	ef 92       	push	r14
    58e0:	ff 92       	push	r15
    58e2:	0f 93       	push	r16
    58e4:	1f 93       	push	r17
    58e6:	cf 93       	push	r28
    58e8:	df 93       	push	r29
    58ea:	ec 01       	movw	r28, r24
  TRANSACTION_START
    58ec:	8d 8d       	ldd	r24, Y+29	; 0x1d
    58ee:	9e 8d       	ldd	r25, Y+30	; 0x1e
    58f0:	00 97       	sbiw	r24, 0x00	; 0
    58f2:	39 f0       	breq	.+14     	; 0x5902 <_ZN16Adafruit_SSD13067displayEv+0x28>
    58f4:	4d a9       	ldd	r20, Y+53	; 0x35
    58f6:	5e a9       	ldd	r21, Y+54	; 0x36
    58f8:	6f a9       	ldd	r22, Y+55	; 0x37
    58fa:	78 ad       	ldd	r23, Y+56	; 0x38
    58fc:	0e 94 75 2e 	call	0x5cea	; 0x5cea <_ZN7TwoWire8setClockEm>
    5900:	0f c0       	rjmp	.+30     	; 0x5920 <_ZN16Adafruit_SSD13067displayEv+0x46>
    5902:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5904:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5906:	89 2b       	or	r24, r25
    5908:	21 f0       	breq	.+8      	; 0x5912 <_ZN16Adafruit_SSD13067displayEv+0x38>
    590a:	8e ad       	ldd	r24, Y+62	; 0x3e
    590c:	9f ad       	ldd	r25, Y+63	; 0x3f
    590e:	0e 94 24 27 	call	0x4e48	; 0x4e48 <_ZN8SPIClass16beginTransactionE11SPISettings>
    5912:	ef a5       	ldd	r30, Y+47	; 0x2f
    5914:	f8 a9       	ldd	r31, Y+48	; 0x30
    5916:	90 81       	ld	r25, Z
    5918:	8c a9       	ldd	r24, Y+52	; 0x34
    591a:	80 95       	com	r24
    591c:	89 23       	and	r24, r25
    591e:	80 83       	st	Z, r24
  static const uint8_t PROGMEM dlist1[] = {
      SSD1306_PAGEADDR,
      0,                      // Page start address
      0xFF,                   // Page end (not really, but works here)
      SSD1306_COLUMNADDR, 0}; // Column start address
  ssd1306_commandList(dlist1, sizeof(dlist1));
    5920:	45 e0       	ldi	r20, 0x05	; 5
    5922:	63 e0       	ldi	r22, 0x03	; 3
    5924:	7e e0       	ldi	r23, 0x0E	; 14
    5926:	ce 01       	movw	r24, r28
    5928:	0e 94 2e 28 	call	0x505c	; 0x505c <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(WIDTH - 1); // Column end address
    592c:	6c 81       	ldd	r22, Y+4	; 0x04
    592e:	61 50       	subi	r22, 0x01	; 1
    5930:	ce 01       	movw	r24, r28
    5932:	0e 94 86 27 	call	0x4f0c	; 0x4f0c <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  // a screen write and one immediately after should cover it.  But if
  // not, if this becomes a problem, yields() might be added in the
  // 32-byte transfer condition below.
  yield();
#endif
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
    5936:	2e 81       	ldd	r18, Y+6	; 0x06
    5938:	3f 81       	ldd	r19, Y+7	; 0x07
    593a:	c9 01       	movw	r24, r18
    593c:	07 96       	adiw	r24, 0x07	; 7
    593e:	97 fd       	sbrc	r25, 7
    5940:	07 96       	adiw	r24, 0x07	; 7
    5942:	23 e0       	ldi	r18, 0x03	; 3
    5944:	95 95       	asr	r25
    5946:	87 95       	ror	r24
    5948:	2a 95       	dec	r18
    594a:	e1 f7       	brne	.-8      	; 0x5944 <_ZN16Adafruit_SSD13067displayEv+0x6a>
    594c:	2c 81       	ldd	r18, Y+4	; 0x04
    594e:	3d 81       	ldd	r19, Y+5	; 0x05
    5950:	82 9f       	mul	r24, r18
    5952:	70 01       	movw	r14, r0
    5954:	83 9f       	mul	r24, r19
    5956:	f0 0c       	add	r15, r0
    5958:	92 9f       	mul	r25, r18
    595a:	f0 0c       	add	r15, r0
    595c:	11 24       	eor	r1, r1
  uint8_t *ptr = buffer;
    595e:	0f 8d       	ldd	r16, Y+31	; 0x1f
    5960:	18 a1       	ldd	r17, Y+32	; 0x20
  if (wire) { // I2C
    5962:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5964:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5966:	e0 0e       	add	r14, r16
    5968:	f1 1e       	adc	r15, r17
    596a:	00 97       	sbiw	r24, 0x00	; 0
    596c:	09 f4       	brne	.+2      	; 0x5970 <_ZN16Adafruit_SSD13067displayEv+0x96>
    596e:	43 c0       	rjmp	.+134    	; 0x59f6 <_ZN16Adafruit_SSD13067displayEv+0x11c>
    wire->beginTransmission(i2caddr);
    5970:	69 a1       	ldd	r22, Y+33	; 0x21
    5972:	06 2e       	mov	r0, r22
    5974:	00 0c       	add	r0, r0
    5976:	77 0b       	sbc	r23, r23
    5978:	0e 94 83 2e 	call	0x5d06	; 0x5d06 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x40);
    597c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    597e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5980:	dc 01       	movw	r26, r24
    5982:	ed 91       	ld	r30, X+
    5984:	fc 91       	ld	r31, X
    5986:	01 90       	ld	r0, Z+
    5988:	f0 81       	ld	r31, Z
    598a:	e0 2d       	mov	r30, r0
    598c:	60 e4       	ldi	r22, 0x40	; 64
    598e:	09 95       	icall
    5990:	68 01       	movw	r12, r16
    uint16_t bytesOut = 1;
    5992:	01 e0       	ldi	r16, 0x01	; 1
    5994:	10 e0       	ldi	r17, 0x00	; 0
    5996:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5998:	9e 8d       	ldd	r25, Y+30	; 0x1e
    while (count--) {
    599a:	ec 14       	cp	r14, r12
    599c:	fd 04       	cpc	r15, r13
    599e:	41 f1       	breq	.+80     	; 0x59f0 <_ZN16Adafruit_SSD13067displayEv+0x116>
      if (bytesOut >= WIRE_MAX) {
    59a0:	00 32       	cpi	r16, 0x20	; 32
    59a2:	11 05       	cpc	r17, r1
    59a4:	b0 f0       	brcs	.+44     	; 0x59d2 <_ZN16Adafruit_SSD13067displayEv+0xf8>
        wire->endTransmission();
    59a6:	0e 94 98 2e 	call	0x5d30	; 0x5d30 <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
    59aa:	69 a1       	ldd	r22, Y+33	; 0x21
    59ac:	06 2e       	mov	r0, r22
    59ae:	00 0c       	add	r0, r0
    59b0:	77 0b       	sbc	r23, r23
    59b2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    59b4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    59b6:	0e 94 83 2e 	call	0x5d06	; 0x5d06 <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x40);
    59ba:	8d 8d       	ldd	r24, Y+29	; 0x1d
    59bc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    59be:	dc 01       	movw	r26, r24
    59c0:	ed 91       	ld	r30, X+
    59c2:	fc 91       	ld	r31, X
    59c4:	01 90       	ld	r0, Z+
    59c6:	f0 81       	ld	r31, Z
    59c8:	e0 2d       	mov	r30, r0
    59ca:	60 e4       	ldi	r22, 0x40	; 64
    59cc:	09 95       	icall
        bytesOut = 1;
    59ce:	01 e0       	ldi	r16, 0x01	; 1
    59d0:	10 e0       	ldi	r17, 0x00	; 0
      }
      WIRE_WRITE(*ptr++);
    59d2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    59d4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    59d6:	f6 01       	movw	r30, r12
    59d8:	61 91       	ld	r22, Z+
    59da:	6f 01       	movw	r12, r30
    59dc:	dc 01       	movw	r26, r24
    59de:	ed 91       	ld	r30, X+
    59e0:	fc 91       	ld	r31, X
    59e2:	01 90       	ld	r0, Z+
    59e4:	f0 81       	ld	r31, Z
    59e6:	e0 2d       	mov	r30, r0
    59e8:	09 95       	icall
      bytesOut++;
    59ea:	0f 5f       	subi	r16, 0xFF	; 255
    59ec:	1f 4f       	sbci	r17, 0xFF	; 255
  uint8_t *ptr = buffer;
  if (wire) { // I2C
    wire->beginTransmission(i2caddr);
    WIRE_WRITE((uint8_t)0x40);
    uint16_t bytesOut = 1;
    while (count--) {
    59ee:	d3 cf       	rjmp	.-90     	; 0x5996 <_ZN16Adafruit_SSD13067displayEv+0xbc>
        bytesOut = 1;
      }
      WIRE_WRITE(*ptr++);
      bytesOut++;
    }
    wire->endTransmission();
    59f0:	0e 94 98 2e 	call	0x5d30	; 0x5d30 <_ZN7TwoWire15endTransmissionEv>
    59f4:	35 c0       	rjmp	.+106    	; 0x5a60 <_ZN16Adafruit_SSD13067displayEv+0x186>
  } else { // SPI
    SSD1306_MODE_DATA
    59f6:	ed a5       	ldd	r30, Y+45	; 0x2d
    59f8:	fe a5       	ldd	r31, Y+46	; 0x2e
    59fa:	90 81       	ld	r25, Z
    59fc:	8b a9       	ldd	r24, Y+51	; 0x33
    59fe:	89 2b       	or	r24, r25
    5a00:	80 83       	st	Z, r24
    while (count--)
    5a02:	0e 15       	cp	r16, r14
    5a04:	1f 05       	cpc	r17, r15
    5a06:	61 f1       	breq	.+88     	; 0x5a60 <_ZN16Adafruit_SSD13067displayEv+0x186>
      SPIwrite(*ptr++);
    5a08:	f8 01       	movw	r30, r16
    5a0a:	81 91       	ld	r24, Z+
    5a0c:	8f 01       	movw	r16, r30
    @return void
    @note   See HAVE_PORTREG which defines if the method uses a port or bit-bang
   method
*/
inline void Adafruit_SSD1306::SPIwrite(uint8_t d) {
  if (spi) {
    5a0e:	2b 8d       	ldd	r18, Y+27	; 0x1b
    5a10:	3c 8d       	ldd	r19, Y+28	; 0x1c
    5a12:	23 2b       	or	r18, r19
    5a14:	19 f0       	breq	.+6      	; 0x5a1c <_ZN16Adafruit_SSD13067displayEv+0x142>
    (void)spi->transfer(d);
    5a16:	0e 94 3e 27 	call	0x4e7c	; 0x4e7c <_ZN8SPIClass8transferEh>
    5a1a:	f3 cf       	rjmp	.-26     	; 0x5a02 <_ZN16Adafruit_SSD13067displayEv+0x128>
    @return void
    @note   See HAVE_PORTREG which defines if the method uses a port or bit-bang
   method
*/
inline void Adafruit_SSD1306::SPIwrite(uint8_t d) {
  if (spi) {
    5a1c:	28 e0       	ldi	r18, 0x08	; 8
    5a1e:	30 e0       	ldi	r19, 0x00	; 0
    5a20:	40 e8       	ldi	r20, 0x80	; 128
    5a22:	e9 a5       	ldd	r30, Y+41	; 0x29
    5a24:	fa a5       	ldd	r31, Y+42	; 0x2a
    5a26:	99 a9       	ldd	r25, Y+49	; 0x31
    (void)spi->transfer(d);
  } else {
    for (uint8_t bit = 0x80; bit; bit >>= 1) {
#ifdef HAVE_PORTREG
      if (d & bit)
    5a28:	58 2f       	mov	r21, r24
    5a2a:	54 23       	and	r21, r20
    5a2c:	19 f0       	breq	.+6      	; 0x5a34 <_ZN16Adafruit_SSD13067displayEv+0x15a>
        *mosiPort |= mosiPinMask;
    5a2e:	50 81       	ld	r21, Z
    5a30:	95 2b       	or	r25, r21
    5a32:	03 c0       	rjmp	.+6      	; 0x5a3a <_ZN16Adafruit_SSD13067displayEv+0x160>
      else
        *mosiPort &= ~mosiPinMask;
    5a34:	50 81       	ld	r21, Z
    5a36:	90 95       	com	r25
    5a38:	95 23       	and	r25, r21
    5a3a:	90 83       	st	Z, r25
      *clkPort |= clkPinMask;  // Clock high
    5a3c:	eb a5       	ldd	r30, Y+43	; 0x2b
    5a3e:	fc a5       	ldd	r31, Y+44	; 0x2c
    5a40:	50 81       	ld	r21, Z
    5a42:	9a a9       	ldd	r25, Y+50	; 0x32
    5a44:	95 2b       	or	r25, r21
    5a46:	90 83       	st	Z, r25
      *clkPort &= ~clkPinMask; // Clock low
    5a48:	eb a5       	ldd	r30, Y+43	; 0x2b
    5a4a:	fc a5       	ldd	r31, Y+44	; 0x2c
    5a4c:	50 81       	ld	r21, Z
    5a4e:	9a a9       	ldd	r25, Y+50	; 0x32
    5a50:	90 95       	com	r25
    5a52:	95 23       	and	r25, r21
    5a54:	90 83       	st	Z, r25
*/
inline void Adafruit_SSD1306::SPIwrite(uint8_t d) {
  if (spi) {
    (void)spi->transfer(d);
  } else {
    for (uint8_t bit = 0x80; bit; bit >>= 1) {
    5a56:	46 95       	lsr	r20
    5a58:	21 50       	subi	r18, 0x01	; 1
    5a5a:	31 09       	sbc	r19, r1
    5a5c:	11 f7       	brne	.-60     	; 0x5a22 <_ZN16Adafruit_SSD13067displayEv+0x148>
    5a5e:	d1 cf       	rjmp	.-94     	; 0x5a02 <_ZN16Adafruit_SSD13067displayEv+0x128>
  } else { // SPI
    SSD1306_MODE_DATA
    while (count--)
      SPIwrite(*ptr++);
  }
  TRANSACTION_END
    5a60:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5a62:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5a64:	00 97       	sbiw	r24, 0x00	; 0
    5a66:	71 f0       	breq	.+28     	; 0x5a84 <_ZN16Adafruit_SSD13067displayEv+0x1aa>
    5a68:	49 ad       	ldd	r20, Y+57	; 0x39
    5a6a:	5a ad       	ldd	r21, Y+58	; 0x3a
    5a6c:	6b ad       	ldd	r22, Y+59	; 0x3b
    5a6e:	7c ad       	ldd	r23, Y+60	; 0x3c
#if defined(ESP8266)
  yield();
#endif
}
    5a70:	df 91       	pop	r29
    5a72:	cf 91       	pop	r28
    5a74:	1f 91       	pop	r17
    5a76:	0f 91       	pop	r16
    5a78:	ff 90       	pop	r15
    5a7a:	ef 90       	pop	r14
    5a7c:	df 90       	pop	r13
    5a7e:	cf 90       	pop	r12
  } else { // SPI
    SSD1306_MODE_DATA
    while (count--)
      SPIwrite(*ptr++);
  }
  TRANSACTION_END
    5a80:	0c 94 75 2e 	jmp	0x5cea	; 0x5cea <_ZN7TwoWire8setClockEm>
    5a84:	ef a5       	ldd	r30, Y+47	; 0x2f
    5a86:	f8 a9       	ldd	r31, Y+48	; 0x30
    5a88:	90 81       	ld	r25, Z
    5a8a:	8c a9       	ldd	r24, Y+52	; 0x34
    5a8c:	89 2b       	or	r24, r25
    5a8e:	80 83       	st	Z, r24
    5a90:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5a92:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5a94:	89 2b       	or	r24, r25
    5a96:	51 f0       	breq	.+20     	; 0x5aac <_ZN16Adafruit_SSD13067displayEv+0x1d2>
#if defined(ESP8266)
  yield();
#endif
}
    5a98:	df 91       	pop	r29
    5a9a:	cf 91       	pop	r28
    5a9c:	1f 91       	pop	r17
    5a9e:	0f 91       	pop	r16
    5aa0:	ff 90       	pop	r15
    5aa2:	ef 90       	pop	r14
    5aa4:	df 90       	pop	r13
    5aa6:	cf 90       	pop	r12
  } else { // SPI
    SSD1306_MODE_DATA
    while (count--)
      SPIwrite(*ptr++);
  }
  TRANSACTION_END
    5aa8:	0c 94 45 27 	jmp	0x4e8a	; 0x4e8a <_ZN8SPIClass14endTransactionEv>
#if defined(ESP8266)
  yield();
#endif
}
    5aac:	df 91       	pop	r29
    5aae:	cf 91       	pop	r28
    5ab0:	1f 91       	pop	r17
    5ab2:	0f 91       	pop	r16
    5ab4:	ff 90       	pop	r15
    5ab6:	ef 90       	pop	r14
    5ab8:	df 90       	pop	r13
    5aba:	cf 90       	pop	r12
    5abc:	08 95       	ret

00005abe <_ZN8SPIClass5beginEv>:
#ifdef SPI_TRANSACTION_MISMATCH_LED
uint8_t SPIClass::inTransactionFlag = 0;
#endif

void SPIClass::begin()
{
    5abe:	cf 93       	push	r28
  uint8_t sreg = SREG;
    5ac0:	cf b7       	in	r28, 0x3f	; 63
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
    5ac2:	f8 94       	cli
  if (!initialized) {
    5ac4:	80 91 02 03 	lds	r24, 0x0302	; 0x800302 <_ZN8SPIClass11initializedE>
    5ac8:	81 11       	cpse	r24, r1
    5aca:	27 c0       	rjmp	.+78     	; 0x5b1a <_ZN8SPIClass5beginEv+0x5c>
    // Set SS to high so a connected chip will be "deselected" by default
    uint8_t port = digitalPinToPort(SS);
    5acc:	eb ed       	ldi	r30, 0xDB	; 219
    5ace:	f8 e0       	ldi	r31, 0x08	; 8
    5ad0:	84 91       	lpm	r24, Z
    uint8_t bit = digitalPinToBitMask(SS);
    5ad2:	e7 ec       	ldi	r30, 0xC7	; 199
    5ad4:	f8 e0       	ldi	r31, 0x08	; 8
    5ad6:	94 91       	lpm	r25, Z
    volatile uint8_t *reg = portModeRegister(port);
    5ad8:	e8 2f       	mov	r30, r24
    5ada:	f0 e0       	ldi	r31, 0x00	; 0
    5adc:	ee 0f       	add	r30, r30
    5ade:	ff 1f       	adc	r31, r31
    5ae0:	e7 50       	subi	r30, 0x07	; 7
    5ae2:	f7 4f       	sbci	r31, 0xF7	; 247
    5ae4:	a5 91       	lpm	r26, Z+
    5ae6:	b4 91       	lpm	r27, Z

    // if the SS pin is not already configured as an output
    // then set it high (to enable the internal pull-up resistor)
    if(!(*reg & bit)){
    5ae8:	ec 91       	ld	r30, X
    5aea:	e9 23       	and	r30, r25
    5aec:	21 f4       	brne	.+8      	; 0x5af6 <_ZN8SPIClass5beginEv+0x38>
      digitalWrite(SS, HIGH);
    5aee:	61 e0       	ldi	r22, 0x01	; 1
    5af0:	8a e0       	ldi	r24, 0x0A	; 10
    5af2:	0e 94 90 1b 	call	0x3720	; 0x3720 <digitalWrite>
    }

    // When the SS pin is set as OUTPUT, it can be used as
    // a general purpose output port (it doesn't influence
    // SPI operations).
    pinMode(SS, OUTPUT);
    5af6:	61 e0       	ldi	r22, 0x01	; 1
    5af8:	8a e0       	ldi	r24, 0x0A	; 10
    5afa:	0e 94 54 1b 	call	0x36a8	; 0x36a8 <pinMode>

    // Warning: if the SS pin ever becomes a LOW INPUT then SPI
    // automatically switches to Slave, so the data direction of
    // the SS pin MUST be kept as OUTPUT.
    SPCR |= _BV(MSTR);
    5afe:	8c b5       	in	r24, 0x2c	; 44
    5b00:	80 61       	ori	r24, 0x10	; 16
    5b02:	8c bd       	out	0x2c, r24	; 44
    SPCR |= _BV(SPE);
    5b04:	8c b5       	in	r24, 0x2c	; 44
    5b06:	80 64       	ori	r24, 0x40	; 64
    5b08:	8c bd       	out	0x2c, r24	; 44
    // MISO pin automatically overrides to INPUT.
    // By doing this AFTER enabling SPI, we avoid accidentally
    // clocking in a single bit since the lines go directly
    // from "input" to SPI control.
    // http://code.google.com/p/arduino/issues/detail?id=888
    pinMode(SCK, OUTPUT);
    5b0a:	61 e0       	ldi	r22, 0x01	; 1
    5b0c:	8d e0       	ldi	r24, 0x0D	; 13
    5b0e:	0e 94 54 1b 	call	0x36a8	; 0x36a8 <pinMode>
    pinMode(MOSI, OUTPUT);
    5b12:	61 e0       	ldi	r22, 0x01	; 1
    5b14:	8b e0       	ldi	r24, 0x0B	; 11
    5b16:	0e 94 54 1b 	call	0x36a8	; 0x36a8 <pinMode>
  }
  initialized++; // reference count
    5b1a:	80 91 02 03 	lds	r24, 0x0302	; 0x800302 <_ZN8SPIClass11initializedE>
    5b1e:	8f 5f       	subi	r24, 0xFF	; 255
    5b20:	80 93 02 03 	sts	0x0302, r24	; 0x800302 <_ZN8SPIClass11initializedE>
  SREG = sreg;
    5b24:	cf bf       	out	0x3f, r28	; 63
}
    5b26:	cf 91       	pop	r28
    5b28:	08 95       	ret

00005b2a <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    5b2a:	80 91 37 03 	lds	r24, 0x0337	; 0x800337 <_ZN7TwoWire14rxBufferLengthE>
    5b2e:	90 e0       	ldi	r25, 0x00	; 0
    5b30:	20 91 38 03 	lds	r18, 0x0338	; 0x800338 <_ZN7TwoWire13rxBufferIndexE>
    5b34:	82 1b       	sub	r24, r18
    5b36:	91 09       	sbc	r25, r1
    5b38:	08 95       	ret

00005b3a <_ZN7TwoWire4readEv>:
    5b3a:	90 91 38 03 	lds	r25, 0x0338	; 0x800338 <_ZN7TwoWire13rxBufferIndexE>
    5b3e:	80 91 37 03 	lds	r24, 0x0337	; 0x800337 <_ZN7TwoWire14rxBufferLengthE>
    5b42:	98 17       	cp	r25, r24
    5b44:	50 f4       	brcc	.+20     	; 0x5b5a <_ZN7TwoWire4readEv+0x20>
    5b46:	e9 2f       	mov	r30, r25
    5b48:	f0 e0       	ldi	r31, 0x00	; 0
    5b4a:	e7 5c       	subi	r30, 0xC7	; 199
    5b4c:	fc 4f       	sbci	r31, 0xFC	; 252
    5b4e:	20 81       	ld	r18, Z
    5b50:	30 e0       	ldi	r19, 0x00	; 0
    5b52:	9f 5f       	subi	r25, 0xFF	; 255
    5b54:	90 93 38 03 	sts	0x0338, r25	; 0x800338 <_ZN7TwoWire13rxBufferIndexE>
    5b58:	02 c0       	rjmp	.+4      	; 0x5b5e <_ZN7TwoWire4readEv+0x24>
    5b5a:	2f ef       	ldi	r18, 0xFF	; 255
    5b5c:	3f ef       	ldi	r19, 0xFF	; 255
    5b5e:	c9 01       	movw	r24, r18
    5b60:	08 95       	ret

00005b62 <_ZN7TwoWire4peekEv>:
    5b62:	e0 91 38 03 	lds	r30, 0x0338	; 0x800338 <_ZN7TwoWire13rxBufferIndexE>
    5b66:	80 91 37 03 	lds	r24, 0x0337	; 0x800337 <_ZN7TwoWire14rxBufferLengthE>
    5b6a:	e8 17       	cp	r30, r24
    5b6c:	30 f4       	brcc	.+12     	; 0x5b7a <_ZN7TwoWire4peekEv+0x18>
    5b6e:	f0 e0       	ldi	r31, 0x00	; 0
    5b70:	e7 5c       	subi	r30, 0xC7	; 199
    5b72:	fc 4f       	sbci	r31, 0xFC	; 252
    5b74:	80 81       	ld	r24, Z
    5b76:	90 e0       	ldi	r25, 0x00	; 0
    5b78:	08 95       	ret
    5b7a:	8f ef       	ldi	r24, 0xFF	; 255
    5b7c:	9f ef       	ldi	r25, 0xFF	; 255
    5b7e:	08 95       	ret

00005b80 <_ZN7TwoWire5flushEv>:
    5b80:	08 95       	ret

00005b82 <_ZN7TwoWire16onReceiveServiceEPhi>:
    5b82:	cf 93       	push	r28
    5b84:	df 93       	push	r29
    5b86:	ec 01       	movw	r28, r24
    5b88:	e0 91 0f 03 	lds	r30, 0x030F	; 0x80030f <_ZN7TwoWire14user_onReceiveE>
    5b8c:	f0 91 10 03 	lds	r31, 0x0310	; 0x800310 <_ZN7TwoWire14user_onReceiveE+0x1>
    5b90:	30 97       	sbiw	r30, 0x00	; 0
    5b92:	f1 f0       	breq	.+60     	; 0x5bd0 <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    5b94:	90 91 38 03 	lds	r25, 0x0338	; 0x800338 <_ZN7TwoWire13rxBufferIndexE>
    5b98:	80 91 37 03 	lds	r24, 0x0337	; 0x800337 <_ZN7TwoWire14rxBufferLengthE>
    5b9c:	98 17       	cp	r25, r24
    5b9e:	c0 f0       	brcs	.+48     	; 0x5bd0 <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    5ba0:	90 e0       	ldi	r25, 0x00	; 0
    5ba2:	29 2f       	mov	r18, r25
    5ba4:	30 e0       	ldi	r19, 0x00	; 0
    5ba6:	26 17       	cp	r18, r22
    5ba8:	37 07       	cpc	r19, r23
    5baa:	54 f4       	brge	.+20     	; 0x5bc0 <_ZN7TwoWire16onReceiveServiceEPhi+0x3e>
    5bac:	de 01       	movw	r26, r28
    5bae:	a2 0f       	add	r26, r18
    5bb0:	b3 1f       	adc	r27, r19
    5bb2:	4c 91       	ld	r20, X
    5bb4:	d9 01       	movw	r26, r18
    5bb6:	a7 5c       	subi	r26, 0xC7	; 199
    5bb8:	bc 4f       	sbci	r27, 0xFC	; 252
    5bba:	4c 93       	st	X, r20
    5bbc:	9f 5f       	subi	r25, 0xFF	; 255
    5bbe:	f1 cf       	rjmp	.-30     	; 0x5ba2 <_ZN7TwoWire16onReceiveServiceEPhi+0x20>
    5bc0:	10 92 38 03 	sts	0x0338, r1	; 0x800338 <_ZN7TwoWire13rxBufferIndexE>
    5bc4:	60 93 37 03 	sts	0x0337, r22	; 0x800337 <_ZN7TwoWire14rxBufferLengthE>
    5bc8:	cb 01       	movw	r24, r22
    5bca:	df 91       	pop	r29
    5bcc:	cf 91       	pop	r28
    5bce:	09 94       	ijmp
    5bd0:	df 91       	pop	r29
    5bd2:	cf 91       	pop	r28
    5bd4:	08 95       	ret

00005bd6 <_ZN7TwoWire16onRequestServiceEv>:
    5bd6:	e0 91 11 03 	lds	r30, 0x0311	; 0x800311 <_ZN7TwoWire14user_onRequestE>
    5bda:	f0 91 12 03 	lds	r31, 0x0312	; 0x800312 <_ZN7TwoWire14user_onRequestE+0x1>
    5bde:	30 97       	sbiw	r30, 0x00	; 0
    5be0:	29 f0       	breq	.+10     	; 0x5bec <_ZN7TwoWire16onRequestServiceEv+0x16>
    5be2:	10 92 15 03 	sts	0x0315, r1	; 0x800315 <_ZN7TwoWire13txBufferIndexE>
    5be6:	10 92 14 03 	sts	0x0314, r1	; 0x800314 <_ZN7TwoWire14txBufferLengthE>
    5bea:	09 94       	ijmp
    5bec:	08 95       	ret

00005bee <_ZN7TwoWire5writeEPKhj>:
    5bee:	cf 92       	push	r12
    5bf0:	df 92       	push	r13
    5bf2:	ef 92       	push	r14
    5bf4:	ff 92       	push	r15
    5bf6:	0f 93       	push	r16
    5bf8:	1f 93       	push	r17
    5bfa:	cf 93       	push	r28
    5bfc:	df 93       	push	r29
    5bfe:	7c 01       	movw	r14, r24
    5c00:	cb 01       	movw	r24, r22
    5c02:	8a 01       	movw	r16, r20
    5c04:	20 91 13 03 	lds	r18, 0x0313	; 0x800313 <_ZN7TwoWire12transmittingE>
    5c08:	22 23       	and	r18, r18
    5c0a:	89 f0       	breq	.+34     	; 0x5c2e <_ZN7TwoWire5writeEPKhj+0x40>
    5c0c:	eb 01       	movw	r28, r22
    5c0e:	6b 01       	movw	r12, r22
    5c10:	c4 0e       	add	r12, r20
    5c12:	d5 1e       	adc	r13, r21
    5c14:	cc 15       	cp	r28, r12
    5c16:	dd 05       	cpc	r29, r13
    5c18:	69 f0       	breq	.+26     	; 0x5c34 <_ZN7TwoWire5writeEPKhj+0x46>
    5c1a:	69 91       	ld	r22, Y+
    5c1c:	d7 01       	movw	r26, r14
    5c1e:	ed 91       	ld	r30, X+
    5c20:	fc 91       	ld	r31, X
    5c22:	01 90       	ld	r0, Z+
    5c24:	f0 81       	ld	r31, Z
    5c26:	e0 2d       	mov	r30, r0
    5c28:	c7 01       	movw	r24, r14
    5c2a:	09 95       	icall
    5c2c:	f3 cf       	rjmp	.-26     	; 0x5c14 <_ZN7TwoWire5writeEPKhj+0x26>
    5c2e:	64 2f       	mov	r22, r20
    5c30:	0e 94 e1 2e 	call	0x5dc2	; 0x5dc2 <twi_transmit>
    5c34:	c8 01       	movw	r24, r16
    5c36:	df 91       	pop	r29
    5c38:	cf 91       	pop	r28
    5c3a:	1f 91       	pop	r17
    5c3c:	0f 91       	pop	r16
    5c3e:	ff 90       	pop	r15
    5c40:	ef 90       	pop	r14
    5c42:	df 90       	pop	r13
    5c44:	cf 90       	pop	r12
    5c46:	08 95       	ret

00005c48 <_ZN7TwoWire5writeEh>:
    5c48:	cf 93       	push	r28
    5c4a:	df 93       	push	r29
    5c4c:	1f 92       	push	r1
    5c4e:	cd b7       	in	r28, 0x3d	; 61
    5c50:	de b7       	in	r29, 0x3e	; 62
    5c52:	69 83       	std	Y+1, r22	; 0x01
    5c54:	20 91 13 03 	lds	r18, 0x0313	; 0x800313 <_ZN7TwoWire12transmittingE>
    5c58:	22 23       	and	r18, r18
    5c5a:	d1 f0       	breq	.+52     	; 0x5c90 <_ZN7TwoWire5writeEh+0x48>
    5c5c:	20 91 14 03 	lds	r18, 0x0314	; 0x800314 <_ZN7TwoWire14txBufferLengthE>
    5c60:	20 32       	cpi	r18, 0x20	; 32
    5c62:	40 f0       	brcs	.+16     	; 0x5c74 <_ZN7TwoWire5writeEh+0x2c>
    5c64:	21 e0       	ldi	r18, 0x01	; 1
    5c66:	30 e0       	ldi	r19, 0x00	; 0
    5c68:	fc 01       	movw	r30, r24
    5c6a:	33 83       	std	Z+3, r19	; 0x03
    5c6c:	22 83       	std	Z+2, r18	; 0x02
    5c6e:	80 e0       	ldi	r24, 0x00	; 0
    5c70:	90 e0       	ldi	r25, 0x00	; 0
    5c72:	15 c0       	rjmp	.+42     	; 0x5c9e <_ZN7TwoWire5writeEh+0x56>
    5c74:	80 91 15 03 	lds	r24, 0x0315	; 0x800315 <_ZN7TwoWire13txBufferIndexE>
    5c78:	e8 2f       	mov	r30, r24
    5c7a:	f0 e0       	ldi	r31, 0x00	; 0
    5c7c:	ea 5e       	subi	r30, 0xEA	; 234
    5c7e:	fc 4f       	sbci	r31, 0xFC	; 252
    5c80:	99 81       	ldd	r25, Y+1	; 0x01
    5c82:	90 83       	st	Z, r25
    5c84:	8f 5f       	subi	r24, 0xFF	; 255
    5c86:	80 93 15 03 	sts	0x0315, r24	; 0x800315 <_ZN7TwoWire13txBufferIndexE>
    5c8a:	80 93 14 03 	sts	0x0314, r24	; 0x800314 <_ZN7TwoWire14txBufferLengthE>
    5c8e:	05 c0       	rjmp	.+10     	; 0x5c9a <_ZN7TwoWire5writeEh+0x52>
    5c90:	61 e0       	ldi	r22, 0x01	; 1
    5c92:	ce 01       	movw	r24, r28
    5c94:	01 96       	adiw	r24, 0x01	; 1
    5c96:	0e 94 e1 2e 	call	0x5dc2	; 0x5dc2 <twi_transmit>
    5c9a:	81 e0       	ldi	r24, 0x01	; 1
    5c9c:	90 e0       	ldi	r25, 0x00	; 0
    5c9e:	0f 90       	pop	r0
    5ca0:	df 91       	pop	r29
    5ca2:	cf 91       	pop	r28
    5ca4:	08 95       	ret

00005ca6 <_ZN7TwoWireC1Ev>:
    5ca6:	fc 01       	movw	r30, r24
    5ca8:	13 82       	std	Z+3, r1	; 0x03
    5caa:	12 82       	std	Z+2, r1	; 0x02
    5cac:	88 ee       	ldi	r24, 0xE8	; 232
    5cae:	93 e0       	ldi	r25, 0x03	; 3
    5cb0:	a0 e0       	ldi	r26, 0x00	; 0
    5cb2:	b0 e0       	ldi	r27, 0x00	; 0
    5cb4:	84 83       	std	Z+4, r24	; 0x04
    5cb6:	95 83       	std	Z+5, r25	; 0x05
    5cb8:	a6 83       	std	Z+6, r26	; 0x06
    5cba:	b7 83       	std	Z+7, r27	; 0x07
    5cbc:	83 ec       	ldi	r24, 0xC3	; 195
    5cbe:	91 e0       	ldi	r25, 0x01	; 1
    5cc0:	91 83       	std	Z+1, r25	; 0x01
    5cc2:	80 83       	st	Z, r24
    5cc4:	08 95       	ret

00005cc6 <_ZN7TwoWire5beginEv>:
    5cc6:	10 92 38 03 	sts	0x0338, r1	; 0x800338 <_ZN7TwoWire13rxBufferIndexE>
    5cca:	10 92 37 03 	sts	0x0337, r1	; 0x800337 <_ZN7TwoWire14rxBufferLengthE>
    5cce:	10 92 15 03 	sts	0x0315, r1	; 0x800315 <_ZN7TwoWire13txBufferIndexE>
    5cd2:	10 92 14 03 	sts	0x0314, r1	; 0x800314 <_ZN7TwoWire14txBufferLengthE>
    5cd6:	0e 94 a2 2e 	call	0x5d44	; 0x5d44 <twi_init>
    5cda:	8b ee       	ldi	r24, 0xEB	; 235
    5cdc:	9d e2       	ldi	r25, 0x2D	; 45
    5cde:	0e 94 0e 2f 	call	0x5e1c	; 0x5e1c <twi_attachSlaveTxEvent>
    5ce2:	81 ec       	ldi	r24, 0xC1	; 193
    5ce4:	9d e2       	ldi	r25, 0x2D	; 45
    5ce6:	0c 94 09 2f 	jmp	0x5e12	; 0x5e12 <twi_attachSlaveRxEvent>

00005cea <_ZN7TwoWire8setClockEm>:
    5cea:	cb 01       	movw	r24, r22
    5cec:	ba 01       	movw	r22, r20
    5cee:	0c 94 cd 2e 	jmp	0x5d9a	; 0x5d9a <twi_setFrequency>

00005cf2 <_ZN7TwoWire17beginTransmissionEh>:
    5cf2:	81 e0       	ldi	r24, 0x01	; 1
    5cf4:	80 93 13 03 	sts	0x0313, r24	; 0x800313 <_ZN7TwoWire12transmittingE>
    5cf8:	60 93 36 03 	sts	0x0336, r22	; 0x800336 <_ZN7TwoWire9txAddressE>
    5cfc:	10 92 15 03 	sts	0x0315, r1	; 0x800315 <_ZN7TwoWire13txBufferIndexE>
    5d00:	10 92 14 03 	sts	0x0314, r1	; 0x800314 <_ZN7TwoWire14txBufferLengthE>
    5d04:	08 95       	ret

00005d06 <_ZN7TwoWire17beginTransmissionEi>:
    5d06:	0c 94 79 2e 	jmp	0x5cf2	; 0x5cf2 <_ZN7TwoWire17beginTransmissionEh>

00005d0a <_ZN7TwoWire15endTransmissionEh>:
    5d0a:	0f 93       	push	r16
    5d0c:	06 2f       	mov	r16, r22
    5d0e:	21 e0       	ldi	r18, 0x01	; 1
    5d10:	40 91 14 03 	lds	r20, 0x0314	; 0x800314 <_ZN7TwoWire14txBufferLengthE>
    5d14:	66 e1       	ldi	r22, 0x16	; 22
    5d16:	73 e0       	ldi	r23, 0x03	; 3
    5d18:	80 91 36 03 	lds	r24, 0x0336	; 0x800336 <_ZN7TwoWire9txAddressE>
    5d1c:	0e 94 2f 2f 	call	0x5e5e	; 0x5e5e <twi_writeTo>
    5d20:	10 92 15 03 	sts	0x0315, r1	; 0x800315 <_ZN7TwoWire13txBufferIndexE>
    5d24:	10 92 14 03 	sts	0x0314, r1	; 0x800314 <_ZN7TwoWire14txBufferLengthE>
    5d28:	10 92 13 03 	sts	0x0313, r1	; 0x800313 <_ZN7TwoWire12transmittingE>
    5d2c:	0f 91       	pop	r16
    5d2e:	08 95       	ret

00005d30 <_ZN7TwoWire15endTransmissionEv>:
    5d30:	61 e0       	ldi	r22, 0x01	; 1
    5d32:	0c 94 85 2e 	jmp	0x5d0a	; 0x5d0a <_ZN7TwoWire15endTransmissionEh>

00005d36 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    5d36:	83 e0       	ldi	r24, 0x03	; 3
    5d38:	93 e0       	ldi	r25, 0x03	; 3
    5d3a:	0c 94 53 2e 	jmp	0x5ca6	; 0x5ca6 <_ZN7TwoWireC1Ev>

00005d3e <__cxa_pure_virtual>:
    5d3e:	0e 94 4d 33 	call	0x669a	; 0x669a <abort>

00005d42 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    5d42:	08 95       	ret

00005d44 <twi_init>:
  bool flag = twi_timed_out_flag;
  if (clear_flag){
    twi_timed_out_flag = false;
  }
  return(flag);
}
    5d44:	10 92 cc 03 	sts	0x03CC, r1	; 0x8003cc <twi_state>
    5d48:	81 e0       	ldi	r24, 0x01	; 1
    5d4a:	80 93 ca 03 	sts	0x03CA, r24	; 0x8003ca <twi_sendStop>
    5d4e:	10 92 c9 03 	sts	0x03C9, r1	; 0x8003c9 <twi_inRepStart>
    5d52:	61 e0       	ldi	r22, 0x01	; 1
    5d54:	82 e1       	ldi	r24, 0x12	; 18
    5d56:	0e 94 90 1b 	call	0x3720	; 0x3720 <digitalWrite>
    5d5a:	61 e0       	ldi	r22, 0x01	; 1
    5d5c:	83 e1       	ldi	r24, 0x13	; 19
    5d5e:	0e 94 90 1b 	call	0x3720	; 0x3720 <digitalWrite>
    5d62:	e9 eb       	ldi	r30, 0xB9	; 185
    5d64:	f0 e0       	ldi	r31, 0x00	; 0
    5d66:	80 81       	ld	r24, Z
    5d68:	8e 7f       	andi	r24, 0xFE	; 254
    5d6a:	80 83       	st	Z, r24
    5d6c:	80 81       	ld	r24, Z
    5d6e:	8d 7f       	andi	r24, 0xFD	; 253
    5d70:	80 83       	st	Z, r24
    5d72:	88 e4       	ldi	r24, 0x48	; 72
    5d74:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
    5d78:	85 e4       	ldi	r24, 0x45	; 69
    5d7a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    5d7e:	08 95       	ret

00005d80 <twi_disable>:
    5d80:	ec eb       	ldi	r30, 0xBC	; 188
    5d82:	f0 e0       	ldi	r31, 0x00	; 0
    5d84:	80 81       	ld	r24, Z
    5d86:	8a 7b       	andi	r24, 0xBA	; 186
    5d88:	80 83       	st	Z, r24
    5d8a:	60 e0       	ldi	r22, 0x00	; 0
    5d8c:	82 e1       	ldi	r24, 0x12	; 18
    5d8e:	0e 94 90 1b 	call	0x3720	; 0x3720 <digitalWrite>
    5d92:	60 e0       	ldi	r22, 0x00	; 0
    5d94:	83 e1       	ldi	r24, 0x13	; 19
    5d96:	0c 94 90 1b 	jmp	0x3720	; 0x3720 <digitalWrite>

00005d9a <twi_setFrequency>:
    5d9a:	9b 01       	movw	r18, r22
    5d9c:	ac 01       	movw	r20, r24
    5d9e:	60 e0       	ldi	r22, 0x00	; 0
    5da0:	74 e2       	ldi	r23, 0x24	; 36
    5da2:	84 ef       	ldi	r24, 0xF4	; 244
    5da4:	90 e0       	ldi	r25, 0x00	; 0
    5da6:	0e 94 a8 31 	call	0x6350	; 0x6350 <__udivmodsi4>
    5daa:	da 01       	movw	r26, r20
    5dac:	c9 01       	movw	r24, r18
    5dae:	40 97       	sbiw	r24, 0x10	; 16
    5db0:	a1 09       	sbc	r26, r1
    5db2:	b1 09       	sbc	r27, r1
    5db4:	b6 95       	lsr	r27
    5db6:	a7 95       	ror	r26
    5db8:	97 95       	ror	r25
    5dba:	87 95       	ror	r24
    5dbc:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
    5dc0:	08 95       	ret

00005dc2 <twi_transmit>:
    5dc2:	40 91 7b 03 	lds	r20, 0x037B	; 0x80037b <twi_txBufferLength>
    5dc6:	26 2f       	mov	r18, r22
    5dc8:	30 e0       	ldi	r19, 0x00	; 0
    5dca:	24 0f       	add	r18, r20
    5dcc:	31 1d       	adc	r19, r1
    5dce:	21 32       	cpi	r18, 0x21	; 33
    5dd0:	31 05       	cpc	r19, r1
    5dd2:	dc f4       	brge	.+54     	; 0x5e0a <twi_transmit+0x48>
    5dd4:	20 91 cc 03 	lds	r18, 0x03CC	; 0x8003cc <twi_state>
    5dd8:	24 30       	cpi	r18, 0x04	; 4
    5dda:	c9 f4       	brne	.+50     	; 0x5e0e <twi_transmit+0x4c>
    5ddc:	fc 01       	movw	r30, r24
    5dde:	80 e0       	ldi	r24, 0x00	; 0
    5de0:	90 e0       	ldi	r25, 0x00	; 0
    5de2:	86 17       	cp	r24, r22
    5de4:	58 f4       	brcc	.+22     	; 0x5dfc <twi_transmit+0x3a>
    5de6:	30 91 7b 03 	lds	r19, 0x037B	; 0x80037b <twi_txBufferLength>
    5dea:	21 91       	ld	r18, Z+
    5dec:	dc 01       	movw	r26, r24
    5dee:	a3 58       	subi	r26, 0x83	; 131
    5df0:	bc 4f       	sbci	r27, 0xFC	; 252
    5df2:	a3 0f       	add	r26, r19
    5df4:	b1 1d       	adc	r27, r1
    5df6:	2c 93       	st	X, r18
    5df8:	01 96       	adiw	r24, 0x01	; 1
    5dfa:	f3 cf       	rjmp	.-26     	; 0x5de2 <twi_transmit+0x20>
    5dfc:	80 91 7b 03 	lds	r24, 0x037B	; 0x80037b <twi_txBufferLength>
    5e00:	68 0f       	add	r22, r24
    5e02:	60 93 7b 03 	sts	0x037B, r22	; 0x80037b <twi_txBufferLength>
    5e06:	80 e0       	ldi	r24, 0x00	; 0
    5e08:	08 95       	ret
    5e0a:	81 e0       	ldi	r24, 0x01	; 1
    5e0c:	08 95       	ret
    5e0e:	82 e0       	ldi	r24, 0x02	; 2
    5e10:	08 95       	ret

00005e12 <twi_attachSlaveRxEvent>:
    5e12:	90 93 c0 03 	sts	0x03C0, r25	; 0x8003c0 <twi_onSlaveReceive+0x1>
    5e16:	80 93 bf 03 	sts	0x03BF, r24	; 0x8003bf <twi_onSlaveReceive>
    5e1a:	08 95       	ret

00005e1c <twi_attachSlaveTxEvent>:
    5e1c:	90 93 c2 03 	sts	0x03C2, r25	; 0x8003c2 <twi_onSlaveTransmit+0x1>
    5e20:	80 93 c1 03 	sts	0x03C1, r24	; 0x8003c1 <twi_onSlaveTransmit>
    5e24:	08 95       	ret

00005e26 <twi_releaseBus>:
    5e26:	85 ec       	ldi	r24, 0xC5	; 197
    5e28:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    5e2c:	10 92 cc 03 	sts	0x03CC, r1	; 0x8003cc <twi_state>
    5e30:	08 95       	ret

00005e32 <twi_handleTimeout>:
    5e32:	cf 93       	push	r28
    5e34:	df 93       	push	r29
    5e36:	91 e0       	ldi	r25, 0x01	; 1
    5e38:	90 93 c4 03 	sts	0x03C4, r25	; 0x8003c4 <twi_timed_out_flag>
    5e3c:	88 23       	and	r24, r24
    5e3e:	61 f0       	breq	.+24     	; 0x5e58 <twi_handleTimeout+0x26>
    5e40:	c0 91 b8 00 	lds	r28, 0x00B8	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
    5e44:	d0 91 ba 00 	lds	r29, 0x00BA	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7f80ba>
    5e48:	0e 94 c0 2e 	call	0x5d80	; 0x5d80 <twi_disable>
    5e4c:	0e 94 a2 2e 	call	0x5d44	; 0x5d44 <twi_init>
    5e50:	d0 93 ba 00 	sts	0x00BA, r29	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7f80ba>
    5e54:	c0 93 b8 00 	sts	0x00B8, r28	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
    5e58:	df 91       	pop	r29
    5e5a:	cf 91       	pop	r28
    5e5c:	08 95       	ret

00005e5e <twi_writeTo>:
    5e5e:	4f 92       	push	r4
    5e60:	5f 92       	push	r5
    5e62:	6f 92       	push	r6
    5e64:	7f 92       	push	r7
    5e66:	8f 92       	push	r8
    5e68:	9f 92       	push	r9
    5e6a:	af 92       	push	r10
    5e6c:	bf 92       	push	r11
    5e6e:	cf 92       	push	r12
    5e70:	df 92       	push	r13
    5e72:	ef 92       	push	r14
    5e74:	ff 92       	push	r15
    5e76:	0f 93       	push	r16
    5e78:	1f 93       	push	r17
    5e7a:	cf 93       	push	r28
    5e7c:	df 93       	push	r29
    5e7e:	41 32       	cpi	r20, 0x21	; 33
    5e80:	08 f0       	brcs	.+2      	; 0x5e84 <twi_writeTo+0x26>
    5e82:	c6 c0       	rjmp	.+396    	; 0x6010 <twi_writeTo+0x1b2>
    5e84:	12 2f       	mov	r17, r18
    5e86:	f4 2e       	mov	r15, r20
    5e88:	d7 2e       	mov	r13, r23
    5e8a:	e6 2e       	mov	r14, r22
    5e8c:	d8 2f       	mov	r29, r24
    5e8e:	0e 94 67 1a 	call	0x34ce	; 0x34ce <micros>
    5e92:	4b 01       	movw	r8, r22
    5e94:	5c 01       	movw	r10, r24
    5e96:	c0 91 cc 03 	lds	r28, 0x03CC	; 0x8003cc <twi_state>
    5e9a:	cc 23       	and	r28, r28
    5e9c:	11 f1       	breq	.+68     	; 0x5ee2 <twi_writeTo+0x84>
    5e9e:	80 91 c5 03 	lds	r24, 0x03C5	; 0x8003c5 <twi_timeout_us>
    5ea2:	90 91 c6 03 	lds	r25, 0x03C6	; 0x8003c6 <twi_timeout_us+0x1>
    5ea6:	a0 91 c7 03 	lds	r26, 0x03C7	; 0x8003c7 <twi_timeout_us+0x2>
    5eaa:	b0 91 c8 03 	lds	r27, 0x03C8	; 0x8003c8 <twi_timeout_us+0x3>
    5eae:	89 2b       	or	r24, r25
    5eb0:	8a 2b       	or	r24, r26
    5eb2:	8b 2b       	or	r24, r27
    5eb4:	81 f3       	breq	.-32     	; 0x5e96 <twi_writeTo+0x38>
    5eb6:	0e 94 67 1a 	call	0x34ce	; 0x34ce <micros>
    5eba:	40 90 c5 03 	lds	r4, 0x03C5	; 0x8003c5 <twi_timeout_us>
    5ebe:	50 90 c6 03 	lds	r5, 0x03C6	; 0x8003c6 <twi_timeout_us+0x1>
    5ec2:	60 90 c7 03 	lds	r6, 0x03C7	; 0x8003c7 <twi_timeout_us+0x2>
    5ec6:	70 90 c8 03 	lds	r7, 0x03C8	; 0x8003c8 <twi_timeout_us+0x3>
    5eca:	dc 01       	movw	r26, r24
    5ecc:	cb 01       	movw	r24, r22
    5ece:	88 19       	sub	r24, r8
    5ed0:	99 09       	sbc	r25, r9
    5ed2:	aa 09       	sbc	r26, r10
    5ed4:	bb 09       	sbc	r27, r11
    5ed6:	48 16       	cp	r4, r24
    5ed8:	59 06       	cpc	r5, r25
    5eda:	6a 06       	cpc	r6, r26
    5edc:	7b 06       	cpc	r7, r27
    5ede:	d8 f6       	brcc	.-74     	; 0x5e96 <twi_writeTo+0x38>
    5ee0:	83 c0       	rjmp	.+262    	; 0x5fe8 <twi_writeTo+0x18a>
    5ee2:	82 e0       	ldi	r24, 0x02	; 2
    5ee4:	80 93 cc 03 	sts	0x03CC, r24	; 0x8003cc <twi_state>
    5ee8:	00 93 ca 03 	sts	0x03CA, r16	; 0x8003ca <twi_sendStop>
    5eec:	8f ef       	ldi	r24, 0xFF	; 255
    5eee:	80 93 59 03 	sts	0x0359, r24	; 0x800359 <twi_error>
    5ef2:	10 92 9e 03 	sts	0x039E, r1	; 0x80039e <twi_masterBufferIndex>
    5ef6:	f0 92 9d 03 	sts	0x039D, r15	; 0x80039d <twi_masterBufferLength>
    5efa:	9e 2d       	mov	r25, r14
    5efc:	af e9       	ldi	r26, 0x9F	; 159
    5efe:	b3 e0       	ldi	r27, 0x03	; 3
    5f00:	ee 2d       	mov	r30, r14
    5f02:	fd 2d       	mov	r31, r13
    5f04:	8e 2f       	mov	r24, r30
    5f06:	89 1b       	sub	r24, r25
    5f08:	8f 15       	cp	r24, r15
    5f0a:	18 f4       	brcc	.+6      	; 0x5f12 <twi_writeTo+0xb4>
    5f0c:	81 91       	ld	r24, Z+
    5f0e:	8d 93       	st	X+, r24
    5f10:	f9 cf       	rjmp	.-14     	; 0x5f04 <twi_writeTo+0xa6>
    5f12:	10 92 cb 03 	sts	0x03CB, r1	; 0x8003cb <twi_slarw>
    5f16:	90 91 cb 03 	lds	r25, 0x03CB	; 0x8003cb <twi_slarw>
    5f1a:	dd 0f       	add	r29, r29
    5f1c:	d9 2b       	or	r29, r25
    5f1e:	d0 93 cb 03 	sts	0x03CB, r29	; 0x8003cb <twi_slarw>
    5f22:	80 91 c9 03 	lds	r24, 0x03C9	; 0x8003c9 <twi_inRepStart>
    5f26:	81 30       	cpi	r24, 0x01	; 1
    5f28:	89 f5       	brne	.+98     	; 0x5f8c <twi_writeTo+0x12e>
    5f2a:	10 92 c9 03 	sts	0x03C9, r1	; 0x8003c9 <twi_inRepStart>
    5f2e:	0e 94 67 1a 	call	0x34ce	; 0x34ce <micros>
    5f32:	6b 01       	movw	r12, r22
    5f34:	7c 01       	movw	r14, r24
    5f36:	80 91 cb 03 	lds	r24, 0x03CB	; 0x8003cb <twi_slarw>
    5f3a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    5f3e:	80 91 c5 03 	lds	r24, 0x03C5	; 0x8003c5 <twi_timeout_us>
    5f42:	90 91 c6 03 	lds	r25, 0x03C6	; 0x8003c6 <twi_timeout_us+0x1>
    5f46:	a0 91 c7 03 	lds	r26, 0x03C7	; 0x8003c7 <twi_timeout_us+0x2>
    5f4a:	b0 91 c8 03 	lds	r27, 0x03C8	; 0x8003c8 <twi_timeout_us+0x3>
    5f4e:	89 2b       	or	r24, r25
    5f50:	8a 2b       	or	r24, r26
    5f52:	8b 2b       	or	r24, r27
    5f54:	a9 f0       	breq	.+42     	; 0x5f80 <twi_writeTo+0x122>
    5f56:	0e 94 67 1a 	call	0x34ce	; 0x34ce <micros>
    5f5a:	80 90 c5 03 	lds	r8, 0x03C5	; 0x8003c5 <twi_timeout_us>
    5f5e:	90 90 c6 03 	lds	r9, 0x03C6	; 0x8003c6 <twi_timeout_us+0x1>
    5f62:	a0 90 c7 03 	lds	r10, 0x03C7	; 0x8003c7 <twi_timeout_us+0x2>
    5f66:	b0 90 c8 03 	lds	r11, 0x03C8	; 0x8003c8 <twi_timeout_us+0x3>
    5f6a:	dc 01       	movw	r26, r24
    5f6c:	cb 01       	movw	r24, r22
    5f6e:	8c 19       	sub	r24, r12
    5f70:	9d 09       	sbc	r25, r13
    5f72:	ae 09       	sbc	r26, r14
    5f74:	bf 09       	sbc	r27, r15
    5f76:	88 16       	cp	r8, r24
    5f78:	99 06       	cpc	r9, r25
    5f7a:	aa 06       	cpc	r10, r26
    5f7c:	bb 06       	cpc	r11, r27
    5f7e:	a0 f1       	brcs	.+104    	; 0x5fe8 <twi_writeTo+0x18a>
    5f80:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    5f84:	83 fd       	sbrc	r24, 3
    5f86:	d7 cf       	rjmp	.-82     	; 0x5f36 <twi_writeTo+0xd8>
    5f88:	85 ec       	ldi	r24, 0xC5	; 197
    5f8a:	01 c0       	rjmp	.+2      	; 0x5f8e <twi_writeTo+0x130>
    5f8c:	85 ee       	ldi	r24, 0xE5	; 229
    5f8e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    5f92:	0e 94 67 1a 	call	0x34ce	; 0x34ce <micros>
    5f96:	6b 01       	movw	r12, r22
    5f98:	7c 01       	movw	r14, r24
    5f9a:	11 23       	and	r17, r17
    5f9c:	59 f1       	breq	.+86     	; 0x5ff4 <twi_writeTo+0x196>
    5f9e:	80 91 cc 03 	lds	r24, 0x03CC	; 0x8003cc <twi_state>
    5fa2:	82 30       	cpi	r24, 0x02	; 2
    5fa4:	39 f5       	brne	.+78     	; 0x5ff4 <twi_writeTo+0x196>
    5fa6:	80 91 c5 03 	lds	r24, 0x03C5	; 0x8003c5 <twi_timeout_us>
    5faa:	90 91 c6 03 	lds	r25, 0x03C6	; 0x8003c6 <twi_timeout_us+0x1>
    5fae:	a0 91 c7 03 	lds	r26, 0x03C7	; 0x8003c7 <twi_timeout_us+0x2>
    5fb2:	b0 91 c8 03 	lds	r27, 0x03C8	; 0x8003c8 <twi_timeout_us+0x3>
    5fb6:	89 2b       	or	r24, r25
    5fb8:	8a 2b       	or	r24, r26
    5fba:	8b 2b       	or	r24, r27
    5fbc:	71 f3       	breq	.-36     	; 0x5f9a <twi_writeTo+0x13c>
    5fbe:	0e 94 67 1a 	call	0x34ce	; 0x34ce <micros>
    5fc2:	80 90 c5 03 	lds	r8, 0x03C5	; 0x8003c5 <twi_timeout_us>
    5fc6:	90 90 c6 03 	lds	r9, 0x03C6	; 0x8003c6 <twi_timeout_us+0x1>
    5fca:	a0 90 c7 03 	lds	r10, 0x03C7	; 0x8003c7 <twi_timeout_us+0x2>
    5fce:	b0 90 c8 03 	lds	r11, 0x03C8	; 0x8003c8 <twi_timeout_us+0x3>
    5fd2:	dc 01       	movw	r26, r24
    5fd4:	cb 01       	movw	r24, r22
    5fd6:	8c 19       	sub	r24, r12
    5fd8:	9d 09       	sbc	r25, r13
    5fda:	ae 09       	sbc	r26, r14
    5fdc:	bf 09       	sbc	r27, r15
    5fde:	88 16       	cp	r8, r24
    5fe0:	99 06       	cpc	r9, r25
    5fe2:	aa 06       	cpc	r10, r26
    5fe4:	bb 06       	cpc	r11, r27
    5fe6:	c8 f6       	brcc	.-78     	; 0x5f9a <twi_writeTo+0x13c>
    5fe8:	80 91 c3 03 	lds	r24, 0x03C3	; 0x8003c3 <twi_do_reset_on_timeout>
    5fec:	0e 94 19 2f 	call	0x5e32	; 0x5e32 <twi_handleTimeout>
    5ff0:	c5 e0       	ldi	r28, 0x05	; 5
    5ff2:	13 c0       	rjmp	.+38     	; 0x601a <twi_writeTo+0x1bc>
    5ff4:	80 91 59 03 	lds	r24, 0x0359	; 0x800359 <twi_error>
    5ff8:	8f 3f       	cpi	r24, 0xFF	; 255
    5ffa:	79 f0       	breq	.+30     	; 0x601a <twi_writeTo+0x1bc>
    5ffc:	80 91 59 03 	lds	r24, 0x0359	; 0x800359 <twi_error>
    6000:	80 32       	cpi	r24, 0x20	; 32
    6002:	41 f0       	breq	.+16     	; 0x6014 <twi_writeTo+0x1b6>
    6004:	80 91 59 03 	lds	r24, 0x0359	; 0x800359 <twi_error>
    6008:	80 33       	cpi	r24, 0x30	; 48
    600a:	31 f0       	breq	.+12     	; 0x6018 <twi_writeTo+0x1ba>
    600c:	c4 e0       	ldi	r28, 0x04	; 4
    600e:	05 c0       	rjmp	.+10     	; 0x601a <twi_writeTo+0x1bc>
    6010:	c1 e0       	ldi	r28, 0x01	; 1
    6012:	03 c0       	rjmp	.+6      	; 0x601a <twi_writeTo+0x1bc>
    6014:	c2 e0       	ldi	r28, 0x02	; 2
    6016:	01 c0       	rjmp	.+2      	; 0x601a <twi_writeTo+0x1bc>
    6018:	c3 e0       	ldi	r28, 0x03	; 3
    601a:	8c 2f       	mov	r24, r28
    601c:	df 91       	pop	r29
    601e:	cf 91       	pop	r28
    6020:	1f 91       	pop	r17
    6022:	0f 91       	pop	r16
    6024:	ff 90       	pop	r15
    6026:	ef 90       	pop	r14
    6028:	df 90       	pop	r13
    602a:	cf 90       	pop	r12
    602c:	bf 90       	pop	r11
    602e:	af 90       	pop	r10
    6030:	9f 90       	pop	r9
    6032:	8f 90       	pop	r8
    6034:	7f 90       	pop	r7
    6036:	6f 90       	pop	r6
    6038:	5f 90       	pop	r5
    603a:	4f 90       	pop	r4
    603c:	08 95       	ret

0000603e <twi_stop>:
    603e:	85 ed       	ldi	r24, 0xD5	; 213
    6040:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    6044:	80 91 c5 03 	lds	r24, 0x03C5	; 0x8003c5 <twi_timeout_us>
    6048:	90 91 c6 03 	lds	r25, 0x03C6	; 0x8003c6 <twi_timeout_us+0x1>
    604c:	a0 91 c7 03 	lds	r26, 0x03C7	; 0x8003c7 <twi_timeout_us+0x2>
    6050:	b0 91 c8 03 	lds	r27, 0x03C8	; 0x8003c8 <twi_timeout_us+0x3>
    6054:	07 96       	adiw	r24, 0x07	; 7
    6056:	a1 1d       	adc	r26, r1
    6058:	b1 1d       	adc	r27, r1
    605a:	23 e0       	ldi	r18, 0x03	; 3
    605c:	b6 95       	lsr	r27
    605e:	a7 95       	ror	r26
    6060:	97 95       	ror	r25
    6062:	87 95       	ror	r24
    6064:	2a 95       	dec	r18
    6066:	d1 f7       	brne	.-12     	; 0x605c <twi_stop+0x1e>
    6068:	20 91 bc 00 	lds	r18, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    606c:	24 ff       	sbrs	r18, 4
    606e:	1c c0       	rjmp	.+56     	; 0x60a8 <twi_stop+0x6a>
    6070:	40 91 c5 03 	lds	r20, 0x03C5	; 0x8003c5 <twi_timeout_us>
    6074:	50 91 c6 03 	lds	r21, 0x03C6	; 0x8003c6 <twi_timeout_us+0x1>
    6078:	60 91 c7 03 	lds	r22, 0x03C7	; 0x8003c7 <twi_timeout_us+0x2>
    607c:	70 91 c8 03 	lds	r23, 0x03C8	; 0x8003c8 <twi_timeout_us+0x3>
    6080:	45 2b       	or	r20, r21
    6082:	46 2b       	or	r20, r22
    6084:	47 2b       	or	r20, r23
    6086:	81 f3       	breq	.-32     	; 0x6068 <twi_stop+0x2a>
    6088:	00 97       	sbiw	r24, 0x00	; 0
    608a:	a1 05       	cpc	r26, r1
    608c:	b1 05       	cpc	r27, r1
    608e:	41 f0       	breq	.+16     	; 0x60a0 <twi_stop+0x62>
    6090:	2a e2       	ldi	r18, 0x2A	; 42
    6092:	2a 95       	dec	r18
    6094:	f1 f7       	brne	.-4      	; 0x6092 <twi_stop+0x54>
    6096:	00 c0       	rjmp	.+0      	; 0x6098 <twi_stop+0x5a>
    6098:	01 97       	sbiw	r24, 0x01	; 1
    609a:	a1 09       	sbc	r26, r1
    609c:	b1 09       	sbc	r27, r1
    609e:	e4 cf       	rjmp	.-56     	; 0x6068 <twi_stop+0x2a>
    60a0:	80 91 c3 03 	lds	r24, 0x03C3	; 0x8003c3 <twi_do_reset_on_timeout>
    60a4:	0c 94 19 2f 	jmp	0x5e32	; 0x5e32 <twi_handleTimeout>
    60a8:	10 92 cc 03 	sts	0x03CC, r1	; 0x8003cc <twi_state>
    60ac:	08 95       	ret

000060ae <__vector_24>:

ISR(TWI_vect)
{
    60ae:	1f 92       	push	r1
    60b0:	0f 92       	push	r0
    60b2:	0f b6       	in	r0, 0x3f	; 63
    60b4:	0f 92       	push	r0
    60b6:	11 24       	eor	r1, r1
    60b8:	2f 93       	push	r18
    60ba:	3f 93       	push	r19
    60bc:	4f 93       	push	r20
    60be:	5f 93       	push	r21
    60c0:	6f 93       	push	r22
    60c2:	7f 93       	push	r23
    60c4:	8f 93       	push	r24
    60c6:	9f 93       	push	r25
    60c8:	af 93       	push	r26
    60ca:	bf 93       	push	r27
    60cc:	ef 93       	push	r30
    60ce:	ff 93       	push	r31
  switch(TW_STATUS){
    60d0:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
    60d4:	88 7f       	andi	r24, 0xF8	; 248
    60d6:	80 36       	cpi	r24, 0x60	; 96
    60d8:	09 f4       	brne	.+2      	; 0x60dc <__vector_24+0x2e>
    60da:	9e c0       	rjmp	.+316    	; 0x6218 <__vector_24+0x16a>
    60dc:	78 f5       	brcc	.+94     	; 0x613c <__vector_24+0x8e>
    60de:	88 32       	cpi	r24, 0x28	; 40
    60e0:	09 f4       	brne	.+2      	; 0x60e4 <__vector_24+0x36>
    60e2:	5d c0       	rjmp	.+186    	; 0x619e <__vector_24+0xf0>
    60e4:	90 f4       	brcc	.+36     	; 0x610a <__vector_24+0x5c>
    60e6:	80 31       	cpi	r24, 0x10	; 16
    60e8:	09 f4       	brne	.+2      	; 0x60ec <__vector_24+0x3e>
    60ea:	56 c0       	rjmp	.+172    	; 0x6198 <__vector_24+0xea>
    60ec:	38 f4       	brcc	.+14     	; 0x60fc <__vector_24+0x4e>
    60ee:	88 23       	and	r24, r24
    60f0:	09 f4       	brne	.+2      	; 0x60f4 <__vector_24+0x46>
    60f2:	f5 c0       	rjmp	.+490    	; 0x62de <__vector_24+0x230>
    60f4:	88 30       	cpi	r24, 0x08	; 8
    60f6:	09 f4       	brne	.+2      	; 0x60fa <__vector_24+0x4c>
    60f8:	4f c0       	rjmp	.+158    	; 0x6198 <__vector_24+0xea>
    60fa:	f5 c0       	rjmp	.+490    	; 0x62e6 <__vector_24+0x238>
    60fc:	88 31       	cpi	r24, 0x18	; 24
    60fe:	09 f4       	brne	.+2      	; 0x6102 <__vector_24+0x54>
    6100:	4e c0       	rjmp	.+156    	; 0x619e <__vector_24+0xf0>
    6102:	80 32       	cpi	r24, 0x20	; 32
    6104:	09 f4       	brne	.+2      	; 0x6108 <__vector_24+0x5a>
    6106:	5f c0       	rjmp	.+190    	; 0x61c6 <__vector_24+0x118>
    6108:	ee c0       	rjmp	.+476    	; 0x62e6 <__vector_24+0x238>
    610a:	80 34       	cpi	r24, 0x40	; 64
    610c:	09 f4       	brne	.+2      	; 0x6110 <__vector_24+0x62>
    610e:	6a c0       	rjmp	.+212    	; 0x61e4 <__vector_24+0x136>
    6110:	58 f4       	brcc	.+22     	; 0x6128 <__vector_24+0x7a>
    6112:	80 33       	cpi	r24, 0x30	; 48
    6114:	09 f4       	brne	.+2      	; 0x6118 <__vector_24+0x6a>
    6116:	57 c0       	rjmp	.+174    	; 0x61c6 <__vector_24+0x118>
    6118:	88 33       	cpi	r24, 0x38	; 56
    611a:	09 f0       	breq	.+2      	; 0x611e <__vector_24+0x70>
    611c:	e4 c0       	rjmp	.+456    	; 0x62e6 <__vector_24+0x238>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    611e:	80 93 59 03 	sts	0x0359, r24	; 0x800359 <twi_error>
      twi_releaseBus();
    6122:	0e 94 13 2f 	call	0x5e26	; 0x5e26 <twi_releaseBus>
      break;
    6126:	df c0       	rjmp	.+446    	; 0x62e6 <__vector_24+0x238>
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    6128:	80 35       	cpi	r24, 0x50	; 80
    612a:	09 f4       	brne	.+2      	; 0x612e <__vector_24+0x80>
    612c:	4f c0       	rjmp	.+158    	; 0x61cc <__vector_24+0x11e>
    612e:	88 35       	cpi	r24, 0x58	; 88
    6130:	09 f4       	brne	.+2      	; 0x6134 <__vector_24+0x86>
    6132:	5d c0       	rjmp	.+186    	; 0x61ee <__vector_24+0x140>
    6134:	88 34       	cpi	r24, 0x48	; 72
    6136:	09 f0       	breq	.+2      	; 0x613a <__vector_24+0x8c>
    6138:	d6 c0       	rjmp	.+428    	; 0x62e6 <__vector_24+0x238>
    613a:	d3 c0       	rjmp	.+422    	; 0x62e2 <__vector_24+0x234>
    613c:	88 39       	cpi	r24, 0x98	; 152
    613e:	09 f4       	brne	.+2      	; 0x6142 <__vector_24+0x94>
    6140:	c4 c0       	rjmp	.+392    	; 0x62ca <__vector_24+0x21c>
    6142:	a8 f4       	brcc	.+42     	; 0x616e <__vector_24+0xc0>
    6144:	88 37       	cpi	r24, 0x78	; 120
    6146:	09 f4       	brne	.+2      	; 0x614a <__vector_24+0x9c>
    6148:	67 c0       	rjmp	.+206    	; 0x6218 <__vector_24+0x16a>
    614a:	38 f4       	brcc	.+14     	; 0x615a <__vector_24+0xac>
    614c:	88 36       	cpi	r24, 0x68	; 104
    614e:	09 f4       	brne	.+2      	; 0x6152 <__vector_24+0xa4>
    6150:	63 c0       	rjmp	.+198    	; 0x6218 <__vector_24+0x16a>
    6152:	80 37       	cpi	r24, 0x70	; 112
    6154:	09 f4       	brne	.+2      	; 0x6158 <__vector_24+0xaa>
    6156:	60 c0       	rjmp	.+192    	; 0x6218 <__vector_24+0x16a>
    6158:	c6 c0       	rjmp	.+396    	; 0x62e6 <__vector_24+0x238>
    615a:	88 38       	cpi	r24, 0x88	; 136
    615c:	09 f4       	brne	.+2      	; 0x6160 <__vector_24+0xb2>
    615e:	b5 c0       	rjmp	.+362    	; 0x62ca <__vector_24+0x21c>
    6160:	80 39       	cpi	r24, 0x90	; 144
    6162:	09 f4       	brne	.+2      	; 0x6166 <__vector_24+0xb8>
    6164:	5f c0       	rjmp	.+190    	; 0x6224 <__vector_24+0x176>
    6166:	80 38       	cpi	r24, 0x80	; 128
    6168:	09 f0       	breq	.+2      	; 0x616c <__vector_24+0xbe>
    616a:	bd c0       	rjmp	.+378    	; 0x62e6 <__vector_24+0x238>
    616c:	5b c0       	rjmp	.+182    	; 0x6224 <__vector_24+0x176>
    616e:	80 3b       	cpi	r24, 0xB0	; 176
    6170:	09 f4       	brne	.+2      	; 0x6174 <__vector_24+0xc6>
    6172:	83 c0       	rjmp	.+262    	; 0x627a <__vector_24+0x1cc>
    6174:	38 f4       	brcc	.+14     	; 0x6184 <__vector_24+0xd6>
    6176:	80 3a       	cpi	r24, 0xA0	; 160
    6178:	09 f4       	brne	.+2      	; 0x617c <__vector_24+0xce>
    617a:	66 c0       	rjmp	.+204    	; 0x6248 <__vector_24+0x19a>
    617c:	88 3a       	cpi	r24, 0xA8	; 168
    617e:	09 f4       	brne	.+2      	; 0x6182 <__vector_24+0xd4>
    6180:	7c c0       	rjmp	.+248    	; 0x627a <__vector_24+0x1cc>
    6182:	b1 c0       	rjmp	.+354    	; 0x62e6 <__vector_24+0x238>
    6184:	80 3c       	cpi	r24, 0xC0	; 192
    6186:	09 f4       	brne	.+2      	; 0x618a <__vector_24+0xdc>
    6188:	a4 c0       	rjmp	.+328    	; 0x62d2 <__vector_24+0x224>
    618a:	88 3c       	cpi	r24, 0xC8	; 200
    618c:	09 f4       	brne	.+2      	; 0x6190 <__vector_24+0xe2>
    618e:	a1 c0       	rjmp	.+322    	; 0x62d2 <__vector_24+0x224>
    6190:	88 3b       	cpi	r24, 0xB8	; 184
    6192:	09 f4       	brne	.+2      	; 0x6196 <__vector_24+0xe8>
    6194:	87 c0       	rjmp	.+270    	; 0x62a4 <__vector_24+0x1f6>
    6196:	a7 c0       	rjmp	.+334    	; 0x62e6 <__vector_24+0x238>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    6198:	80 91 cb 03 	lds	r24, 0x03CB	; 0x8003cb <twi_slarw>
    619c:	10 c0       	rjmp	.+32     	; 0x61be <__vector_24+0x110>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    619e:	90 91 9e 03 	lds	r25, 0x039E	; 0x80039e <twi_masterBufferIndex>
    61a2:	80 91 9d 03 	lds	r24, 0x039D	; 0x80039d <twi_masterBufferLength>
    61a6:	98 17       	cp	r25, r24
    61a8:	70 f5       	brcc	.+92     	; 0x6206 <__vector_24+0x158>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    61aa:	e0 91 9e 03 	lds	r30, 0x039E	; 0x80039e <twi_masterBufferIndex>
    61ae:	81 e0       	ldi	r24, 0x01	; 1
    61b0:	8e 0f       	add	r24, r30
    61b2:	80 93 9e 03 	sts	0x039E, r24	; 0x80039e <twi_masterBufferIndex>
    61b6:	f0 e0       	ldi	r31, 0x00	; 0
    61b8:	e1 56       	subi	r30, 0x61	; 97
    61ba:	fc 4f       	sbci	r31, 0xFC	; 252
    61bc:	80 81       	ld	r24, Z
    61be:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    61c2:	85 ec       	ldi	r24, 0xC5	; 197
    61c4:	83 c0       	rjmp	.+262    	; 0x62cc <__vector_24+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    61c6:	80 93 59 03 	sts	0x0359, r24	; 0x800359 <twi_error>
    61ca:	8b c0       	rjmp	.+278    	; 0x62e2 <__vector_24+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    61cc:	e0 91 9e 03 	lds	r30, 0x039E	; 0x80039e <twi_masterBufferIndex>
    61d0:	81 e0       	ldi	r24, 0x01	; 1
    61d2:	8e 0f       	add	r24, r30
    61d4:	80 93 9e 03 	sts	0x039E, r24	; 0x80039e <twi_masterBufferIndex>
    61d8:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    61dc:	f0 e0       	ldi	r31, 0x00	; 0
    61de:	e1 56       	subi	r30, 0x61	; 97
    61e0:	fc 4f       	sbci	r31, 0xFC	; 252
    61e2:	80 83       	st	Z, r24
      __attribute__ ((fallthrough));
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    61e4:	90 91 9e 03 	lds	r25, 0x039E	; 0x80039e <twi_masterBufferIndex>
    61e8:	80 91 9d 03 	lds	r24, 0x039D	; 0x80039d <twi_masterBufferLength>
    61ec:	6b c0       	rjmp	.+214    	; 0x62c4 <__vector_24+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    61ee:	e0 91 9e 03 	lds	r30, 0x039E	; 0x80039e <twi_masterBufferIndex>
    61f2:	81 e0       	ldi	r24, 0x01	; 1
    61f4:	8e 0f       	add	r24, r30
    61f6:	80 93 9e 03 	sts	0x039E, r24	; 0x80039e <twi_masterBufferIndex>
    61fa:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    61fe:	f0 e0       	ldi	r31, 0x00	; 0
    6200:	e1 56       	subi	r30, 0x61	; 97
    6202:	fc 4f       	sbci	r31, 0xFC	; 252
    6204:	80 83       	st	Z, r24
      if (twi_sendStop){
    6206:	80 91 ca 03 	lds	r24, 0x03CA	; 0x8003ca <twi_sendStop>
    620a:	81 11       	cpse	r24, r1
    620c:	6a c0       	rjmp	.+212    	; 0x62e2 <__vector_24+0x234>
        twi_stop();
      } else {
        twi_inRepStart = true;	// we're gonna send the START
    620e:	81 e0       	ldi	r24, 0x01	; 1
    6210:	80 93 c9 03 	sts	0x03C9, r24	; 0x8003c9 <twi_inRepStart>
        // don't enable the interrupt. We'll generate the start, but we
        // avoid handling the interrupt until we're in the next transaction,
        // at the point where we would normally issue the start.
        TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    6214:	84 ea       	ldi	r24, 0xA4	; 164
    6216:	5e c0       	rjmp	.+188    	; 0x62d4 <__vector_24+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    6218:	83 e0       	ldi	r24, 0x03	; 3
    621a:	80 93 cc 03 	sts	0x03CC, r24	; 0x8003cc <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    621e:	10 92 5a 03 	sts	0x035A, r1	; 0x80035a <twi_rxBufferIndex>
    6222:	cf cf       	rjmp	.-98     	; 0x61c2 <__vector_24+0x114>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    6224:	80 91 5a 03 	lds	r24, 0x035A	; 0x80035a <twi_rxBufferIndex>
    6228:	80 32       	cpi	r24, 0x20	; 32
    622a:	08 f0       	brcs	.+2      	; 0x622e <__vector_24+0x180>
    622c:	4e c0       	rjmp	.+156    	; 0x62ca <__vector_24+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    622e:	e0 91 5a 03 	lds	r30, 0x035A	; 0x80035a <twi_rxBufferIndex>
    6232:	81 e0       	ldi	r24, 0x01	; 1
    6234:	8e 0f       	add	r24, r30
    6236:	80 93 5a 03 	sts	0x035A, r24	; 0x80035a <twi_rxBufferIndex>
    623a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    623e:	f0 e0       	ldi	r31, 0x00	; 0
    6240:	e5 5a       	subi	r30, 0xA5	; 165
    6242:	fc 4f       	sbci	r31, 0xFC	; 252
    6244:	80 83       	st	Z, r24
    6246:	bd cf       	rjmp	.-134    	; 0x61c2 <__vector_24+0x114>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    6248:	0e 94 13 2f 	call	0x5e26	; 0x5e26 <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    624c:	80 91 5a 03 	lds	r24, 0x035A	; 0x80035a <twi_rxBufferIndex>
    6250:	80 32       	cpi	r24, 0x20	; 32
    6252:	30 f4       	brcc	.+12     	; 0x6260 <__vector_24+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    6254:	e0 91 5a 03 	lds	r30, 0x035A	; 0x80035a <twi_rxBufferIndex>
    6258:	f0 e0       	ldi	r31, 0x00	; 0
    625a:	e5 5a       	subi	r30, 0xA5	; 165
    625c:	fc 4f       	sbci	r31, 0xFC	; 252
    625e:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    6260:	60 91 5a 03 	lds	r22, 0x035A	; 0x80035a <twi_rxBufferIndex>
    6264:	70 e0       	ldi	r23, 0x00	; 0
    6266:	e0 91 bf 03 	lds	r30, 0x03BF	; 0x8003bf <twi_onSlaveReceive>
    626a:	f0 91 c0 03 	lds	r31, 0x03C0	; 0x8003c0 <twi_onSlaveReceive+0x1>
    626e:	8b e5       	ldi	r24, 0x5B	; 91
    6270:	93 e0       	ldi	r25, 0x03	; 3
    6272:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    6274:	10 92 5a 03 	sts	0x035A, r1	; 0x80035a <twi_rxBufferIndex>
      break;
    6278:	36 c0       	rjmp	.+108    	; 0x62e6 <__vector_24+0x238>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    627a:	84 e0       	ldi	r24, 0x04	; 4
    627c:	80 93 cc 03 	sts	0x03CC, r24	; 0x8003cc <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    6280:	10 92 7c 03 	sts	0x037C, r1	; 0x80037c <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    6284:	10 92 7b 03 	sts	0x037B, r1	; 0x80037b <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    6288:	e0 91 c1 03 	lds	r30, 0x03C1	; 0x8003c1 <twi_onSlaveTransmit>
    628c:	f0 91 c2 03 	lds	r31, 0x03C2	; 0x8003c2 <twi_onSlaveTransmit+0x1>
    6290:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    6292:	80 91 7b 03 	lds	r24, 0x037B	; 0x80037b <twi_txBufferLength>
    6296:	81 11       	cpse	r24, r1
    6298:	05 c0       	rjmp	.+10     	; 0x62a4 <__vector_24+0x1f6>
        twi_txBufferLength = 1;
    629a:	81 e0       	ldi	r24, 0x01	; 1
    629c:	80 93 7b 03 	sts	0x037B, r24	; 0x80037b <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    62a0:	10 92 7d 03 	sts	0x037D, r1	; 0x80037d <twi_txBuffer>
      }
      __attribute__ ((fallthrough));		  
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    62a4:	e0 91 7c 03 	lds	r30, 0x037C	; 0x80037c <twi_txBufferIndex>
    62a8:	81 e0       	ldi	r24, 0x01	; 1
    62aa:	8e 0f       	add	r24, r30
    62ac:	80 93 7c 03 	sts	0x037C, r24	; 0x80037c <twi_txBufferIndex>
    62b0:	f0 e0       	ldi	r31, 0x00	; 0
    62b2:	e3 58       	subi	r30, 0x83	; 131
    62b4:	fc 4f       	sbci	r31, 0xFC	; 252
    62b6:	80 81       	ld	r24, Z
    62b8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    62bc:	90 91 7c 03 	lds	r25, 0x037C	; 0x80037c <twi_txBufferIndex>
    62c0:	80 91 7b 03 	lds	r24, 0x037B	; 0x80037b <twi_txBufferLength>
    62c4:	98 17       	cp	r25, r24
    62c6:	08 f4       	brcc	.+2      	; 0x62ca <__vector_24+0x21c>
    62c8:	7c cf       	rjmp	.-264    	; 0x61c2 <__vector_24+0x114>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    62ca:	85 e8       	ldi	r24, 0x85	; 133
    62cc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    62d0:	0a c0       	rjmp	.+20     	; 0x62e6 <__vector_24+0x238>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    62d2:	85 ec       	ldi	r24, 0xC5	; 197
    62d4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    62d8:	10 92 cc 03 	sts	0x03CC, r1	; 0x8003cc <twi_state>
      break;
    62dc:	04 c0       	rjmp	.+8      	; 0x62e6 <__vector_24+0x238>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    62de:	10 92 59 03 	sts	0x0359, r1	; 0x800359 <twi_error>
      twi_stop();
    62e2:	0e 94 1f 30 	call	0x603e	; 0x603e <twi_stop>
      break;
  }
}
    62e6:	ff 91       	pop	r31
    62e8:	ef 91       	pop	r30
    62ea:	bf 91       	pop	r27
    62ec:	af 91       	pop	r26
    62ee:	9f 91       	pop	r25
    62f0:	8f 91       	pop	r24
    62f2:	7f 91       	pop	r23
    62f4:	6f 91       	pop	r22
    62f6:	5f 91       	pop	r21
    62f8:	4f 91       	pop	r20
    62fa:	3f 91       	pop	r19
    62fc:	2f 91       	pop	r18
    62fe:	0f 90       	pop	r0
    6300:	0f be       	out	0x3f, r0	; 63
    6302:	0f 90       	pop	r0
    6304:	1f 90       	pop	r1
    6306:	18 95       	reti

00006308 <__mulsi3>:
    6308:	db 01       	movw	r26, r22
    630a:	8f 93       	push	r24
    630c:	9f 93       	push	r25
    630e:	0e 94 07 32 	call	0x640e	; 0x640e <__muluhisi3>
    6312:	bf 91       	pop	r27
    6314:	af 91       	pop	r26
    6316:	a2 9f       	mul	r26, r18
    6318:	80 0d       	add	r24, r0
    631a:	91 1d       	adc	r25, r1
    631c:	a3 9f       	mul	r26, r19
    631e:	90 0d       	add	r25, r0
    6320:	b2 9f       	mul	r27, r18
    6322:	90 0d       	add	r25, r0
    6324:	11 24       	eor	r1, r1
    6326:	08 95       	ret

00006328 <__divmodhi4>:
    6328:	97 fb       	bst	r25, 7
    632a:	07 2e       	mov	r0, r23
    632c:	16 f4       	brtc	.+4      	; 0x6332 <__divmodhi4+0xa>
    632e:	00 94       	com	r0
    6330:	07 d0       	rcall	.+14     	; 0x6340 <__divmodhi4_neg1>
    6332:	77 fd       	sbrc	r23, 7
    6334:	09 d0       	rcall	.+18     	; 0x6348 <__divmodhi4_neg2>
    6336:	0e 94 12 32 	call	0x6424	; 0x6424 <__udivmodhi4>
    633a:	07 fc       	sbrc	r0, 7
    633c:	05 d0       	rcall	.+10     	; 0x6348 <__divmodhi4_neg2>
    633e:	3e f4       	brtc	.+14     	; 0x634e <__divmodhi4_exit>

00006340 <__divmodhi4_neg1>:
    6340:	90 95       	com	r25
    6342:	81 95       	neg	r24
    6344:	9f 4f       	sbci	r25, 0xFF	; 255
    6346:	08 95       	ret

00006348 <__divmodhi4_neg2>:
    6348:	70 95       	com	r23
    634a:	61 95       	neg	r22
    634c:	7f 4f       	sbci	r23, 0xFF	; 255

0000634e <__divmodhi4_exit>:
    634e:	08 95       	ret

00006350 <__udivmodsi4>:
    6350:	a1 e2       	ldi	r26, 0x21	; 33
    6352:	1a 2e       	mov	r1, r26
    6354:	aa 1b       	sub	r26, r26
    6356:	bb 1b       	sub	r27, r27
    6358:	fd 01       	movw	r30, r26
    635a:	0d c0       	rjmp	.+26     	; 0x6376 <__udivmodsi4_ep>

0000635c <__udivmodsi4_loop>:
    635c:	aa 1f       	adc	r26, r26
    635e:	bb 1f       	adc	r27, r27
    6360:	ee 1f       	adc	r30, r30
    6362:	ff 1f       	adc	r31, r31
    6364:	a2 17       	cp	r26, r18
    6366:	b3 07       	cpc	r27, r19
    6368:	e4 07       	cpc	r30, r20
    636a:	f5 07       	cpc	r31, r21
    636c:	20 f0       	brcs	.+8      	; 0x6376 <__udivmodsi4_ep>
    636e:	a2 1b       	sub	r26, r18
    6370:	b3 0b       	sbc	r27, r19
    6372:	e4 0b       	sbc	r30, r20
    6374:	f5 0b       	sbc	r31, r21

00006376 <__udivmodsi4_ep>:
    6376:	66 1f       	adc	r22, r22
    6378:	77 1f       	adc	r23, r23
    637a:	88 1f       	adc	r24, r24
    637c:	99 1f       	adc	r25, r25
    637e:	1a 94       	dec	r1
    6380:	69 f7       	brne	.-38     	; 0x635c <__udivmodsi4_loop>
    6382:	60 95       	com	r22
    6384:	70 95       	com	r23
    6386:	80 95       	com	r24
    6388:	90 95       	com	r25
    638a:	9b 01       	movw	r18, r22
    638c:	ac 01       	movw	r20, r24
    638e:	bd 01       	movw	r22, r26
    6390:	cf 01       	movw	r24, r30
    6392:	08 95       	ret

00006394 <__divmodsi4>:
    6394:	05 2e       	mov	r0, r21
    6396:	97 fb       	bst	r25, 7
    6398:	1e f4       	brtc	.+6      	; 0x63a0 <__divmodsi4+0xc>
    639a:	00 94       	com	r0
    639c:	0e 94 e1 31 	call	0x63c2	; 0x63c2 <__negsi2>
    63a0:	57 fd       	sbrc	r21, 7
    63a2:	07 d0       	rcall	.+14     	; 0x63b2 <__divmodsi4_neg2>
    63a4:	0e 94 a8 31 	call	0x6350	; 0x6350 <__udivmodsi4>
    63a8:	07 fc       	sbrc	r0, 7
    63aa:	03 d0       	rcall	.+6      	; 0x63b2 <__divmodsi4_neg2>
    63ac:	4e f4       	brtc	.+18     	; 0x63c0 <__divmodsi4_exit>
    63ae:	0c 94 e1 31 	jmp	0x63c2	; 0x63c2 <__negsi2>

000063b2 <__divmodsi4_neg2>:
    63b2:	50 95       	com	r21
    63b4:	40 95       	com	r20
    63b6:	30 95       	com	r19
    63b8:	21 95       	neg	r18
    63ba:	3f 4f       	sbci	r19, 0xFF	; 255
    63bc:	4f 4f       	sbci	r20, 0xFF	; 255
    63be:	5f 4f       	sbci	r21, 0xFF	; 255

000063c0 <__divmodsi4_exit>:
    63c0:	08 95       	ret

000063c2 <__negsi2>:
    63c2:	90 95       	com	r25
    63c4:	80 95       	com	r24
    63c6:	70 95       	com	r23
    63c8:	61 95       	neg	r22
    63ca:	7f 4f       	sbci	r23, 0xFF	; 255
    63cc:	8f 4f       	sbci	r24, 0xFF	; 255
    63ce:	9f 4f       	sbci	r25, 0xFF	; 255
    63d0:	08 95       	ret

000063d2 <__mulhisi3>:
    63d2:	0e 94 f1 31 	call	0x63e2	; 0x63e2 <__umulhisi3>
    63d6:	33 23       	and	r19, r19
    63d8:	12 f4       	brpl	.+4      	; 0x63de <__mulhisi3+0xc>
    63da:	8a 1b       	sub	r24, r26
    63dc:	9b 0b       	sbc	r25, r27
    63de:	0c 94 02 32 	jmp	0x6404	; 0x6404 <__usmulhisi3_tail>

000063e2 <__umulhisi3>:
    63e2:	a2 9f       	mul	r26, r18
    63e4:	b0 01       	movw	r22, r0
    63e6:	b3 9f       	mul	r27, r19
    63e8:	c0 01       	movw	r24, r0
    63ea:	a3 9f       	mul	r26, r19
    63ec:	70 0d       	add	r23, r0
    63ee:	81 1d       	adc	r24, r1
    63f0:	11 24       	eor	r1, r1
    63f2:	91 1d       	adc	r25, r1
    63f4:	b2 9f       	mul	r27, r18
    63f6:	70 0d       	add	r23, r0
    63f8:	81 1d       	adc	r24, r1
    63fa:	11 24       	eor	r1, r1
    63fc:	91 1d       	adc	r25, r1
    63fe:	08 95       	ret

00006400 <__usmulhisi3>:
    6400:	0e 94 f1 31 	call	0x63e2	; 0x63e2 <__umulhisi3>

00006404 <__usmulhisi3_tail>:
    6404:	b7 ff       	sbrs	r27, 7
    6406:	08 95       	ret
    6408:	82 1b       	sub	r24, r18
    640a:	93 0b       	sbc	r25, r19
    640c:	08 95       	ret

0000640e <__muluhisi3>:
    640e:	0e 94 f1 31 	call	0x63e2	; 0x63e2 <__umulhisi3>
    6412:	a5 9f       	mul	r26, r21
    6414:	90 0d       	add	r25, r0
    6416:	b4 9f       	mul	r27, r20
    6418:	90 0d       	add	r25, r0
    641a:	a4 9f       	mul	r26, r20
    641c:	80 0d       	add	r24, r0
    641e:	91 1d       	adc	r25, r1
    6420:	11 24       	eor	r1, r1
    6422:	08 95       	ret

00006424 <__udivmodhi4>:
    6424:	aa 1b       	sub	r26, r26
    6426:	bb 1b       	sub	r27, r27
    6428:	51 e1       	ldi	r21, 0x11	; 17
    642a:	07 c0       	rjmp	.+14     	; 0x643a <__udivmodhi4_ep>

0000642c <__udivmodhi4_loop>:
    642c:	aa 1f       	adc	r26, r26
    642e:	bb 1f       	adc	r27, r27
    6430:	a6 17       	cp	r26, r22
    6432:	b7 07       	cpc	r27, r23
    6434:	10 f0       	brcs	.+4      	; 0x643a <__udivmodhi4_ep>
    6436:	a6 1b       	sub	r26, r22
    6438:	b7 0b       	sbc	r27, r23

0000643a <__udivmodhi4_ep>:
    643a:	88 1f       	adc	r24, r24
    643c:	99 1f       	adc	r25, r25
    643e:	5a 95       	dec	r21
    6440:	a9 f7       	brne	.-22     	; 0x642c <__udivmodhi4_loop>
    6442:	80 95       	com	r24
    6444:	90 95       	com	r25
    6446:	bc 01       	movw	r22, r24
    6448:	cd 01       	movw	r24, r26
    644a:	08 95       	ret

0000644c <__tablejump2__>:
    644c:	ee 0f       	add	r30, r30
    644e:	ff 1f       	adc	r31, r31
    6450:	05 90       	lpm	r0, Z+
    6452:	f4 91       	lpm	r31, Z
    6454:	e0 2d       	mov	r30, r0
    6456:	09 94       	ijmp

00006458 <malloc>:
    6458:	0f 93       	push	r16
    645a:	1f 93       	push	r17
    645c:	cf 93       	push	r28
    645e:	df 93       	push	r29
    6460:	82 30       	cpi	r24, 0x02	; 2
    6462:	91 05       	cpc	r25, r1
    6464:	10 f4       	brcc	.+4      	; 0x646a <malloc+0x12>
    6466:	82 e0       	ldi	r24, 0x02	; 2
    6468:	90 e0       	ldi	r25, 0x00	; 0
    646a:	e0 91 cf 03 	lds	r30, 0x03CF	; 0x8003cf <__flp>
    646e:	f0 91 d0 03 	lds	r31, 0x03D0	; 0x8003d0 <__flp+0x1>
    6472:	20 e0       	ldi	r18, 0x00	; 0
    6474:	30 e0       	ldi	r19, 0x00	; 0
    6476:	a0 e0       	ldi	r26, 0x00	; 0
    6478:	b0 e0       	ldi	r27, 0x00	; 0
    647a:	30 97       	sbiw	r30, 0x00	; 0
    647c:	19 f1       	breq	.+70     	; 0x64c4 <malloc+0x6c>
    647e:	40 81       	ld	r20, Z
    6480:	51 81       	ldd	r21, Z+1	; 0x01
    6482:	02 81       	ldd	r16, Z+2	; 0x02
    6484:	13 81       	ldd	r17, Z+3	; 0x03
    6486:	48 17       	cp	r20, r24
    6488:	59 07       	cpc	r21, r25
    648a:	c8 f0       	brcs	.+50     	; 0x64be <malloc+0x66>
    648c:	84 17       	cp	r24, r20
    648e:	95 07       	cpc	r25, r21
    6490:	69 f4       	brne	.+26     	; 0x64ac <malloc+0x54>
    6492:	10 97       	sbiw	r26, 0x00	; 0
    6494:	31 f0       	breq	.+12     	; 0x64a2 <malloc+0x4a>
    6496:	12 96       	adiw	r26, 0x02	; 2
    6498:	0c 93       	st	X, r16
    649a:	12 97       	sbiw	r26, 0x02	; 2
    649c:	13 96       	adiw	r26, 0x03	; 3
    649e:	1c 93       	st	X, r17
    64a0:	27 c0       	rjmp	.+78     	; 0x64f0 <malloc+0x98>
    64a2:	00 93 cf 03 	sts	0x03CF, r16	; 0x8003cf <__flp>
    64a6:	10 93 d0 03 	sts	0x03D0, r17	; 0x8003d0 <__flp+0x1>
    64aa:	22 c0       	rjmp	.+68     	; 0x64f0 <malloc+0x98>
    64ac:	21 15       	cp	r18, r1
    64ae:	31 05       	cpc	r19, r1
    64b0:	19 f0       	breq	.+6      	; 0x64b8 <malloc+0x60>
    64b2:	42 17       	cp	r20, r18
    64b4:	53 07       	cpc	r21, r19
    64b6:	18 f4       	brcc	.+6      	; 0x64be <malloc+0x66>
    64b8:	9a 01       	movw	r18, r20
    64ba:	bd 01       	movw	r22, r26
    64bc:	ef 01       	movw	r28, r30
    64be:	df 01       	movw	r26, r30
    64c0:	f8 01       	movw	r30, r16
    64c2:	db cf       	rjmp	.-74     	; 0x647a <malloc+0x22>
    64c4:	21 15       	cp	r18, r1
    64c6:	31 05       	cpc	r19, r1
    64c8:	f9 f0       	breq	.+62     	; 0x6508 <malloc+0xb0>
    64ca:	28 1b       	sub	r18, r24
    64cc:	39 0b       	sbc	r19, r25
    64ce:	24 30       	cpi	r18, 0x04	; 4
    64d0:	31 05       	cpc	r19, r1
    64d2:	80 f4       	brcc	.+32     	; 0x64f4 <malloc+0x9c>
    64d4:	8a 81       	ldd	r24, Y+2	; 0x02
    64d6:	9b 81       	ldd	r25, Y+3	; 0x03
    64d8:	61 15       	cp	r22, r1
    64da:	71 05       	cpc	r23, r1
    64dc:	21 f0       	breq	.+8      	; 0x64e6 <malloc+0x8e>
    64de:	fb 01       	movw	r30, r22
    64e0:	93 83       	std	Z+3, r25	; 0x03
    64e2:	82 83       	std	Z+2, r24	; 0x02
    64e4:	04 c0       	rjmp	.+8      	; 0x64ee <malloc+0x96>
    64e6:	90 93 d0 03 	sts	0x03D0, r25	; 0x8003d0 <__flp+0x1>
    64ea:	80 93 cf 03 	sts	0x03CF, r24	; 0x8003cf <__flp>
    64ee:	fe 01       	movw	r30, r28
    64f0:	32 96       	adiw	r30, 0x02	; 2
    64f2:	44 c0       	rjmp	.+136    	; 0x657c <malloc+0x124>
    64f4:	fe 01       	movw	r30, r28
    64f6:	e2 0f       	add	r30, r18
    64f8:	f3 1f       	adc	r31, r19
    64fa:	81 93       	st	Z+, r24
    64fc:	91 93       	st	Z+, r25
    64fe:	22 50       	subi	r18, 0x02	; 2
    6500:	31 09       	sbc	r19, r1
    6502:	39 83       	std	Y+1, r19	; 0x01
    6504:	28 83       	st	Y, r18
    6506:	3a c0       	rjmp	.+116    	; 0x657c <malloc+0x124>
    6508:	20 91 cd 03 	lds	r18, 0x03CD	; 0x8003cd <__brkval>
    650c:	30 91 ce 03 	lds	r19, 0x03CE	; 0x8003ce <__brkval+0x1>
    6510:	23 2b       	or	r18, r19
    6512:	41 f4       	brne	.+16     	; 0x6524 <malloc+0xcc>
    6514:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    6518:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    651c:	30 93 ce 03 	sts	0x03CE, r19	; 0x8003ce <__brkval+0x1>
    6520:	20 93 cd 03 	sts	0x03CD, r18	; 0x8003cd <__brkval>
    6524:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    6528:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    652c:	21 15       	cp	r18, r1
    652e:	31 05       	cpc	r19, r1
    6530:	41 f4       	brne	.+16     	; 0x6542 <malloc+0xea>
    6532:	2d b7       	in	r18, 0x3d	; 61
    6534:	3e b7       	in	r19, 0x3e	; 62
    6536:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    653a:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    653e:	24 1b       	sub	r18, r20
    6540:	35 0b       	sbc	r19, r21
    6542:	e0 91 cd 03 	lds	r30, 0x03CD	; 0x8003cd <__brkval>
    6546:	f0 91 ce 03 	lds	r31, 0x03CE	; 0x8003ce <__brkval+0x1>
    654a:	e2 17       	cp	r30, r18
    654c:	f3 07       	cpc	r31, r19
    654e:	a0 f4       	brcc	.+40     	; 0x6578 <malloc+0x120>
    6550:	2e 1b       	sub	r18, r30
    6552:	3f 0b       	sbc	r19, r31
    6554:	28 17       	cp	r18, r24
    6556:	39 07       	cpc	r19, r25
    6558:	78 f0       	brcs	.+30     	; 0x6578 <malloc+0x120>
    655a:	ac 01       	movw	r20, r24
    655c:	4e 5f       	subi	r20, 0xFE	; 254
    655e:	5f 4f       	sbci	r21, 0xFF	; 255
    6560:	24 17       	cp	r18, r20
    6562:	35 07       	cpc	r19, r21
    6564:	48 f0       	brcs	.+18     	; 0x6578 <malloc+0x120>
    6566:	4e 0f       	add	r20, r30
    6568:	5f 1f       	adc	r21, r31
    656a:	50 93 ce 03 	sts	0x03CE, r21	; 0x8003ce <__brkval+0x1>
    656e:	40 93 cd 03 	sts	0x03CD, r20	; 0x8003cd <__brkval>
    6572:	81 93       	st	Z+, r24
    6574:	91 93       	st	Z+, r25
    6576:	02 c0       	rjmp	.+4      	; 0x657c <malloc+0x124>
    6578:	e0 e0       	ldi	r30, 0x00	; 0
    657a:	f0 e0       	ldi	r31, 0x00	; 0
    657c:	cf 01       	movw	r24, r30
    657e:	df 91       	pop	r29
    6580:	cf 91       	pop	r28
    6582:	1f 91       	pop	r17
    6584:	0f 91       	pop	r16
    6586:	08 95       	ret

00006588 <free>:
    6588:	cf 93       	push	r28
    658a:	df 93       	push	r29
    658c:	00 97       	sbiw	r24, 0x00	; 0
    658e:	09 f4       	brne	.+2      	; 0x6592 <free+0xa>
    6590:	81 c0       	rjmp	.+258    	; 0x6694 <free+0x10c>
    6592:	fc 01       	movw	r30, r24
    6594:	32 97       	sbiw	r30, 0x02	; 2
    6596:	13 82       	std	Z+3, r1	; 0x03
    6598:	12 82       	std	Z+2, r1	; 0x02
    659a:	a0 91 cf 03 	lds	r26, 0x03CF	; 0x8003cf <__flp>
    659e:	b0 91 d0 03 	lds	r27, 0x03D0	; 0x8003d0 <__flp+0x1>
    65a2:	10 97       	sbiw	r26, 0x00	; 0
    65a4:	81 f4       	brne	.+32     	; 0x65c6 <free+0x3e>
    65a6:	20 81       	ld	r18, Z
    65a8:	31 81       	ldd	r19, Z+1	; 0x01
    65aa:	82 0f       	add	r24, r18
    65ac:	93 1f       	adc	r25, r19
    65ae:	20 91 cd 03 	lds	r18, 0x03CD	; 0x8003cd <__brkval>
    65b2:	30 91 ce 03 	lds	r19, 0x03CE	; 0x8003ce <__brkval+0x1>
    65b6:	28 17       	cp	r18, r24
    65b8:	39 07       	cpc	r19, r25
    65ba:	51 f5       	brne	.+84     	; 0x6610 <free+0x88>
    65bc:	f0 93 ce 03 	sts	0x03CE, r31	; 0x8003ce <__brkval+0x1>
    65c0:	e0 93 cd 03 	sts	0x03CD, r30	; 0x8003cd <__brkval>
    65c4:	67 c0       	rjmp	.+206    	; 0x6694 <free+0x10c>
    65c6:	ed 01       	movw	r28, r26
    65c8:	20 e0       	ldi	r18, 0x00	; 0
    65ca:	30 e0       	ldi	r19, 0x00	; 0
    65cc:	ce 17       	cp	r28, r30
    65ce:	df 07       	cpc	r29, r31
    65d0:	40 f4       	brcc	.+16     	; 0x65e2 <free+0x5a>
    65d2:	4a 81       	ldd	r20, Y+2	; 0x02
    65d4:	5b 81       	ldd	r21, Y+3	; 0x03
    65d6:	9e 01       	movw	r18, r28
    65d8:	41 15       	cp	r20, r1
    65da:	51 05       	cpc	r21, r1
    65dc:	f1 f0       	breq	.+60     	; 0x661a <free+0x92>
    65de:	ea 01       	movw	r28, r20
    65e0:	f5 cf       	rjmp	.-22     	; 0x65cc <free+0x44>
    65e2:	d3 83       	std	Z+3, r29	; 0x03
    65e4:	c2 83       	std	Z+2, r28	; 0x02
    65e6:	40 81       	ld	r20, Z
    65e8:	51 81       	ldd	r21, Z+1	; 0x01
    65ea:	84 0f       	add	r24, r20
    65ec:	95 1f       	adc	r25, r21
    65ee:	c8 17       	cp	r28, r24
    65f0:	d9 07       	cpc	r29, r25
    65f2:	59 f4       	brne	.+22     	; 0x660a <free+0x82>
    65f4:	88 81       	ld	r24, Y
    65f6:	99 81       	ldd	r25, Y+1	; 0x01
    65f8:	84 0f       	add	r24, r20
    65fa:	95 1f       	adc	r25, r21
    65fc:	02 96       	adiw	r24, 0x02	; 2
    65fe:	91 83       	std	Z+1, r25	; 0x01
    6600:	80 83       	st	Z, r24
    6602:	8a 81       	ldd	r24, Y+2	; 0x02
    6604:	9b 81       	ldd	r25, Y+3	; 0x03
    6606:	93 83       	std	Z+3, r25	; 0x03
    6608:	82 83       	std	Z+2, r24	; 0x02
    660a:	21 15       	cp	r18, r1
    660c:	31 05       	cpc	r19, r1
    660e:	29 f4       	brne	.+10     	; 0x661a <free+0x92>
    6610:	f0 93 d0 03 	sts	0x03D0, r31	; 0x8003d0 <__flp+0x1>
    6614:	e0 93 cf 03 	sts	0x03CF, r30	; 0x8003cf <__flp>
    6618:	3d c0       	rjmp	.+122    	; 0x6694 <free+0x10c>
    661a:	e9 01       	movw	r28, r18
    661c:	fb 83       	std	Y+3, r31	; 0x03
    661e:	ea 83       	std	Y+2, r30	; 0x02
    6620:	49 91       	ld	r20, Y+
    6622:	59 91       	ld	r21, Y+
    6624:	c4 0f       	add	r28, r20
    6626:	d5 1f       	adc	r29, r21
    6628:	ec 17       	cp	r30, r28
    662a:	fd 07       	cpc	r31, r29
    662c:	61 f4       	brne	.+24     	; 0x6646 <free+0xbe>
    662e:	80 81       	ld	r24, Z
    6630:	91 81       	ldd	r25, Z+1	; 0x01
    6632:	84 0f       	add	r24, r20
    6634:	95 1f       	adc	r25, r21
    6636:	02 96       	adiw	r24, 0x02	; 2
    6638:	e9 01       	movw	r28, r18
    663a:	99 83       	std	Y+1, r25	; 0x01
    663c:	88 83       	st	Y, r24
    663e:	82 81       	ldd	r24, Z+2	; 0x02
    6640:	93 81       	ldd	r25, Z+3	; 0x03
    6642:	9b 83       	std	Y+3, r25	; 0x03
    6644:	8a 83       	std	Y+2, r24	; 0x02
    6646:	e0 e0       	ldi	r30, 0x00	; 0
    6648:	f0 e0       	ldi	r31, 0x00	; 0
    664a:	12 96       	adiw	r26, 0x02	; 2
    664c:	8d 91       	ld	r24, X+
    664e:	9c 91       	ld	r25, X
    6650:	13 97       	sbiw	r26, 0x03	; 3
    6652:	00 97       	sbiw	r24, 0x00	; 0
    6654:	19 f0       	breq	.+6      	; 0x665c <free+0xd4>
    6656:	fd 01       	movw	r30, r26
    6658:	dc 01       	movw	r26, r24
    665a:	f7 cf       	rjmp	.-18     	; 0x664a <free+0xc2>
    665c:	8d 91       	ld	r24, X+
    665e:	9c 91       	ld	r25, X
    6660:	11 97       	sbiw	r26, 0x01	; 1
    6662:	9d 01       	movw	r18, r26
    6664:	2e 5f       	subi	r18, 0xFE	; 254
    6666:	3f 4f       	sbci	r19, 0xFF	; 255
    6668:	82 0f       	add	r24, r18
    666a:	93 1f       	adc	r25, r19
    666c:	20 91 cd 03 	lds	r18, 0x03CD	; 0x8003cd <__brkval>
    6670:	30 91 ce 03 	lds	r19, 0x03CE	; 0x8003ce <__brkval+0x1>
    6674:	28 17       	cp	r18, r24
    6676:	39 07       	cpc	r19, r25
    6678:	69 f4       	brne	.+26     	; 0x6694 <free+0x10c>
    667a:	30 97       	sbiw	r30, 0x00	; 0
    667c:	29 f4       	brne	.+10     	; 0x6688 <free+0x100>
    667e:	10 92 d0 03 	sts	0x03D0, r1	; 0x8003d0 <__flp+0x1>
    6682:	10 92 cf 03 	sts	0x03CF, r1	; 0x8003cf <__flp>
    6686:	02 c0       	rjmp	.+4      	; 0x668c <free+0x104>
    6688:	13 82       	std	Z+3, r1	; 0x03
    668a:	12 82       	std	Z+2, r1	; 0x02
    668c:	b0 93 ce 03 	sts	0x03CE, r27	; 0x8003ce <__brkval+0x1>
    6690:	a0 93 cd 03 	sts	0x03CD, r26	; 0x8003cd <__brkval>
    6694:	df 91       	pop	r29
    6696:	cf 91       	pop	r28
    6698:	08 95       	ret

0000669a <abort>:
    669a:	81 e0       	ldi	r24, 0x01	; 1
    669c:	90 e0       	ldi	r25, 0x00	; 0
    669e:	f8 94       	cli
    66a0:	0c 94 78 33 	jmp	0x66f0	; 0x66f0 <__do_global_dtors>

000066a4 <memcpy_P>:
    66a4:	fb 01       	movw	r30, r22
    66a6:	dc 01       	movw	r26, r24
    66a8:	02 c0       	rjmp	.+4      	; 0x66ae <memcpy_P+0xa>
    66aa:	05 90       	lpm	r0, Z+
    66ac:	0d 92       	st	X+, r0
    66ae:	41 50       	subi	r20, 0x01	; 1
    66b0:	50 40       	sbci	r21, 0x00	; 0
    66b2:	d8 f7       	brcc	.-10     	; 0x66aa <memcpy_P+0x6>
    66b4:	08 95       	ret

000066b6 <memset>:
    66b6:	dc 01       	movw	r26, r24
    66b8:	01 c0       	rjmp	.+2      	; 0x66bc <memset+0x6>
    66ba:	6d 93       	st	X+, r22
    66bc:	41 50       	subi	r20, 0x01	; 1
    66be:	50 40       	sbci	r21, 0x00	; 0
    66c0:	e0 f7       	brcc	.-8      	; 0x66ba <memset+0x4>
    66c2:	08 95       	ret

000066c4 <eeprom_read_byte>:
    66c4:	f9 99       	sbic	0x1f, 1	; 31
    66c6:	fe cf       	rjmp	.-4      	; 0x66c4 <eeprom_read_byte>
    66c8:	92 bd       	out	0x22, r25	; 34
    66ca:	81 bd       	out	0x21, r24	; 33
    66cc:	f8 9a       	sbi	0x1f, 0	; 31
    66ce:	99 27       	eor	r25, r25
    66d0:	80 b5       	in	r24, 0x20	; 32
    66d2:	08 95       	ret

000066d4 <eeprom_write_byte>:
    66d4:	26 2f       	mov	r18, r22

000066d6 <eeprom_write_r18>:
    66d6:	f9 99       	sbic	0x1f, 1	; 31
    66d8:	fe cf       	rjmp	.-4      	; 0x66d6 <eeprom_write_r18>
    66da:	1f ba       	out	0x1f, r1	; 31
    66dc:	92 bd       	out	0x22, r25	; 34
    66de:	81 bd       	out	0x21, r24	; 33
    66e0:	20 bd       	out	0x20, r18	; 32
    66e2:	0f b6       	in	r0, 0x3f	; 63
    66e4:	f8 94       	cli
    66e6:	fa 9a       	sbi	0x1f, 2	; 31
    66e8:	f9 9a       	sbi	0x1f, 1	; 31
    66ea:	0f be       	out	0x3f, r0	; 63
    66ec:	01 96       	adiw	r24, 0x01	; 1
    66ee:	08 95       	ret

000066f0 <__do_global_dtors>:
    66f0:	19 e0       	ldi	r17, 0x09	; 9
    66f2:	ca e6       	ldi	r28, 0x6A	; 106
    66f4:	d9 e0       	ldi	r29, 0x09	; 9
    66f6:	04 c0       	rjmp	.+8      	; 0x6700 <__do_global_dtors+0x10>
    66f8:	fe 01       	movw	r30, r28
    66fa:	0e 94 26 32 	call	0x644c	; 0x644c <__tablejump2__>
    66fe:	21 96       	adiw	r28, 0x01	; 1
    6700:	cb 36       	cpi	r28, 0x6B	; 107
    6702:	d1 07       	cpc	r29, r17
    6704:	c9 f7       	brne	.-14     	; 0x66f8 <__do_global_dtors+0x8>
    6706:	f8 94       	cli

00006708 <__stop_program>:
    6708:	ff cf       	rjmp	.-2      	; 0x6708 <__stop_program>
