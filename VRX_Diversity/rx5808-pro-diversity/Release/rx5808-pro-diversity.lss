
rx5808-pro-diversity.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000d2  00800100  000066fa  0000678e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000066fa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001ff  008001d2  008001d2  00006860  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00006860  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00006890  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000e50  00000000  00000000  000068d0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0002098d  00000000  00000000  00007720  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00006bb7  00000000  00000000  000280ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000a213  00000000  00000000  0002ec64  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000333c  00000000  00000000  00038e78  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00006d00  00000000  00000000  0003c1b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00017370  00000000  00000000  00042eb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000fd0  00000000  00000000  0005a224  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 87 09 	jmp	0x130e	; 0x130e <__dtors_end>
       4:	0c 94 af 09 	jmp	0x135e	; 0x135e <__bad_interrupt>
       8:	0c 94 af 09 	jmp	0x135e	; 0x135e <__bad_interrupt>
       c:	0c 94 af 09 	jmp	0x135e	; 0x135e <__bad_interrupt>
      10:	0c 94 af 09 	jmp	0x135e	; 0x135e <__bad_interrupt>
      14:	0c 94 af 09 	jmp	0x135e	; 0x135e <__bad_interrupt>
      18:	0c 94 af 09 	jmp	0x135e	; 0x135e <__bad_interrupt>
      1c:	0c 94 af 09 	jmp	0x135e	; 0x135e <__bad_interrupt>
      20:	0c 94 af 09 	jmp	0x135e	; 0x135e <__bad_interrupt>
      24:	0c 94 af 09 	jmp	0x135e	; 0x135e <__bad_interrupt>
      28:	0c 94 af 09 	jmp	0x135e	; 0x135e <__bad_interrupt>
      2c:	0c 94 af 09 	jmp	0x135e	; 0x135e <__bad_interrupt>
      30:	0c 94 af 09 	jmp	0x135e	; 0x135e <__bad_interrupt>
      34:	0c 94 af 09 	jmp	0x135e	; 0x135e <__bad_interrupt>
      38:	0c 94 af 09 	jmp	0x135e	; 0x135e <__bad_interrupt>
      3c:	0c 94 af 09 	jmp	0x135e	; 0x135e <__bad_interrupt>
      40:	0c 94 09 1a 	jmp	0x3412	; 0x3412 <__vector_16>
      44:	0c 94 af 09 	jmp	0x135e	; 0x135e <__bad_interrupt>
      48:	0c 94 af 09 	jmp	0x135e	; 0x135e <__bad_interrupt>
      4c:	0c 94 af 09 	jmp	0x135e	; 0x135e <__bad_interrupt>
      50:	0c 94 af 09 	jmp	0x135e	; 0x135e <__bad_interrupt>
      54:	0c 94 af 09 	jmp	0x135e	; 0x135e <__bad_interrupt>
      58:	0c 94 af 09 	jmp	0x135e	; 0x135e <__bad_interrupt>
      5c:	0c 94 af 09 	jmp	0x135e	; 0x135e <__bad_interrupt>
      60:	0c 94 4f 30 	jmp	0x609e	; 0x609e <__vector_24>
      64:	0c 94 af 09 	jmp	0x135e	; 0x135e <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	27 24       	eor	r2, r7
      6a:	20 1c       	adc	r2, r0
      6c:	19 15       	cp	r17, r9
      6e:	12 0e       	add	r1, r18
      70:	10 13       	cpse	r17, r16
      72:	17 1a       	sub	r1, r23
      74:	1e 21       	and	r17, r14
      76:	25 28       	or	r2, r5
      78:	0d 0b       	sbc	r16, r29
      7a:	0a 08       	sbc	r0, r10
      7c:	2b 2c       	mov	r2, r11
      7e:	2e 2f       	mov	r18, r30
      80:	11 14       	cp	r1, r1
      82:	18 1b       	sub	r17, r24
      84:	1f 22       	and	r1, r31
      86:	26 29       	or	r18, r6
      88:	09 0c       	add	r0, r9
      8a:	0f 16       	cp	r0, r31
      8c:	1d 23       	and	r17, r29
      8e:	2a 2d       	mov	r18, r10
      90:	00 01       	movw	r0, r0
      92:	02 03       	mulsu	r16, r18
      94:	04 05       	cpc	r16, r4
      96:	06 07       	cpc	r16, r22

00000098 <_ZL23channelFreqOrderedIndex>:
      98:	28 29 2a 2b 2c 2d 2e 2f 13 20 12 11 21 10 07 22     ()*+,-./. ..!.."
      a8:	08 18 06 09 19 05 23 0a 1a 04 0b 1b 03 24 0c 1c     ......#......$..
      b8:	02 0d 1d 25 01 0e 1e 00 0f 1f 26 14 15 27 16 17     ...%......&..'..

000000c8 <_ZL12channelNames>:
      c8:	00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f     ................
      d8:	20 21 22 23 24 25 26 27 28 29 2a 2b 2c 2d 2e 2f      !"#$%&'()*+,-./
      e8:	88 89 8a 8b 8c 8d 8e 8f 58 59 5a 5b 5c 5d 5e 5f     ........XYZ[\]^_

000000f8 <_ZL16channelFreqTable>:
      f8:	e9 16 d5 16 c1 16 ad 16 99 16 85 16 71 16 5d 16     ............q.].
     108:	65 16 78 16 8b 16 9e 16 b1 16 c4 16 d7 16 ea 16     e.x.............
     118:	49 16 35 16 21 16 0d 16 fd 16 11 17 25 17 39 17     I.5.!.......%.9.
     128:	6c 16 80 16 94 16 a8 16 bc 16 d0 16 e4 16 f8 16     l...............
     138:	1a 16 3f 16 64 16 89 16 ae 16 d3 16 f8 16 1d 17     ..?.d...........
     148:	f2 14 17 15 3c 15 61 15 86 15 ab 15 d0 15 f5 15     ....<.a.........

00000158 <_ZL12channelTable>:
     158:	05 2a 9b 29 91 29 87 29 1d 29 13 29 09 29 9f 28     .*.).).).).).).(
     168:	03 29 0c 29 16 29 1f 29 89 29 92 29 9c 29 05 2a     .).).).).).).).*
     178:	95 28 8b 28 81 28 17 28 0f 2a 19 2a 83 2a 8d 2a     .(.(.(.(.*.*.*.*
     188:	06 29 10 29 1a 29 84 29 8e 29 98 29 02 2a 0c 2a     .).).).).).).*.*
     198:	1d 28 90 28 02 29 15 29 87 29 9a 29 0c 2a 1f 2a     .(.(.).).).).*.*
     1a8:	09 26 1c 26 8e 26 01 27 13 27 86 27 98 27 0b 28     .&.&.&.'.'.'.'.(

000001b8 <_ZL14EepromDefaults>:
     1b8:	09 00 00 00 00 01 00 00 5a 00 dc 00 00 5a 00 dc     ........Z....Z..
	...

000001c9 <_ZZN12StateMachine16MenuStateHandler7onEnterEvE3__c_1>:
     1c9:	53 65 74 74 69 6e 67 73 00                          Settings.

000001d2 <_ZZN12StateMachine16MenuStateHandler7onEnterEvE3__c_0>:
     1d2:	42 61 6e 64 20 53 63 61 6e 00                       Band Scan.

000001dc <_ZZN12StateMachine16MenuStateHandler7onEnterEvE3__c>:
     1dc:	53 65 61 72 63 68 00                                Search.

000001e3 <_ZL12settingsIcon>:
	...
     1eb:	00 0f f0 00 00 0f f0 00 00 0f f0 00 00 0f f0 00     ................
     1fb:	07 1f f8 e0 07 ff ff e0 0f ff ff f0 0f ff ff f0     ................
     20b:	1f ff ff f8 1f ff ff f8 1f fc 3f f8 1f f8 1f f8     ..........?.....
     21b:	07 f0 0f e0 03 f0 0f c0 03 f0 0f c0 07 f0 0f e0     ................
     22b:	1f f8 1f f8 1f fc 3f f8 1f ff ff f8 1f ff ff f8     ......?.........
     23b:	0f ff ff f0 0f ff ff f0 07 ff ff e0 07 1f f8 e0     ................
     24b:	00 0f f0 00 00 0f f0 00 00 0f f0 00 00 0f f0 00     ................
	...

00000263 <_ZL12bandScanIcon>:
	...
     273:	00 3f fc 00 03 ff ff c0 07 ff ff e0 3f ff ff fc     .?..........?...
     283:	7f fe 7f fe ff fe 7f ff ff fe 7f ff 7f ff ff fe     ................
     293:	7f ff ff fe 1f fe 7f f8 1f fe 7f f8 0f fe 7f f0     ................
     2a3:	07 fe 7f e0 03 fe 7f c0 01 fe 7f 80 01 fe 7f 80     ................
     2b3:	00 fe 7f 00 00 7f fe 00 00 3f fc 00 00 1f f8 00     .........?......
     2c3:	00 1f f8 00 00 07 e0 00 00 07 e0 00 00 03 c0 00     ................
     2d3:	00 01 80 00 00 00 00 00 00 00 00 00 00 00 00 00     ................

000002e3 <_ZL10searchIcon>:
	...
     2f3:	00 ff 80 00 01 ff e0 00 03 ff f0 00 07 e3 f0 00     ................
     303:	0f 80 f8 00 0f 00 78 00 0f 00 3c 00 0e 00 3c 00     ......x...<...<.
     313:	0e 00 3c 00 0e 00 3c 00 0f 00 3c 00 0f 00 78 00     ..<...<...<...x.
     323:	0f 80 f8 00 07 c1 f8 00 07 ff f8 00 03 ff fc 00     ................
     333:	00 ff fe 00 00 3f 1f 00 00 00 0f 80 00 00 07 c0     .....?..........
     343:	00 00 03 e0 00 00 01 f0 00 00 00 e0 00 00 00 40     ...............@
	...

00000363 <_ZL4logo>:
	...
     3bb:	fc 00 00 00 00 3f 00 00 00 00 00 00 00 00 00 00     .....?..........
     3cb:	fc 00 00 00 00 3f 00 00 00 00 00 00 00 00 00 00     .....?..........
     3db:	fc 00 00 00 00 3f 00 00 00 00 00 00 00 00 00 00     .....?..........
     3eb:	fc 00 00 00 00 3f 00 00 00 00 00 00 00 00 00 00     .....?..........
     3fb:	fc 00 00 00 00 3f 00 00 00 00 00 00 00 00 00 00     .....?..........
     40b:	78 00 00 00 00 1e 00 00 00 00 00 00 00 00 00 00     x...............
     41b:	78 00 00 00 00 1e 00 00 00 00 00 00 00 00 00 00     x...............
     42b:	78 00 00 00 00 1e 00 00 00 00 00 00 00 00 00 00     x...............
     43b:	78 00 00 00 00 1e 00 00 00 00 00 00 00 00 00 00     x...............
     44b:	78 00 00 00 00 1e 00 00 00 00 00 00 00 00 00 00     x...............
     45b:	78 00 00 00 00 1e 00 00 00 00 00 00 00 00 00 00     x...............
     46b:	78 00 00 00 00 1e 00 00 ff ff fb f8 0f df ff ff     x...............
     47b:	7f ff fb ff ff df ff ff ff ff fb fc 1f df ff ff     ................
     48b:	7f ff fb ff ff df ff ff ff ff f9 fc 1f df ff ff     ................
     49b:	7f ff fb ff ff df ff ff ff ff f9 fe 3f 9f ff ff     ............?...
     4ab:	7f ff fb ff ff df ff ff ff ff f8 fe 3f 9f ff ff     ............?...
     4bb:	7f ff fb ff ff df ff ff ff ff f8 ff 7f 1f ff ff     ................
     4cb:	7f ff fb ff ff df ff ff fc 03 f8 7f 7f 1f 80 00     ................
     4db:	7f 01 fb f0 0f df c0 3f fc 03 f8 7f fe 1f 80 00     .......?........
     4eb:	7f 01 fb f0 0f df c0 3f fc 03 f8 3f fe 1f 80 00     .......?...?....
     4fb:	7f 01 fb f0 0f df c0 3f fc 03 f8 3f fc 1f 80 00     .......?...?....
     50b:	7f 01 fb f0 0f df c0 3f fc 03 f8 1f fc 1f 80 00     .......?........
     51b:	7f 01 fb f0 0f df c0 3f fc 03 f8 1f f8 1f 80 00     .......?........
     52b:	7f 01 fb f0 0f df c0 3f ff ff f8 0f f8 1f ff ff     .......?........
     53b:	7f ff fb f0 0f df ff ff ff ff f8 0f f0 1f ff ff     ................
     54b:	7f ff fb f0 0f df ff ff ff ff f8 07 f0 1f ff ff     ................
     55b:	7f ff fb f0 0f df ff ff ff ff f8 07 f0 1f ff ff     ................
     56b:	7f ff fb f0 0f df ff ff ff ff f8 0f f0 1f ff ff     ................
     57b:	7f ff fb f0 0f df ff ff ff ff f8 0f f8 1f ff ff     ................
     58b:	7f ff fb f0 0f df ff ff fd fe 00 1f f8 00 00 3f     ...............?
     59b:	7f 01 fb f0 0f df c0 3f fc fe 00 1f fc 00 00 3f     .......?.......?
     5ab:	7f 01 fb f0 0f df c0 3f fc 7f 00 3f fc 00 00 3f     .......?...?...?
     5bb:	7f 01 fb f0 0f df c0 3f fc 7f 00 3f fe 00 00 3f     .......?...?...?
     5cb:	7f 01 fb f0 0f df c0 3f fc 3f 80 7e 7e 00 00 3f     .......?.?.~~..?
     5db:	7f 01 fb f0 0f df c0 3f fc 3f c0 7e 7e 00 00 3f     .......?.?.~~..?
     5eb:	7f 01 fb f0 0f df c0 3f fc 1f c0 fe 7f 1f ff ff     .......?........
     5fb:	7f ff fb ff ff df ff ff fc 0f e0 fe 7f 1f ff ff     ................
     60b:	7f ff fb ff ff df ff ff fc 0f e1 fc 3f 9f ff ff     ............?...
     61b:	7f ff fb ff ff df ff ff fc 07 f1 fc 3f 9f ff ff     ............?...
     62b:	7f ff fb ff ff df ff ff fc 07 f3 f8 1f df ff ff     ................
     63b:	7f ff fb ff ff df ff ff fc 03 fb f8 1f df ff ff     ................
     64b:	7f ff fb ff ff df ff ff 00 00 00 00 00 00 00 00     ................
	...

00000763 <_ZL13freqOrderIcon>:
     763:	00 00 19 80 19 80 19 80 1f b8 1f 88 19 90 19 a0     ................
     773:	19 b8 00 00 10 08 30 0c 7e 7e 30 0c 10 08 00 00     ......0.~~0.....

00000783 <_ZL16channelOrderIcon>:
     783:	00 00 00 00 33 9c 4a 52 7b 9c 4a 52 4b 92 00 00     ....3.JR{.JRK...
     793:	00 00 00 00 10 08 30 0c 7e 7e 30 0c 10 08 00 00     ......0.~~0.....

000007a3 <_ZL10manualIcon>:
     7a3:	00 00 60 c0 71 c0 7b c0 7f d8 7f c4 6e c2 64 c2     ..`.q.{.....n.d.
     7b3:	60 c0 60 c0 60 c0 08 0c 08 12 04 1e 03 12 00 00     `.`.`...........

000007c3 <_ZL8autoIcon>:
     7c3:	00 00 1e 00 3f 00 73 80 61 98 7f 84 7f 82 61 82     ....?.s.a.....a.
     7d3:	61 80 61 80 61 a2 08 36 08 2a 04 22 03 22 00 00     a.a.a..6.*."."..

000007e3 <_ZZN12StateMachine18SearchStateHandler13drawRssiGraphEvE3__c_0>:
     7e3:	41 00                                               A.

000007e5 <_ZZN12StateMachine18SearchStateHandler13drawRssiGraphEvE3__c>:
     7e5:	42 00                                               B.

000007e7 <_ZZN12StateMachine20SettingsStateHandler13onInitialDrawEvE3__c>:
     7e7:	50 72 65 73 73 20 6d 6f 64 65 20 66 6f 72 0a 52     Press mode for.R
     7f7:	53 53 49 20 63 61 6c 69 62 72 61 74 69 6f 6e 00     SSI calibration.

00000807 <_ZZN12StateMachine24SettingsRssiStateHandler12onUpdateDrawEvE3__c_9>:
     807:	50 72 65 73 73 20 4d 4f 44 45 20 74 6f 20 73 61     Press MODE to sa
     817:	76 65 2e 00                                         ve..

0000081b <_ZZN12StateMachine24SettingsRssiStateHandler12onUpdateDrawEvE3__c_8>:
     81b:	4d 61 78 3a 20 00                                   Max: .

00000821 <_ZZN12StateMachine24SettingsRssiStateHandler12onUpdateDrawEvE3__c_7>:
     821:	4d 69 6e 3a 20 00                                   Min: .

00000827 <_ZZN12StateMachine24SettingsRssiStateHandler12onUpdateDrawEvE3__c_6>:
     827:	41 6c 6c 20 64 6f 6e 65 21 00                       All done!.

00000831 <_ZZN12StateMachine24SettingsRssiStateHandler12onUpdateDrawEvE3__c_5>:
     831:	34 2f 34 0a 53 63 61 6e 6e 69 6e 67 20 66 6f 72     4/4.Scanning for
     841:	20 68 69 67 68 65 73 74 0a 52 53 53 49 2e 2e 2e      highest.RSSI...
	...

00000852 <_ZZN12StateMachine24SettingsRssiStateHandler12onUpdateDrawEvE3__c_4>:
     852:	50 72 65 73 73 20 4d 4f 44 45 20 77 68 65 6e 20     Press MODE when 
     862:	72 65 61 64 79 2e 00                                ready..

00000869 <_ZZN12StateMachine24SettingsRssiStateHandler12onUpdateDrawEvE3__c_3>:
     869:	33 2f 34 0a 54 75 72 6e 20 6f 6e 20 79 6f 75 72     3/4.Turn on your
     879:	20 56 54 58 2e 00                                    VTX..

0000087f <_ZZN12StateMachine24SettingsRssiStateHandler12onUpdateDrawEvE3__c_2>:
     87f:	32 2f 34 0a 53 63 61 6e 6e 69 6e 67 20 66 6f 72     2/4.Scanning for
     88f:	20 6c 6f 77 65 73 74 0a 52 53 53 49 2e 2e 2e 00      lowest.RSSI....

0000089f <_ZZN12StateMachine24SettingsRssiStateHandler12onUpdateDrawEvE3__c_1>:
     89f:	50 72 65 73 73 20 4d 4f 44 45 20 77 68 65 6e 20     Press MODE when 
     8af:	72 65 61 64 79 2e 00                                ready..

000008b6 <_ZZN12StateMachine24SettingsRssiStateHandler12onUpdateDrawEvE3__c_0>:
     8b6:	52 65 6d 6f 76 65 20 52 58 20 61 6e 74 65 6e 6e     Remove RX antenn
     8c6:	61 73 2e 00                                         as..

000008ca <_ZZN12StateMachine24SettingsRssiStateHandler12onUpdateDrawEvE3__c>:
     8ca:	31 2f 34 0a 54 75 72 6e 20 6f 66 66 20 61 6c 6c     1/4.Turn off all
     8da:	20 56 54 58 73 2e 00                                 VTXs..

000008e1 <digital_pin_to_timer_PGM>:
     8e1:	00 00 00 08 00 02 01 00 00 03 04 07 00 00 00 00     ................
     8f1:	00 00 00 00                                         ....

000008f5 <digital_pin_to_bit_mask_PGM>:
     8f5:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
     905:	04 08 10 20                                         ... 

00000909 <digital_pin_to_port_PGM>:
     909:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
     919:	03 03 03 03                                         ....

0000091d <port_to_input_PGM>:
     91d:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

00000927 <port_to_output_PGM>:
     927:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

00000931 <port_to_mode_PGM>:
     931:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

0000093b <_ZL4font>:
     93b:	00 00 00 00 00 3e 5b 4f 5b 3e 3e 6b 4f 6b 3e 1c     .....>[O[>>kOk>.
     94b:	3e 7c 3e 1c 18 3c 7e 3c 18 1c 57 7d 57 1c 1c 5e     >|>..<~<..W}W..^
     95b:	7f 5e 1c 00 18 3c 18 00 ff e7 c3 e7 ff 00 18 24     .^...<.........$
     96b:	18 00 ff e7 db e7 ff 30 48 3a 06 0e 26 29 79 29     .......0H:..&)y)
     97b:	26 40 7f 05 05 07 40 7f 05 25 3f 5a 3c e7 3c 5a     &@....@..%?Z<.<Z
     98b:	7f 3e 1c 1c 08 08 1c 1c 3e 7f 14 22 7f 22 14 5f     .>......>.."."._
     99b:	5f 00 5f 5f 06 09 7f 01 7f 00 66 89 95 6a 60 60     _.__......f..j``
     9ab:	60 60 60 94 a2 ff a2 94 08 04 7e 04 08 10 20 7e     ```.......~... ~
     9bb:	20 10 08 08 2a 1c 08 08 1c 2a 08 08 1e 10 10 10      ...*....*......
     9cb:	10 0c 1e 0c 1e 0c 30 38 3e 38 30 06 0e 3e 0e 06     ......08>80..>..
     9db:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
     9eb:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
     9fb:	56 20 50 00 08 07 03 00 00 1c 22 41 00 00 41 22     V P......."A..A"
     a0b:	1c 00 2a 1c 7f 1c 2a 08 08 3e 08 08 00 80 70 30     ..*...*..>....p0
     a1b:	00 08 08 08 08 08 00 00 60 60 00 20 10 08 04 02     ........``. ....
     a2b:	3e 51 49 45 3e 00 42 7f 40 00 72 49 49 49 46 21     >QIE>.B.@.rIIIF!
     a3b:	41 49 4d 33 18 14 12 7f 10 27 45 45 45 39 3c 4a     AIM3.....'EEE9<J
     a4b:	49 49 31 41 21 11 09 07 36 49 49 49 36 46 49 49     II1A!...6III6FII
     a5b:	29 1e 00 00 14 00 00 00 40 34 00 00 00 08 14 22     ).......@4....."
     a6b:	41 14 14 14 14 14 00 41 22 14 08 02 01 59 09 06     A......A"....Y..
     a7b:	3e 41 5d 59 4e 7c 12 11 12 7c 7f 49 49 49 36 3e     >A]YN|...|.III6>
     a8b:	41 41 41 22 7f 41 41 41 3e 7f 49 49 49 41 7f 09     AAA".AAA>.IIIA..
     a9b:	09 09 01 3e 41 41 51 73 7f 08 08 08 7f 00 41 7f     ...>AAQs......A.
     aab:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
     abb:	40 7f 02 1c 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
     acb:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 26     .....>AQ!^...)F&
     adb:	49 49 49 32 03 01 7f 01 03 3f 40 40 40 3f 1f 20     III2.....?@@@?. 
     aeb:	40 20 1f 3f 40 38 40 3f 63 14 08 14 63 03 04 78     @ .?@8@?c...c..x
     afb:	04 03 61 59 49 4d 43 00 7f 41 41 41 02 04 08 10     ..aYIMC..AAA....
     b0b:	20 00 41 41 41 7f 04 02 01 02 04 40 40 40 40 40      .AAA......@@@@@
     b1b:	00 03 07 08 00 20 54 54 78 40 7f 28 44 44 38 38     ..... TTx@.(DD88
     b2b:	44 44 44 28 38 44 44 28 7f 38 54 54 54 18 00 08     DDD(8DD(.8TTT...
     b3b:	7e 09 02 18 a4 a4 9c 78 7f 08 04 04 78 00 44 7d     ~......x....x.D}
     b4b:	40 00 20 40 40 3d 00 7f 10 28 44 00 00 41 7f 40     @. @@=...(D..A.@
     b5b:	00 7c 04 78 04 78 7c 08 04 04 78 38 44 44 44 38     .|.x.x|...x8DDD8
     b6b:	fc 18 24 24 18 18 24 24 18 fc 7c 08 04 04 08 48     ..$$..$$..|....H
     b7b:	54 54 54 24 04 04 3f 44 24 3c 40 40 20 7c 1c 20     TTT$..?D$<@@ |. 
     b8b:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 4c 90 90     @ .<@0@<D(.(DL..
     b9b:	90 7c 44 64 54 4c 44 00 08 36 41 00 00 00 77 00     .|DdTLD..6A...w.
     bab:	00 00 41 36 08 00 02 01 02 04 02 3c 26 23 26 3c     ..A6.......<&#&<
     bbb:	1e a1 a1 61 12 3a 40 40 20 7a 38 54 54 55 59 21     ...a.:@@ z8TTUY!
     bcb:	55 55 79 41 22 54 54 78 42 21 55 54 78 40 20 54     UUyA"TTxB!UTx@ T
     bdb:	55 79 40 0c 1e 52 72 12 39 55 55 55 59 39 54 54     Uy@..Rr.9UUUY9TT
     beb:	54 59 39 55 54 54 58 00 00 45 7c 41 00 02 45 7d     TY9UTTX..E|A..E}
     bfb:	42 00 01 45 7c 40 7d 12 11 12 7d f0 28 25 28 f0     B..E|@}...}.(%(.
     c0b:	7c 54 55 45 00 20 54 54 7c 54 7c 0a 09 7f 49 32     |TUE. TT|T|...I2
     c1b:	49 49 49 32 3a 44 44 44 3a 32 4a 48 48 30 3a 41     III2:DDD:2JHH0:A
     c2b:	41 21 7a 3a 42 40 20 78 00 9d a0 a0 7d 3d 42 42     A!z:B@ x....}=BB
     c3b:	42 3d 3d 40 40 40 3d 3c 24 ff 24 24 48 7e 49 43     B==@@@=<$.$$H~IC
     c4b:	66 2b 2f fc 2f 2b ff 09 29 f6 20 c0 88 7e 09 03     f+/./+..). ..~..
     c5b:	20 54 54 79 41 00 00 44 7d 41 30 48 48 4a 32 38      TTyA..D}A0HHJ28
     c6b:	40 40 22 7a 00 7a 0a 0a 72 7d 0d 19 31 7d 26 29     @@"z.z..r}..1}&)
     c7b:	29 2f 28 26 29 29 29 26 30 48 4d 40 20 38 08 08     )/(&)))&0HM@ 8..
     c8b:	08 08 08 08 08 08 38 2f 10 c8 ac ba 2f 10 28 34     ......8/..../.(4
     c9b:	fa 00 00 7b 00 00 08 14 2a 14 22 22 14 2a 14 08     ...{....*."".*..
     cab:	55 00 55 00 55 aa 55 aa 55 aa ff 55 ff 55 ff 00     U.U.U.U.U..U.U..
     cbb:	00 00 ff 00 10 10 10 ff 00 14 14 14 ff 00 10 10     ................
     ccb:	ff 00 ff 10 10 f0 10 f0 14 14 14 fc 00 14 14 f7     ................
     cdb:	00 ff 00 00 ff 00 ff 14 14 f4 04 fc 14 14 17 10     ................
     ceb:	1f 10 10 1f 10 1f 14 14 14 1f 00 10 10 10 f0 00     ................
     cfb:	00 00 00 1f 10 10 10 10 1f 10 10 10 10 f0 10 00     ................
     d0b:	00 00 ff 10 10 10 10 10 10 10 10 10 ff 10 00 00     ................
     d1b:	00 ff 14 00 00 ff 00 ff 00 00 1f 10 17 00 00 fc     ................
     d2b:	04 f4 14 14 17 10 17 14 14 f4 04 f4 00 00 ff 00     ................
     d3b:	f7 14 14 14 14 14 14 14 f7 00 f7 14 14 14 17 14     ................
     d4b:	10 10 1f 10 1f 14 14 14 f4 14 10 10 f0 10 f0 00     ................
     d5b:	00 1f 10 1f 00 00 00 1f 14 00 00 00 fc 14 00 00     ................
     d6b:	f0 10 f0 10 10 ff 10 ff 14 14 14 ff 14 10 10 10     ................
     d7b:	1f 00 00 00 00 f0 10 ff ff ff ff ff f0 f0 f0 f0     ................
     d8b:	f0 ff ff ff 00 00 00 00 00 ff ff 0f 0f 0f 0f 0f     ................
     d9b:	38 44 44 38 44 fc 4a 4a 4a 34 7e 02 02 06 06 02     8DD8D.JJJ4~.....
     dab:	7e 02 7e 02 63 55 49 41 63 38 44 44 3c 04 40 7e     ~.~.cUIAc8DD<.@~
     dbb:	20 1e 20 06 02 7e 02 02 99 a5 e7 a5 99 1c 2a 49      . ..~........*I
     dcb:	2a 1c 4c 72 01 72 4c 30 4a 4d 4d 30 30 48 78 48     *.Lr.rL0JMM00HxH
     ddb:	30 bc 62 5a 46 3d 3e 49 49 49 00 7e 01 01 01 7e     0.bZF=>III.~...~
     deb:	2a 2a 2a 2a 2a 44 44 5f 44 44 40 51 4a 44 40 40     *****DD_DD@QJD@@
     dfb:	44 4a 51 40 00 00 ff 01 03 e0 80 ff 00 00 08 08     DJQ@............
     e0b:	6b 6b 08 36 12 36 24 36 06 0f 09 0f 06 00 00 18     kk.6.6$6........
     e1b:	18 00 00 00 10 10 00 30 40 ff 01 01 00 1f 01 01     .......0@.......
     e2b:	1e 00 19 1d 17 12 00 3c 3c 3c 3c 00 00 00 00 00     .......<<<<.....

00000e3b <_ZZN16Adafruit_SSD13067displayEvE6dlist1>:
     e3b:	22 00 ff 21 00                                      "..!.

00000e40 <_ZZN16Adafruit_SSD130621drawFastVLineInternalEiiijE8postmask>:
     e40:	00 01 03 07 0f 1f 3f 7f                             ......?.

00000e48 <_ZZN16Adafruit_SSD130621drawFastVLineInternalEiiijE7premask>:
     e48:	00 80 c0 e0 f0 f8 fc fe                             ........

00000e50 <_ZZN16Adafruit_SSD13065beginEhhbbE5init5>:
     e50:	db 40 a4 a6 2e af                                   .@....

00000e56 <_ZZN16Adafruit_SSD13065beginEhhbbE5init3>:
     e56:	20 00 a1 c8                                          ...

00000e5a <_ZZN16Adafruit_SSD13065beginEhhbbE5init2>:
     e5a:	d3 00 40 8d                                         ..@.

00000e5e <_ZZN16Adafruit_SSD13065beginEhhbbE5init1>:
     e5e:	ae d5 80 a8                                         ....

00000e62 <_ZL12splash2_data>:
     e62:	00 00 60 00 00 00 00 00 00 00 00 00 00 00 00 00     ..`.............
     e72:	00 e0 00 00 00 00 00 00 00 00 00 00 00 00 00 01     ................
     e82:	e0 00 00 00 00 00 00 00 00 00 00 00 00 00 01 f0     ................
	...
     e9e:	00 03 f0 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
     eae:	07 f0 00 00 00 00 00 00 00 00 00 00 00 00 00 07     ................
     ebe:	f8 00 00 00 00 00 00 00 00 00 00 00 00 00 0f f8     ................
     ece:	00 00 00 03 c0 00 7e 00 00 01 e0 00 7f 0f f8 00     ......~.........
     ede:	00 00 03 c0 00 fe 00 00 01 e0 00 ff ef f8 00 00     ................
     eee:	00 03 c0 00 fe 00 00 01 e0 00 ff ff f8 00 00 00     ................
     efe:	03 c0 00 f0 00 00 00 0f 00 7f fe 7f c0 00 00 03     ................
     f0e:	c0 00 f0 00 00 00 0f 00 3f fe 7f f8 3f f1 fb cf     ........?...?...
     f1e:	fc fe f3 bc 3d ef e0 1f fe 7f ff 7f fb ff df fe     ....=...........
     f2e:	fe ff bc 3d ef e0 1f c6 ff ff 7f fb ff df fe fe     ...=............
     f3e:	ff bc 3d ef e0 0f e3 c7 fe 78 7b c3 de 1e f0 ff     ..=......x{.....
     f4e:	bc 3d ef 00 07 ff 87 fc 78 7b c3 de 1e f0 f8 3c     .=......x{.....<
     f5e:	3d ef 00 01 ff ff f0 00 7b c3 c0 1e f0 f0 3c 3d     =.......{.....<=
     f6e:	ef 00 01 f3 7f e0 3f fb c3 cf fe f0 f0 3c 3d ef     ......?......<=.
     f7e:	00 03 e3 3f 80 7f fb c3 df fe f0 f0 3c 3d ef 00     ...?........<=..
     f8e:	07 e7 3c 00 78 7b c3 de 1e f0 f0 3c 3d ef 00 07     ..<.x{.....<=...
     f9e:	ff be 00 78 7b c3 de 1e f0 f0 3c 3d ef 00 07 ff     ...x{.....<=....
     fae:	fe 00 78 7b c3 de 1e f0 f0 3c 3d ef 00 0f ff fe     ..x{.....<=.....
     fbe:	00 7f fb ff df fe f0 f0 3f fd ef e0 0f ff ff 00     ........?.......
     fce:	7f fb ff df fe f0 f0 3f fd ef e0 0f f9 ff 00 3e     .......?.......>
     fde:	79 f9 cf 9e f0 f0 1f 3d e7 e0 1f f1 ff 00 00 00     y......=........
	...
     ff6:	00 1f 80 ff 00 7f ff ff ff ff ff ff ff ff ff e0     ................
    1006:	1c 00 7f 00 7f ff ff ff fe b4 6d 88 8d 18 e0 00     ..........m.....
    1016:	00 1f 00 7f ff ff ff fe 95 ad 7d b5 77 e0 00 00     ..........}.w...
    1026:	0f 00 7f ff ff ff fe a5 ad 9d 8d 19 e0 00 00 06     ................
    1036:	00 7f ff ff ff fe b5 ad ed b5 7e e0                 ..........~.

00001042 <_ZL12splash1_data>:
    1042:	00 00 00 00 00 01 80 00 00 00 00 00 00 00 00 00     ................
    1052:	03 80 00 00 00 00 00 00 00 00 00 07 c0 00 00 00     ................
    1062:	00 00 00 00 00 00 07 c0 00 00 00 00 00 00 00 00     ................
    1072:	00 0f c0 00 00 00 00 00 00 00 00 00 1f e0 00 00     ................
    1082:	00 00 00 00 00 00 00 1f e0 00 00 00 00 00 00 00     ................
    1092:	00 00 3f e0 00 00 00 00 00 00 00 00 00 3f f0 00     ..?..........?..
	...
    10aa:	7f f0 00 00 00 00 00 00 00 1f f8 7f f0 00 00 00     ................
    10ba:	00 00 00 00 3f fe 7f f0 00 00 00 00 00 00 00 3f     ....?..........?
    10ca:	ff 7f f0 00 00 00 00 00 00 00 1f ff fb e0 00 00     ................
    10da:	00 00 00 00 00 0f ff f9 ff c0 00 00 00 00 00 00     ................
    10ea:	0f ff f9 ff f8 00 00 00 00 00 00 07 ff f1 ff ff     ................
    10fa:	00 00 00 00 00 00 03 fc 73 ff ff 80 00 00 00 00     ........s.......
    110a:	00 01 fe 3f ff ff 80 00 00 00 00 00 00 ff 1e 0f     ...?............
    111a:	ff 00 00 00 00 00 00 00 7f fe 1f fc 00 00 00 00     ................
    112a:	00 00 00 3f ff ff f8 00 00 00 00 00 00 00 0f df     ...?............
    113a:	ff e0 00 00 00 00 00 00 00 1f 19 ff c0 00 00 00     ................
    114a:	00 00 00 00 3f 3c ff 00 00 00 00 00 00 00 00 7e     ....?<.........~
    115a:	7c f8 00 00 00 00 00 00 00 00 7f fe 7c 00 00 00     |...........|...
    116a:	00 00 00 00 00 ff ff fc 00 00 00 00 00 00 00 00     ................
    117a:	ff ff fe 00 00 00 00 00 00 00 00 ff ff fe 00 00     ................
    118a:	00 00 00 00 00 01 ff ef fe 00 00 00 00 00 00 00     ................
    119a:	01 ff cf fe 00 00 00 00 00 00 00 03 ff 07 fe 00     ................
    11aa:	00 00 00 00 00 00 03 fc 07 fe 00 00 00 00 00 00     ................
    11ba:	00 03 f0 03 fe 00 00 00 00 00 00 00 01 80 00 fe     ................
	...
    11d2:	00 00 7e 00 00 00 00 00 00 00 00 00 00 3e 00 00     ..~..........>..
	...
    11ea:	0c 00 00 00 00 00 00 07 80 00 fc 00 00 03 c0 00     ................
    11fa:	00 00 07 80 01 fc 00 00 03 c0 00 00 00 07 80 01     ................
    120a:	fc 00 00 03 c0 00 00 00 07 80 01 e0 00 00 00 1e     ................
    121a:	00 00 00 07 80 01 e0 00 00 00 1e 00 7f e3 f7 9f     ................
    122a:	f9 fd e7 78 7b df c0 ff f7 ff bf fd fd ff 78 7b     ...x{.........x{
    123a:	df c0 ff f7 ff bf fd fd ff 78 7b df c0 f0 f7 87     .........x{.....
    124a:	bc 3d e1 ff 78 7b de 00 f0 f7 87 bc 3d e1 f0 78     .=..x{......=..x
    125a:	7b de 00 00 f7 87 80 3d e1 e0 78 7b de 00 7f f7     {......=..x{....
    126a:	87 9f fd e1 e0 78 7b de 00 ff f7 87 bf fd e1 e0     .....x{.........
    127a:	78 7b de 00 f0 f7 87 bc 3d e1 e0 78 7b de 00 f0     x{......=..x{...
    128a:	f7 87 bc 3d e1 e0 78 7b de 00 f0 f7 87 bc 3d e1     ...=..x{......=.
    129a:	e0 78 7b de 00 ff f7 ff bf fd e1 e0 7f fb df c0     .x{.............
    12aa:	ff f7 ff bf fd e1 e0 7f fb df c0 7c f3 f3 9f 3d     ...........|...=
    12ba:	e1 e0 3e 7b cf c0 00 00 00 00 00 00 00 00 00 00     ..>{............
    12ca:	00 ff ff ff ff ff ff ff ff ff ff c0 ff ff ff ff     ................
    12da:	fd 68 db 11 1a 31 c0 ff ff ff ff fd 2b 5a fb 6a     .h...1......+Z.j
    12ea:	ef c0 ff ff ff ff fd 4b 5b 3b 1a 33 c0 ff ff ff     .......K[;.3....
    12fa:	ff fd 6b 5b db 6a fd c0                             ..k[.j..

00001302 <__ctors_start>:
    1302:	5e 0c       	add	r5, r14
    1304:	5e 0d       	add	r21, r14
    1306:	45 0f       	add	r20, r21
    1308:	bc 16       	cp	r11, r28
    130a:	93 2e       	mov	r9, r19

0000130c <__ctors_end>:
    130c:	c1 16       	cp	r12, r17

0000130e <__dtors_end>:
    130e:	11 24       	eor	r1, r1
    1310:	1f be       	out	0x3f, r1	; 63
    1312:	cf ef       	ldi	r28, 0xFF	; 255
    1314:	d8 e0       	ldi	r29, 0x08	; 8
    1316:	de bf       	out	0x3e, r29	; 62
    1318:	cd bf       	out	0x3d, r28	; 61

0000131a <__do_copy_data>:
    131a:	11 e0       	ldi	r17, 0x01	; 1
    131c:	a0 e0       	ldi	r26, 0x00	; 0
    131e:	b1 e0       	ldi	r27, 0x01	; 1
    1320:	ea ef       	ldi	r30, 0xFA	; 250
    1322:	f6 e6       	ldi	r31, 0x66	; 102
    1324:	02 c0       	rjmp	.+4      	; 0x132a <__do_copy_data+0x10>
    1326:	05 90       	lpm	r0, Z+
    1328:	0d 92       	st	X+, r0
    132a:	a2 3d       	cpi	r26, 0xD2	; 210
    132c:	b1 07       	cpc	r27, r17
    132e:	d9 f7       	brne	.-10     	; 0x1326 <__do_copy_data+0xc>

00001330 <__do_clear_bss>:
    1330:	23 e0       	ldi	r18, 0x03	; 3
    1332:	a2 ed       	ldi	r26, 0xD2	; 210
    1334:	b1 e0       	ldi	r27, 0x01	; 1
    1336:	01 c0       	rjmp	.+2      	; 0x133a <.do_clear_bss_start>

00001338 <.do_clear_bss_loop>:
    1338:	1d 92       	st	X+, r1

0000133a <.do_clear_bss_start>:
    133a:	a1 3d       	cpi	r26, 0xD1	; 209
    133c:	b2 07       	cpc	r27, r18
    133e:	e1 f7       	brne	.-8      	; 0x1338 <.do_clear_bss_loop>

00001340 <__do_global_ctors>:
    1340:	19 e0       	ldi	r17, 0x09	; 9
    1342:	c6 e8       	ldi	r28, 0x86	; 134
    1344:	d9 e0       	ldi	r29, 0x09	; 9
    1346:	04 c0       	rjmp	.+8      	; 0x1350 <__do_global_ctors+0x10>
    1348:	21 97       	sbiw	r28, 0x01	; 1
    134a:	fe 01       	movw	r30, r28
    134c:	0e 94 1e 32 	call	0x643c	; 0x643c <__tablejump2__>
    1350:	c1 38       	cpi	r28, 0x81	; 129
    1352:	d1 07       	cpc	r29, r17
    1354:	c9 f7       	brne	.-14     	; 0x1348 <__do_global_ctors+0x8>
    1356:	0e 94 57 19 	call	0x32ae	; 0x32ae <main>
    135a:	0c 94 70 33 	jmp	0x66e0	; 0x66e0 <__do_global_dtors>

0000135e <__bad_interrupt>:
    135e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00001362 <_ZN7ButtonsL14runChangeFuncsE6ButtonNS_9PressTypeE>:
            if (states[i].pressed)
                return true;
        }

        return false;
    }
    1362:	0f 93       	push	r16
    1364:	1f 93       	push	r17
    1366:	cf 93       	push	r28
    1368:	df 93       	push	r29
    136a:	18 2f       	mov	r17, r24
    136c:	06 2f       	mov	r16, r22
    136e:	c6 ed       	ldi	r28, 0xD6	; 214
    1370:	d1 e0       	ldi	r29, 0x01	; 1
    1372:	e9 91       	ld	r30, Y+
    1374:	f9 91       	ld	r31, Y+
    1376:	30 97       	sbiw	r30, 0x00	; 0
    1378:	19 f0       	breq	.+6      	; 0x1380 <_ZN7ButtonsL14runChangeFuncsE6ButtonNS_9PressTypeE+0x1e>
    137a:	60 2f       	mov	r22, r16
    137c:	81 2f       	mov	r24, r17
    137e:	09 95       	icall
    1380:	81 e0       	ldi	r24, 0x01	; 1
    1382:	ce 3d       	cpi	r28, 0xDE	; 222
    1384:	d8 07       	cpc	r29, r24
    1386:	a9 f7       	brne	.-22     	; 0x1372 <_ZN7ButtonsL14runChangeFuncsE6ButtonNS_9PressTypeE+0x10>
    1388:	df 91       	pop	r29
    138a:	cf 91       	pop	r28
    138c:	1f 91       	pop	r17
    138e:	0f 91       	pop	r16
    1390:	08 95       	ret

00001392 <_ZN7ButtonsL12updateButtonE6ButtonRNS_11ButtonStateEh>:
    1392:	cf 92       	push	r12
    1394:	df 92       	push	r13
    1396:	ef 92       	push	r14
    1398:	ff 92       	push	r15
    139a:	0f 93       	push	r16
    139c:	1f 93       	push	r17
    139e:	cf 93       	push	r28
    13a0:	df 93       	push	r29
    13a2:	08 2f       	mov	r16, r24
    13a4:	eb 01       	movw	r28, r22
    13a6:	84 2f       	mov	r24, r20
    13a8:	0e 94 b7 1b 	call	0x376e	; 0x376e <digitalRead>
    13ac:	11 e0       	ldi	r17, 0x01	; 1
    13ae:	89 2b       	or	r24, r25
    13b0:	09 f0       	breq	.+2      	; 0x13b4 <_ZN7ButtonsL12updateButtonE6ButtonRNS_11ButtonStateEh+0x22>
    13b2:	10 e0       	ldi	r17, 0x00	; 0
    13b4:	8c 81       	ldd	r24, Y+4	; 0x04
    13b6:	18 17       	cp	r17, r24
    13b8:	31 f0       	breq	.+12     	; 0x13c6 <_ZN7ButtonsL12updateButtonE6ButtonRNS_11ButtonStateEh+0x34>
    13ba:	0e 94 53 1a 	call	0x34a6	; 0x34a6 <millis>
    13be:	68 83       	st	Y, r22
    13c0:	79 83       	std	Y+1, r23	; 0x01
    13c2:	8a 83       	std	Y+2, r24	; 0x02
    13c4:	9b 83       	std	Y+3, r25	; 0x03
    13c6:	1c 83       	std	Y+4, r17	; 0x04
    13c8:	8d 81       	ldd	r24, Y+5	; 0x05
    13ca:	18 17       	cp	r17, r24
    13cc:	b9 f1       	breq	.+110    	; 0x143c <_ZN7ButtonsL12updateButtonE6ButtonRNS_11ButtonStateEh+0xaa>
    13ce:	0e 94 53 1a 	call	0x34a6	; 0x34a6 <millis>
    13d2:	c8 80       	ld	r12, Y
    13d4:	d9 80       	ldd	r13, Y+1	; 0x01
    13d6:	ea 80       	ldd	r14, Y+2	; 0x02
    13d8:	fb 80       	ldd	r15, Y+3	; 0x03
    13da:	dc 01       	movw	r26, r24
    13dc:	cb 01       	movw	r24, r22
    13de:	8c 19       	sub	r24, r12
    13e0:	9d 09       	sbc	r25, r13
    13e2:	ae 09       	sbc	r26, r14
    13e4:	bf 09       	sbc	r27, r15
    13e6:	84 36       	cpi	r24, 0x64	; 100
    13e8:	91 05       	cpc	r25, r1
    13ea:	a1 05       	cpc	r26, r1
    13ec:	b1 05       	cpc	r27, r1
    13ee:	30 f1       	brcs	.+76     	; 0x143c <_ZN7ButtonsL12updateButtonE6ButtonRNS_11ButtonStateEh+0xaa>
    13f0:	1d 83       	std	Y+5, r17	; 0x05
    13f2:	ce 80       	ldd	r12, Y+6	; 0x06
    13f4:	df 80       	ldd	r13, Y+7	; 0x07
    13f6:	e8 84       	ldd	r14, Y+8	; 0x08
    13f8:	f9 84       	ldd	r15, Y+9	; 0x09
    13fa:	0e 94 53 1a 	call	0x34a6	; 0x34a6 <millis>
    13fe:	6e 83       	std	Y+6, r22	; 0x06
    1400:	7f 83       	std	Y+7, r23	; 0x07
    1402:	88 87       	std	Y+8, r24	; 0x08
    1404:	99 87       	std	Y+9, r25	; 0x09
    1406:	60 93 d2 01 	sts	0x01D2, r22	; 0x8001d2 <__data_end>
    140a:	70 93 d3 01 	sts	0x01D3, r23	; 0x8001d3 <__data_end+0x1>
    140e:	80 93 d4 01 	sts	0x01D4, r24	; 0x8001d4 <__data_end+0x2>
    1412:	90 93 d5 01 	sts	0x01D5, r25	; 0x8001d5 <__data_end+0x3>
    1416:	2d 81       	ldd	r18, Y+5	; 0x05
    1418:	21 11       	cpse	r18, r1
    141a:	13 c0       	rjmp	.+38     	; 0x1442 <_ZN7ButtonsL12updateButtonE6ButtonRNS_11ButtonStateEh+0xb0>
    141c:	dc 01       	movw	r26, r24
    141e:	cb 01       	movw	r24, r22
    1420:	8c 19       	sub	r24, r12
    1422:	9d 09       	sbc	r25, r13
    1424:	ae 09       	sbc	r26, r14
    1426:	bf 09       	sbc	r27, r15
    1428:	84 3f       	cpi	r24, 0xF4	; 244
    142a:	21 e0       	ldi	r18, 0x01	; 1
    142c:	92 07       	cpc	r25, r18
    142e:	a1 05       	cpc	r26, r1
    1430:	b1 05       	cpc	r27, r1
    1432:	20 f5       	brcc	.+72     	; 0x147c <_ZN7ButtonsL12updateButtonE6ButtonRNS_11ButtonStateEh+0xea>
    1434:	60 e0       	ldi	r22, 0x00	; 0
    1436:	80 2f       	mov	r24, r16
    1438:	0e 94 b1 09 	call	0x1362	; 0x1362 <_ZN7ButtonsL14runChangeFuncsE6ButtonNS_9PressTypeE>
    143c:	8d 81       	ldd	r24, Y+5	; 0x05
    143e:	88 23       	and	r24, r24
    1440:	21 f1       	breq	.+72     	; 0x148a <_ZN7ButtonsL12updateButtonE6ButtonRNS_11ButtonStateEh+0xf8>
    1442:	0e 94 53 1a 	call	0x34a6	; 0x34a6 <millis>
    1446:	ce 80       	ldd	r12, Y+6	; 0x06
    1448:	df 80       	ldd	r13, Y+7	; 0x07
    144a:	e8 84       	ldd	r14, Y+8	; 0x08
    144c:	f9 84       	ldd	r15, Y+9	; 0x09
    144e:	dc 01       	movw	r26, r24
    1450:	cb 01       	movw	r24, r22
    1452:	8c 19       	sub	r24, r12
    1454:	9d 09       	sbc	r25, r13
    1456:	ae 09       	sbc	r26, r14
    1458:	bf 09       	sbc	r27, r15
    145a:	80 3d       	cpi	r24, 0xD0	; 208
    145c:	97 40       	sbci	r25, 0x07	; 7
    145e:	a1 05       	cpc	r26, r1
    1460:	b1 05       	cpc	r27, r1
    1462:	98 f0       	brcs	.+38     	; 0x148a <_ZN7ButtonsL12updateButtonE6ButtonRNS_11ButtonStateEh+0xf8>
    1464:	62 e0       	ldi	r22, 0x02	; 2
    1466:	80 2f       	mov	r24, r16
    1468:	df 91       	pop	r29
    146a:	cf 91       	pop	r28
    146c:	1f 91       	pop	r17
    146e:	0f 91       	pop	r16
    1470:	ff 90       	pop	r15
    1472:	ef 90       	pop	r14
    1474:	df 90       	pop	r13
    1476:	cf 90       	pop	r12
    1478:	0c 94 b1 09 	jmp	0x1362	; 0x1362 <_ZN7ButtonsL14runChangeFuncsE6ButtonNS_9PressTypeE>
    147c:	80 3d       	cpi	r24, 0xD0	; 208
    147e:	97 40       	sbci	r25, 0x07	; 7
    1480:	a1 05       	cpc	r26, r1
    1482:	b1 05       	cpc	r27, r1
    1484:	10 f4       	brcc	.+4      	; 0x148a <_ZN7ButtonsL12updateButtonE6ButtonRNS_11ButtonStateEh+0xf8>
    1486:	61 e0       	ldi	r22, 0x01	; 1
    1488:	d6 cf       	rjmp	.-84     	; 0x1436 <_ZN7ButtonsL12updateButtonE6ButtonRNS_11ButtonStateEh+0xa4>
    148a:	df 91       	pop	r29
    148c:	cf 91       	pop	r28
    148e:	1f 91       	pop	r17
    1490:	0f 91       	pop	r16
    1492:	ff 90       	pop	r15
    1494:	ef 90       	pop	r14
    1496:	df 90       	pop	r13
    1498:	cf 90       	pop	r12
    149a:	08 95       	ret

0000149c <_ZN7Buttons6updateEv>:
    149c:	42 e0       	ldi	r20, 0x02	; 2
    149e:	6e ed       	ldi	r22, 0xDE	; 222
    14a0:	71 e0       	ldi	r23, 0x01	; 1
    14a2:	80 e0       	ldi	r24, 0x00	; 0
    14a4:	0e 94 c9 09 	call	0x1392	; 0x1392 <_ZN7ButtonsL12updateButtonE6ButtonRNS_11ButtonStateEh>
    14a8:	44 e0       	ldi	r20, 0x04	; 4
    14aa:	68 ee       	ldi	r22, 0xE8	; 232
    14ac:	71 e0       	ldi	r23, 0x01	; 1
    14ae:	81 e0       	ldi	r24, 0x01	; 1
    14b0:	0e 94 c9 09 	call	0x1392	; 0x1392 <_ZN7ButtonsL12updateButtonE6ButtonRNS_11ButtonStateEh>
    14b4:	43 e0       	ldi	r20, 0x03	; 3
    14b6:	62 ef       	ldi	r22, 0xF2	; 242
    14b8:	71 e0       	ldi	r23, 0x01	; 1
    14ba:	82 e0       	ldi	r24, 0x02	; 2
    14bc:	0e 94 c9 09 	call	0x1392	; 0x1392 <_ZN7ButtonsL12updateButtonE6ButtonRNS_11ButtonStateEh>
    14c0:	45 e0       	ldi	r20, 0x05	; 5
    14c2:	6c ef       	ldi	r22, 0xFC	; 252
    14c4:	71 e0       	ldi	r23, 0x01	; 1
    14c6:	83 e0       	ldi	r24, 0x03	; 3
    14c8:	0c 94 c9 09 	jmp	0x1392	; 0x1392 <_ZN7ButtonsL12updateButtonE6ButtonRNS_11ButtonStateEh>

000014cc <_ZN7Buttons18registerChangeFuncEPFv6ButtonNS_9PressTypeEE>:

    void registerChangeFunc(ChangeFunc func) {
    14cc:	e6 ed       	ldi	r30, 0xD6	; 214
    14ce:	f1 e0       	ldi	r31, 0x01	; 1
    14d0:	20 e0       	ldi	r18, 0x00	; 0
    14d2:	30 e0       	ldi	r19, 0x00	; 0
        for (uint8_t i = 0; i < BUTTON_HOOKS_MAX; i++) {
            if (changeFuncs[i] == nullptr) {
    14d4:	41 91       	ld	r20, Z+
    14d6:	51 91       	ld	r21, Z+
    14d8:	45 2b       	or	r20, r21
    14da:	41 f4       	brne	.+16     	; 0x14ec <_ZN7Buttons18registerChangeFuncEPFv6ButtonNS_9PressTypeEE+0x20>
                changeFuncs[i] = func;
    14dc:	22 0f       	add	r18, r18
    14de:	33 1f       	adc	r19, r19
    14e0:	f9 01       	movw	r30, r18
    14e2:	ea 52       	subi	r30, 0x2A	; 42
    14e4:	fe 4f       	sbci	r31, 0xFE	; 254
    14e6:	91 83       	std	Z+1, r25	; 0x01
    14e8:	80 83       	st	Z, r24
                return;
    14ea:	08 95       	ret
    14ec:	2f 5f       	subi	r18, 0xFF	; 255
    14ee:	3f 4f       	sbci	r19, 0xFF	; 255

        return false;
    }

    void registerChangeFunc(ChangeFunc func) {
        for (uint8_t i = 0; i < BUTTON_HOOKS_MAX; i++) {
    14f0:	24 30       	cpi	r18, 0x04	; 4
    14f2:	31 05       	cpc	r19, r1
    14f4:	79 f7       	brne	.-34     	; 0x14d4 <_ZN7Buttons18registerChangeFuncEPFv6ButtonNS_9PressTypeEE+0x8>
    14f6:	08 95       	ret

000014f8 <_ZN8Channels17getSynthRegisterBEh>:
};


namespace Channels {
    const uint16_t getSynthRegisterB(uint8_t index) {
        return pgm_read_word_near(channelTable + index);
    14f8:	e8 2f       	mov	r30, r24
    14fa:	f0 e0       	ldi	r31, 0x00	; 0
    14fc:	ee 0f       	add	r30, r30
    14fe:	ff 1f       	adc	r31, r31
    1500:	e8 5a       	subi	r30, 0xA8	; 168
    1502:	fe 4f       	sbci	r31, 0xFE	; 254
    1504:	85 91       	lpm	r24, Z+
    1506:	94 91       	lpm	r25, Z
    }
    1508:	08 95       	ret

0000150a <_ZN8Channels12getFrequencyEh>:

    const uint16_t getFrequency(uint8_t index) {
        return pgm_read_word_near(channelFreqTable + index);
    150a:	e8 2f       	mov	r30, r24
    150c:	f0 e0       	ldi	r31, 0x00	; 0
    150e:	ee 0f       	add	r30, r30
    1510:	ff 1f       	adc	r31, r31
    1512:	e8 50       	subi	r30, 0x08	; 8
    1514:	ff 4f       	sbci	r31, 0xFF	; 255
    1516:	85 91       	lpm	r24, Z+
    1518:	94 91       	lpm	r25, Z
    }
    151a:	08 95       	ret

0000151c <_ZN8Channels7getNameEh>:

    // Returns channel name as a string.
    //      dest[] must be at least 3-bytes.
    char nameBuffer[3];
    const char *getName(uint8_t index) {
        uint8_t encodedName = pgm_read_byte_near(channelNames + index);
    151c:	e8 2f       	mov	r30, r24
    151e:	f0 e0       	ldi	r31, 0x00	; 0
    1520:	e8 53       	subi	r30, 0x38	; 56
    1522:	ff 4f       	sbci	r31, 0xFF	; 255
    1524:	e4 91       	lpm	r30, Z

        nameBuffer[0] = 65 + (encodedName >> 3);
    1526:	a6 e0       	ldi	r26, 0x06	; 6
    1528:	b2 e0       	ldi	r27, 0x02	; 2
    152a:	8e 2f       	mov	r24, r30
    152c:	86 95       	lsr	r24
    152e:	86 95       	lsr	r24
    1530:	86 95       	lsr	r24
    1532:	8f 5b       	subi	r24, 0xBF	; 191
    1534:	8c 93       	st	X, r24
        nameBuffer[1] = 48 + (encodedName & (255 >> (8 - 3))) + 1;
    1536:	e7 70       	andi	r30, 0x07	; 7
    1538:	ef 5c       	subi	r30, 0xCF	; 207
    153a:	11 96       	adiw	r26, 0x01	; 1
    153c:	ec 93       	st	X, r30
    153e:	11 97       	sbiw	r26, 0x01	; 1
        nameBuffer[2] = '\0';
    1540:	12 96       	adiw	r26, 0x02	; 2
    1542:	1c 92       	st	X, r1
    1544:	12 97       	sbiw	r26, 0x02	; 2

        return nameBuffer;
    }
    1546:	cd 01       	movw	r24, r26
    1548:	08 95       	ret

0000154a <_ZN8Channels15getOrderedIndexEh>:

    const uint8_t getOrderedIndex(uint8_t index) {
        return pgm_read_byte_near(channelFreqOrderedIndex + index);
    154a:	e8 2f       	mov	r30, r24
    154c:	f0 e0       	ldi	r31, 0x00	; 0
    154e:	e8 56       	subi	r30, 0x68	; 104
    1550:	ff 4f       	sbci	r31, 0xFF	; 255
    1552:	84 91       	lpm	r24, Z
    }
    1554:	08 95       	ret

00001556 <_ZN8Channels24getOrderedIndexFromIndexEh>:

    const uint8_t getOrderedIndexFromIndex(uint8_t index) {
        return pgm_read_byte_near(channelIndexToOrderedIndex + index);
    1556:	e8 2f       	mov	r30, r24
    1558:	f0 e0       	ldi	r31, 0x00	; 0
    155a:	e8 59       	subi	r30, 0x98	; 152
    155c:	ff 4f       	sbci	r31, 0xFF	; 255
    155e:	84 91       	lpm	r24, Z
    }
    1560:	08 95       	ret

00001562 <_Z14PSTRtoBuffer_PPKc>:
#include "pstr_helper.h"
#include <avr/pgmspace.h>

char PSTR2_BUFFER[PSTR2_BUFFER_SIZE];

char *PSTRtoBuffer_P(PGM_P str) { 
    1562:	fc 01       	movw	r30, r24
    1564:	a9 e0       	ldi	r26, 0x09	; 9
    1566:	b2 e0       	ldi	r27, 0x02	; 2
    uint8_t i = 0;
    1568:	90 e0       	ldi	r25, 0x00	; 0
    
    for (
        uint8_t c = '\0';
        c = pgm_read_byte(str + i) && i < sizeof(PSTR2_BUFFER); 
    156a:	84 91       	lpm	r24, Z
    156c:	88 23       	and	r24, r24
    156e:	51 f0       	breq	.+20     	; 0x1584 <_Z14PSTRtoBuffer_PPKc+0x22>
    1570:	9f 01       	movw	r18, r30
    1572:	2f 5f       	subi	r18, 0xFF	; 255
    1574:	3f 4f       	sbci	r19, 0xFF	; 255
    1576:	90 33       	cpi	r25, 0x30	; 48
    1578:	29 f0       	breq	.+10     	; 0x1584 <_Z14PSTRtoBuffer_PPKc+0x22>
        i++
    ) {
        PSTR2_BUFFER[i] = pgm_read_byte(str + i);
    157a:	e4 91       	lpm	r30, Z
    157c:	ed 93       	st	X+, r30
char PSTR2_BUFFER[PSTR2_BUFFER_SIZE];

char *PSTRtoBuffer_P(PGM_P str) { 
    uint8_t i = 0;
    
    for (
    157e:	9f 5f       	subi	r25, 0xFF	; 255
    1580:	f9 01       	movw	r30, r18
    1582:	f3 cf       	rjmp	.-26     	; 0x156a <_Z14PSTRtoBuffer_PPKc+0x8>
        i++
    ) {
        PSTR2_BUFFER[i] = pgm_read_byte(str + i);
    }
    
    PSTR2_BUFFER[i] = '\0'; // Loop drops early so add in finishing terminator.
    1584:	e9 2f       	mov	r30, r25
    1586:	f0 e0       	ldi	r31, 0x00	; 0
    1588:	e7 5f       	subi	r30, 0xF7	; 247
    158a:	fd 4f       	sbci	r31, 0xFD	; 253
    158c:	10 82       	st	Z, r1
    return PSTR2_BUFFER;
    158e:	89 e0       	ldi	r24, 0x09	; 9
    1590:	92 e0       	ldi	r25, 0x02	; 2
    1592:	08 95       	ret

00001594 <_ZN8Receiver10setChannelEh>:
    }

#ifdef USE_DIVERSITY
    void setDiversityMode(DiversityMode mode) {
        EepromSettings.diversityMode = mode;
        switchDiversity();
    1594:	cf 93       	push	r28
    1596:	c8 2f       	mov	r28, r24
    1598:	0e 94 7c 0a 	call	0x14f8	; 0x14f8 <_ZN8Channels17getSynthRegisterBEh>
    159c:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <_ZN11ReceiverSpi17setSynthRegisterBEj>
    15a0:	80 e4       	ldi	r24, 0x40	; 64
    15a2:	92 e0       	ldi	r25, 0x02	; 2
    15a4:	0e 94 67 16 	call	0x2cce	; 0x2cce <_ZN5Timer5resetEv>
    15a8:	c0 93 85 02 	sts	0x0285, r28	; 0x800285 <_ZN8Receiver13activeChannelE>
    15ac:	cf 91       	pop	r28
    15ae:	08 95       	ret

000015b0 <_ZN8Receiver17setActiveReceiverENS_10ReceiverIdE>:
    15b0:	88 23       	and	r24, r24
    15b2:	19 f0       	breq	.+6      	; 0x15ba <_ZN8Receiver17setActiveReceiverENS_10ReceiverIdE+0xa>
    15b4:	2e e0       	ldi	r18, 0x0E	; 14
    15b6:	4f e0       	ldi	r20, 0x0F	; 15
    15b8:	02 c0       	rjmp	.+4      	; 0x15be <_ZN8Receiver17setActiveReceiverENS_10ReceiverIdE+0xe>
    15ba:	2f e0       	ldi	r18, 0x0F	; 15
    15bc:	4e e0       	ldi	r20, 0x0E	; 14
    15be:	50 e0       	ldi	r21, 0x00	; 0
    15c0:	fa 01       	movw	r30, r20
    15c2:	e7 5f       	subi	r30, 0xF7	; 247
    15c4:	f6 4f       	sbci	r31, 0xF6	; 246
    15c6:	94 91       	lpm	r25, Z
    15c8:	fa 01       	movw	r30, r20
    15ca:	eb 50       	subi	r30, 0x0B	; 11
    15cc:	f7 4f       	sbci	r31, 0xF7	; 247
    15ce:	44 91       	lpm	r20, Z
    15d0:	e2 2f       	mov	r30, r18
    15d2:	f0 e0       	ldi	r31, 0x00	; 0
    15d4:	eb 50       	subi	r30, 0x0B	; 11
    15d6:	f7 4f       	sbci	r31, 0xF7	; 247
    15d8:	24 91       	lpm	r18, Z
    15da:	e9 2f       	mov	r30, r25
    15dc:	f0 e0       	ldi	r31, 0x00	; 0
    15de:	ee 0f       	add	r30, r30
    15e0:	ff 1f       	adc	r31, r31
    15e2:	e9 5d       	subi	r30, 0xD9	; 217
    15e4:	f6 4f       	sbci	r31, 0xF6	; 246
    15e6:	a5 91       	lpm	r26, Z+
    15e8:	b4 91       	lpm	r27, Z
    15ea:	ec 91       	ld	r30, X
    15ec:	4e 2b       	or	r20, r30
    15ee:	e2 2f       	mov	r30, r18
    15f0:	e0 95       	com	r30
    15f2:	e4 23       	and	r30, r20
    15f4:	ec 93       	st	X, r30
    15f6:	80 93 86 02 	sts	0x0286, r24	; 0x800286 <_ZN8Receiver14activeReceiverE>
    15fa:	08 95       	ret

000015fc <_ZN8Receiver12isRssiStableEv>:
    15fc:	80 e4       	ldi	r24, 0x40	; 64
    15fe:	92 e0       	ldi	r25, 0x02	; 2
    1600:	0c 94 48 16 	jmp	0x2c90	; 0x2c90 <_ZN5Timer9hasTickedEv>

00001604 <_ZN8Receiver10updateRssiEv>:
    1604:	af 92       	push	r10
    1606:	bf 92       	push	r11
    1608:	cf 92       	push	r12
    160a:	df 92       	push	r13
    160c:	ef 92       	push	r14
    160e:	ff 92       	push	r15
    1610:	0f 93       	push	r16
    1612:	1f 93       	push	r17
    1614:	cf 93       	push	r28
    1616:	84 e1       	ldi	r24, 0x14	; 20
    1618:	0e 94 06 1b 	call	0x360c	; 0x360c <analogRead>
    161c:	84 e1       	ldi	r24, 0x14	; 20
    161e:	0e 94 06 1b 	call	0x360c	; 0x360c <analogRead>
    1622:	90 93 83 02 	sts	0x0283, r25	; 0x800283 <_ZN8Receiver8rssiARawE+0x1>
    1626:	80 93 82 02 	sts	0x0282, r24	; 0x800282 <_ZN8Receiver8rssiARawE>
    162a:	85 e1       	ldi	r24, 0x15	; 21
    162c:	0e 94 06 1b 	call	0x360c	; 0x360c <analogRead>
    1630:	85 e1       	ldi	r24, 0x15	; 21
    1632:	0e 94 06 1b 	call	0x360c	; 0x360c <analogRead>
    1636:	90 93 68 02 	sts	0x0268, r25	; 0x800268 <_ZN8Receiver8rssiBRawE+0x1>
    163a:	80 93 67 02 	sts	0x0267, r24	; 0x800267 <_ZN8Receiver8rssiBRawE>
    163e:	e0 90 91 02 	lds	r14, 0x0291	; 0x800291 <EepromSettings+0xa>
    1642:	f0 90 92 02 	lds	r15, 0x0292	; 0x800292 <EepromSettings+0xb>
    1646:	00 e0       	ldi	r16, 0x00	; 0
    1648:	10 e0       	ldi	r17, 0x00	; 0
    164a:	20 91 8f 02 	lds	r18, 0x028F	; 0x80028f <EepromSettings+0x8>
    164e:	30 91 90 02 	lds	r19, 0x0290	; 0x800290 <EepromSettings+0x9>
    1652:	40 e0       	ldi	r20, 0x00	; 0
    1654:	50 e0       	ldi	r21, 0x00	; 0
    1656:	60 91 82 02 	lds	r22, 0x0282	; 0x800282 <_ZN8Receiver8rssiARawE>
    165a:	70 91 83 02 	lds	r23, 0x0283	; 0x800283 <_ZN8Receiver8rssiARawE+0x1>
    165e:	80 e0       	ldi	r24, 0x00	; 0
    1660:	90 e0       	ldi	r25, 0x00	; 0
    1662:	1f 92       	push	r1
    1664:	1f 92       	push	r1
    1666:	1f 92       	push	r1
    1668:	c4 e6       	ldi	r28, 0x64	; 100
    166a:	cf 93       	push	r28
    166c:	a1 2c       	mov	r10, r1
    166e:	b1 2c       	mov	r11, r1
    1670:	65 01       	movw	r12, r10
    1672:	0e 94 e0 1b 	call	0x37c0	; 0x37c0 <_Z3maplllll>
    1676:	0f 90       	pop	r0
    1678:	0f 90       	pop	r0
    167a:	0f 90       	pop	r0
    167c:	0f 90       	pop	r0
    167e:	97 fd       	sbrc	r25, 7
    1680:	3e c0       	rjmp	.+124    	; 0x16fe <_ZN8Receiver10updateRssiEv+0xfa>
    1682:	e0 90 91 02 	lds	r14, 0x0291	; 0x800291 <EepromSettings+0xa>
    1686:	f0 90 92 02 	lds	r15, 0x0292	; 0x800292 <EepromSettings+0xb>
    168a:	00 e0       	ldi	r16, 0x00	; 0
    168c:	10 e0       	ldi	r17, 0x00	; 0
    168e:	20 91 8f 02 	lds	r18, 0x028F	; 0x80028f <EepromSettings+0x8>
    1692:	30 91 90 02 	lds	r19, 0x0290	; 0x800290 <EepromSettings+0x9>
    1696:	40 e0       	ldi	r20, 0x00	; 0
    1698:	50 e0       	ldi	r21, 0x00	; 0
    169a:	60 91 82 02 	lds	r22, 0x0282	; 0x800282 <_ZN8Receiver8rssiARawE>
    169e:	70 91 83 02 	lds	r23, 0x0283	; 0x800283 <_ZN8Receiver8rssiARawE+0x1>
    16a2:	80 e0       	ldi	r24, 0x00	; 0
    16a4:	90 e0       	ldi	r25, 0x00	; 0
    16a6:	1f 92       	push	r1
    16a8:	1f 92       	push	r1
    16aa:	1f 92       	push	r1
    16ac:	cf 93       	push	r28
    16ae:	0e 94 e0 1b 	call	0x37c0	; 0x37c0 <_Z3maplllll>
    16b2:	0f 90       	pop	r0
    16b4:	0f 90       	pop	r0
    16b6:	0f 90       	pop	r0
    16b8:	0f 90       	pop	r0
    16ba:	65 36       	cpi	r22, 0x65	; 101
    16bc:	71 05       	cpc	r23, r1
    16be:	81 05       	cpc	r24, r1
    16c0:	91 05       	cpc	r25, r1
    16c2:	fc f4       	brge	.+62     	; 0x1702 <_ZN8Receiver10updateRssiEv+0xfe>
    16c4:	e0 90 91 02 	lds	r14, 0x0291	; 0x800291 <EepromSettings+0xa>
    16c8:	f0 90 92 02 	lds	r15, 0x0292	; 0x800292 <EepromSettings+0xb>
    16cc:	00 e0       	ldi	r16, 0x00	; 0
    16ce:	10 e0       	ldi	r17, 0x00	; 0
    16d0:	20 91 8f 02 	lds	r18, 0x028F	; 0x80028f <EepromSettings+0x8>
    16d4:	30 91 90 02 	lds	r19, 0x0290	; 0x800290 <EepromSettings+0x9>
    16d8:	40 e0       	ldi	r20, 0x00	; 0
    16da:	50 e0       	ldi	r21, 0x00	; 0
    16dc:	60 91 82 02 	lds	r22, 0x0282	; 0x800282 <_ZN8Receiver8rssiARawE>
    16e0:	70 91 83 02 	lds	r23, 0x0283	; 0x800283 <_ZN8Receiver8rssiARawE+0x1>
    16e4:	80 e0       	ldi	r24, 0x00	; 0
    16e6:	90 e0       	ldi	r25, 0x00	; 0
    16e8:	1f 92       	push	r1
    16ea:	1f 92       	push	r1
    16ec:	1f 92       	push	r1
    16ee:	cf 93       	push	r28
    16f0:	0e 94 e0 1b 	call	0x37c0	; 0x37c0 <_Z3maplllll>
    16f4:	0f 90       	pop	r0
    16f6:	0f 90       	pop	r0
    16f8:	0f 90       	pop	r0
    16fa:	0f 90       	pop	r0
    16fc:	03 c0       	rjmp	.+6      	; 0x1704 <_ZN8Receiver10updateRssiEv+0x100>
    16fe:	60 e0       	ldi	r22, 0x00	; 0
    1700:	01 c0       	rjmp	.+2      	; 0x1704 <_ZN8Receiver10updateRssiEv+0x100>
    1702:	64 e6       	ldi	r22, 0x64	; 100
    1704:	60 93 84 02 	sts	0x0284, r22	; 0x800284 <_ZN8Receiver5rssiAE>
    1708:	e0 90 96 02 	lds	r14, 0x0296	; 0x800296 <EepromSettings+0xf>
    170c:	f0 90 97 02 	lds	r15, 0x0297	; 0x800297 <EepromSettings+0x10>
    1710:	00 e0       	ldi	r16, 0x00	; 0
    1712:	10 e0       	ldi	r17, 0x00	; 0
    1714:	20 91 94 02 	lds	r18, 0x0294	; 0x800294 <EepromSettings+0xd>
    1718:	30 91 95 02 	lds	r19, 0x0295	; 0x800295 <EepromSettings+0xe>
    171c:	40 e0       	ldi	r20, 0x00	; 0
    171e:	50 e0       	ldi	r21, 0x00	; 0
    1720:	60 91 67 02 	lds	r22, 0x0267	; 0x800267 <_ZN8Receiver8rssiBRawE>
    1724:	70 91 68 02 	lds	r23, 0x0268	; 0x800268 <_ZN8Receiver8rssiBRawE+0x1>
    1728:	80 e0       	ldi	r24, 0x00	; 0
    172a:	90 e0       	ldi	r25, 0x00	; 0
    172c:	1f 92       	push	r1
    172e:	1f 92       	push	r1
    1730:	1f 92       	push	r1
    1732:	c4 e6       	ldi	r28, 0x64	; 100
    1734:	cf 93       	push	r28
    1736:	a1 2c       	mov	r10, r1
    1738:	b1 2c       	mov	r11, r1
    173a:	65 01       	movw	r12, r10
    173c:	0e 94 e0 1b 	call	0x37c0	; 0x37c0 <_Z3maplllll>
    1740:	0f 90       	pop	r0
    1742:	0f 90       	pop	r0
    1744:	0f 90       	pop	r0
    1746:	0f 90       	pop	r0
    1748:	97 fd       	sbrc	r25, 7
    174a:	3e c0       	rjmp	.+124    	; 0x17c8 <_ZN8Receiver10updateRssiEv+0x1c4>
    174c:	e0 90 96 02 	lds	r14, 0x0296	; 0x800296 <EepromSettings+0xf>
    1750:	f0 90 97 02 	lds	r15, 0x0297	; 0x800297 <EepromSettings+0x10>
    1754:	00 e0       	ldi	r16, 0x00	; 0
    1756:	10 e0       	ldi	r17, 0x00	; 0
    1758:	20 91 94 02 	lds	r18, 0x0294	; 0x800294 <EepromSettings+0xd>
    175c:	30 91 95 02 	lds	r19, 0x0295	; 0x800295 <EepromSettings+0xe>
    1760:	40 e0       	ldi	r20, 0x00	; 0
    1762:	50 e0       	ldi	r21, 0x00	; 0
    1764:	60 91 67 02 	lds	r22, 0x0267	; 0x800267 <_ZN8Receiver8rssiBRawE>
    1768:	70 91 68 02 	lds	r23, 0x0268	; 0x800268 <_ZN8Receiver8rssiBRawE+0x1>
    176c:	80 e0       	ldi	r24, 0x00	; 0
    176e:	90 e0       	ldi	r25, 0x00	; 0
    1770:	1f 92       	push	r1
    1772:	1f 92       	push	r1
    1774:	1f 92       	push	r1
    1776:	cf 93       	push	r28
    1778:	0e 94 e0 1b 	call	0x37c0	; 0x37c0 <_Z3maplllll>
    177c:	0f 90       	pop	r0
    177e:	0f 90       	pop	r0
    1780:	0f 90       	pop	r0
    1782:	0f 90       	pop	r0
    1784:	65 36       	cpi	r22, 0x65	; 101
    1786:	71 05       	cpc	r23, r1
    1788:	81 05       	cpc	r24, r1
    178a:	91 05       	cpc	r25, r1
    178c:	fc f4       	brge	.+62     	; 0x17cc <_ZN8Receiver10updateRssiEv+0x1c8>
    178e:	e0 90 96 02 	lds	r14, 0x0296	; 0x800296 <EepromSettings+0xf>
    1792:	f0 90 97 02 	lds	r15, 0x0297	; 0x800297 <EepromSettings+0x10>
    1796:	00 e0       	ldi	r16, 0x00	; 0
    1798:	10 e0       	ldi	r17, 0x00	; 0
    179a:	20 91 94 02 	lds	r18, 0x0294	; 0x800294 <EepromSettings+0xd>
    179e:	30 91 95 02 	lds	r19, 0x0295	; 0x800295 <EepromSettings+0xe>
    17a2:	40 e0       	ldi	r20, 0x00	; 0
    17a4:	50 e0       	ldi	r21, 0x00	; 0
    17a6:	60 91 67 02 	lds	r22, 0x0267	; 0x800267 <_ZN8Receiver8rssiBRawE>
    17aa:	70 91 68 02 	lds	r23, 0x0268	; 0x800268 <_ZN8Receiver8rssiBRawE+0x1>
    17ae:	80 e0       	ldi	r24, 0x00	; 0
    17b0:	90 e0       	ldi	r25, 0x00	; 0
    17b2:	1f 92       	push	r1
    17b4:	1f 92       	push	r1
    17b6:	1f 92       	push	r1
    17b8:	cf 93       	push	r28
    17ba:	0e 94 e0 1b 	call	0x37c0	; 0x37c0 <_Z3maplllll>
    17be:	0f 90       	pop	r0
    17c0:	0f 90       	pop	r0
    17c2:	0f 90       	pop	r0
    17c4:	0f 90       	pop	r0
    17c6:	03 c0       	rjmp	.+6      	; 0x17ce <_ZN8Receiver10updateRssiEv+0x1ca>
    17c8:	60 e0       	ldi	r22, 0x00	; 0
    17ca:	01 c0       	rjmp	.+2      	; 0x17ce <_ZN8Receiver10updateRssiEv+0x1ca>
    17cc:	64 e6       	ldi	r22, 0x64	; 100
    17ce:	60 93 69 02 	sts	0x0269, r22	; 0x800269 <_ZN8Receiver5rssiBE>
    17d2:	89 e3       	ldi	r24, 0x39	; 57
    17d4:	92 e0       	ldi	r25, 0x02	; 2
    17d6:	0e 94 48 16 	call	0x2c90	; 0x2c90 <_ZN5Timer9hasTickedEv>
    17da:	88 23       	and	r24, r24
    17dc:	d1 f0       	breq	.+52     	; 0x1812 <_ZN8Receiver10updateRssiEv+0x20e>
    17de:	ea e6       	ldi	r30, 0x6A	; 106
    17e0:	f2 e0       	ldi	r31, 0x02	; 2
    17e2:	af e4       	ldi	r26, 0x4F	; 79
    17e4:	b2 e0       	ldi	r27, 0x02	; 2
    17e6:	81 81       	ldd	r24, Z+1	; 0x01
    17e8:	81 93       	st	Z+, r24
    17ea:	11 96       	adiw	r26, 0x01	; 1
    17ec:	8c 91       	ld	r24, X
    17ee:	11 97       	sbiw	r26, 0x01	; 1
    17f0:	8d 93       	st	X+, r24
    17f2:	82 e0       	ldi	r24, 0x02	; 2
    17f4:	e1 38       	cpi	r30, 0x81	; 129
    17f6:	f8 07       	cpc	r31, r24
    17f8:	b1 f7       	brne	.-20     	; 0x17e6 <_ZN8Receiver10updateRssiEv+0x1e2>
    17fa:	80 91 84 02 	lds	r24, 0x0284	; 0x800284 <_ZN8Receiver5rssiAE>
    17fe:	80 93 81 02 	sts	0x0281, r24	; 0x800281 <_ZN8Receiver9rssiALastE+0x17>
    1802:	80 91 69 02 	lds	r24, 0x0269	; 0x800269 <_ZN8Receiver5rssiBE>
    1806:	80 93 66 02 	sts	0x0266, r24	; 0x800266 <_ZN8Receiver9rssiBLastE+0x17>
    180a:	89 e3       	ldi	r24, 0x39	; 57
    180c:	92 e0       	ldi	r25, 0x02	; 2
    180e:	0e 94 67 16 	call	0x2cce	; 0x2cce <_ZN5Timer5resetEv>
    1812:	cf 91       	pop	r28
    1814:	1f 91       	pop	r17
    1816:	0f 91       	pop	r16
    1818:	ff 90       	pop	r15
    181a:	ef 90       	pop	r14
    181c:	df 90       	pop	r13
    181e:	cf 90       	pop	r12
    1820:	bf 90       	pop	r11
    1822:	af 90       	pop	r10
    1824:	08 95       	ret

00001826 <_ZN8Receiver15switchDiversityEv>:
    1826:	cf 93       	push	r28
    1828:	c0 91 86 02 	lds	r28, 0x0286	; 0x800286 <_ZN8Receiver14activeReceiverE>
    182c:	80 91 93 02 	lds	r24, 0x0293	; 0x800293 <EepromSettings+0xc>
    1830:	81 11       	cpse	r24, r1
    1832:	2d c0       	rjmp	.+90     	; 0x188e <_ZN8Receiver15switchDiversityEv+0x68>
    1834:	20 91 84 02 	lds	r18, 0x0284	; 0x800284 <_ZN8Receiver5rssiAE>
    1838:	80 91 69 02 	lds	r24, 0x0269	; 0x800269 <_ZN8Receiver5rssiBE>
    183c:	28 1b       	sub	r18, r24
    183e:	82 2f       	mov	r24, r18
    1840:	02 2e       	mov	r0, r18
    1842:	00 0c       	add	r0, r0
    1844:	99 0b       	sbc	r25, r25
    1846:	97 ff       	sbrs	r25, 7
    1848:	03 c0       	rjmp	.+6      	; 0x1850 <_ZN8Receiver15switchDiversityEv+0x2a>
    184a:	91 95       	neg	r25
    184c:	81 95       	neg	r24
    184e:	91 09       	sbc	r25, r1
    1850:	12 16       	cp	r1, r18
    1852:	24 f0       	brlt	.+8      	; 0x185c <_ZN8Receiver15switchDiversityEv+0x36>
    1854:	21 11       	cpse	r18, r1
    1856:	04 c0       	rjmp	.+8      	; 0x1860 <_ZN8Receiver15switchDiversityEv+0x3a>
    1858:	9c 2f       	mov	r25, r28
    185a:	03 c0       	rjmp	.+6      	; 0x1862 <_ZN8Receiver15switchDiversityEv+0x3c>
    185c:	90 e0       	ldi	r25, 0x00	; 0
    185e:	01 c0       	rjmp	.+2      	; 0x1862 <_ZN8Receiver15switchDiversityEv+0x3c>
    1860:	91 e0       	ldi	r25, 0x01	; 1
    1862:	82 30       	cpi	r24, 0x02	; 2
    1864:	78 f0       	brcs	.+30     	; 0x1884 <_ZN8Receiver15switchDiversityEv+0x5e>
    1866:	80 91 4e 02 	lds	r24, 0x024E	; 0x80024e <_ZN8Receiver23diversityTargetReceiverE>
    186a:	98 13       	cpse	r25, r24
    186c:	09 c0       	rjmp	.+18     	; 0x1880 <_ZN8Receiver15switchDiversityEv+0x5a>
    186e:	87 e4       	ldi	r24, 0x47	; 71
    1870:	92 e0       	ldi	r25, 0x02	; 2
    1872:	0e 94 48 16 	call	0x2c90	; 0x2c90 <_ZN5Timer9hasTickedEv>
    1876:	88 23       	and	r24, r24
    1878:	89 f0       	breq	.+34     	; 0x189c <_ZN8Receiver15switchDiversityEv+0x76>
    187a:	c0 91 4e 02 	lds	r28, 0x024E	; 0x80024e <_ZN8Receiver23diversityTargetReceiverE>
    187e:	0e c0       	rjmp	.+28     	; 0x189c <_ZN8Receiver15switchDiversityEv+0x76>
    1880:	90 93 4e 02 	sts	0x024E, r25	; 0x80024e <_ZN8Receiver23diversityTargetReceiverE>
    1884:	87 e4       	ldi	r24, 0x47	; 71
    1886:	92 e0       	ldi	r25, 0x02	; 2
    1888:	0e 94 67 16 	call	0x2cce	; 0x2cce <_ZN5Timer5resetEv>
    188c:	07 c0       	rjmp	.+14     	; 0x189c <_ZN8Receiver15switchDiversityEv+0x76>
    188e:	81 30       	cpi	r24, 0x01	; 1
    1890:	21 f0       	breq	.+8      	; 0x189a <_ZN8Receiver15switchDiversityEv+0x74>
    1892:	82 30       	cpi	r24, 0x02	; 2
    1894:	19 f4       	brne	.+6      	; 0x189c <_ZN8Receiver15switchDiversityEv+0x76>
    1896:	c1 e0       	ldi	r28, 0x01	; 1
    1898:	01 c0       	rjmp	.+2      	; 0x189c <_ZN8Receiver15switchDiversityEv+0x76>
    189a:	c0 e0       	ldi	r28, 0x00	; 0
    189c:	8c 2f       	mov	r24, r28
    189e:	cf 91       	pop	r28
    18a0:	0c 94 d8 0a 	jmp	0x15b0	; 0x15b0 <_ZN8Receiver17setActiveReceiverENS_10ReceiverIdE>

000018a4 <_ZN8Receiver5setupEv>:

        setActiveReceiver(nextReceiver);
    }
#endif

    void setup() {
    18a4:	08 95       	ret

000018a6 <_ZN8Receiver6updateEv>:
            ReceiverSpi::setPowerDownRegister(0b00010000110111110011);
        #endif
    }

    void update() {
        if (rssiStableTimer.hasTicked()) {
    18a6:	80 e4       	ldi	r24, 0x40	; 64
    18a8:	92 e0       	ldi	r25, 0x02	; 2
    18aa:	0e 94 48 16 	call	0x2c90	; 0x2c90 <_ZN5Timer9hasTickedEv>
    18ae:	88 23       	and	r24, r24
    18b0:	21 f0       	breq	.+8      	; 0x18ba <_ZN8Receiver6updateEv+0x14>
            updateRssi();
    18b2:	0e 94 02 0b 	call	0x1604	; 0x1604 <_ZN8Receiver10updateRssiEv>
            #ifdef USE_SERIAL_OUT
                writeSerialData();
            #endif

            #ifdef USE_DIVERSITY
                switchDiversity();
    18b6:	0c 94 13 0c 	jmp	0x1826	; 0x1826 <_ZN8Receiver15switchDiversityEv>
    18ba:	08 95       	ret

000018bc <_GLOBAL__sub_I__ZN8Receiver14activeReceiverE>:
    #ifdef USE_DIVERSITY
        uint8_t rssiB = 0;
        uint16_t rssiBRaw = 0;
        uint8_t rssiBLast[RECEIVER_LAST_DATA_SIZE] = { 0 };

        ReceiverId diversityTargetReceiver = activeReceiver;
    18bc:	80 91 86 02 	lds	r24, 0x0286	; 0x800286 <_ZN8Receiver14activeReceiverE>
    18c0:	80 93 4e 02 	sts	0x024E, r24	; 0x80024e <_ZN8Receiver23diversityTargetReceiverE>
        Timer diversityHysteresisTimer = Timer(DIVERSITY_HYSTERESIS_PERIOD);
    18c4:	65 e0       	ldi	r22, 0x05	; 5
    18c6:	70 e0       	ldi	r23, 0x00	; 0
    18c8:	87 e4       	ldi	r24, 0x47	; 71
    18ca:	92 e0       	ldi	r25, 0x02	; 2
    18cc:	0e 94 31 16 	call	0x2c62	; 0x2c62 <_ZN5TimerC1Ej>
    #endif

    static Timer rssiStableTimer = Timer(MIN_TUNE_TIME);
    18d0:	69 e1       	ldi	r22, 0x19	; 25
    18d2:	70 e0       	ldi	r23, 0x00	; 0
    18d4:	80 e4       	ldi	r24, 0x40	; 64
    18d6:	92 e0       	ldi	r25, 0x02	; 2
    18d8:	0e 94 31 16 	call	0x2c62	; 0x2c62 <_ZN5TimerC1Ej>
    static Timer rssiLogTimer = Timer(RECEIVER_LAST_DELAY);
    18dc:	62 e3       	ldi	r22, 0x32	; 50
    18de:	70 e0       	ldi	r23, 0x00	; 0
    18e0:	89 e3       	ldi	r24, 0x39	; 57
    18e2:	92 e0       	ldi	r25, 0x02	; 2
    18e4:	0c 94 31 16 	jmp	0x2c62	; 0x2c62 <_ZN5TimerC1Ej>

000018e8 <_ZL7sendBith>:
        sendBit(bits & 0x1);
        bits >>= 1;
    }
}

static inline void sendBit(uint8_t value) {
    18e8:	cf 93       	push	r28
    18ea:	c8 2f       	mov	r28, r24
    digitalWrite(PIN_SPI_CLOCK, LOW);
    18ec:	60 e0       	ldi	r22, 0x00	; 0
    18ee:	8c e0       	ldi	r24, 0x0C	; 12
    18f0:	0e 94 88 1b 	call	0x3710	; 0x3710 <digitalWrite>
    delayMicroseconds(1);
    18f4:	81 e0       	ldi	r24, 0x01	; 1
    18f6:	90 e0       	ldi	r25, 0x00	; 0
    18f8:	0e 94 c0 1a 	call	0x3580	; 0x3580 <delayMicroseconds>

    digitalWrite(PIN_SPI_DATA, value);
    18fc:	6c 2f       	mov	r22, r28
    18fe:	8a e0       	ldi	r24, 0x0A	; 10
    1900:	0e 94 88 1b 	call	0x3710	; 0x3710 <digitalWrite>
    delayMicroseconds(1);
    1904:	81 e0       	ldi	r24, 0x01	; 1
    1906:	90 e0       	ldi	r25, 0x00	; 0
    1908:	0e 94 c0 1a 	call	0x3580	; 0x3580 <delayMicroseconds>
    digitalWrite(PIN_SPI_CLOCK, HIGH);
    190c:	61 e0       	ldi	r22, 0x01	; 1
    190e:	8c e0       	ldi	r24, 0x0C	; 12
    1910:	0e 94 88 1b 	call	0x3710	; 0x3710 <digitalWrite>
    delayMicroseconds(1);
    1914:	81 e0       	ldi	r24, 0x01	; 1
    1916:	90 e0       	ldi	r25, 0x00	; 0
    1918:	0e 94 c0 1a 	call	0x3580	; 0x3580 <delayMicroseconds>

    digitalWrite(PIN_SPI_CLOCK, LOW);
    191c:	60 e0       	ldi	r22, 0x00	; 0
    191e:	8c e0       	ldi	r24, 0x0C	; 12
    1920:	0e 94 88 1b 	call	0x3710	; 0x3710 <digitalWrite>
    delayMicroseconds(1);
    1924:	81 e0       	ldi	r24, 0x01	; 1
    1926:	90 e0       	ldi	r25, 0x00	; 0
}
    1928:	cf 91       	pop	r28
    delayMicroseconds(1);
    digitalWrite(PIN_SPI_CLOCK, HIGH);
    delayMicroseconds(1);

    digitalWrite(PIN_SPI_CLOCK, LOW);
    delayMicroseconds(1);
    192a:	0c 94 c0 1a 	jmp	0x3580	; 0x3580 <delayMicroseconds>

0000192e <_ZL12sendRegisterhm>:
        sendRegister(SPI_ADDRESS_POWER, value);
    }
}


static inline void sendRegister(uint8_t address, uint32_t data) {
    192e:	8f 92       	push	r8
    1930:	9f 92       	push	r9
    1932:	af 92       	push	r10
    1934:	bf 92       	push	r11
    1936:	cf 92       	push	r12
    1938:	df 92       	push	r13
    193a:	ef 92       	push	r14
    193c:	ff 92       	push	r15
    193e:	cf 93       	push	r28
    1940:	c8 2e       	mov	r12, r24
    1942:	4a 01       	movw	r8, r20
    1944:	5b 01       	movw	r10, r22
    digitalWrite(PIN_SPI_CLOCK, LOW);
    delayMicroseconds(1);
}

static inline void sendSlaveSelect(uint8_t value) {
    digitalWrite(PIN_SPI_SLAVE_SELECT, value);
    1946:	60 e0       	ldi	r22, 0x00	; 0
    1948:	8b e0       	ldi	r24, 0x0B	; 11
    194a:	0e 94 88 1b 	call	0x3710	; 0x3710 <digitalWrite>
    delayMicroseconds(1);
    194e:	81 e0       	ldi	r24, 0x01	; 1
    1950:	90 e0       	ldi	r25, 0x00	; 0
    1952:	0e 94 c0 1a 	call	0x3580	; 0x3580 <delayMicroseconds>


static inline void sendRegister(uint8_t address, uint32_t data) {
    sendSlaveSelect(LOW);

    sendBits(address, 4);
    1956:	d1 2c       	mov	r13, r1
    1958:	e1 2c       	mov	r14, r1
    195a:	f1 2c       	mov	r15, r1
    195c:	c4 e0       	ldi	r28, 0x04	; 4
}


static inline void sendBits(uint32_t bits, uint8_t count) {
    for (uint8_t i = 0; i < count; i++) {
        sendBit(bits & 0x1);
    195e:	8c 2d       	mov	r24, r12
    1960:	81 70       	andi	r24, 0x01	; 1
    1962:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <_ZL7sendBith>
        bits >>= 1;
    1966:	f6 94       	lsr	r15
    1968:	e7 94       	ror	r14
    196a:	d7 94       	ror	r13
    196c:	c7 94       	ror	r12
    196e:	c1 50       	subi	r28, 0x01	; 1
    digitalWrite(PIN_SPI_DATA, LOW);
}


static inline void sendBits(uint32_t bits, uint8_t count) {
    for (uint8_t i = 0; i < count; i++) {
    1970:	b1 f7       	brne	.-20     	; 0x195e <_ZL12sendRegisterhm+0x30>

static inline void sendRegister(uint8_t address, uint32_t data) {
    sendSlaveSelect(LOW);

    sendBits(address, 4);
    sendBit(HIGH); // Enable write.
    1972:	81 e0       	ldi	r24, 0x01	; 1
    1974:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <_ZL7sendBith>
    1978:	c4 e1       	ldi	r28, 0x14	; 20
}


static inline void sendBits(uint32_t bits, uint8_t count) {
    for (uint8_t i = 0; i < count; i++) {
        sendBit(bits & 0x1);
    197a:	88 2d       	mov	r24, r8
    197c:	81 70       	andi	r24, 0x01	; 1
    197e:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <_ZL7sendBith>
        bits >>= 1;
    1982:	b6 94       	lsr	r11
    1984:	a7 94       	ror	r10
    1986:	97 94       	ror	r9
    1988:	87 94       	ror	r8
    198a:	c1 50       	subi	r28, 0x01	; 1
    digitalWrite(PIN_SPI_DATA, LOW);
}


static inline void sendBits(uint32_t bits, uint8_t count) {
    for (uint8_t i = 0; i < count; i++) {
    198c:	b1 f7       	brne	.-20     	; 0x197a <_ZL12sendRegisterhm+0x4c>
    digitalWrite(PIN_SPI_CLOCK, LOW);
    delayMicroseconds(1);
}

static inline void sendSlaveSelect(uint8_t value) {
    digitalWrite(PIN_SPI_SLAVE_SELECT, value);
    198e:	61 e0       	ldi	r22, 0x01	; 1
    1990:	8b e0       	ldi	r24, 0x0B	; 11
    1992:	0e 94 88 1b 	call	0x3710	; 0x3710 <digitalWrite>
    delayMicroseconds(1);
    1996:	81 e0       	ldi	r24, 0x01	; 1
    1998:	90 e0       	ldi	r25, 0x00	; 0
    199a:	0e 94 c0 1a 	call	0x3580	; 0x3580 <delayMicroseconds>

    sendBits(data, 20);

    // Finished clocking data in
    sendSlaveSelect(HIGH);
    digitalWrite(PIN_SPI_CLOCK, LOW);
    199e:	60 e0       	ldi	r22, 0x00	; 0
    19a0:	8c e0       	ldi	r24, 0x0C	; 12
    19a2:	0e 94 88 1b 	call	0x3710	; 0x3710 <digitalWrite>
    digitalWrite(PIN_SPI_DATA, LOW);
    19a6:	60 e0       	ldi	r22, 0x00	; 0
    19a8:	8a e0       	ldi	r24, 0x0A	; 10
}
    19aa:	cf 91       	pop	r28
    19ac:	ff 90       	pop	r15
    19ae:	ef 90       	pop	r14
    19b0:	df 90       	pop	r13
    19b2:	cf 90       	pop	r12
    19b4:	bf 90       	pop	r11
    19b6:	af 90       	pop	r10
    19b8:	9f 90       	pop	r9
    19ba:	8f 90       	pop	r8
    sendBits(data, 20);

    // Finished clocking data in
    sendSlaveSelect(HIGH);
    digitalWrite(PIN_SPI_CLOCK, LOW);
    digitalWrite(PIN_SPI_DATA, LOW);
    19bc:	0c 94 88 1b 	jmp	0x3710	; 0x3710 <digitalWrite>

000019c0 <_ZN11ReceiverSpi17setSynthRegisterBEj>:
    //        R = 8
    //
    // Refer to RTC6715 datasheet for further details.
    //
    void setSynthRegisterB(uint16_t value) {
        sendRegister(SPI_ADDRESS_SYNTH_A, value);
    19c0:	ac 01       	movw	r20, r24
    19c2:	60 e0       	ldi	r22, 0x00	; 0
    19c4:	70 e0       	ldi	r23, 0x00	; 0
    19c6:	81 e0       	ldi	r24, 0x01	; 1
    19c8:	0c 94 97 0c 	jmp	0x192e	; 0x192e <_ZL12sendRegisterhm>

000019cc <_ZN14EepromSettings4saveEv>:

    if (this->magic != EEPROM_MAGIC)
        this->initDefaults();
}

void EepromSettings::save() {
    19cc:	ff 92       	push	r15
    19ce:	0f 93       	push	r16
    19d0:	1f 93       	push	r17
    19d2:	cf 93       	push	r28
    19d4:	df 93       	push	r29
    19d6:	8c 01       	movw	r16, r24
***/

struct EEPtr{

    EEPtr( const int index )
        : index( index )                {}
    19d8:	c0 e0       	ldi	r28, 0x00	; 0
    19da:	d0 e0       	ldi	r29, 0x00	; 0
    }
    
    template< typename T > const T &put( int idx, const T &t ){
        EEPtr e = idx;
        const uint8_t *ptr = (const uint8_t*) &t;
        for( int count = sizeof(T) ; count ; --count, ++e )  (*e).update( *ptr++ );
    19dc:	f8 01       	movw	r30, r16
    19de:	f1 90       	ld	r15, Z+
    19e0:	8f 01       	movw	r16, r30

    EERef( const int index )
        : index( index )                 {}
    
    //Access/read members.
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    19e2:	ce 01       	movw	r24, r28
    19e4:	0e 94 5a 33 	call	0x66b4	; 0x66b4 <eeprom_read_byte>
    EERef &operator &=( uint8_t in )     { return *this = **this & in; }
    EERef &operator |=( uint8_t in )     { return *this = **this | in; }
    EERef &operator <<=( uint8_t in )    { return *this = **this << in; }
    EERef &operator >>=( uint8_t in )    { return *this = **this >> in; }
    
    EERef &update( uint8_t in )          { return  in != *this ? *this = in : *this; }
    19e8:	f8 16       	cp	r15, r24
    19ea:	21 f0       	breq	.+8      	; 0x19f4 <_ZN14EepromSettings4saveEv+0x28>
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    operator uint8_t() const             { return **this; }
    
    //Assignment/write members.
    EERef &operator=( const EERef &ref ) { return *this = *ref; }
    EERef &operator=( uint8_t in )       { return eeprom_write_byte( (uint8_t*) index, in ), *this;  }
    19ec:	6f 2d       	mov	r22, r15
    19ee:	ce 01       	movw	r24, r28
    19f0:	0e 94 62 33 	call	0x66c4	; 0x66c4 <eeprom_write_byte>
    //Iterator functionality.
    bool operator!=( const EEPtr &ptr ) { return index != ptr.index; }
    EERef operator*()                   { return index; }
    
    /** Prefix & Postfix increment/decrement **/
    EEPtr& operator++()                 { return ++index, *this; }
    19f4:	21 96       	adiw	r28, 0x01	; 1
    }
    
    template< typename T > const T &put( int idx, const T &t ){
        EEPtr e = idx;
        const uint8_t *ptr = (const uint8_t*) &t;
        for( int count = sizeof(T) ; count ; --count, ++e )  (*e).update( *ptr++ );
    19f6:	c1 31       	cpi	r28, 0x11	; 17
    19f8:	d1 05       	cpc	r29, r1
    19fa:	81 f7       	brne	.-32     	; 0x19dc <_ZN14EepromSettings4saveEv+0x10>
    EEPROM.put(0, *this);
}
    19fc:	df 91       	pop	r29
    19fe:	cf 91       	pop	r28
    1a00:	1f 91       	pop	r17
    1a02:	0f 91       	pop	r16
    1a04:	ff 90       	pop	r15
    1a06:	08 95       	ret

00001a08 <_ZN14EepromSettings6updateEv>:


struct EepromSettings EepromSettings;


void EepromSettings::update() {
    1a08:	cf 93       	push	r28
    1a0a:	df 93       	push	r29
    if (isDirty) {
    1a0c:	20 91 98 02 	lds	r18, 0x0298	; 0x800298 <_ZL7isDirty>
    1a10:	22 23       	and	r18, r18
    1a12:	91 f0       	breq	.+36     	; 0x1a38 <_ZN14EepromSettings6updateEv+0x30>
    1a14:	ec 01       	movw	r28, r24
        if (saveTimer.hasTicked()) {
    1a16:	89 e9       	ldi	r24, 0x99	; 153
    1a18:	92 e0       	ldi	r25, 0x02	; 2
    1a1a:	0e 94 48 16 	call	0x2c90	; 0x2c90 <_ZN5Timer9hasTickedEv>
    1a1e:	88 23       	and	r24, r24
    1a20:	59 f0       	breq	.+22     	; 0x1a38 <_ZN14EepromSettings6updateEv+0x30>
            isDirty = false;
    1a22:	10 92 98 02 	sts	0x0298, r1	; 0x800298 <_ZL7isDirty>
            saveTimer.reset();
    1a26:	89 e9       	ldi	r24, 0x99	; 153
    1a28:	92 e0       	ldi	r25, 0x02	; 2
    1a2a:	0e 94 67 16 	call	0x2cce	; 0x2cce <_ZN5Timer5resetEv>

            this->save();
    1a2e:	ce 01       	movw	r24, r28
        }
    }
}
    1a30:	df 91       	pop	r29
    1a32:	cf 91       	pop	r28
    if (isDirty) {
        if (saveTimer.hasTicked()) {
            isDirty = false;
            saveTimer.reset();

            this->save();
    1a34:	0c 94 e6 0c 	jmp	0x19cc	; 0x19cc <_ZN14EepromSettings4saveEv>
        }
    }
}
    1a38:	df 91       	pop	r29
    1a3a:	cf 91       	pop	r28
    1a3c:	08 95       	ret

00001a3e <_ZN14EepromSettings9markDirtyEv>:
void EepromSettings::save() {
    EEPROM.put(0, *this);
}

void EepromSettings::markDirty() {
    isDirty = true;
    1a3e:	81 e0       	ldi	r24, 0x01	; 1
    1a40:	80 93 98 02 	sts	0x0298, r24	; 0x800298 <_ZL7isDirty>
    1a44:	08 95       	ret

00001a46 <_ZN14EepromSettings12initDefaultsEv>:
}


void EepromSettings::initDefaults() {
    1a46:	cf 93       	push	r28
    1a48:	df 93       	push	r29
    1a4a:	ec 01       	movw	r28, r24
    memcpy_P(this, &EepromDefaults, sizeof(EepromDefaults));
    1a4c:	41 e1       	ldi	r20, 0x11	; 17
    1a4e:	50 e0       	ldi	r21, 0x00	; 0
    1a50:	68 eb       	ldi	r22, 0xB8	; 184
    1a52:	71 e0       	ldi	r23, 0x01	; 1
    1a54:	0e 94 4a 33 	call	0x6694	; 0x6694 <memcpy_P>
    this->save();
    1a58:	ce 01       	movw	r24, r28
}
    1a5a:	df 91       	pop	r29
    1a5c:	cf 91       	pop	r28
}


void EepromSettings::initDefaults() {
    memcpy_P(this, &EepromDefaults, sizeof(EepromDefaults));
    this->save();
    1a5e:	0c 94 e6 0c 	jmp	0x19cc	; 0x19cc <_ZN14EepromSettings4saveEv>

00001a62 <_ZN14EepromSettings4loadEv>:
            this->save();
        }
    }
}

void EepromSettings::load() {
    1a62:	ef 92       	push	r14
    1a64:	ff 92       	push	r15
    1a66:	0f 93       	push	r16
    1a68:	1f 93       	push	r17
    1a6a:	cf 93       	push	r28
    1a6c:	df 93       	push	r29
    1a6e:	8c 01       	movw	r16, r24
    1a70:	7c 01       	movw	r14, r24
    1a72:	c0 e0       	ldi	r28, 0x00	; 0
    1a74:	d0 e0       	ldi	r29, 0x00	; 0

    EERef( const int index )
        : index( index )                 {}
    
    //Access/read members.
    uint8_t operator*() const            { return eeprom_read_byte( (uint8_t*) index ); }
    1a76:	ce 01       	movw	r24, r28
    1a78:	0e 94 5a 33 	call	0x66b4	; 0x66b4 <eeprom_read_byte>
    
    //Functionality to 'get' and 'put' objects to and from EEPROM.
    template< typename T > T &get( int idx, T &t ){
        EEPtr e = idx;
        uint8_t *ptr = (uint8_t*) &t;
        for( int count = sizeof(T) ; count ; --count, ++e )  *ptr++ = *e;
    1a7c:	f7 01       	movw	r30, r14
    1a7e:	81 93       	st	Z+, r24
    1a80:	7f 01       	movw	r14, r30
    1a82:	21 96       	adiw	r28, 0x01	; 1
    1a84:	c1 31       	cpi	r28, 0x11	; 17
    1a86:	d1 05       	cpc	r29, r1
    1a88:	b1 f7       	brne	.-20     	; 0x1a76 <_ZN14EepromSettings4loadEv+0x14>
    EEPROM.get(0, *this);

    if (this->magic != EEPROM_MAGIC)
    1a8a:	f8 01       	movw	r30, r16
    1a8c:	80 81       	ld	r24, Z
    1a8e:	91 81       	ldd	r25, Z+1	; 0x01
    1a90:	a2 81       	ldd	r26, Z+2	; 0x02
    1a92:	b3 81       	ldd	r27, Z+3	; 0x03
    1a94:	09 97       	sbiw	r24, 0x09	; 9
    1a96:	a1 05       	cpc	r26, r1
    1a98:	b1 05       	cpc	r27, r1
    1a9a:	49 f0       	breq	.+18     	; 0x1aae <_ZN14EepromSettings4loadEv+0x4c>
        this->initDefaults();
    1a9c:	c8 01       	movw	r24, r16
}
    1a9e:	df 91       	pop	r29
    1aa0:	cf 91       	pop	r28
    1aa2:	1f 91       	pop	r17
    1aa4:	0f 91       	pop	r16
    1aa6:	ff 90       	pop	r15
    1aa8:	ef 90       	pop	r14

void EepromSettings::load() {
    EEPROM.get(0, *this);

    if (this->magic != EEPROM_MAGIC)
        this->initDefaults();
    1aaa:	0c 94 23 0d 	jmp	0x1a46	; 0x1a46 <_ZN14EepromSettings12initDefaultsEv>
}
    1aae:	df 91       	pop	r29
    1ab0:	cf 91       	pop	r28
    1ab2:	1f 91       	pop	r17
    1ab4:	0f 91       	pop	r16
    1ab6:	ff 90       	pop	r15
    1ab8:	ef 90       	pop	r14
    1aba:	08 95       	ret

00001abc <_GLOBAL__sub_I_EepromSettings>:
#include "settings_eeprom.h"

#include "timer.h"


static Timer saveTimer = Timer(EEPROM_SAVE_TIME);
    1abc:	68 e8       	ldi	r22, 0x88	; 136
    1abe:	73 e1       	ldi	r23, 0x13	; 19
    1ac0:	89 e9       	ldi	r24, 0x99	; 153
    1ac2:	92 e0       	ldi	r25, 0x02	; 2
    1ac4:	0c 94 31 16 	jmp	0x2c62	; 0x2c62 <_ZN5TimerC1Ej>

00001ac8 <_ZL23globalMenuButtonHandler6ButtonN7Buttons9PressTypeE>:
static void globalMenuButtonHandler(
    Button button,
    Buttons::PressType pressType
) {
	localButton = button;
    if (
    1ac8:	90 91 b0 02 	lds	r25, 0x02B0	; 0x8002b0 <_ZN12StateMachine12currentStateE>
    1acc:	94 30       	cpi	r25, 0x04	; 4
    1ace:	39 f0       	breq	.+14     	; 0x1ade <_ZL23globalMenuButtonHandler6ButtonN7Buttons9PressTypeE+0x16>
        StateMachine::currentState != StateMachine::State::MENU &&
    1ad0:	82 30       	cpi	r24, 0x02	; 2
    1ad2:	29 f4       	brne	.+10     	; 0x1ade <_ZL23globalMenuButtonHandler6ButtonN7Buttons9PressTypeE+0x16>
        button == Button::MODE &&
    1ad4:	62 30       	cpi	r22, 0x02	; 2
    1ad6:	19 f4       	brne	.+6      	; 0x1ade <_ZL23globalMenuButtonHandler6ButtonN7Buttons9PressTypeE+0x16>
        pressType == Buttons::PressType::HOLDING
    ) {
        StateMachine::switchState(StateMachine::State::MENU);
    1ad8:	84 e0       	ldi	r24, 0x04	; 4
    1ada:	0c 94 73 0e 	jmp	0x1ce6	; 0x1ce6 <_ZN12StateMachine11switchStateENS_5StateE>
    1ade:	08 95       	ret

00001ae0 <_Z9setupPinsv>:
    // Switch to initial state.
    StateMachine::switchState(StateMachine::State::SEARCH);
}

void setupPins() {
    pinMode(PIN_LED, OUTPUT);
    1ae0:	61 e0       	ldi	r22, 0x01	; 1
    1ae2:	8d e0       	ldi	r24, 0x0D	; 13
    1ae4:	0e 94 4c 1b 	call	0x3698	; 0x3698 <pinMode>
    pinMode(PIN_BUZZER, OUTPUT);
    1ae8:	61 e0       	ldi	r22, 0x01	; 1
    1aea:	86 e0       	ldi	r24, 0x06	; 6
    1aec:	0e 94 4c 1b 	call	0x3698	; 0x3698 <pinMode>
    pinMode(PIN_BUTTON_UP, INPUT_PULLUP);
    1af0:	62 e0       	ldi	r22, 0x02	; 2
    1af2:	82 e0       	ldi	r24, 0x02	; 2
    1af4:	0e 94 4c 1b 	call	0x3698	; 0x3698 <pinMode>
    pinMode(PIN_BUTTON_MODE, INPUT_PULLUP);
    1af8:	62 e0       	ldi	r22, 0x02	; 2
    1afa:	83 e0       	ldi	r24, 0x03	; 3
    1afc:	0e 94 4c 1b 	call	0x3698	; 0x3698 <pinMode>
    pinMode(PIN_BUTTON_DOWN, INPUT_PULLUP);
    1b00:	62 e0       	ldi	r22, 0x02	; 2
    1b02:	84 e0       	ldi	r24, 0x04	; 4
    1b04:	0e 94 4c 1b 	call	0x3698	; 0x3698 <pinMode>
    pinMode(PIN_BUTTON_SAVE, INPUT_PULLUP);
    1b08:	62 e0       	ldi	r22, 0x02	; 2
    1b0a:	85 e0       	ldi	r24, 0x05	; 5
    1b0c:	0e 94 4c 1b 	call	0x3698	; 0x3698 <pinMode>

    pinMode(PIN_LED_A,OUTPUT);
    1b10:	61 e0       	ldi	r22, 0x01	; 1
    1b12:	8e e0       	ldi	r24, 0x0E	; 14
    1b14:	0e 94 4c 1b 	call	0x3698	; 0x3698 <pinMode>
    #ifdef USE_DIVERSITY
        pinMode(PIN_LED_B,OUTPUT);
    1b18:	61 e0       	ldi	r22, 0x01	; 1
    1b1a:	8f e0       	ldi	r24, 0x0F	; 15
    1b1c:	0e 94 4c 1b 	call	0x3698	; 0x3698 <pinMode>
    #endif

    pinMode(PIN_RSSI_A, INPUT_PULLUP);
    1b20:	62 e0       	ldi	r22, 0x02	; 2
    1b22:	84 e1       	ldi	r24, 0x14	; 20
    1b24:	0e 94 4c 1b 	call	0x3698	; 0x3698 <pinMode>
    #ifdef USE_DIVERSITY
        pinMode(PIN_RSSI_B, INPUT_PULLUP);
    1b28:	62 e0       	ldi	r22, 0x02	; 2
    1b2a:	85 e1       	ldi	r24, 0x15	; 21
    1b2c:	0e 94 4c 1b 	call	0x3698	; 0x3698 <pinMode>
    #endif

    pinMode(PIN_SPI_SLAVE_SELECT, OUTPUT);
    1b30:	61 e0       	ldi	r22, 0x01	; 1
    1b32:	8b e0       	ldi	r24, 0x0B	; 11
    1b34:	0e 94 4c 1b 	call	0x3698	; 0x3698 <pinMode>
    pinMode(PIN_SPI_DATA, OUTPUT);
    1b38:	61 e0       	ldi	r22, 0x01	; 1
    1b3a:	8a e0       	ldi	r24, 0x0A	; 10
    1b3c:	0e 94 4c 1b 	call	0x3698	; 0x3698 <pinMode>
	pinMode(PIN_SPI_CLOCK, OUTPUT);
    1b40:	61 e0       	ldi	r22, 0x01	; 1
    1b42:	8c e0       	ldi	r24, 0x0C	; 12
    1b44:	0e 94 4c 1b 	call	0x3698	; 0x3698 <pinMode>

    digitalWrite(PIN_SPI_SLAVE_SELECT, HIGH);
    1b48:	61 e0       	ldi	r22, 0x01	; 1
    1b4a:	8b e0       	ldi	r24, 0x0B	; 11
    1b4c:	0e 94 88 1b 	call	0x3710	; 0x3710 <digitalWrite>
    digitalWrite(PIN_SPI_CLOCK, LOW);
    1b50:	60 e0       	ldi	r22, 0x00	; 0
    1b52:	8c e0       	ldi	r24, 0x0C	; 12
    1b54:	0e 94 88 1b 	call	0x3710	; 0x3710 <digitalWrite>
    digitalWrite(PIN_SPI_DATA, LOW);
    1b58:	60 e0       	ldi	r22, 0x00	; 0
    1b5a:	8a e0       	ldi	r24, 0x0A	; 10
    1b5c:	0c 94 88 1b 	jmp	0x3710	; 0x3710 <digitalWrite>

00001b60 <_Z13setupSettingsv>:
}

void setupSettings() {
    EepromSettings.load();
    1b60:	87 e8       	ldi	r24, 0x87	; 135
    1b62:	92 e0       	ldi	r25, 0x02	; 2
    1b64:	0e 94 31 0d 	call	0x1a62	; 0x1a62 <_ZN14EepromSettings4loadEv>
    Receiver::setChannel(EepromSettings.startChannel);
    1b68:	80 91 8b 02 	lds	r24, 0x028B	; 0x80028b <EepromSettings+0x4>
    1b6c:	0c 94 ca 0a 	jmp	0x1594	; 0x1594 <_ZN8Receiver10setChannelEh>

00001b70 <setup>:


void setup()
{
	
    setupPins();
    1b70:	0e 94 70 0d 	call	0x1ae0	; 0x1ae0 <_Z9setupPinsv>

    // Enable buzzer and LED for duration of setup process.
    digitalWrite(PIN_LED, HIGH);
    1b74:	61 e0       	ldi	r22, 0x01	; 1
    1b76:	8d e0       	ldi	r24, 0x0D	; 13
    1b78:	0e 94 88 1b 	call	0x3710	; 0x3710 <digitalWrite>
    digitalWrite(PIN_BUZZER, LOW);
    1b7c:	60 e0       	ldi	r22, 0x00	; 0
    1b7e:	86 e0       	ldi	r24, 0x06	; 6
    1b80:	0e 94 88 1b 	call	0x3710	; 0x3710 <digitalWrite>

    setupSettings();
    1b84:	0e 94 b0 0d 	call	0x1b60	; 0x1b60 <_Z13setupSettingsv>

    StateMachine::setup();
    1b88:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <_ZN12StateMachine5setupEv>
    Receiver::setup();
    1b8c:	0e 94 52 0c 	call	0x18a4	; 0x18a4 <_ZN8Receiver5setupEv>
    Ui::setup();
    1b90:	0e 94 7c 16 	call	0x2cf8	; 0x2cf8 <_ZN2Ui5setupEv>

    Receiver::setActiveReceiver(Receiver::ReceiverId::A);
    1b94:	80 e0       	ldi	r24, 0x00	; 0
    1b96:	0e 94 d8 0a 	call	0x15b0	; 0x15b0 <_ZN8Receiver17setActiveReceiverENS_10ReceiverIdE>
	
	//Serial.begin(250000);
	
	
    // Setup complete.
    digitalWrite(PIN_LED, LOW);
    1b9a:	60 e0       	ldi	r22, 0x00	; 0
    1b9c:	8d e0       	ldi	r24, 0x0D	; 13
    1b9e:	0e 94 88 1b 	call	0x3710	; 0x3710 <digitalWrite>
    digitalWrite(PIN_BUZZER, HIGH);
    1ba2:	61 e0       	ldi	r22, 0x01	; 1
    1ba4:	86 e0       	ldi	r24, 0x06	; 6
    1ba6:	0e 94 88 1b 	call	0x3710	; 0x3710 <digitalWrite>

    Buttons::registerChangeFunc(globalMenuButtonHandler);
    1baa:	84 e6       	ldi	r24, 0x64	; 100
    1bac:	9d e0       	ldi	r25, 0x0D	; 13
    1bae:	0e 94 66 0a 	call	0x14cc	; 0x14cc <_ZN7Buttons18registerChangeFuncEPFv6ButtonNS_9PressTypeEE>

    // Switch to initial state.
    StateMachine::switchState(StateMachine::State::SEARCH);
    1bb2:	81 e0       	ldi	r24, 0x01	; 1
    1bb4:	0c 94 73 0e 	jmp	0x1ce6	; 0x1ce6 <_ZN12StateMachine11switchStateENS_5StateE>

00001bb8 <loop>:
    Receiver::setChannel(EepromSettings.startChannel);
}

static Button localButton = Button::COUNT;
static Button localButtonOld = Button::COUNT;
void loop() {
    1bb8:	0f 93       	push	r16
    1bba:	1f 93       	push	r17
		//Serial.print(int(localButton));
		//Serial.print("\r\n");
		//
		//localButtonOld = localButton;
	//}
    Receiver::update();
    1bbc:	0e 94 53 0c 	call	0x18a6	; 0x18a6 <_ZN8Receiver6updateEv>
    Buttons::update();
    1bc0:	0e 94 4e 0a 	call	0x149c	; 0x149c <_ZN7Buttons6updateEv>

    StateMachine::update();
    1bc4:	0e 94 24 0e 	call	0x1c48	; 0x1c48 <_ZN12StateMachine6updateEv>
    Ui::update();
    1bc8:	0e 94 a1 16 	call	0x2d42	; 0x2d42 <_ZN2Ui6updateEv>
    EepromSettings.update();
    1bcc:	87 e8       	ldi	r24, 0x87	; 135
    1bce:	92 e0       	ldi	r25, 0x02	; 2
    1bd0:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <_ZN14EepromSettings6updateEv>


    if (
        StateMachine::currentState != StateMachine::State::SCREENSAVER
        && StateMachine::currentState != StateMachine::State::BANDSCAN
        && (millis() - Buttons::lastChangeTime) >
    1bd4:	80 91 b0 02 	lds	r24, 0x02B0	; 0x8002b0 <_ZN12StateMachine12currentStateE>
    1bd8:	82 50       	subi	r24, 0x02	; 2
    1bda:	82 30       	cpi	r24, 0x02	; 2
    1bdc:	d0 f0       	brcs	.+52     	; 0x1c12 <loop+0x5a>
    1bde:	0e 94 53 1a 	call	0x34a6	; 0x34a6 <millis>
    1be2:	00 91 d2 01 	lds	r16, 0x01D2	; 0x8001d2 <__data_end>
    1be6:	10 91 d3 01 	lds	r17, 0x01D3	; 0x8001d3 <__data_end+0x1>
    1bea:	20 91 d4 01 	lds	r18, 0x01D4	; 0x8001d4 <__data_end+0x2>
    1bee:	30 91 d5 01 	lds	r19, 0x01D5	; 0x8001d5 <__data_end+0x3>
    1bf2:	dc 01       	movw	r26, r24
    1bf4:	cb 01       	movw	r24, r22
    1bf6:	80 1b       	sub	r24, r16
    1bf8:	91 0b       	sbc	r25, r17
    1bfa:	a2 0b       	sbc	r26, r18
    1bfc:	b3 0b       	sbc	r27, r19
    1bfe:	81 33       	cpi	r24, 0x31	; 49
    1c00:	95 47       	sbci	r25, 0x75	; 117
    1c02:	a1 05       	cpc	r26, r1
    1c04:	b1 05       	cpc	r27, r1
    1c06:	28 f0       	brcs	.+10     	; 0x1c12 <loop+0x5a>
            (SCREENSAVER_TIMEOUT * 1000)
    ) {
        StateMachine::switchState(StateMachine::State::SCREENSAVER);
    1c08:	83 e0       	ldi	r24, 0x03	; 3
    }
}
    1c0a:	1f 91       	pop	r17
    1c0c:	0f 91       	pop	r16
        StateMachine::currentState != StateMachine::State::SCREENSAVER
        && StateMachine::currentState != StateMachine::State::BANDSCAN
        && (millis() - Buttons::lastChangeTime) >
            (SCREENSAVER_TIMEOUT * 1000)
    ) {
        StateMachine::switchState(StateMachine::State::SCREENSAVER);
    1c0e:	0c 94 73 0e 	jmp	0x1ce6	; 0x1ce6 <_ZN12StateMachine11switchStateENS_5StateE>
    }
}
    1c12:	1f 91       	pop	r17
    1c14:	0f 91       	pop	r16
    1c16:	08 95       	ret

00001c18 <_ZN12StateMachine12StateHandler8onUpdateEv>:
        public:
            virtual void onInitialDraw() {};
            virtual void onUpdateDraw() {};

            virtual void onEnter() {};
            virtual void onUpdate() {};
    1c18:	08 95       	ret

00001c1a <_ZN12StateMachine12StateHandler6onExitEv>:
            virtual void onExit() {};
    1c1a:	08 95       	ret

00001c1c <_ZN12StateMachine12StateHandler14onButtonChangeE6ButtonN7Buttons9PressTypeE>:

            virtual void onButtonChange(
    1c1c:	08 95       	ret

00001c1e <_ZN12StateMachineL14onButtonChangeE6ButtonN7Buttons9PressTypeE>:
    //     }

    //     #undef STATE_FACTORY
    // }

    static void onButtonChange(Button button, Buttons::PressType pressType) {
    1c1e:	46 2f       	mov	r20, r22
        if (currentHandler != nullptr) {
    1c20:	a0 91 b1 02 	lds	r26, 0x02B1	; 0x8002b1 <_ZN12StateMachineL14currentHandlerE>
    1c24:	b0 91 b2 02 	lds	r27, 0x02B2	; 0x8002b2 <_ZN12StateMachineL14currentHandlerE+0x1>
    1c28:	10 97       	sbiw	r26, 0x00	; 0
    1c2a:	49 f0       	breq	.+18     	; 0x1c3e <_ZN12StateMachineL14onButtonChangeE6ButtonN7Buttons9PressTypeE+0x20>
            currentHandler->onButtonChange(button, pressType);
    1c2c:	ed 91       	ld	r30, X+
    1c2e:	fc 91       	ld	r31, X
    1c30:	11 97       	sbiw	r26, 0x01	; 1
    1c32:	02 84       	ldd	r0, Z+10	; 0x0a
    1c34:	f3 85       	ldd	r31, Z+11	; 0x0b
    1c36:	e0 2d       	mov	r30, r0
    1c38:	68 2f       	mov	r22, r24
    1c3a:	cd 01       	movw	r24, r26
    1c3c:	09 94       	ijmp
    1c3e:	08 95       	ret

00001c40 <_ZN12StateMachine5setupEv>:
    State currentState = State::BOOT;
    State lastState = currentState;


    void setup() {
        Buttons::registerChangeFunc(onButtonChange);
    1c40:	8f e0       	ldi	r24, 0x0F	; 15
    1c42:	9e e0       	ldi	r25, 0x0E	; 14
    1c44:	0c 94 66 0a 	jmp	0x14cc	; 0x14cc <_ZN7Buttons18registerChangeFuncEPFv6ButtonNS_9PressTypeEE>

00001c48 <_ZN12StateMachine6updateEv>:
    }

    void update() {
        if (currentHandler) {
    1c48:	80 91 b1 02 	lds	r24, 0x02B1	; 0x8002b1 <_ZN12StateMachineL14currentHandlerE>
    1c4c:	90 91 b2 02 	lds	r25, 0x02B2	; 0x8002b2 <_ZN12StateMachineL14currentHandlerE+0x1>
    1c50:	00 97       	sbiw	r24, 0x00	; 0
    1c52:	09 f4       	brne	.+2      	; 0x1c56 <_ZN12StateMachine6updateEv+0xe>
    1c54:	47 c0       	rjmp	.+142    	; 0x1ce4 <_ZN12StateMachine6updateEv+0x9c>
            currentHandler->onUpdate();
    1c56:	dc 01       	movw	r26, r24
    1c58:	ed 91       	ld	r30, X+
    1c5a:	fc 91       	ld	r31, X
    1c5c:	06 80       	ldd	r0, Z+6	; 0x06
    1c5e:	f7 81       	ldd	r31, Z+7	; 0x07
    1c60:	e0 2d       	mov	r30, r0
    1c62:	09 95       	icall

            // FIXME: This should probably be handled in the UI module but not
            // 100% on how to decouple them at this stage
            static Timer drawTimer = Timer(OLED_FRAMERATE);
    1c64:	80 91 a7 02 	lds	r24, 0x02A7	; 0x8002a7 <_ZGVZN12StateMachine6updateEvE9drawTimer>
    1c68:	81 11       	cpse	r24, r1
    1c6a:	09 c0       	rjmp	.+18     	; 0x1c7e <_ZN12StateMachine6updateEv+0x36>
    1c6c:	68 e2       	ldi	r22, 0x28	; 40
    1c6e:	70 e0       	ldi	r23, 0x00	; 0
    1c70:	80 ea       	ldi	r24, 0xA0	; 160
    1c72:	92 e0       	ldi	r25, 0x02	; 2
    1c74:	0e 94 31 16 	call	0x2c62	; 0x2c62 <_ZN5TimerC1Ej>
    1c78:	81 e0       	ldi	r24, 0x01	; 1
    1c7a:	80 93 a7 02 	sts	0x02A7, r24	; 0x8002a7 <_ZGVZN12StateMachine6updateEvE9drawTimer>
            if (currentHandler
                && Ui::shouldDrawUpdate
                && drawTimer.hasTicked()
    1c7e:	80 91 b1 02 	lds	r24, 0x02B1	; 0x8002b1 <_ZN12StateMachineL14currentHandlerE>
    1c82:	90 91 b2 02 	lds	r25, 0x02B2	; 0x8002b2 <_ZN12StateMachineL14currentHandlerE+0x1>
    1c86:	89 2b       	or	r24, r25
    1c88:	69 f1       	breq	.+90     	; 0x1ce4 <_ZN12StateMachine6updateEv+0x9c>

            // FIXME: This should probably be handled in the UI module but not
            // 100% on how to decouple them at this stage
            static Timer drawTimer = Timer(OLED_FRAMERATE);
            if (currentHandler
                && Ui::shouldDrawUpdate
    1c8a:	80 91 b5 02 	lds	r24, 0x02B5	; 0x8002b5 <_ZN2Ui16shouldDrawUpdateE>
    1c8e:	88 23       	and	r24, r24
    1c90:	49 f1       	breq	.+82     	; 0x1ce4 <_ZN12StateMachine6updateEv+0x9c>
                && drawTimer.hasTicked()
    1c92:	80 ea       	ldi	r24, 0xA0	; 160
    1c94:	92 e0       	ldi	r25, 0x02	; 2
    1c96:	0e 94 48 16 	call	0x2c90	; 0x2c90 <_ZN5Timer9hasTickedEv>
    1c9a:	81 11       	cpse	r24, r1
    1c9c:	01 c0       	rjmp	.+2      	; 0x1ca0 <_ZN12StateMachine6updateEv+0x58>
    1c9e:	08 95       	ret
            ) {
                if (Ui::shouldFullRedraw) {
    1ca0:	80 91 b3 02 	lds	r24, 0x02B3	; 0x8002b3 <_ZN2Ui16shouldFullRedrawE>
    1ca4:	88 23       	and	r24, r24
    1ca6:	69 f0       	breq	.+26     	; 0x1cc2 <_ZN12StateMachine6updateEv+0x7a>
                    currentHandler->onInitialDraw();
    1ca8:	80 91 b1 02 	lds	r24, 0x02B1	; 0x8002b1 <_ZN12StateMachineL14currentHandlerE>
    1cac:	90 91 b2 02 	lds	r25, 0x02B2	; 0x8002b2 <_ZN12StateMachineL14currentHandlerE+0x1>
    1cb0:	dc 01       	movw	r26, r24
    1cb2:	ed 91       	ld	r30, X+
    1cb4:	fc 91       	ld	r31, X
    1cb6:	01 90       	ld	r0, Z+
    1cb8:	f0 81       	ld	r31, Z
    1cba:	e0 2d       	mov	r30, r0
    1cbc:	09 95       	icall
                    Ui::shouldFullRedraw = false;
    1cbe:	10 92 b3 02 	sts	0x02B3, r1	; 0x8002b3 <_ZN2Ui16shouldFullRedrawE>
                }

                currentHandler->onUpdateDraw();
    1cc2:	80 91 b1 02 	lds	r24, 0x02B1	; 0x8002b1 <_ZN12StateMachineL14currentHandlerE>
    1cc6:	90 91 b2 02 	lds	r25, 0x02B2	; 0x8002b2 <_ZN12StateMachineL14currentHandlerE+0x1>
    1cca:	dc 01       	movw	r26, r24
    1ccc:	ed 91       	ld	r30, X+
    1cce:	fc 91       	ld	r31, X
    1cd0:	02 80       	ldd	r0, Z+2	; 0x02
    1cd2:	f3 81       	ldd	r31, Z+3	; 0x03
    1cd4:	e0 2d       	mov	r30, r0
    1cd6:	09 95       	icall
                Ui::shouldDrawUpdate = false;
    1cd8:	10 92 b5 02 	sts	0x02B5, r1	; 0x8002b5 <_ZN2Ui16shouldDrawUpdateE>
                drawTimer.reset();
    1cdc:	80 ea       	ldi	r24, 0xA0	; 160
    1cde:	92 e0       	ldi	r25, 0x02	; 2
    1ce0:	0c 94 67 16 	jmp	0x2cce	; 0x2cce <_ZN5Timer5resetEv>
    1ce4:	08 95       	ret

00001ce6 <_ZN12StateMachine11switchStateENS_5StateE>:
            }
        }
    }

    void switchState(State newState) {
    1ce6:	cf 93       	push	r28
    1ce8:	df 93       	push	r29
    1cea:	c8 2f       	mov	r28, r24
        if (currentHandler != nullptr) {
    1cec:	80 91 b1 02 	lds	r24, 0x02B1	; 0x8002b1 <_ZN12StateMachineL14currentHandlerE>
    1cf0:	90 91 b2 02 	lds	r25, 0x02B2	; 0x8002b2 <_ZN12StateMachineL14currentHandlerE+0x1>
    1cf4:	00 97       	sbiw	r24, 0x00	; 0
    1cf6:	39 f0       	breq	.+14     	; 0x1d06 <_ZN12StateMachine11switchStateENS_5StateE+0x20>
            currentHandler->onExit();
    1cf8:	dc 01       	movw	r26, r24
    1cfa:	ed 91       	ld	r30, X+
    1cfc:	fc 91       	ld	r31, X
    1cfe:	00 84       	ldd	r0, Z+8	; 0x08
    1d00:	f1 85       	ldd	r31, Z+9	; 0x09
    1d02:	e0 2d       	mov	r30, r0
    1d04:	09 95       	icall
        }

        lastState = currentState;
    1d06:	80 91 b0 02 	lds	r24, 0x02B0	; 0x8002b0 <_ZN12StateMachine12currentStateE>
    1d0a:	80 93 af 02 	sts	0x02AF, r24	; 0x8002af <_ZN12StateMachine9lastStateE>
        currentState = newState;
    1d0e:	c0 93 b0 02 	sts	0x02B0, r28	; 0x8002b0 <_ZN12StateMachine12currentStateE>
        // currentHandler = getStateHandler(newState);
        switch (newState){
    1d12:	c3 30       	cpi	r28, 0x03	; 3
    1d14:	09 f4       	brne	.+2      	; 0x1d18 <_ZN12StateMachine11switchStateENS_5StateE+0x32>
    1d16:	53 c0       	rjmp	.+166    	; 0x1dbe <_ZN12StateMachine11switchStateENS_5StateE+0xd8>
    1d18:	d0 f4       	brcc	.+52     	; 0x1d4e <_ZN12StateMachine11switchStateENS_5StateE+0x68>
    1d1a:	c1 30       	cpi	r28, 0x01	; 1
    1d1c:	61 f1       	breq	.+88     	; 0x1d76 <_ZN12StateMachine11switchStateENS_5StateE+0x90>
    1d1e:	c2 30       	cpi	r28, 0x02	; 2
    1d20:	09 f0       	breq	.+2      	; 0x1d24 <_ZN12StateMachine11switchStateENS_5StateE+0x3e>
    1d22:	92 c0       	rjmp	.+292    	; 0x1e48 <_ZN12StateMachine11switchStateENS_5StateE+0x162>
                break;
            case State::SCREENSAVER:
                currentHandler = new  ScreensaverStateHandler();
                break;
            case State::BANDSCAN:
                currentHandler = new BandScanStateHandler();
    1d24:	84 e3       	ldi	r24, 0x34	; 52
    1d26:	90 e0       	ldi	r25, 0x00	; 0
    1d28:	0e 94 66 19 	call	0x32cc	; 0x32cc <_Znwj>
    1d2c:	24 e3       	ldi	r18, 0x34	; 52
    1d2e:	ec 01       	movw	r28, r24
    1d30:	19 92       	st	Y+, r1
    1d32:	2a 95       	dec	r18
    1d34:	e9 f7       	brne	.-6      	; 0x1d30 <_ZN12StateMachine11switchStateENS_5StateE+0x4a>
#include "channels.h"
#include "state.h"


namespace StateMachine {
    class BandScanStateHandler : public StateMachine::StateHandler {
    1d36:	2b e0       	ldi	r18, 0x0B	; 11
    1d38:	31 e0       	ldi	r19, 0x01	; 1
    1d3a:	fc 01       	movw	r30, r24
    1d3c:	31 83       	std	Z+1, r19	; 0x01
    1d3e:	20 83       	st	Z, r18
    1d40:	34 96       	adiw	r30, 0x04	; 4
    1d42:	20 e3       	ldi	r18, 0x30	; 48
    1d44:	df 01       	movw	r26, r30
    1d46:	1d 92       	st	X+, r1
    1d48:	2a 95       	dec	r18
    1d4a:	e9 f7       	brne	.-6      	; 0x1d46 <_ZN12StateMachine11switchStateENS_5StateE+0x60>
    1d4c:	78 c0       	rjmp	.+240    	; 0x1e3e <_ZN12StateMachine11switchStateENS_5StateE+0x158>
        }

        lastState = currentState;
        currentState = newState;
        // currentHandler = getStateHandler(newState);
        switch (newState){
    1d4e:	c5 30       	cpi	r28, 0x05	; 5
    1d50:	09 f4       	brne	.+2      	; 0x1d54 <_ZN12StateMachine11switchStateENS_5StateE+0x6e>
    1d52:	6c c0       	rjmp	.+216    	; 0x1e2c <_ZN12StateMachine11switchStateENS_5StateE+0x146>
    1d54:	08 f4       	brcc	.+2      	; 0x1d58 <_ZN12StateMachine11switchStateENS_5StateE+0x72>
    1d56:	4d c0       	rjmp	.+154    	; 0x1df2 <_ZN12StateMachine11switchStateENS_5StateE+0x10c>
    1d58:	c6 30       	cpi	r28, 0x06	; 6
    1d5a:	09 f0       	breq	.+2      	; 0x1d5e <_ZN12StateMachine11switchStateENS_5StateE+0x78>
    1d5c:	75 c0       	rjmp	.+234    	; 0x1e48 <_ZN12StateMachine11switchStateENS_5StateE+0x162>
                break;
            case State::SETTINGS:
                currentHandler = new   SettingsStateHandler();
                break;
            case State::SETTINGS_RSSI:
                currentHandler = new   SettingsRssiStateHandler();
    1d5e:	84 e0       	ldi	r24, 0x04	; 4
    1d60:	90 e0       	ldi	r25, 0x00	; 0
    1d62:	0e 94 66 19 	call	0x32cc	; 0x32cc <_Znwj>
    1d66:	fc 01       	movw	r30, r24
    1d68:	12 82       	std	Z+2, r1	; 0x02
    1d6a:	13 82       	std	Z+3, r1	; 0x03

#include "state.h"


namespace StateMachine {
    class SettingsRssiStateHandler : public StateMachine::StateHandler {
    1d6c:	8b e5       	ldi	r24, 0x5B	; 91
    1d6e:	91 e0       	ldi	r25, 0x01	; 1
    1d70:	91 83       	std	Z+1, r25	; 0x01
    1d72:	80 83       	st	Z, r24
    1d74:	56 c0       	rjmp	.+172    	; 0x1e22 <_ZN12StateMachine11switchStateENS_5StateE+0x13c>
        lastState = currentState;
        currentState = newState;
        // currentHandler = getStateHandler(newState);
        switch (newState){
            case State::SEARCH:
                currentHandler = new  SearchStateHandler();
    1d76:	87 e2       	ldi	r24, 0x27	; 39
    1d78:	90 e0       	ldi	r25, 0x00	; 0
    1d7a:	0e 94 66 19 	call	0x32cc	; 0x32cc <_Znwj>
    1d7e:	fc 01       	movw	r30, r24
    1d80:	87 e2       	ldi	r24, 0x27	; 39
    1d82:	df 01       	movw	r26, r30
    1d84:	1d 92       	st	X+, r1
    1d86:	8a 95       	dec	r24
    1d88:	e9 f7       	brne	.-6      	; 0x1d84 <_ZN12StateMachine11switchStateENS_5StateE+0x9e>

#define PEAK_LOOKAHEAD 4


namespace StateMachine {
    class SearchStateHandler : public StateMachine::StateHandler {
    1d8a:	8b e3       	ldi	r24, 0x3B	; 59
    1d8c:	91 e0       	ldi	r25, 0x01	; 1
    1d8e:	91 83       	std	Z+1, r25	; 0x01
    1d90:	80 83       	st	Z, r24
    1d92:	c3 83       	std	Z+3, r28	; 0x03
    1d94:	17 82       	std	Z+7, r1	; 0x07
    1d96:	10 86       	std	Z+8, r1	; 0x08
    1d98:	11 86       	std	Z+9, r1	; 0x09
    1d9a:	12 86       	std	Z+10, r1	; 0x0a
    1d9c:	c3 87       	std	Z+11, r28	; 0x0b
                MenuIcon icon = nullptr;
                MenuHandler handler = nullptr;
            };


            StateMenuHelper(void* state) { this->state = state; }
    1d9e:	df 01       	movw	r26, r30
    1da0:	1c 96       	adiw	r26, 0x0c	; 12
    1da2:	80 e1       	ldi	r24, 0x10	; 16
    1da4:	ed 01       	movw	r28, r26
    1da6:	19 92       	st	Y+, r1
    1da8:	8a 95       	dec	r24
    1daa:	e9 f7       	brne	.-6      	; 0x1da6 <_ZN12StateMachine11switchStateENS_5StateE+0xc0>
    1dac:	17 8e       	std	Z+31, r1	; 0x1f
    1dae:	16 8e       	std	Z+30, r1	; 0x1e
    1db0:	11 a2       	std	Z+33, r1	; 0x21
    1db2:	10 a2       	std	Z+32, r1	; 0x20
    1db4:	12 a2       	std	Z+34, r1	; 0x22
    1db6:	13 a2       	std	Z+35, r1	; 0x23
    1db8:	f5 8f       	std	Z+29, r31	; 0x1d
    1dba:	e4 8f       	std	Z+28, r30	; 0x1c
    1dbc:	32 c0       	rjmp	.+100    	; 0x1e22 <_ZN12StateMachine11switchStateENS_5StateE+0x13c>
                break;
            case State::SCREENSAVER:
                currentHandler = new  ScreensaverStateHandler();
    1dbe:	8a e0       	ldi	r24, 0x0A	; 10
    1dc0:	90 e0       	ldi	r25, 0x00	; 0
    1dc2:	0e 94 66 19 	call	0x32cc	; 0x32cc <_Znwj>
    1dc6:	ec 01       	movw	r28, r24
    1dc8:	8a e0       	ldi	r24, 0x0A	; 10
    1dca:	fe 01       	movw	r30, r28
    1dcc:	11 92       	st	Z+, r1
    1dce:	8a 95       	dec	r24
    1dd0:	e9 f7       	brne	.-6      	; 0x1dcc <_ZN12StateMachine11switchStateENS_5StateE+0xe6>
#include "timer.h"
#include "settings.h"


namespace StateMachine {
    class ScreensaverStateHandler : public StateMachine::StateHandler {
    1dd2:	2b e2       	ldi	r18, 0x2B	; 43
    1dd4:	31 e0       	ldi	r19, 0x01	; 1
    1dd6:	de 01       	movw	r26, r28
    1dd8:	2d 93       	st	X+, r18
    1dda:	3d 93       	st	X+, r19
    1ddc:	cd 01       	movw	r24, r26
    1dde:	68 eb       	ldi	r22, 0xB8	; 184
    1de0:	7b e0       	ldi	r23, 0x0B	; 11
    1de2:	0e 94 31 16 	call	0x2c62	; 0x2c62 <_ZN5TimerC1Ej>
    1de6:	19 86       	std	Y+9, r1	; 0x09
    1de8:	d0 93 b2 02 	sts	0x02B2, r29	; 0x8002b2 <_ZN12StateMachineL14currentHandlerE+0x1>
    1dec:	c0 93 b1 02 	sts	0x02B1, r28	; 0x8002b1 <_ZN12StateMachineL14currentHandlerE>
                break;
    1df0:	2f c0       	rjmp	.+94     	; 0x1e50 <_ZN12StateMachine11switchStateENS_5StateE+0x16a>
            case State::BANDSCAN:
                currentHandler = new BandScanStateHandler();
                break;
            case State::MENU:
                currentHandler = new  MenuStateHandler();
    1df2:	8e e1       	ldi	r24, 0x1E	; 30
    1df4:	90 e0       	ldi	r25, 0x00	; 0
    1df6:	0e 94 66 19 	call	0x32cc	; 0x32cc <_Znwj>
    1dfa:	fc 01       	movw	r30, r24
    1dfc:	8e e1       	ldi	r24, 0x1E	; 30
    1dfe:	ef 01       	movw	r28, r30
    1e00:	19 92       	st	Y+, r1
    1e02:	8a 95       	dec	r24
    1e04:	e9 f7       	brne	.-6      	; 0x1e00 <_ZN12StateMachine11switchStateENS_5StateE+0x11a>
#include "state.h"
#include "ui_menu.h"


namespace StateMachine {
    class MenuStateHandler : public StateMachine::StateHandler {
    1e06:	df 01       	movw	r26, r30
    1e08:	8b e1       	ldi	r24, 0x1B	; 27
    1e0a:	91 e0       	ldi	r25, 0x01	; 1
    1e0c:	8d 93       	st	X+, r24
    1e0e:	9d 93       	st	X+, r25
        const char* text = nullptr;
        Ui::MenuHandler handler = nullptr;
        const unsigned char* icon = nullptr;
    };

    class MenuHelper {
    1e10:	88 e1       	ldi	r24, 0x18	; 24
    1e12:	ed 01       	movw	r28, r26
    1e14:	19 92       	st	Y+, r1
    1e16:	8a 95       	dec	r24
    1e18:	e9 f7       	brne	.-6      	; 0x1e14 <_ZN12StateMachine11switchStateENS_5StateE+0x12e>
    1e1a:	13 8e       	std	Z+27, r1	; 0x1b
    1e1c:	12 8e       	std	Z+26, r1	; 0x1a
    1e1e:	15 8e       	std	Z+29, r1	; 0x1d
    1e20:	14 8e       	std	Z+28, r1	; 0x1c
    1e22:	f0 93 b2 02 	sts	0x02B2, r31	; 0x8002b2 <_ZN12StateMachineL14currentHandlerE+0x1>
    1e26:	e0 93 b1 02 	sts	0x02B1, r30	; 0x8002b1 <_ZN12StateMachineL14currentHandlerE>
                break;
    1e2a:	12 c0       	rjmp	.+36     	; 0x1e50 <_ZN12StateMachine11switchStateENS_5StateE+0x16a>
            case State::SETTINGS:
                currentHandler = new   SettingsStateHandler();
    1e2c:	82 e0       	ldi	r24, 0x02	; 2
    1e2e:	90 e0       	ldi	r25, 0x00	; 0
    1e30:	0e 94 66 19 	call	0x32cc	; 0x32cc <_Znwj>

#include "state.h"


namespace StateMachine {
    class SettingsStateHandler : public StateMachine::StateHandler {
    1e34:	2b e4       	ldi	r18, 0x4B	; 75
    1e36:	31 e0       	ldi	r19, 0x01	; 1
    1e38:	fc 01       	movw	r30, r24
    1e3a:	31 83       	std	Z+1, r19	; 0x01
    1e3c:	20 83       	st	Z, r18
    1e3e:	90 93 b2 02 	sts	0x02B2, r25	; 0x8002b2 <_ZN12StateMachineL14currentHandlerE+0x1>
    1e42:	80 93 b1 02 	sts	0x02B1, r24	; 0x8002b1 <_ZN12StateMachineL14currentHandlerE>
                break;
    1e46:	04 c0       	rjmp	.+8      	; 0x1e50 <_ZN12StateMachine11switchStateENS_5StateE+0x16a>
            case State::SETTINGS_RSSI:
                currentHandler = new   SettingsRssiStateHandler();
                break;
            default:
                currentHandler = nullptr;
    1e48:	10 92 b2 02 	sts	0x02B2, r1	; 0x8002b2 <_ZN12StateMachineL14currentHandlerE+0x1>
    1e4c:	10 92 b1 02 	sts	0x02B1, r1	; 0x8002b1 <_ZN12StateMachineL14currentHandlerE>
                break;
        }

        if (currentHandler != nullptr) {
    1e50:	80 91 b1 02 	lds	r24, 0x02B1	; 0x8002b1 <_ZN12StateMachineL14currentHandlerE>
    1e54:	90 91 b2 02 	lds	r25, 0x02B2	; 0x8002b2 <_ZN12StateMachineL14currentHandlerE+0x1>
    1e58:	00 97       	sbiw	r24, 0x00	; 0
    1e5a:	a1 f0       	breq	.+40     	; 0x1e84 <_ZN12StateMachine11switchStateENS_5StateE+0x19e>
            currentHandler->onEnter();
    1e5c:	dc 01       	movw	r26, r24
    1e5e:	ed 91       	ld	r30, X+
    1e60:	fc 91       	ld	r31, X
    1e62:	04 80       	ldd	r0, Z+4	; 0x04
    1e64:	f5 81       	ldd	r31, Z+5	; 0x05
    1e66:	e0 2d       	mov	r30, r0
    1e68:	09 95       	icall
            currentHandler->onInitialDraw();
    1e6a:	80 91 b1 02 	lds	r24, 0x02B1	; 0x8002b1 <_ZN12StateMachineL14currentHandlerE>
    1e6e:	90 91 b2 02 	lds	r25, 0x02B2	; 0x8002b2 <_ZN12StateMachineL14currentHandlerE+0x1>
    1e72:	ec 01       	movw	r28, r24
    1e74:	e8 81       	ld	r30, Y
    1e76:	f9 81       	ldd	r31, Y+1	; 0x01
    1e78:	01 90       	ld	r0, Z+
    1e7a:	f0 81       	ld	r31, Z
    1e7c:	e0 2d       	mov	r30, r0
        }
    }
    1e7e:	df 91       	pop	r29
    1e80:	cf 91       	pop	r28
                break;
        }

        if (currentHandler != nullptr) {
            currentHandler->onEnter();
            currentHandler->onInitialDraw();
    1e82:	09 94       	ijmp
        }
    }
    1e84:	df 91       	pop	r29
    1e86:	cf 91       	pop	r28
    1e88:	08 95       	ret

00001e8a <_GLOBAL__sub_I__ZN12StateMachine12currentStateE>:


    static uint8_t stateBuffer[STATE_BUFFER_SIZE];
    static StateHandler* currentHandler = nullptr;
    State currentState = State::BOOT;
    State lastState = currentState;
    1e8a:	80 91 b0 02 	lds	r24, 0x02B0	; 0x8002b0 <_ZN12StateMachine12currentStateE>
    1e8e:	80 93 af 02 	sts	0x02AF, r24	; 0x8002af <_ZN12StateMachine9lastStateE>
    1e92:	08 95       	ret

00001e94 <_ZN12StateMachine20BandScanStateHandler7onEnterEv>:
#include "ui.h"
#include "ui_menu.h"


void StateMachine::BandScanStateHandler::onEnter() {
    orderedChanelIndex = 0;
    1e94:	fc 01       	movw	r30, r24
    1e96:	12 82       	std	Z+2, r1	; 0x02
    lastChannelIndex = Receiver::activeChannel;
    1e98:	20 91 85 02 	lds	r18, 0x0285	; 0x800285 <_ZN8Receiver13activeChannelE>
    1e9c:	23 83       	std	Z+3, r18	; 0x03
    1e9e:	08 95       	ret

00001ea0 <_ZN12StateMachine20BandScanStateHandler6onExitEv>:
}

void StateMachine::BandScanStateHandler::onExit() {
    Receiver::setChannel(lastChannelIndex);
    1ea0:	fc 01       	movw	r30, r24
    1ea2:	83 81       	ldd	r24, Z+3	; 0x03
    1ea4:	0c 94 ca 0a 	jmp	0x1594	; 0x1594 <_ZN8Receiver10setChannelEh>

00001ea8 <_ZN12StateMachine20BandScanStateHandler8onUpdateEv>:
}


void StateMachine::BandScanStateHandler::onUpdate() {
    1ea8:	cf 93       	push	r28
    1eaa:	df 93       	push	r29
    1eac:	ec 01       	movw	r28, r24
    if (!Receiver::isRssiStable())
    1eae:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <_ZN8Receiver12isRssiStableEv>
    1eb2:	88 23       	and	r24, r24
    1eb4:	e9 f0       	breq	.+58     	; 0x1ef0 <_ZN12StateMachine20BandScanStateHandler8onUpdateEv+0x48>
        return;

    #ifdef USE_DIVERSITY
        rssiData[orderedChanelIndex] = (Receiver::rssiA + Receiver::rssiB) / 2;
    1eb6:	8a 81       	ldd	r24, Y+2	; 0x02
    1eb8:	90 e0       	ldi	r25, 0x00	; 0
    1eba:	fe 01       	movw	r30, r28
    1ebc:	e8 0f       	add	r30, r24
    1ebe:	f9 1f       	adc	r31, r25
    1ec0:	40 91 84 02 	lds	r20, 0x0284	; 0x800284 <_ZN8Receiver5rssiAE>
    1ec4:	20 91 69 02 	lds	r18, 0x0269	; 0x800269 <_ZN8Receiver5rssiBE>
    1ec8:	30 e0       	ldi	r19, 0x00	; 0
    1eca:	24 0f       	add	r18, r20
    1ecc:	31 1d       	adc	r19, r1
    1ece:	35 95       	asr	r19
    1ed0:	27 95       	ror	r18
    1ed2:	24 83       	std	Z+4, r18	; 0x04
    #else
        rssiData[orderedChanelIndex] = Receiver::rssiA;
    #endif

    orderedChanelIndex = (orderedChanelIndex + 1) % (CHANNELS_SIZE);
    1ed4:	01 96       	adiw	r24, 0x01	; 1
    1ed6:	60 e3       	ldi	r22, 0x30	; 48
    1ed8:	70 e0       	ldi	r23, 0x00	; 0
    1eda:	0e 94 8c 31 	call	0x6318	; 0x6318 <__divmodhi4>
    1ede:	8a 83       	std	Y+2, r24	; 0x02
    Receiver::setChannel(Channels::getOrderedIndex(orderedChanelIndex));
    1ee0:	0e 94 a5 0a 	call	0x154a	; 0x154a <_ZN8Channels15getOrderedIndexEh>
    1ee4:	0e 94 ca 0a 	call	0x1594	; 0x1594 <_ZN8Receiver10setChannelEh>
    Ui::needUpdate();

    if (orderedChanelIndex == 0) {

    }
}
    1ee8:	df 91       	pop	r29
    1eea:	cf 91       	pop	r28
    #endif

    orderedChanelIndex = (orderedChanelIndex + 1) % (CHANNELS_SIZE);
    Receiver::setChannel(Channels::getOrderedIndex(orderedChanelIndex));

    Ui::needUpdate();
    1eec:	0c 94 b0 16 	jmp	0x2d60	; 0x2d60 <_ZN2Ui10needUpdateEv>

    if (orderedChanelIndex == 0) {

    }
}
    1ef0:	df 91       	pop	r29
    1ef2:	cf 91       	pop	r28
    1ef4:	08 95       	ret

00001ef6 <_ZN12StateMachine20BandScanStateHandler13onInitialDrawEv>:
#define GRAPH_Y 0
#define GRAPH_W (BORDER_RIGHT_X - GRAPH_X)
#define GRAPH_H BORDER_BOTTOM_Y


void StateMachine::BandScanStateHandler::onInitialDraw() {
    1ef6:	0f 93       	push	r16
    1ef8:	1f 93       	push	r17
    1efa:	cf 93       	push	r28
    1efc:	df 93       	push	r29
    Ui::clear();
    1efe:	0e 94 ac 16 	call	0x2d58	; 0x2d58 <_ZN2Ui5clearEv>
    Ui::display.drawFastVLine(
        BORDER_LEFT_X,
        BORDER_LEFT_Y,
        BORDER_LEFT_H,
        WHITE
    );
    1f02:	01 e0       	ldi	r16, 0x01	; 1
    1f04:	10 e0       	ldi	r17, 0x00	; 0
    1f06:	28 e3       	ldi	r18, 0x38	; 56
    1f08:	30 e0       	ldi	r19, 0x00	; 0
    1f0a:	40 e0       	ldi	r20, 0x00	; 0
    1f0c:	50 e0       	ldi	r21, 0x00	; 0
    1f0e:	60 e0       	ldi	r22, 0x00	; 0
    1f10:	70 e0       	ldi	r23, 0x00	; 0
    1f12:	86 eb       	ldi	r24, 0xB6	; 182
    1f14:	92 e0       	ldi	r25, 0x02	; 2
    1f16:	0e 94 23 2c 	call	0x5846	; 0x5846 <_ZN16Adafruit_SSD130613drawFastVLineEiiij>
    Ui::display.drawFastVLine(
        BORDER_RIGHT_X,
        BORDER_RIGHT_Y,
        BORDER_RIGHT_H,
        WHITE
    );
    1f1a:	28 e3       	ldi	r18, 0x38	; 56
    1f1c:	30 e0       	ldi	r19, 0x00	; 0
    1f1e:	40 e0       	ldi	r20, 0x00	; 0
    1f20:	50 e0       	ldi	r21, 0x00	; 0
    1f22:	6f e7       	ldi	r22, 0x7F	; 127
    1f24:	70 e0       	ldi	r23, 0x00	; 0
    1f26:	86 eb       	ldi	r24, 0xB6	; 182
    1f28:	92 e0       	ldi	r25, 0x02	; 2
    1f2a:	0e 94 23 2c 	call	0x5846	; 0x5846 <_ZN16Adafruit_SSD130613drawFastVLineEiiij>
    Ui::display.drawFastHLine(
        BORDER_BOTTOM_X,
        BORDER_BOTTOM_Y,
        BORDER_BOTTOM_W,
        WHITE
    );
    1f2e:	20 e8       	ldi	r18, 0x80	; 128
    1f30:	30 e0       	ldi	r19, 0x00	; 0
    1f32:	47 e3       	ldi	r20, 0x37	; 55
    1f34:	50 e0       	ldi	r21, 0x00	; 0
    1f36:	60 e0       	ldi	r22, 0x00	; 0
    1f38:	70 e0       	ldi	r23, 0x00	; 0
    1f3a:	86 eb       	ldi	r24, 0xB6	; 182
    1f3c:	92 e0       	ldi	r25, 0x02	; 2
    1f3e:	0e 94 e2 2b 	call	0x57c4	; 0x57c4 <_ZN16Adafruit_SSD130613drawFastHLineEiiij>
    Ui::display.drawFastHLine(
        BORDER_PROGRESS_LEFT_X,
        SCREEN_HEIGHT - 1,
        BORDER_PROGRESS_RIGHT_X - BORDER_PROGRESS_LEFT_X,
        WHITE
    );
    1f42:	2f e4       	ldi	r18, 0x4F	; 79
    1f44:	30 e0       	ldi	r19, 0x00	; 0
    1f46:	4f e3       	ldi	r20, 0x3F	; 63
    1f48:	50 e0       	ldi	r21, 0x00	; 0
    1f4a:	68 e1       	ldi	r22, 0x18	; 24
    1f4c:	70 e0       	ldi	r23, 0x00	; 0
    1f4e:	86 eb       	ldi	r24, 0xB6	; 182
    1f50:	92 e0       	ldi	r25, 0x02	; 2
    1f52:	0e 94 e2 2b 	call	0x57c4	; 0x57c4 <_ZN16Adafruit_SSD130613drawFastHLineEiiij>
    Ui::display.drawFastVLine(
        BORDER_PROGRESS_LEFT_X,
        BORDER_PROGRESS_Y,
        BORDER_PROGRESS_H,
        WHITE
    );
    1f56:	29 e0       	ldi	r18, 0x09	; 9
    1f58:	30 e0       	ldi	r19, 0x00	; 0
    1f5a:	47 e3       	ldi	r20, 0x37	; 55
    1f5c:	50 e0       	ldi	r21, 0x00	; 0
    1f5e:	68 e1       	ldi	r22, 0x18	; 24
    1f60:	70 e0       	ldi	r23, 0x00	; 0
    1f62:	86 eb       	ldi	r24, 0xB6	; 182
    1f64:	92 e0       	ldi	r25, 0x02	; 2
    1f66:	0e 94 23 2c 	call	0x5846	; 0x5846 <_ZN16Adafruit_SSD130613drawFastVLineEiiij>
    Ui::display.drawFastVLine(
        BORDER_PROGRESS_RIGHT_X,
        BORDER_PROGRESS_Y,
        BORDER_PROGRESS_H,
        WHITE
    );
    1f6a:	29 e0       	ldi	r18, 0x09	; 9
    1f6c:	30 e0       	ldi	r19, 0x00	; 0
    1f6e:	47 e3       	ldi	r20, 0x37	; 55
    1f70:	50 e0       	ldi	r21, 0x00	; 0
    1f72:	67 e6       	ldi	r22, 0x67	; 103
    1f74:	70 e0       	ldi	r23, 0x00	; 0
    1f76:	86 eb       	ldi	r24, 0xB6	; 182
    1f78:	92 e0       	ldi	r25, 0x02	; 2
    1f7a:	0e 94 23 2c 	call	0x5846	; 0x5846 <_ZN16Adafruit_SSD130613drawFastVLineEiiij>

    Ui::display.setTextSize(1);
    1f7e:	61 e0       	ldi	r22, 0x01	; 1
    1f80:	86 eb       	ldi	r24, 0xB6	; 182
    1f82:	92 e0       	ldi	r25, 0x02	; 2
    1f84:	0e 94 5c 26 	call	0x4cb8	; 0x4cb8 <_ZN12Adafruit_GFX11setTextSizeEh>
    @param   c   16-bit 5-6-5 Color to draw text with
    @note    For 'transparent' background, background and foreground
             are set to same color rather than using a separate flag.
  */
  /**********************************************************************/
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
    1f88:	c6 eb       	ldi	r28, 0xB6	; 182
    1f8a:	d2 e0       	ldi	r29, 0x02	; 2
    1f8c:	81 e0       	ldi	r24, 0x01	; 1
    1f8e:	90 e0       	ldi	r25, 0x00	; 0
    1f90:	9b 8b       	std	Y+19, r25	; 0x13
    1f92:	8a 8b       	std	Y+18, r24	; 0x12
    1f94:	99 8b       	std	Y+17, r25	; 0x11
    1f96:	88 8b       	std	Y+16, r24	; 0x10
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) {
    cursor_x = x;
    1f98:	1d 86       	std	Y+13, r1	; 0x0d
    1f9a:	1c 86       	std	Y+12, r1	; 0x0c
    cursor_y = y;
    1f9c:	09 e3       	ldi	r16, 0x39	; 57
    1f9e:	10 e0       	ldi	r17, 0x00	; 0
    1fa0:	1f 87       	std	Y+15, r17	; 0x0f
    1fa2:	0e 87       	std	Y+14, r16	; 0x0e
    Ui::display.setTextColor(WHITE);
    Ui::display.setCursor(CHANNEL_TEXT_LOW_X, CHANNEL_TEXT_LOW_Y);
    Ui::display.print(Channels::getFrequency(Channels::getOrderedIndex(0)));
    1fa4:	80 e0       	ldi	r24, 0x00	; 0
    1fa6:	0e 94 a5 0a 	call	0x154a	; 0x154a <_ZN8Channels15getOrderedIndexEh>
    1faa:	0e 94 85 0a 	call	0x150a	; 0x150a <_ZN8Channels12getFrequencyEh>
    1fae:	4a e0       	ldi	r20, 0x0A	; 10
    1fb0:	50 e0       	ldi	r21, 0x00	; 0
    1fb2:	bc 01       	movw	r22, r24
    1fb4:	ce 01       	movw	r24, r28
    1fb6:	0e 94 03 1a 	call	0x3406	; 0x3406 <_ZN5Print5printEji>
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) {
    cursor_x = x;
    1fba:	89 e6       	ldi	r24, 0x69	; 105
    1fbc:	90 e0       	ldi	r25, 0x00	; 0
    1fbe:	9d 87       	std	Y+13, r25	; 0x0d
    1fc0:	8c 87       	std	Y+12, r24	; 0x0c
    cursor_y = y;
    1fc2:	1f 87       	std	Y+15, r17	; 0x0f
    1fc4:	0e 87       	std	Y+14, r16	; 0x0e

    Ui::display.setCursor(CHANNEL_TEXT_HIGH_X, CHANNEL_TEXT_HIGH_Y);
    Ui::display.print(
    1fc6:	8f e2       	ldi	r24, 0x2F	; 47
    1fc8:	0e 94 a5 0a 	call	0x154a	; 0x154a <_ZN8Channels15getOrderedIndexEh>
    1fcc:	0e 94 85 0a 	call	0x150a	; 0x150a <_ZN8Channels12getFrequencyEh>
        Channels::getFrequency(Channels::getOrderedIndex(CHANNELS_SIZE - 1)));
    1fd0:	4a e0       	ldi	r20, 0x0A	; 10
    1fd2:	50 e0       	ldi	r21, 0x00	; 0
    1fd4:	bc 01       	movw	r22, r24
    1fd6:	ce 01       	movw	r24, r28
    1fd8:	0e 94 03 1a 	call	0x3406	; 0x3406 <_ZN5Print5printEji>

    Ui::needDisplay();
}
    1fdc:	df 91       	pop	r29
    1fde:	cf 91       	pop	r28
    1fe0:	1f 91       	pop	r17
    1fe2:	0f 91       	pop	r16

    Ui::display.setCursor(CHANNEL_TEXT_HIGH_X, CHANNEL_TEXT_HIGH_Y);
    Ui::display.print(
        Channels::getFrequency(Channels::getOrderedIndex(CHANNELS_SIZE - 1)));

    Ui::needDisplay();
    1fe4:	0c 94 b4 16 	jmp	0x2d68	; 0x2d68 <_ZN2Ui11needDisplayEv>

00001fe8 <_ZN12StateMachine20BandScanStateHandler12onUpdateDrawEv>:
}

void StateMachine::BandScanStateHandler::onUpdateDraw() {
    1fe8:	cf 92       	push	r12
    1fea:	ef 92       	push	r14
    1fec:	ff 92       	push	r15
    1fee:	0f 93       	push	r16
    1ff0:	1f 93       	push	r17
    1ff2:	cf 93       	push	r28
    1ff4:	df 93       	push	r29
    1ff6:	ec 01       	movw	r28, r24
        100,
        GRAPH_X,
        GRAPH_Y,
        GRAPH_W,
        GRAPH_H
    );
    1ff8:	27 e3       	ldi	r18, 0x37	; 55
    1ffa:	c2 2e       	mov	r12, r18
    1ffc:	3e e7       	ldi	r19, 0x7E	; 126
    1ffe:	e3 2e       	mov	r14, r19
    2000:	00 e0       	ldi	r16, 0x00	; 0
    2002:	21 e0       	ldi	r18, 0x01	; 1
    2004:	44 e6       	ldi	r20, 0x64	; 100
    2006:	60 e3       	ldi	r22, 0x30	; 48
    2008:	04 96       	adiw	r24, 0x04	; 4
    200a:	0e 94 50 17 	call	0x2ea0	; 0x2ea0 <_ZN2Ui9drawGraphEPKhhhhhhh>
    Ui::display.drawFastHLine(
        BORDER_BOTTOM_X,
        BORDER_BOTTOM_Y,
        BORDER_BOTTOM_W,
        WHITE
    );
    200e:	01 e0       	ldi	r16, 0x01	; 1
    2010:	10 e0       	ldi	r17, 0x00	; 0
    2012:	20 e8       	ldi	r18, 0x80	; 128
    2014:	30 e0       	ldi	r19, 0x00	; 0
    2016:	47 e3       	ldi	r20, 0x37	; 55
    2018:	50 e0       	ldi	r21, 0x00	; 0
    201a:	60 e0       	ldi	r22, 0x00	; 0
    201c:	70 e0       	ldi	r23, 0x00	; 0
    201e:	86 eb       	ldi	r24, 0xB6	; 182
    2020:	92 e0       	ldi	r25, 0x02	; 2
    2022:	0e 94 e2 2b 	call	0x57c4	; 0x57c4 <_ZN16Adafruit_SSD130613drawFastHLineEiiij>
    Ui::clearRect(
        PROGRESS_X,
        PROGRESS_Y,
        PROGRESS_W,
        PROGRESS_H
    );
    2026:	25 e0       	ldi	r18, 0x05	; 5
    2028:	30 e0       	ldi	r19, 0x00	; 0
    202a:	4c e4       	ldi	r20, 0x4C	; 76
    202c:	50 e0       	ldi	r21, 0x00	; 0
    202e:	69 e3       	ldi	r22, 0x39	; 57
    2030:	70 e0       	ldi	r23, 0x00	; 0
    2032:	8a e1       	ldi	r24, 0x1A	; 26
    2034:	90 e0       	ldi	r25, 0x00	; 0
    2036:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <_ZN2Ui9clearRectEiiii>

    uint8_t progressW = orderedChanelIndex * PROGRESS_W / CHANNELS_SIZE + 1;
    203a:	8a 81       	ldd	r24, Y+2	; 0x02
        PROGRESS_X,
        PROGRESS_Y,
        progressW,
        PROGRESS_H,
        WHITE
    );
    203c:	2c e4       	ldi	r18, 0x4C	; 76
    203e:	82 9f       	mul	r24, r18
    2040:	c0 01       	movw	r24, r0
    2042:	11 24       	eor	r1, r1
    2044:	60 e3       	ldi	r22, 0x30	; 48
    2046:	70 e0       	ldi	r23, 0x00	; 0
    2048:	0e 94 8c 31 	call	0x6318	; 0x6318 <__divmodhi4>
    204c:	6f 5f       	subi	r22, 0xFF	; 255
    204e:	26 2f       	mov	r18, r22
    2050:	30 e0       	ldi	r19, 0x00	; 0
    2052:	ee 24       	eor	r14, r14
    2054:	e3 94       	inc	r14
    2056:	f1 2c       	mov	r15, r1
    2058:	05 e0       	ldi	r16, 0x05	; 5
    205a:	10 e0       	ldi	r17, 0x00	; 0
    205c:	49 e3       	ldi	r20, 0x39	; 57
    205e:	50 e0       	ldi	r21, 0x00	; 0
    2060:	6a e1       	ldi	r22, 0x1A	; 26
    2062:	70 e0       	ldi	r23, 0x00	; 0
    2064:	86 eb       	ldi	r24, 0xB6	; 182
    2066:	92 e0       	ldi	r25, 0x02	; 2
    2068:	0e 94 75 1d 	call	0x3aea	; 0x3aea <_ZN12Adafruit_GFX8fillRectEiiiij>

    Ui::needDisplay();
}
    206c:	df 91       	pop	r29
    206e:	cf 91       	pop	r28
    2070:	1f 91       	pop	r17
    2072:	0f 91       	pop	r16
    2074:	ff 90       	pop	r15
    2076:	ef 90       	pop	r14
    2078:	cf 90       	pop	r12
        progressW,
        PROGRESS_H,
        WHITE
    );

    Ui::needDisplay();
    207a:	0c 94 b4 16 	jmp	0x2d68	; 0x2d68 <_ZN2Ui11needDisplayEv>

0000207e <_ZN12StateMachine16MenuStateHandler7onEnterEv>:
static void searchMenuHandler();
static void bandScannerMenuHandler();
static void settingsMenuHandler();


void StateMachine::MenuStateHandler::onEnter() {
    207e:	cf 93       	push	r28
    2080:	df 93       	push	r29
    this->menu.reset();
    2082:	ec 01       	movw	r28, r24
    2084:	22 96       	adiw	r28, 0x02	; 2
    2086:	ce 01       	movw	r24, r28
    2088:	0e 94 f6 17 	call	0x2fec	; 0x2fec <_ZN2Ui10MenuHelper5resetEv>
    this->menu.addItem(PSTR("Search"), searchIcon, searchMenuHandler);
    208c:	29 e6       	ldi	r18, 0x69	; 105
    208e:	30 e1       	ldi	r19, 0x10	; 16
    2090:	43 ee       	ldi	r20, 0xE3	; 227
    2092:	52 e0       	ldi	r21, 0x02	; 2
    2094:	6c ed       	ldi	r22, 0xDC	; 220
    2096:	71 e0       	ldi	r23, 0x01	; 1
    2098:	ce 01       	movw	r24, r28
    209a:	0e 94 fc 17 	call	0x2ff8	; 0x2ff8 <_ZN2Ui10MenuHelper7addItemEPKcPKhPFvvE>
    this->menu.addItem(PSTR("Band Scan"), bandScanIcon, bandScannerMenuHandler);
    209e:	26 e6       	ldi	r18, 0x66	; 102
    20a0:	30 e1       	ldi	r19, 0x10	; 16
    20a2:	43 e6       	ldi	r20, 0x63	; 99
    20a4:	52 e0       	ldi	r21, 0x02	; 2
    20a6:	62 ed       	ldi	r22, 0xD2	; 210
    20a8:	71 e0       	ldi	r23, 0x01	; 1
    20aa:	ce 01       	movw	r24, r28
    20ac:	0e 94 fc 17 	call	0x2ff8	; 0x2ff8 <_ZN2Ui10MenuHelper7addItemEPKcPKhPFvvE>
    this->menu.addItem(PSTR("Settings"), settingsIcon, settingsMenuHandler);
    20b0:	23 e6       	ldi	r18, 0x63	; 99
    20b2:	30 e1       	ldi	r19, 0x10	; 16
    20b4:	43 ee       	ldi	r20, 0xE3	; 227
    20b6:	51 e0       	ldi	r21, 0x01	; 1
    20b8:	69 ec       	ldi	r22, 0xC9	; 201
    20ba:	71 e0       	ldi	r23, 0x01	; 1
    20bc:	ce 01       	movw	r24, r28
}
    20be:	df 91       	pop	r29
    20c0:	cf 91       	pop	r28

void StateMachine::MenuStateHandler::onEnter() {
    this->menu.reset();
    this->menu.addItem(PSTR("Search"), searchIcon, searchMenuHandler);
    this->menu.addItem(PSTR("Band Scan"), bandScanIcon, bandScannerMenuHandler);
    this->menu.addItem(PSTR("Settings"), settingsIcon, settingsMenuHandler);
    20c2:	0c 94 fc 17 	jmp	0x2ff8	; 0x2ff8 <_ZN2Ui10MenuHelper7addItemEPKcPKhPFvvE>

000020c6 <_ZL19settingsMenuHandlerv>:
static void bandScannerMenuHandler() {
    StateMachine::switchState(StateMachine::State::BANDSCAN);
};

static void settingsMenuHandler() {
    StateMachine::switchState(StateMachine::State::SETTINGS);
    20c6:	85 e0       	ldi	r24, 0x05	; 5
    20c8:	0c 94 73 0e 	jmp	0x1ce6	; 0x1ce6 <_ZN12StateMachine11switchStateENS_5StateE>

000020cc <_ZL22bandScannerMenuHandlerv>:
static void searchMenuHandler() {
    StateMachine::switchState(StateMachine::State::SEARCH);
};

static void bandScannerMenuHandler() {
    StateMachine::switchState(StateMachine::State::BANDSCAN);
    20cc:	82 e0       	ldi	r24, 0x02	; 2
    20ce:	0c 94 73 0e 	jmp	0x1ce6	; 0x1ce6 <_ZN12StateMachine11switchStateENS_5StateE>

000020d2 <_ZL17searchMenuHandlerv>:
    }
}


static void searchMenuHandler() {
    StateMachine::switchState(StateMachine::State::SEARCH);
    20d2:	81 e0       	ldi	r24, 0x01	; 1
    20d4:	0c 94 73 0e 	jmp	0x1ce6	; 0x1ce6 <_ZN12StateMachine11switchStateENS_5StateE>

000020d8 <_ZN12StateMachine16MenuStateHandler14onButtonChangeE6ButtonN7Buttons9PressTypeE>:

void StateMachine::MenuStateHandler::onButtonChange(
    Button button,
    Buttons::PressType pressType
) {
    if (pressType != Buttons::PressType::SHORT)
    20d8:	41 11       	cpse	r20, r1
    20da:	12 c0       	rjmp	.+36     	; 0x2100 <_ZN12StateMachine16MenuStateHandler14onButtonChangeE6ButtonN7Buttons9PressTypeE+0x28>
        return;

    switch (button) {
    20dc:	61 30       	cpi	r22, 0x01	; 1
    20de:	41 f0       	breq	.+16     	; 0x20f0 <_ZN12StateMachine16MenuStateHandler14onButtonChangeE6ButtonN7Buttons9PressTypeE+0x18>
    20e0:	18 f0       	brcs	.+6      	; 0x20e8 <_ZN12StateMachine16MenuStateHandler14onButtonChangeE6ButtonN7Buttons9PressTypeE+0x10>
    20e2:	62 30       	cpi	r22, 0x02	; 2
    20e4:	51 f0       	breq	.+20     	; 0x20fa <_ZN12StateMachine16MenuStateHandler14onButtonChangeE6ButtonN7Buttons9PressTypeE+0x22>
    20e6:	08 95       	ret
        case Button::UP:
            this->menu.selectPreviousItem();
    20e8:	02 96       	adiw	r24, 0x02	; 2
    20ea:	0e 94 22 18 	call	0x3044	; 0x3044 <_ZN2Ui10MenuHelper18selectPreviousItemEv>
    20ee:	03 c0       	rjmp	.+6      	; 0x20f6 <_ZN12StateMachine16MenuStateHandler14onButtonChangeE6ButtonN7Buttons9PressTypeE+0x1e>
            Ui::needUpdate();
            break;

        case Button::DOWN:
            this->menu.selectNextItem();
    20f0:	02 96       	adiw	r24, 0x02	; 2
    20f2:	0e 94 14 18 	call	0x3028	; 0x3028 <_ZN2Ui10MenuHelper14selectNextItemEv>
            Ui::needUpdate();
    20f6:	0c 94 b0 16 	jmp	0x2d60	; 0x2d60 <_ZN2Ui10needUpdateEv>
            break;

        case Button::MODE:
            this->menu.activateItem();
    20fa:	02 96       	adiw	r24, 0x02	; 2
    20fc:	0c 94 30 18 	jmp	0x3060	; 0x3060 <_ZN2Ui10MenuHelper12activateItemEv>
    2100:	08 95       	ret

00002102 <_ZN12StateMachine16MenuStateHandler13drawMenuEntryEv>:
    drawMenuEntry();
    Ui::needDisplay();
}


void StateMachine::MenuStateHandler::drawMenuEntry() {
    2102:	cf 92       	push	r12
    2104:	df 92       	push	r13
    2106:	ef 92       	push	r14
    2108:	ff 92       	push	r15
    210a:	0f 93       	push	r16
    210c:	1f 93       	push	r17
    210e:	cf 93       	push	r28
    2110:	df 93       	push	r29
    const Ui::MenuItem* item = this->menu.getCurrentItem();
    2112:	02 96       	adiw	r24, 0x02	; 2
    2114:	0e 94 3f 18 	call	0x307e	; 0x307e <_ZN2Ui10MenuHelper14getCurrentItemEv>
    2118:	ec 01       	movw	r28, r24
    const uint8_t charLen = strlen(PSTRtoBuffer_P(item->text));
    211a:	88 81       	ld	r24, Y
    211c:	99 81       	ldd	r25, Y+1	; 0x01
    211e:	0e 94 b1 0a 	call	0x1562	; 0x1562 <_Z14PSTRtoBuffer_PPKc>
    2122:	fc 01       	movw	r30, r24
    2124:	01 90       	ld	r0, Z+
    2126:	00 20       	and	r0, r0
    2128:	e9 f7       	brne	.-6      	; 0x2124 <_ZN12StateMachine16MenuStateHandler13drawMenuEntryEv+0x22>
    212a:	31 97       	sbiw	r30, 0x01	; 1
    212c:	8f 01       	movw	r16, r30
    212e:	08 1b       	sub	r16, r24
    2130:	19 0b       	sbc	r17, r25

    Ui::display.setTextSize(2);
    2132:	62 e0       	ldi	r22, 0x02	; 2
    2134:	86 eb       	ldi	r24, 0xB6	; 182
    2136:	92 e0       	ldi	r25, 0x02	; 2
    2138:	0e 94 5c 26 	call	0x4cb8	; 0x4cb8 <_ZN12Adafruit_GFX11setTextSizeEh>
    @param   c   16-bit 5-6-5 Color to draw text with
    @note    For 'transparent' background, background and foreground
             are set to same color rather than using a separate flag.
  */
  /**********************************************************************/
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
    213c:	81 e0       	ldi	r24, 0x01	; 1
    213e:	90 e0       	ldi	r25, 0x00	; 0
    2140:	90 93 c9 02 	sts	0x02C9, r25	; 0x8002c9 <_ZN2Ui7displayE+0x13>
    2144:	80 93 c8 02 	sts	0x02C8, r24	; 0x8002c8 <_ZN2Ui7displayE+0x12>
    2148:	90 93 c7 02 	sts	0x02C7, r25	; 0x8002c7 <_ZN2Ui7displayE+0x11>
    214c:	80 93 c6 02 	sts	0x02C6, r24	; 0x8002c6 <_ZN2Ui7displayE+0x10>
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) {
    cursor_x = x;
    2150:	2a ef       	ldi	r18, 0xFA	; 250
    2152:	20 03       	mulsu	r18, r16
    2154:	f0 01       	movw	r30, r0
    2156:	11 24       	eor	r1, r1
    2158:	ff 96       	adiw	r30, 0x3f	; 63
    215a:	f0 93 c3 02 	sts	0x02C3, r31	; 0x8002c3 <_ZN2Ui7displayE+0xd>
    215e:	e0 93 c2 02 	sts	0x02C2, r30	; 0x8002c2 <_ZN2Ui7displayE+0xc>
    cursor_y = y;
    2162:	8e e2       	ldi	r24, 0x2E	; 46
    2164:	90 e0       	ldi	r25, 0x00	; 0
    2166:	90 93 c5 02 	sts	0x02C5, r25	; 0x8002c5 <_ZN2Ui7displayE+0xf>
    216a:	80 93 c4 02 	sts	0x02C4, r24	; 0x8002c4 <_ZN2Ui7displayE+0xe>
    Ui::display.setTextColor(WHITE);
    Ui::display.setCursor(
        SCREEN_WIDTH_MID - (charLen * ((CHAR_WIDTH + 1) * 2)) / 2,
        TEXT_Y
    );
    Ui::display.print(PSTRtoBuffer_P(item->text));
    216e:	88 81       	ld	r24, Y
    2170:	99 81       	ldd	r25, Y+1	; 0x01
    2172:	0e 94 b1 0a 	call	0x1562	; 0x1562 <_Z14PSTRtoBuffer_PPKc>
    2176:	bc 01       	movw	r22, r24
    2178:	86 eb       	ldi	r24, 0xB6	; 182
    217a:	92 e0       	ldi	r25, 0x02	; 2
    217c:	0e 94 ab 19 	call	0x3356	; 0x3356 <_ZN5Print5printEPKc>

    if (item->icon) {
    2180:	8c 81       	ldd	r24, Y+4	; 0x04
    2182:	9d 81       	ldd	r25, Y+5	; 0x05
    2184:	89 2b       	or	r24, r25
    2186:	e1 f0       	breq	.+56     	; 0x21c0 <_ZN12StateMachine16MenuStateHandler13drawMenuEntryEv+0xbe>
        Ui::clearRect(
            GRAPHIC_X,
            GRAPHIC_Y,
            GRAPHIC_SIZE,
            GRAPHIC_SIZE
        );
    2188:	20 e2       	ldi	r18, 0x20	; 32
    218a:	30 e0       	ldi	r19, 0x00	; 0
    218c:	40 e2       	ldi	r20, 0x20	; 32
    218e:	50 e0       	ldi	r21, 0x00	; 0
    2190:	67 e0       	ldi	r22, 0x07	; 7
    2192:	70 e0       	ldi	r23, 0x00	; 0
    2194:	8f e2       	ldi	r24, 0x2F	; 47
    2196:	90 e0       	ldi	r25, 0x00	; 0
    2198:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <_ZN2Ui9clearRectEiiii>
            GRAPHIC_Y,
            item->icon,
            GRAPHIC_SIZE,
            GRAPHIC_SIZE,
            WHITE
        );
    219c:	2c 81       	ldd	r18, Y+4	; 0x04
    219e:	3d 81       	ldd	r19, Y+5	; 0x05
    21a0:	cc 24       	eor	r12, r12
    21a2:	c3 94       	inc	r12
    21a4:	d1 2c       	mov	r13, r1
    21a6:	90 e2       	ldi	r25, 0x20	; 32
    21a8:	e9 2e       	mov	r14, r25
    21aa:	f1 2c       	mov	r15, r1
    21ac:	00 e2       	ldi	r16, 0x20	; 32
    21ae:	10 e0       	ldi	r17, 0x00	; 0
    21b0:	47 e0       	ldi	r20, 0x07	; 7
    21b2:	50 e0       	ldi	r21, 0x00	; 0
    21b4:	6f e2       	ldi	r22, 0x2F	; 47
    21b6:	70 e0       	ldi	r23, 0x00	; 0
    21b8:	86 eb       	ldi	r24, 0xB6	; 182
    21ba:	92 e0       	ldi	r25, 0x02	; 2
    21bc:	0e 94 a6 22 	call	0x454c	; 0x454c <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij>
    }
}
    21c0:	df 91       	pop	r29
    21c2:	cf 91       	pop	r28
    21c4:	1f 91       	pop	r17
    21c6:	0f 91       	pop	r16
    21c8:	ff 90       	pop	r15
    21ca:	ef 90       	pop	r14
    21cc:	df 90       	pop	r13
    21ce:	cf 90       	pop	r12
    21d0:	08 95       	ret

000021d2 <_ZN12StateMachine16MenuStateHandler13onInitialDrawEv>:

static void drawTriangles();
static void drawMenuEntry();


void StateMachine::MenuStateHandler::onInitialDraw() {
    21d2:	af 92       	push	r10
    21d4:	bf 92       	push	r11
    21d6:	cf 92       	push	r12
    21d8:	df 92       	push	r13
    21da:	ef 92       	push	r14
    21dc:	ff 92       	push	r15
    21de:	0f 93       	push	r16
    21e0:	1f 93       	push	r17
    21e2:	cf 93       	push	r28
    21e4:	df 93       	push	r29
    21e6:	ec 01       	movw	r28, r24
    Ui::clear();
    21e8:	0e 94 ac 16 	call	0x2d58	; 0x2d58 <_ZN2Ui5clearEv>

    drawMenuEntry();
    21ec:	ce 01       	movw	r24, r28
    21ee:	0e 94 81 10 	call	0x2102	; 0x2102 <_ZN12StateMachine16MenuStateHandler13drawMenuEntryEv>

        SCREEN_WIDTH - 1,
        SCREEN_HEIGHT_MID + TRIANGLE_MARGIN,

        WHITE
    );
    21f2:	aa 24       	eor	r10, r10
    21f4:	a3 94       	inc	r10
    21f6:	b1 2c       	mov	r11, r1
    21f8:	91 e2       	ldi	r25, 0x21	; 33
    21fa:	c9 2e       	mov	r12, r25
    21fc:	d1 2c       	mov	r13, r1
    21fe:	2f e7       	ldi	r18, 0x7F	; 127
    2200:	e2 2e       	mov	r14, r18
    2202:	f1 2c       	mov	r15, r1
    2204:	05 e2       	ldi	r16, 0x25	; 37
    2206:	10 e0       	ldi	r17, 0x00	; 0
    2208:	2d e7       	ldi	r18, 0x7D	; 125
    220a:	30 e0       	ldi	r19, 0x00	; 0
    220c:	41 e2       	ldi	r20, 0x21	; 33
    220e:	50 e0       	ldi	r21, 0x00	; 0
    2210:	6b e7       	ldi	r22, 0x7B	; 123
    2212:	70 e0       	ldi	r23, 0x00	; 0
    2214:	86 eb       	ldi	r24, 0xB6	; 182
    2216:	92 e0       	ldi	r25, 0x02	; 2
    2218:	0e 94 c4 20 	call	0x4188	; 0x4188 <_ZN12Adafruit_GFX12fillTriangleEiiiiiij>

        SCREEN_WIDTH - 1,
        SCREEN_HEIGHT_MID - TRIANGLE_MARGIN,

        WHITE
    );
    221c:	3d e1       	ldi	r19, 0x1D	; 29
    221e:	c3 2e       	mov	r12, r19
    2220:	d1 2c       	mov	r13, r1
    2222:	09 e1       	ldi	r16, 0x19	; 25
    2224:	10 e0       	ldi	r17, 0x00	; 0
    2226:	2d e7       	ldi	r18, 0x7D	; 125
    2228:	30 e0       	ldi	r19, 0x00	; 0
    222a:	4d e1       	ldi	r20, 0x1D	; 29
    222c:	50 e0       	ldi	r21, 0x00	; 0
    222e:	6b e7       	ldi	r22, 0x7B	; 123
    2230:	70 e0       	ldi	r23, 0x00	; 0
    2232:	86 eb       	ldi	r24, 0xB6	; 182
    2234:	92 e0       	ldi	r25, 0x02	; 2
    2236:	0e 94 c4 20 	call	0x4188	; 0x4188 <_ZN12Adafruit_GFX12fillTriangleEiiiiiij>

    drawMenuEntry();
    drawTriangles();

    Ui::needDisplay();
}
    223a:	df 91       	pop	r29
    223c:	cf 91       	pop	r28
    223e:	1f 91       	pop	r17
    2240:	0f 91       	pop	r16
    2242:	ff 90       	pop	r15
    2244:	ef 90       	pop	r14
    2246:	df 90       	pop	r13
    2248:	cf 90       	pop	r12
    224a:	bf 90       	pop	r11
    224c:	af 90       	pop	r10
    Ui::clear();

    drawMenuEntry();
    drawTriangles();

    Ui::needDisplay();
    224e:	0c 94 b4 16 	jmp	0x2d68	; 0x2d68 <_ZN2Ui11needDisplayEv>

00002252 <_ZN12StateMachine16MenuStateHandler12onUpdateDrawEv>:
}

void StateMachine::MenuStateHandler::onUpdateDraw() {
    2252:	cf 93       	push	r28
    2254:	df 93       	push	r29
    2256:	ec 01       	movw	r28, r24
    Ui::clearRect(
        0,
        SCREEN_HEIGHT - (CHAR_HEIGHT + 2) * 2,
        SCREEN_WIDTH,
        (CHAR_HEIGHT + 2) * 2
    );
    2258:	22 e1       	ldi	r18, 0x12	; 18
    225a:	30 e0       	ldi	r19, 0x00	; 0
    225c:	40 e8       	ldi	r20, 0x80	; 128
    225e:	50 e0       	ldi	r21, 0x00	; 0
    2260:	6e e2       	ldi	r22, 0x2E	; 46
    2262:	70 e0       	ldi	r23, 0x00	; 0
    2264:	80 e0       	ldi	r24, 0x00	; 0
    2266:	90 e0       	ldi	r25, 0x00	; 0
    2268:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <_ZN2Ui9clearRectEiiii>

    drawMenuEntry();
    226c:	ce 01       	movw	r24, r28
    226e:	0e 94 81 10 	call	0x2102	; 0x2102 <_ZN12StateMachine16MenuStateHandler13drawMenuEntryEv>
    Ui::needDisplay();
}
    2272:	df 91       	pop	r29
    2274:	cf 91       	pop	r28
        SCREEN_WIDTH,
        (CHAR_HEIGHT + 2) * 2
    );

    drawMenuEntry();
    Ui::needDisplay();
    2276:	0c 94 b4 16 	jmp	0x2d68	; 0x2d68 <_ZN2Ui11needDisplayEv>

0000227a <_ZN12StateMachine23ScreensaverStateHandler7onEnterEv>:
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};


void StateMachine::ScreensaverStateHandler::onEnter() {
    showLogo = true;
    227a:	21 e0       	ldi	r18, 0x01	; 1
    227c:	fc 01       	movw	r30, r24
    227e:	21 87       	std	Z+9, r18	; 0x09
    2280:	08 95       	ret

00002282 <_ZN12StateMachine23ScreensaverStateHandler12onUpdateDrawEv>:

    Ui::needDisplay();
}

void StateMachine::ScreensaverStateHandler::onUpdateDraw() {
    this->onInitialDraw();
    2282:	dc 01       	movw	r26, r24
    2284:	ed 91       	ld	r30, X+
    2286:	fc 91       	ld	r31, X
    2288:	01 90       	ld	r0, Z+
    228a:	f0 81       	ld	r31, Z
    228c:	e0 2d       	mov	r30, r0
    228e:	09 94       	ijmp

00002290 <_ZN12StateMachine23ScreensaverStateHandler8onUpdateEv>:

void StateMachine::ScreensaverStateHandler::onEnter() {
    showLogo = true;
}

void StateMachine::ScreensaverStateHandler::onUpdate() {
    2290:	0f 93       	push	r16
    2292:	1f 93       	push	r17
    2294:	cf 93       	push	r28
    2296:	df 93       	push	r29
    2298:	ec 01       	movw	r28, r24
    if (this->displaySwapTimer.hasTicked()) {
    229a:	8c 01       	movw	r16, r24
    229c:	0e 5f       	subi	r16, 0xFE	; 254
    229e:	1f 4f       	sbci	r17, 0xFF	; 255
    22a0:	c8 01       	movw	r24, r16
    22a2:	0e 94 48 16 	call	0x2c90	; 0x2c90 <_ZN5Timer9hasTickedEv>
    22a6:	88 23       	and	r24, r24
    22a8:	69 f0       	breq	.+26     	; 0x22c4 <_ZN12StateMachine23ScreensaverStateHandler8onUpdateEv+0x34>
        this->displaySwapTimer.reset();
    22aa:	c8 01       	movw	r24, r16
    22ac:	0e 94 67 16 	call	0x2cce	; 0x2cce <_ZN5Timer5resetEv>
        showLogo = !showLogo;
    22b0:	99 85       	ldd	r25, Y+9	; 0x09
    22b2:	81 e0       	ldi	r24, 0x01	; 1
    22b4:	89 27       	eor	r24, r25
    22b6:	89 87       	std	Y+9, r24	; 0x09

        Ui::needUpdate();
    }
}
    22b8:	df 91       	pop	r29
    22ba:	cf 91       	pop	r28
    22bc:	1f 91       	pop	r17
    22be:	0f 91       	pop	r16
void StateMachine::ScreensaverStateHandler::onUpdate() {
    if (this->displaySwapTimer.hasTicked()) {
        this->displaySwapTimer.reset();
        showLogo = !showLogo;

        Ui::needUpdate();
    22c0:	0c 94 b0 16 	jmp	0x2d60	; 0x2d60 <_ZN2Ui10needUpdateEv>
    }
}
    22c4:	df 91       	pop	r29
    22c6:	cf 91       	pop	r28
    22c8:	1f 91       	pop	r17
    22ca:	0f 91       	pop	r16
    22cc:	08 95       	ret

000022ce <_ZN12StateMachine23ScreensaverStateHandler14onButtonChangeE6ButtonN7Buttons9PressTypeE>:

void StateMachine::ScreensaverStateHandler::onButtonChange(
    Button button,
    Buttons::PressType pressType
) {
    StateMachine::switchState(StateMachine::lastState);
    22ce:	80 91 af 02 	lds	r24, 0x02AF	; 0x8002af <_ZN12StateMachine9lastStateE>
    22d2:	0c 94 73 0e 	jmp	0x1ce6	; 0x1ce6 <_ZN12StateMachine11switchStateENS_5StateE>

000022d6 <_ZN12StateMachine23ScreensaverStateHandler13onInitialDrawEv>:
}


void StateMachine::ScreensaverStateHandler::onInitialDraw() {
    22d6:	cf 92       	push	r12
    22d8:	df 92       	push	r13
    22da:	ef 92       	push	r14
    22dc:	ff 92       	push	r15
    22de:	0f 93       	push	r16
    22e0:	1f 93       	push	r17
    22e2:	cf 93       	push	r28
    22e4:	df 93       	push	r29
    22e6:	ec 01       	movw	r28, r24
    Ui::clear();
    22e8:	0e 94 ac 16 	call	0x2d58	; 0x2d58 <_ZN2Ui5clearEv>

    if (showLogo) {
    22ec:	89 85       	ldd	r24, Y+9	; 0x09
    22ee:	88 23       	and	r24, r24
    22f0:	99 f0       	breq	.+38     	; 0x2318 <_ZN12StateMachine23ScreensaverStateHandler13onInitialDrawEv+0x42>
            0,
            logo,
            SCREEN_WIDTH,
            SCREEN_HEIGHT,
            WHITE
        );
    22f2:	cc 24       	eor	r12, r12
    22f4:	c3 94       	inc	r12
    22f6:	d1 2c       	mov	r13, r1
    22f8:	90 e4       	ldi	r25, 0x40	; 64
    22fa:	e9 2e       	mov	r14, r25
    22fc:	f1 2c       	mov	r15, r1
    22fe:	00 e8       	ldi	r16, 0x80	; 128
    2300:	10 e0       	ldi	r17, 0x00	; 0
    2302:	23 e6       	ldi	r18, 0x63	; 99
    2304:	33 e0       	ldi	r19, 0x03	; 3
    2306:	40 e0       	ldi	r20, 0x00	; 0
    2308:	50 e0       	ldi	r21, 0x00	; 0
    230a:	60 e0       	ldi	r22, 0x00	; 0
    230c:	70 e0       	ldi	r23, 0x00	; 0
    230e:	86 eb       	ldi	r24, 0xB6	; 182
    2310:	92 e0       	ldi	r25, 0x02	; 2
    2312:	0e 94 a6 22 	call	0x454c	; 0x454c <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij>
    2316:	40 c0       	rjmp	.+128    	; 0x2398 <_ZN12StateMachine23ScreensaverStateHandler13onInitialDrawEv+0xc2>
    @param   c   16-bit 5-6-5 Color to draw text with
    @note    For 'transparent' background, background and foreground
             are set to same color rather than using a separate flag.
  */
  /**********************************************************************/
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
    2318:	81 e0       	ldi	r24, 0x01	; 1
    231a:	90 e0       	ldi	r25, 0x00	; 0
    231c:	90 93 c9 02 	sts	0x02C9, r25	; 0x8002c9 <_ZN2Ui7displayE+0x13>
    2320:	80 93 c8 02 	sts	0x02C8, r24	; 0x8002c8 <_ZN2Ui7displayE+0x12>
    2324:	90 93 c7 02 	sts	0x02C7, r25	; 0x8002c7 <_ZN2Ui7displayE+0x11>
    2328:	80 93 c6 02 	sts	0x02C6, r24	; 0x8002c6 <_ZN2Ui7displayE+0x10>
    } else {
        Ui::display.setTextColor(WHITE);

        Ui::display.setTextSize(6);
    232c:	66 e0       	ldi	r22, 0x06	; 6
    232e:	86 eb       	ldi	r24, 0xB6	; 182
    2330:	92 e0       	ldi	r25, 0x02	; 2
    2332:	0e 94 5c 26 	call	0x4cb8	; 0x4cb8 <_ZN12Adafruit_GFX11setTextSizeEh>
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) {
    cursor_x = x;
    2336:	8e e1       	ldi	r24, 0x1E	; 30
    2338:	90 e0       	ldi	r25, 0x00	; 0
    233a:	90 93 c3 02 	sts	0x02C3, r25	; 0x8002c3 <_ZN2Ui7displayE+0xd>
    233e:	80 93 c2 02 	sts	0x02C2, r24	; 0x8002c2 <_ZN2Ui7displayE+0xc>
    cursor_y = y;
    2342:	82 e0       	ldi	r24, 0x02	; 2
    2344:	90 e0       	ldi	r25, 0x00	; 0
    2346:	90 93 c5 02 	sts	0x02C5, r25	; 0x8002c5 <_ZN2Ui7displayE+0xf>
    234a:	80 93 c4 02 	sts	0x02C4, r24	; 0x8002c4 <_ZN2Ui7displayE+0xe>
        Ui::display.setCursor(
            SCREEN_WIDTH_MID - ((CHAR_WIDTH) * 6) / 2 * 2 - 3,
            2);

        Ui::display.print(Channels::getName(Receiver::activeChannel));
    234e:	80 91 85 02 	lds	r24, 0x0285	; 0x800285 <_ZN8Receiver13activeChannelE>
    2352:	0e 94 8e 0a 	call	0x151c	; 0x151c <_ZN8Channels7getNameEh>
    2356:	bc 01       	movw	r22, r24
    2358:	86 eb       	ldi	r24, 0xB6	; 182
    235a:	92 e0       	ldi	r25, 0x02	; 2
    235c:	0e 94 ab 19 	call	0x3356	; 0x3356 <_ZN5Print5printEPKc>

        Ui::display.setTextSize(2);
    2360:	62 e0       	ldi	r22, 0x02	; 2
    2362:	86 eb       	ldi	r24, 0xB6	; 182
    2364:	92 e0       	ldi	r25, 0x02	; 2
    2366:	0e 94 5c 26 	call	0x4cb8	; 0x4cb8 <_ZN12Adafruit_GFX11setTextSizeEh>
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) {
    cursor_x = x;
    236a:	86 e2       	ldi	r24, 0x26	; 38
    236c:	90 e0       	ldi	r25, 0x00	; 0
    236e:	90 93 c3 02 	sts	0x02C3, r25	; 0x8002c3 <_ZN2Ui7displayE+0xd>
    2372:	80 93 c2 02 	sts	0x02C2, r24	; 0x8002c2 <_ZN2Ui7displayE+0xc>
    cursor_y = y;
    2376:	80 e3       	ldi	r24, 0x30	; 48
    2378:	90 e0       	ldi	r25, 0x00	; 0
    237a:	90 93 c5 02 	sts	0x02C5, r25	; 0x8002c5 <_ZN2Ui7displayE+0xf>
    237e:	80 93 c4 02 	sts	0x02C4, r24	; 0x8002c4 <_ZN2Ui7displayE+0xe>
        Ui::display.setCursor(
            SCREEN_WIDTH_MID - ((CHAR_WIDTH + 1) * 2) / 2 * 4 - 1,
            SCREEN_HEIGHT - CHAR_HEIGHT * 2 - 2);
        Ui::display.print(Channels::getFrequency(Receiver::activeChannel));
    2382:	80 91 85 02 	lds	r24, 0x0285	; 0x800285 <_ZN8Receiver13activeChannelE>
    2386:	0e 94 85 0a 	call	0x150a	; 0x150a <_ZN8Channels12getFrequencyEh>
    238a:	4a e0       	ldi	r20, 0x0A	; 10
    238c:	50 e0       	ldi	r21, 0x00	; 0
    238e:	bc 01       	movw	r22, r24
    2390:	86 eb       	ldi	r24, 0xB6	; 182
    2392:	92 e0       	ldi	r25, 0x02	; 2
    2394:	0e 94 03 1a 	call	0x3406	; 0x3406 <_ZN5Print5printEji>
    }

    Ui::needDisplay();
}
    2398:	df 91       	pop	r29
    239a:	cf 91       	pop	r28
    239c:	1f 91       	pop	r17
    239e:	0f 91       	pop	r16
    23a0:	ff 90       	pop	r15
    23a2:	ef 90       	pop	r14
    23a4:	df 90       	pop	r13
    23a6:	cf 90       	pop	r12
            SCREEN_WIDTH_MID - ((CHAR_WIDTH + 1) * 2) / 2 * 4 - 1,
            SCREEN_HEIGHT - CHAR_HEIGHT * 2 - 2);
        Ui::display.print(Channels::getFrequency(Receiver::activeChannel));
    }

    Ui::needDisplay();
    23a8:	0c 94 b4 16 	jmp	0x2d68	; 0x2d68 <_ZN2Ui11needDisplayEv>

000023ac <_ZL12menuModeIconPv>:
};


static const unsigned char* menuModeIcon(void* state) {
    SearchStateHandler* search = static_cast<SearchStateHandler*>(state);
    return search->manual ? manualIcon : autoIcon;
    23ac:	fc 01       	movw	r30, r24
    23ae:	84 a1       	ldd	r24, Z+36	; 0x24
    23b0:	81 11       	cpse	r24, r1
    23b2:	03 c0       	rjmp	.+6      	; 0x23ba <_ZL12menuModeIconPv+0xe>
    23b4:	83 ec       	ldi	r24, 0xC3	; 195
    23b6:	97 e0       	ldi	r25, 0x07	; 7
    23b8:	08 95       	ret
    23ba:	83 ea       	ldi	r24, 0xA3	; 163
    23bc:	97 e0       	ldi	r25, 0x07	; 7
}
    23be:	08 95       	ret

000023c0 <_ZL13menuOrderIconPv>:

static const unsigned char* menuOrderIcon(void* state) {
    SearchStateHandler* search = static_cast<SearchStateHandler*>(state);
    switch (search->order) {
    23c0:	fc 01       	movw	r30, r24
    23c2:	85 a1       	ldd	r24, Z+37	; 0x25
    23c4:	88 23       	and	r24, r24
    23c6:	31 f0       	breq	.+12     	; 0x23d4 <_ZL13menuOrderIconPv+0x14>
    23c8:	81 30       	cpi	r24, 0x01	; 1
    23ca:	19 f4       	brne	.+6      	; 0x23d2 <_ZL13menuOrderIconPv+0x12>
        case SearchStateHandler::ScanOrder::FREQUENCY:
            return freqOrderIcon;
            break;

        case SearchStateHandler::ScanOrder::CHANNEL:
            return channelOrderIcon;
    23cc:	23 e8       	ldi	r18, 0x83	; 131
    23ce:	37 e0       	ldi	r19, 0x07	; 7
    23d0:	03 c0       	rjmp	.+6      	; 0x23d8 <_ZL13menuOrderIconPv+0x18>
            break;
    }
}
    23d2:	08 95       	ret

static const unsigned char* menuOrderIcon(void* state) {
    SearchStateHandler* search = static_cast<SearchStateHandler*>(state);
    switch (search->order) {
        case SearchStateHandler::ScanOrder::FREQUENCY:
            return freqOrderIcon;
    23d4:	23 e6       	ldi	r18, 0x63	; 99
    23d6:	37 e0       	ldi	r19, 0x07	; 7
    23d8:	c9 01       	movw	r24, r18

        case SearchStateHandler::ScanOrder::CHANNEL:
            return channelOrderIcon;
            break;
    }
}
    23da:	08 95       	ret

000023dc <_ZL16menuOrderHandlerPv>:

    EepromSettings.searchManual = search->manual;
    EepromSettings.markDirty();
}

static void menuOrderHandler(void* state) {
    23dc:	1f 93       	push	r17
    23de:	cf 93       	push	r28
    23e0:	df 93       	push	r29
    23e2:	ec 01       	movw	r28, r24
    SearchStateHandler* search = static_cast<SearchStateHandler*>(state);
    if (search->order == SearchStateHandler::ScanOrder::FREQUENCY) {
    23e4:	8d a1       	ldd	r24, Y+37	; 0x25
    23e6:	81 11       	cpse	r24, r1
    23e8:	09 c0       	rjmp	.+18     	; 0x23fc <_ZL16menuOrderHandlerPv+0x20>
        search->order = SearchStateHandler::ScanOrder::CHANNEL;
    23ea:	11 e0       	ldi	r17, 0x01	; 1
    23ec:	1d a3       	std	Y+37, r17	; 0x25
        search->orderedChanelIndex =
            Channels::getOrderedIndex(search->orderedChanelIndex);
    23ee:	8e a1       	ldd	r24, Y+38	; 0x26
    23f0:	0e 94 a5 0a 	call	0x154a	; 0x154a <_ZN8Channels15getOrderedIndexEh>
    23f4:	8e a3       	std	Y+38, r24	; 0x26
        EepromSettings.searchOrderByChannel = true;
    23f6:	10 93 8e 02 	sts	0x028E, r17	; 0x80028e <EepromSettings+0x7>
    23fa:	07 c0       	rjmp	.+14     	; 0x240a <_ZL16menuOrderHandlerPv+0x2e>
    } else {
        search->order = SearchStateHandler::ScanOrder::FREQUENCY;
    23fc:	1d a2       	std	Y+37, r1	; 0x25
        search->orderedChanelIndex =
            Channels::getOrderedIndexFromIndex(search->orderedChanelIndex);
    23fe:	8e a1       	ldd	r24, Y+38	; 0x26
    2400:	0e 94 ab 0a 	call	0x1556	; 0x1556 <_ZN8Channels24getOrderedIndexFromIndexEh>
    2404:	8e a3       	std	Y+38, r24	; 0x26
        EepromSettings.searchOrderByChannel = false;
    2406:	10 92 8e 02 	sts	0x028E, r1	; 0x80028e <EepromSettings+0x7>
    }

    EepromSettings.markDirty();
    240a:	87 e8       	ldi	r24, 0x87	; 135
    240c:	92 e0       	ldi	r25, 0x02	; 2
}
    240e:	df 91       	pop	r29
    2410:	cf 91       	pop	r28
    2412:	1f 91       	pop	r17
        search->orderedChanelIndex =
            Channels::getOrderedIndexFromIndex(search->orderedChanelIndex);
        EepromSettings.searchOrderByChannel = false;
    }

    EepromSettings.markDirty();
    2414:	0c 94 1f 0d 	jmp	0x1a3e	; 0x1a3e <_ZN14EepromSettings9markDirtyEv>

00002418 <_ZL15menuModeHandlerPv>:
            return channelOrderIcon;
            break;
    }
}

static void menuModeHandler(void* state) {
    2418:	fc 01       	movw	r30, r24
    SearchStateHandler* search = static_cast<SearchStateHandler*>(state);
    search->manual = !search->manual;
    241a:	84 a1       	ldd	r24, Z+36	; 0x24
    241c:	91 e0       	ldi	r25, 0x01	; 1
    241e:	98 27       	eor	r25, r24
    2420:	94 a3       	std	Z+36, r25	; 0x24

    EepromSettings.searchManual = search->manual;
    2422:	90 93 8d 02 	sts	0x028D, r25	; 0x80028d <EepromSettings+0x6>
    EepromSettings.markDirty();
    2426:	87 e8       	ldi	r24, 0x87	; 135
    2428:	92 e0       	ldi	r25, 0x02	; 2
    242a:	0c 94 1f 0d 	jmp	0x1a3e	; 0x1a3e <_ZN14EepromSettings9markDirtyEv>

0000242e <_ZN12StateMachine18SearchStateHandler7onEnterEv>:

    EepromSettings.markDirty();
}


void SearchStateHandler::onEnter() {
    242e:	0f 93       	push	r16
    2430:	1f 93       	push	r17
    2432:	cf 93       	push	r28
    2434:	df 93       	push	r29
    2436:	ec 01       	movw	r28, r24
    menu.addItem(menuModeIcon, menuModeHandler);
    2438:	8c 01       	movw	r16, r24
    243a:	04 5f       	subi	r16, 0xF4	; 244
    243c:	1f 4f       	sbci	r17, 0xFF	; 255
    243e:	4c e0       	ldi	r20, 0x0C	; 12
    2440:	52 e1       	ldi	r21, 0x12	; 18
    2442:	66 ed       	ldi	r22, 0xD6	; 214
    2444:	71 e1       	ldi	r23, 0x11	; 17
    2446:	c8 01       	movw	r24, r16
    2448:	0e 94 4b 18 	call	0x3096	; 0x3096 <_ZN2Ui15StateMenuHelper7addItemEPFPKhPvEPFvS3_E>
    menu.addItem(menuOrderIcon, menuOrderHandler);
    244c:	4e ee       	ldi	r20, 0xEE	; 238
    244e:	51 e1       	ldi	r21, 0x11	; 17
    2450:	60 ee       	ldi	r22, 0xE0	; 224
    2452:	71 e1       	ldi	r23, 0x11	; 17
    2454:	c8 01       	movw	r24, r16
    2456:	0e 94 4b 18 	call	0x3096	; 0x3096 <_ZN2Ui15StateMenuHelper7addItemEPFPKhPvEPFvS3_E>

    this->manual = EepromSettings.searchManual;
    245a:	81 e0       	ldi	r24, 0x01	; 1
    245c:	90 91 8d 02 	lds	r25, 0x028D	; 0x80028d <EepromSettings+0x6>
    2460:	91 11       	cpse	r25, r1
    2462:	01 c0       	rjmp	.+2      	; 0x2466 <_ZN12StateMachine18SearchStateHandler7onEnterEv+0x38>
    2464:	80 e0       	ldi	r24, 0x00	; 0
    2466:	8c a3       	std	Y+36, r24	; 0x24
    this->order = EepromSettings.searchOrderByChannel ?
        ScanOrder::CHANNEL :
        ScanOrder::FREQUENCY;
    2468:	81 e0       	ldi	r24, 0x01	; 1
    246a:	90 91 8e 02 	lds	r25, 0x028E	; 0x80028e <EepromSettings+0x7>
    246e:	91 11       	cpse	r25, r1
    2470:	01 c0       	rjmp	.+2      	; 0x2474 <_ZN12StateMachine18SearchStateHandler7onEnterEv+0x46>
    2472:	80 e0       	ldi	r24, 0x00	; 0
    2474:	8d a3       	std	Y+37, r24	; 0x25

    switch (this->order) {
    2476:	81 30       	cpi	r24, 0x01	; 1
    2478:	19 f4       	brne	.+6      	; 0x2480 <_ZN12StateMachine18SearchStateHandler7onEnterEv+0x52>
        case ScanOrder::CHANNEL:
            this->orderedChanelIndex = EepromSettings.startChannel;
    247a:	80 91 8b 02 	lds	r24, 0x028B	; 0x80028b <EepromSettings+0x4>
    247e:	04 c0       	rjmp	.+8      	; 0x2488 <_ZN12StateMachine18SearchStateHandler7onEnterEv+0x5a>
            break;

        case ScanOrder::FREQUENCY:
            this->orderedChanelIndex =
                Channels::getOrderedIndexFromIndex(EepromSettings.startChannel);
    2480:	80 91 8b 02 	lds	r24, 0x028B	; 0x80028b <EepromSettings+0x4>
    2484:	0e 94 ab 0a 	call	0x1556	; 0x1556 <_ZN8Channels24getOrderedIndexFromIndexEh>
    2488:	8e a3       	std	Y+38, r24	; 0x26
            break;
    }
}
    248a:	df 91       	pop	r29
    248c:	cf 91       	pop	r28
    248e:	1f 91       	pop	r17
    2490:	0f 91       	pop	r16
    2492:	08 95       	ret

00002494 <_ZN12StateMachine18SearchStateHandler12onUpdateAutoEv>:
    }

    Ui::needUpdate();
}

void SearchStateHandler::onUpdateAuto() {
    2494:	1f 93       	push	r17
    2496:	cf 93       	push	r28
    2498:	df 93       	push	r29
    249a:	ec 01       	movw	r28, r24
    if (scanningPeak) {
    249c:	8d 81       	ldd	r24, Y+5	; 0x05
    249e:	88 23       	and	r24, r24
    24a0:	b1 f1       	breq	.+108    	; 0x250e <_ZN12StateMachine18SearchStateHandler12onUpdateAutoEv+0x7a>
        uint8_t peaksIndex = peakChannelIndex - orderedChanelIndex;
    24a2:	8e 81       	ldd	r24, Y+6	; 0x06
    24a4:	9e a1       	ldd	r25, Y+38	; 0x26
    24a6:	28 2f       	mov	r18, r24
    24a8:	29 1b       	sub	r18, r25
        peaks[peaksIndex] = Receiver::rssiA;
    24aa:	fe 01       	movw	r30, r28
    24ac:	e2 0f       	add	r30, r18
    24ae:	f1 1d       	adc	r31, r1
    24b0:	30 91 84 02 	lds	r19, 0x0284	; 0x800284 <_ZN8Receiver5rssiAE>
    24b4:	37 83       	std	Z+7, r19	; 0x07
        peakChannelIndex++;
    24b6:	8f 5f       	subi	r24, 0xFF	; 255
    24b8:	8e 83       	std	Y+6, r24	; 0x06

        if (peaksIndex >= PEAK_LOOKAHEAD || peakChannelIndex >= CHANNELS_SIZE) {
    24ba:	24 30       	cpi	r18, 0x04	; 4
    24bc:	10 f4       	brcc	.+4      	; 0x24c2 <_ZN12StateMachine18SearchStateHandler12onUpdateAutoEv+0x2e>
    24be:	80 33       	cpi	r24, 0x30	; 48
    24c0:	f8 f0       	brcs	.+62     	; 0x2500 <_ZN12StateMachine18SearchStateHandler12onUpdateAutoEv+0x6c>
    24c2:	fe 01       	movw	r30, r28
    24c4:	37 96       	adiw	r30, 0x07	; 7
    }

    Ui::needUpdate();
}

void SearchStateHandler::onUpdateAuto() {
    24c6:	80 e0       	ldi	r24, 0x00	; 0
    24c8:	10 e0       	ldi	r17, 0x00	; 0
    24ca:	20 e0       	ldi	r18, 0x00	; 0

        if (peaksIndex >= PEAK_LOOKAHEAD || peakChannelIndex >= CHANNELS_SIZE) {
            uint8_t largestPeak = 0;
            uint8_t largestPeakIndex = 0;
            for (uint8_t i = 0; i < PEAK_LOOKAHEAD; i++) {
                uint8_t peak = peaks[i];
    24cc:	31 91       	ld	r19, Z+
                if (peak > largestPeak) {
    24ce:	23 17       	cp	r18, r19
    24d0:	10 f4       	brcc	.+4      	; 0x24d6 <_ZN12StateMachine18SearchStateHandler12onUpdateAutoEv+0x42>
    24d2:	18 2f       	mov	r17, r24
    24d4:	23 2f       	mov	r18, r19
        peakChannelIndex++;

        if (peaksIndex >= PEAK_LOOKAHEAD || peakChannelIndex >= CHANNELS_SIZE) {
            uint8_t largestPeak = 0;
            uint8_t largestPeakIndex = 0;
            for (uint8_t i = 0; i < PEAK_LOOKAHEAD; i++) {
    24d6:	8f 5f       	subi	r24, 0xFF	; 255
    24d8:	84 30       	cpi	r24, 0x04	; 4
    24da:	c1 f7       	brne	.-16     	; 0x24cc <_ZN12StateMachine18SearchStateHandler12onUpdateAutoEv+0x38>
                    largestPeak = peak;
                    largestPeakIndex = i;
                }
            }

            uint8_t peakChannel = orderedChanelIndex + largestPeakIndex;
    24dc:	19 0f       	add	r17, r25
            orderedChanelIndex = peakChannel;
    24de:	1e a3       	std	Y+38, r17	; 0x26
            Receiver::setChannel(Channels::getOrderedIndex(peakChannel));
    24e0:	81 2f       	mov	r24, r17
    24e2:	0e 94 a5 0a 	call	0x154a	; 0x154a <_ZN8Channels15getOrderedIndexEh>
    24e6:	0e 94 ca 0a 	call	0x1594	; 0x1594 <_ZN8Receiver10setChannelEh>

            EepromSettings.startChannel =
                Channels::getOrderedIndex(peakChannel);
    24ea:	81 2f       	mov	r24, r17
    24ec:	0e 94 a5 0a 	call	0x154a	; 0x154a <_ZN8Channels15getOrderedIndexEh>
    24f0:	80 93 8b 02 	sts	0x028B, r24	; 0x80028b <EepromSettings+0x4>
            EepromSettings.markDirty();
    24f4:	87 e8       	ldi	r24, 0x87	; 135
    24f6:	92 e0       	ldi	r25, 0x02	; 2
    24f8:	0e 94 1f 0d 	call	0x1a3e	; 0x1a3e <_ZN14EepromSettings9markDirtyEv>

            scanningPeak = false;
    24fc:	1d 82       	std	Y+5, r1	; 0x05
    24fe:	2e c0       	rjmp	.+92     	; 0x255c <_ZN12StateMachine18SearchStateHandler12onUpdateAutoEv+0xc8>
        } else {
            Receiver::setChannel(Channels::getOrderedIndex(peakChannelIndex));
    2500:	0e 94 a5 0a 	call	0x154a	; 0x154a <_ZN8Channels15getOrderedIndexEh>
                if (forceNext)
                    forceNext = false;
            }
        }
    }
}
    2504:	df 91       	pop	r29
    2506:	cf 91       	pop	r28
    2508:	1f 91       	pop	r17
                Channels::getOrderedIndex(peakChannel);
            EepromSettings.markDirty();

            scanningPeak = false;
        } else {
            Receiver::setChannel(Channels::getOrderedIndex(peakChannelIndex));
    250a:	0c 94 ca 0a 	jmp	0x1594	; 0x1594 <_ZN8Receiver10setChannelEh>
        }
    } else {
        if (scanning) {
    250e:	8a 81       	ldd	r24, Y+2	; 0x02
    2510:	88 23       	and	r24, r24
    2512:	21 f1       	breq	.+72     	; 0x255c <_ZN12StateMachine18SearchStateHandler12onUpdateAutoEv+0xc8>
            if (!forceNext && Receiver::rssiA >= RSSI_SEEK_TRESHOLD) {
    2514:	8c 81       	ldd	r24, Y+4	; 0x04
    2516:	9e a1       	ldd	r25, Y+38	; 0x26
    2518:	81 11       	cpse	r24, r1
    251a:	0d c0       	rjmp	.+26     	; 0x2536 <_ZN12StateMachine18SearchStateHandler12onUpdateAutoEv+0xa2>
    251c:	80 91 84 02 	lds	r24, 0x0284	; 0x800284 <_ZN8Receiver5rssiAE>
    2520:	80 35       	cpi	r24, 0x50	; 80
    2522:	48 f0       	brcs	.+18     	; 0x2536 <_ZN12StateMachine18SearchStateHandler12onUpdateAutoEv+0xa2>
                scanning = false;
    2524:	1a 82       	std	Y+2, r1	; 0x02
                scanningPeak = true;
    2526:	81 e0       	ldi	r24, 0x01	; 1
    2528:	8d 83       	std	Y+5, r24	; 0x05
                peakChannelIndex = orderedChanelIndex;
    252a:	9e 83       	std	Y+6, r25	; 0x06

                for (uint8_t i = 0; i < PEAK_LOOKAHEAD; i++)
                    peaks[i] = 0;
    252c:	1f 82       	std	Y+7, r1	; 0x07
    252e:	18 86       	std	Y+8, r1	; 0x08
    2530:	19 86       	std	Y+9, r1	; 0x09
    2532:	1a 86       	std	Y+10, r1	; 0x0a
    2534:	13 c0       	rjmp	.+38     	; 0x255c <_ZN12StateMachine18SearchStateHandler12onUpdateAutoEv+0xc8>
            } else {
                orderedChanelIndex += static_cast<int8_t>(direction);
    2536:	8b 81       	ldd	r24, Y+3	; 0x03
    2538:	89 0f       	add	r24, r25
                if (orderedChanelIndex == 255)
    253a:	8f 3f       	cpi	r24, 0xFF	; 255
    253c:	11 f4       	brne	.+4      	; 0x2542 <_ZN12StateMachine18SearchStateHandler12onUpdateAutoEv+0xae>
                    orderedChanelIndex = CHANNELS_SIZE - 1;
    253e:	8f e2       	ldi	r24, 0x2F	; 47
    2540:	02 c0       	rjmp	.+4      	; 0x2546 <_ZN12StateMachine18SearchStateHandler12onUpdateAutoEv+0xb2>
                else if (orderedChanelIndex >= CHANNELS_SIZE)
    2542:	80 33       	cpi	r24, 0x30	; 48
    2544:	10 f4       	brcc	.+4      	; 0x254a <_ZN12StateMachine18SearchStateHandler12onUpdateAutoEv+0xb6>
                peakChannelIndex = orderedChanelIndex;

                for (uint8_t i = 0; i < PEAK_LOOKAHEAD; i++)
                    peaks[i] = 0;
            } else {
                orderedChanelIndex += static_cast<int8_t>(direction);
    2546:	8e a3       	std	Y+38, r24	; 0x26
    2548:	01 c0       	rjmp	.+2      	; 0x254c <_ZN12StateMachine18SearchStateHandler12onUpdateAutoEv+0xb8>
                if (orderedChanelIndex == 255)
                    orderedChanelIndex = CHANNELS_SIZE - 1;
                else if (orderedChanelIndex >= CHANNELS_SIZE)
                    orderedChanelIndex = 0;
    254a:	1e a2       	std	Y+38, r1	; 0x26

                Receiver::setChannel(
    254c:	8e a1       	ldd	r24, Y+38	; 0x26
    254e:	0e 94 a5 0a 	call	0x154a	; 0x154a <_ZN8Channels15getOrderedIndexEh>
                    Channels::getOrderedIndex(orderedChanelIndex));
    2552:	0e 94 ca 0a 	call	0x1594	; 0x1594 <_ZN8Receiver10setChannelEh>

                if (forceNext)
    2556:	8c 81       	ldd	r24, Y+4	; 0x04
    2558:	81 11       	cpse	r24, r1
                    forceNext = false;
    255a:	1c 82       	std	Y+4, r1	; 0x04
            }
        }
    }
}
    255c:	df 91       	pop	r29
    255e:	cf 91       	pop	r28
    2560:	1f 91       	pop	r17
    2562:	08 95       	ret

00002564 <_ZN12StateMachine18SearchStateHandler8onUpdateEv>:
            break;
    }
}

void SearchStateHandler::onUpdate() {
    if (!manual) {
    2564:	fc 01       	movw	r30, r24
    2566:	24 a1       	ldd	r18, Z+36	; 0x24
    2568:	21 11       	cpse	r18, r1
    256a:	02 c0       	rjmp	.+4      	; 0x2570 <_ZN12StateMachine18SearchStateHandler8onUpdateEv+0xc>
        onUpdateAuto();
    256c:	0e 94 4a 12 	call	0x2494	; 0x2494 <_ZN12StateMachine18SearchStateHandler12onUpdateAutoEv>
    }

    Ui::needUpdate();
    2570:	0c 94 b0 16 	jmp	0x2d60	; 0x2d60 <_ZN2Ui10needUpdateEv>

00002574 <_ZN12StateMachine18SearchStateHandler10setChannelEv>:

        this->setChannel();
    }
}

void SearchStateHandler::setChannel() {
    2574:	cf 93       	push	r28
    2576:	fc 01       	movw	r30, r24
    uint8_t actualChannelIndex;
    if (this->order == ScanOrder::FREQUENCY) {
    2578:	85 a1       	ldd	r24, Z+37	; 0x25
    257a:	81 11       	cpse	r24, r1
    257c:	05 c0       	rjmp	.+10     	; 0x2588 <_ZN12StateMachine18SearchStateHandler10setChannelEv+0x14>
        actualChannelIndex = Channels::getOrderedIndex(orderedChanelIndex);
    257e:	86 a1       	ldd	r24, Z+38	; 0x26
    2580:	0e 94 a5 0a 	call	0x154a	; 0x154a <_ZN8Channels15getOrderedIndexEh>
    2584:	c8 2f       	mov	r28, r24
    2586:	01 c0       	rjmp	.+2      	; 0x258a <_ZN12StateMachine18SearchStateHandler10setChannelEv+0x16>
    } else {
        actualChannelIndex = orderedChanelIndex;
    2588:	c6 a1       	ldd	r28, Z+38	; 0x26
    }

    Receiver::setChannel(actualChannelIndex);
    258a:	8c 2f       	mov	r24, r28
    258c:	0e 94 ca 0a 	call	0x1594	; 0x1594 <_ZN8Receiver10setChannelEh>
    EepromSettings.startChannel = actualChannelIndex;
    2590:	c0 93 8b 02 	sts	0x028B, r28	; 0x80028b <EepromSettings+0x4>
    EepromSettings.markDirty();
    2594:	87 e8       	ldi	r24, 0x87	; 135
    2596:	92 e0       	ldi	r25, 0x02	; 2
}
    2598:	cf 91       	pop	r28
        actualChannelIndex = orderedChanelIndex;
    }

    Receiver::setChannel(actualChannelIndex);
    EepromSettings.startChannel = actualChannelIndex;
    EepromSettings.markDirty();
    259a:	0c 94 1f 0d 	jmp	0x1a3e	; 0x1a3e <_ZN14EepromSettings9markDirtyEv>

0000259e <_ZN12StateMachine18SearchStateHandler14onButtonChangeE6ButtonN7Buttons9PressTypeE>:
}

void SearchStateHandler::onButtonChange(
    Button button,
    Buttons::PressType pressType
) {
    259e:	0f 93       	push	r16
    25a0:	1f 93       	push	r17
    25a2:	cf 93       	push	r28
    25a4:	df 93       	push	r29
    25a6:	ec 01       	movw	r28, r24
    25a8:	16 2f       	mov	r17, r22
    25aa:	04 2f       	mov	r16, r20
    if (this->menu.handleButtons(button, pressType))
    25ac:	0c 96       	adiw	r24, 0x0c	; 12
    25ae:	0e 94 5f 18 	call	0x30be	; 0x30be <_ZN2Ui15StateMenuHelper13handleButtonsE6ButtonN7Buttons9PressTypeE>
    25b2:	81 11       	cpse	r24, r1
    25b4:	2c c0       	rjmp	.+88     	; 0x260e <_ZN12StateMachine18SearchStateHandler14onButtonChangeE6ButtonN7Buttons9PressTypeE+0x70>
        return;

    if (!this->manual) {
    25b6:	8c a1       	ldd	r24, Y+36	; 0x24
    25b8:	81 11       	cpse	r24, r1
    25ba:	0e c0       	rjmp	.+28     	; 0x25d8 <_ZN12StateMachine18SearchStateHandler14onButtonChangeE6ButtonN7Buttons9PressTypeE+0x3a>
        if (
    25bc:	01 11       	cpse	r16, r1
    25be:	27 c0       	rjmp	.+78     	; 0x260e <_ZN12StateMachine18SearchStateHandler14onButtonChangeE6ButtonN7Buttons9PressTypeE+0x70>
            pressType != Buttons::PressType::SHORT ||
    25c0:	12 30       	cpi	r17, 0x02	; 2
    25c2:	29 f1       	breq	.+74     	; 0x260e <_ZN12StateMachine18SearchStateHandler14onButtonChangeE6ButtonN7Buttons9PressTypeE+0x70>
            button == Button::MODE
        ) {
            return;
        }

        scanning = true;
    25c4:	81 e0       	ldi	r24, 0x01	; 1
    25c6:	8a 83       	std	Y+2, r24	; 0x02
        forceNext = true;
    25c8:	8c 83       	std	Y+4, r24	; 0x04
        direction = button == Button::UP ?
            ScanDirection::UP : ScanDirection::DOWN;
    25ca:	11 23       	and	r17, r17
    25cc:	11 f0       	breq	.+4      	; 0x25d2 <_ZN12StateMachine18SearchStateHandler14onButtonChangeE6ButtonN7Buttons9PressTypeE+0x34>
    25ce:	8f ef       	ldi	r24, 0xFF	; 255
    25d0:	01 c0       	rjmp	.+2      	; 0x25d4 <_ZN12StateMachine18SearchStateHandler14onButtonChangeE6ButtonN7Buttons9PressTypeE+0x36>
    25d2:	81 e0       	ldi	r24, 0x01	; 1
    25d4:	8b 83       	std	Y+3, r24	; 0x03
    25d6:	1b c0       	rjmp	.+54     	; 0x260e <_ZN12StateMachine18SearchStateHandler14onButtonChangeE6ButtonN7Buttons9PressTypeE+0x70>
    } else {
        if (
    25d8:	0d 7f       	andi	r16, 0xFD	; 253
    25da:	c9 f4       	brne	.+50     	; 0x260e <_ZN12StateMachine18SearchStateHandler14onButtonChangeE6ButtonN7Buttons9PressTypeE+0x70>
    25dc:	8e a1       	ldd	r24, Y+38	; 0x26
            pressType != Buttons::PressType::HOLDING
        ) {
            return;
        }

        if (button == Button::UP) {
    25de:	11 11       	cpse	r17, r1
    25e0:	02 c0       	rjmp	.+4      	; 0x25e6 <_ZN12StateMachine18SearchStateHandler14onButtonChangeE6ButtonN7Buttons9PressTypeE+0x48>
            orderedChanelIndex += 1;
    25e2:	8f 5f       	subi	r24, 0xFF	; 255
    25e4:	03 c0       	rjmp	.+6      	; 0x25ec <_ZN12StateMachine18SearchStateHandler14onButtonChangeE6ButtonN7Buttons9PressTypeE+0x4e>
        } else if (button == Button::DOWN) {
    25e6:	11 30       	cpi	r17, 0x01	; 1
    25e8:	11 f4       	brne	.+4      	; 0x25ee <_ZN12StateMachine18SearchStateHandler14onButtonChangeE6ButtonN7Buttons9PressTypeE+0x50>
            orderedChanelIndex -= 1;
    25ea:	81 50       	subi	r24, 0x01	; 1
    25ec:	8e a3       	std	Y+38, r24	; 0x26
        }

        if (orderedChanelIndex == 255)
    25ee:	8e a1       	ldd	r24, Y+38	; 0x26
    25f0:	8f 3f       	cpi	r24, 0xFF	; 255
    25f2:	19 f4       	brne	.+6      	; 0x25fa <_ZN12StateMachine18SearchStateHandler14onButtonChangeE6ButtonN7Buttons9PressTypeE+0x5c>
            orderedChanelIndex = CHANNELS_SIZE - 1;
    25f4:	8f e2       	ldi	r24, 0x2F	; 47
    25f6:	8e a3       	std	Y+38, r24	; 0x26
    25f8:	03 c0       	rjmp	.+6      	; 0x2600 <_ZN12StateMachine18SearchStateHandler14onButtonChangeE6ButtonN7Buttons9PressTypeE+0x62>
        else if (orderedChanelIndex >= CHANNELS_SIZE)
    25fa:	80 33       	cpi	r24, 0x30	; 48
    25fc:	08 f0       	brcs	.+2      	; 0x2600 <_ZN12StateMachine18SearchStateHandler14onButtonChangeE6ButtonN7Buttons9PressTypeE+0x62>
            orderedChanelIndex = 0;
    25fe:	1e a2       	std	Y+38, r1	; 0x26

        this->setChannel();
    2600:	ce 01       	movw	r24, r28
    }
}
    2602:	df 91       	pop	r29
    2604:	cf 91       	pop	r28
    2606:	1f 91       	pop	r17
    2608:	0f 91       	pop	r16
        if (orderedChanelIndex == 255)
            orderedChanelIndex = CHANNELS_SIZE - 1;
        else if (orderedChanelIndex >= CHANNELS_SIZE)
            orderedChanelIndex = 0;

        this->setChannel();
    260a:	0c 94 ba 12 	jmp	0x2574	; 0x2574 <_ZN12StateMachine18SearchStateHandler10setChannelEv>
    }
}
    260e:	df 91       	pop	r29
    2610:	cf 91       	pop	r28
    2612:	1f 91       	pop	r17
    2614:	0f 91       	pop	r16
    2616:	08 95       	ret

00002618 <_ZN12StateMachine18SearchStateHandler11drawBordersEv>:
        );
    #endif
}

void StateMachine::SearchStateHandler::drawMenu() {
    this->menu.draw();
    2618:	cf 92       	push	r12
    261a:	df 92       	push	r13
    261c:	ef 92       	push	r14
    261e:	ff 92       	push	r15
    2620:	0f 93       	push	r16
    2622:	1f 93       	push	r17
    2624:	cc 24       	eor	r12, r12
    2626:	c3 94       	inc	r12
    2628:	d1 2c       	mov	r13, r1
    262a:	92 e0       	ldi	r25, 0x02	; 2
    262c:	e9 2e       	mov	r14, r25
    262e:	f1 2c       	mov	r15, r1
    2630:	07 e0       	ldi	r16, 0x07	; 7
    2632:	10 e0       	ldi	r17, 0x00	; 0
    2634:	27 e3       	ldi	r18, 0x37	; 55
    2636:	30 e0       	ldi	r19, 0x00	; 0
    2638:	47 e2       	ldi	r20, 0x27	; 39
    263a:	50 e0       	ldi	r21, 0x00	; 0
    263c:	60 e0       	ldi	r22, 0x00	; 0
    263e:	70 e0       	ldi	r23, 0x00	; 0
    2640:	86 eb       	ldi	r24, 0xB6	; 182
    2642:	92 e0       	ldi	r25, 0x02	; 2
    2644:	0e 94 d9 1f 	call	0x3fb2	; 0x3fb2 <_ZN12Adafruit_GFX13drawRoundRectEiiiiij>
    2648:	23 e0       	ldi	r18, 0x03	; 3
    264a:	30 e0       	ldi	r19, 0x00	; 0
    264c:	40 e4       	ldi	r20, 0x40	; 64
    264e:	50 e0       	ldi	r21, 0x00	; 0
    2650:	60 e0       	ldi	r22, 0x00	; 0
    2652:	70 e0       	ldi	r23, 0x00	; 0
    2654:	8b e3       	ldi	r24, 0x3B	; 59
    2656:	90 e0       	ldi	r25, 0x00	; 0
    2658:	1f 91       	pop	r17
    265a:	0f 91       	pop	r16
    265c:	ff 90       	pop	r15
    265e:	ef 90       	pop	r14
    2660:	df 90       	pop	r13
    2662:	cf 90       	pop	r12
    2664:	0c 94 01 17 	jmp	0x2e02	; 0x2e02 <_ZN2Ui15drawDashedVLineEiiii>

00002668 <_ZN12StateMachine18SearchStateHandler15drawChannelTextEv>:
    2668:	65 e0       	ldi	r22, 0x05	; 5
    266a:	86 eb       	ldi	r24, 0xB6	; 182
    266c:	92 e0       	ldi	r25, 0x02	; 2
    266e:	0e 94 5c 26 	call	0x4cb8	; 0x4cb8 <_ZN12Adafruit_GFX11setTextSizeEh>
    2672:	e6 eb       	ldi	r30, 0xB6	; 182
    2674:	f2 e0       	ldi	r31, 0x02	; 2
    2676:	81 e0       	ldi	r24, 0x01	; 1
    2678:	90 e0       	ldi	r25, 0x00	; 0
    267a:	93 8b       	std	Z+19, r25	; 0x13
    267c:	82 8b       	std	Z+18, r24	; 0x12
    267e:	91 8b       	std	Z+17, r25	; 0x11
    2680:	80 8b       	std	Z+16, r24	; 0x10
    2682:	15 86       	std	Z+13, r1	; 0x0d
    2684:	14 86       	std	Z+12, r1	; 0x0c
    2686:	17 86       	std	Z+15, r1	; 0x0f
    2688:	16 86       	std	Z+14, r1	; 0x0e
    268a:	80 91 85 02 	lds	r24, 0x0285	; 0x800285 <_ZN8Receiver13activeChannelE>
    268e:	0e 94 8e 0a 	call	0x151c	; 0x151c <_ZN8Channels7getNameEh>
    2692:	bc 01       	movw	r22, r24
    2694:	86 eb       	ldi	r24, 0xB6	; 182
    2696:	92 e0       	ldi	r25, 0x02	; 2
    2698:	0c 94 ab 19 	jmp	0x3356	; 0x3356 <_ZN5Print5printEPKc>

0000269c <_ZN12StateMachine18SearchStateHandler17drawFrequencyTextEv>:
    269c:	62 e0       	ldi	r22, 0x02	; 2
    269e:	86 eb       	ldi	r24, 0xB6	; 182
    26a0:	92 e0       	ldi	r25, 0x02	; 2
    26a2:	0e 94 5c 26 	call	0x4cb8	; 0x4cb8 <_ZN12Adafruit_GFX11setTextSizeEh>
    26a6:	e6 eb       	ldi	r30, 0xB6	; 182
    26a8:	f2 e0       	ldi	r31, 0x02	; 2
    26aa:	81 e0       	ldi	r24, 0x01	; 1
    26ac:	90 e0       	ldi	r25, 0x00	; 0
    26ae:	93 8b       	std	Z+19, r25	; 0x13
    26b0:	82 8b       	std	Z+18, r24	; 0x12
    26b2:	91 8b       	std	Z+17, r25	; 0x11
    26b4:	80 8b       	std	Z+16, r24	; 0x10
    26b6:	86 e0       	ldi	r24, 0x06	; 6
    26b8:	90 e0       	ldi	r25, 0x00	; 0
    26ba:	95 87       	std	Z+13, r25	; 0x0d
    26bc:	84 87       	std	Z+12, r24	; 0x0c
    26be:	82 e3       	ldi	r24, 0x32	; 50
    26c0:	90 e0       	ldi	r25, 0x00	; 0
    26c2:	97 87       	std	Z+15, r25	; 0x0f
    26c4:	86 87       	std	Z+14, r24	; 0x0e
    26c6:	80 91 85 02 	lds	r24, 0x0285	; 0x800285 <_ZN8Receiver13activeChannelE>
    26ca:	0e 94 85 0a 	call	0x150a	; 0x150a <_ZN8Channels12getFrequencyEh>
    26ce:	4a e0       	ldi	r20, 0x0A	; 10
    26d0:	50 e0       	ldi	r21, 0x00	; 0
    26d2:	bc 01       	movw	r22, r24
    26d4:	86 eb       	ldi	r24, 0xB6	; 182
    26d6:	92 e0       	ldi	r25, 0x02	; 2
    26d8:	0c 94 03 1a 	jmp	0x3406	; 0x3406 <_ZN5Print5printEji>

000026dc <_ZN12StateMachine18SearchStateHandler13drawRssiGraphEv>:
    26dc:	cf 92       	push	r12
    26de:	ef 92       	push	r14
    26e0:	0f 93       	push	r16
    26e2:	1f 93       	push	r17
    26e4:	cf 93       	push	r28
    26e6:	df 93       	push	r29
    26e8:	8d e1       	ldi	r24, 0x1D	; 29
    26ea:	c8 2e       	mov	r12, r24
    26ec:	95 e4       	ldi	r25, 0x45	; 69
    26ee:	e9 2e       	mov	r14, r25
    26f0:	00 e0       	ldi	r16, 0x00	; 0
    26f2:	2d e3       	ldi	r18, 0x3D	; 61
    26f4:	44 e6       	ldi	r20, 0x64	; 100
    26f6:	68 e1       	ldi	r22, 0x18	; 24
    26f8:	8f e4       	ldi	r24, 0x4F	; 79
    26fa:	92 e0       	ldi	r25, 0x02	; 2
    26fc:	0e 94 50 17 	call	0x2ea0	; 0x2ea0 <_ZN2Ui9drawGraphEPKhhhhhhh>
    2700:	02 e2       	ldi	r16, 0x22	; 34
    2702:	2d e3       	ldi	r18, 0x3D	; 61
    2704:	44 e6       	ldi	r20, 0x64	; 100
    2706:	68 e1       	ldi	r22, 0x18	; 24
    2708:	8a e6       	ldi	r24, 0x6A	; 106
    270a:	92 e0       	ldi	r25, 0x02	; 2
    270c:	0e 94 50 17 	call	0x2ea0	; 0x2ea0 <_ZN2Ui9drawGraphEPKhhhhhhh>
    2710:	23 e0       	ldi	r18, 0x03	; 3
    2712:	30 e0       	ldi	r19, 0x00	; 0
    2714:	45 e4       	ldi	r20, 0x45	; 69
    2716:	50 e0       	ldi	r21, 0x00	; 0
    2718:	6f e1       	ldi	r22, 0x1F	; 31
    271a:	70 e0       	ldi	r23, 0x00	; 0
    271c:	8d e3       	ldi	r24, 0x3D	; 61
    271e:	90 e0       	ldi	r25, 0x00	; 0
    2720:	0e 94 c5 16 	call	0x2d8a	; 0x2d8a <_ZN2Ui15drawDashedHLineEiiii>
    2724:	61 e0       	ldi	r22, 0x01	; 1
    2726:	86 eb       	ldi	r24, 0xB6	; 182
    2728:	92 e0       	ldi	r25, 0x02	; 2
    272a:	0e 94 5c 26 	call	0x4cb8	; 0x4cb8 <_ZN12Adafruit_GFX11setTextSizeEh>
    272e:	c6 eb       	ldi	r28, 0xB6	; 182
    2730:	d2 e0       	ldi	r29, 0x02	; 2
    2732:	82 e0       	ldi	r24, 0x02	; 2
    2734:	90 e0       	ldi	r25, 0x00	; 0
    2736:	9b 8b       	std	Y+19, r25	; 0x13
    2738:	8a 8b       	std	Y+18, r24	; 0x12
    273a:	99 8b       	std	Y+17, r25	; 0x11
    273c:	88 8b       	std	Y+16, r24	; 0x10
    273e:	0f e3       	ldi	r16, 0x3F	; 63
    2740:	10 e0       	ldi	r17, 0x00	; 0
    2742:	1d 87       	std	Y+13, r17	; 0x0d
    2744:	0c 87       	std	Y+12, r16	; 0x0c
    2746:	8b e0       	ldi	r24, 0x0B	; 11
    2748:	90 e0       	ldi	r25, 0x00	; 0
    274a:	9f 87       	std	Y+15, r25	; 0x0f
    274c:	8e 87       	std	Y+14, r24	; 0x0e
    274e:	85 ee       	ldi	r24, 0xE5	; 229
    2750:	97 e0       	ldi	r25, 0x07	; 7
    2752:	0e 94 b1 0a 	call	0x1562	; 0x1562 <_Z14PSTRtoBuffer_PPKc>
    2756:	bc 01       	movw	r22, r24
    2758:	ce 01       	movw	r24, r28
    275a:	0e 94 ab 19 	call	0x3356	; 0x3356 <_ZN5Print5printEPKc>
    275e:	1d 87       	std	Y+13, r17	; 0x0d
    2760:	0c 87       	std	Y+12, r16	; 0x0c
    2762:	8d e2       	ldi	r24, 0x2D	; 45
    2764:	90 e0       	ldi	r25, 0x00	; 0
    2766:	9f 87       	std	Y+15, r25	; 0x0f
    2768:	8e 87       	std	Y+14, r24	; 0x0e
    276a:	83 ee       	ldi	r24, 0xE3	; 227
    276c:	97 e0       	ldi	r25, 0x07	; 7
    276e:	0e 94 b1 0a 	call	0x1562	; 0x1562 <_Z14PSTRtoBuffer_PPKc>
    2772:	bc 01       	movw	r22, r24
    2774:	ce 01       	movw	r24, r28
    2776:	df 91       	pop	r29
    2778:	cf 91       	pop	r28
    277a:	1f 91       	pop	r17
    277c:	0f 91       	pop	r16
    277e:	ef 90       	pop	r14
    2780:	cf 90       	pop	r12
    2782:	0c 94 ab 19 	jmp	0x3356	; 0x3356 <_ZN5Print5printEPKc>

00002786 <_ZN12StateMachine18SearchStateHandler11drawScanBarEv>:
    display.setCursor(FREQUENCY_TEXT_X, FREQUENCY_TEXT_Y);

    display.print(Channels::getFrequency(Receiver::activeChannel));
}

void StateMachine::SearchStateHandler::drawScanBar() {
    2786:	ef 92       	push	r14
    2788:	ff 92       	push	r15
    278a:	0f 93       	push	r16
    278c:	1f 93       	push	r17
    uint8_t scanWidth = orderedChanelIndex * SCANBAR_W / CHANNELS_SIZE;
    278e:	fc 01       	movw	r30, r24
    2790:	86 a1       	ldd	r24, Z+38	; 0x26
        SCANBAR_X,
        SCANBAR_Y,
        scanWidth,
        SCANBAR_H,
        WHITE
    );
    2792:	f3 e3       	ldi	r31, 0x33	; 51
    2794:	8f 9f       	mul	r24, r31
    2796:	c0 01       	movw	r24, r0
    2798:	11 24       	eor	r1, r1
    279a:	60 e3       	ldi	r22, 0x30	; 48
    279c:	70 e0       	ldi	r23, 0x00	; 0
    279e:	0e 94 8c 31 	call	0x6318	; 0x6318 <__divmodhi4>
    27a2:	9b 01       	movw	r18, r22
    27a4:	33 27       	eor	r19, r19
    27a6:	ee 24       	eor	r14, r14
    27a8:	e3 94       	inc	r14
    27aa:	f1 2c       	mov	r15, r1
    27ac:	03 e0       	ldi	r16, 0x03	; 3
    27ae:	10 e0       	ldi	r17, 0x00	; 0
    27b0:	49 e2       	ldi	r20, 0x29	; 41
    27b2:	50 e0       	ldi	r21, 0x00	; 0
    27b4:	62 e0       	ldi	r22, 0x02	; 2
    27b6:	70 e0       	ldi	r23, 0x00	; 0
    27b8:	86 eb       	ldi	r24, 0xB6	; 182
    27ba:	92 e0       	ldi	r25, 0x02	; 2
    27bc:	0e 94 75 1d 	call	0x3aea	; 0x3aea <_ZN12Adafruit_GFX8fillRectEiiiij>
}
    27c0:	1f 91       	pop	r17
    27c2:	0f 91       	pop	r16
    27c4:	ff 90       	pop	r15
    27c6:	ef 90       	pop	r14
    27c8:	08 95       	ret

000027ca <_ZN12StateMachine18SearchStateHandler13onInitialDrawEv>:


using Ui::display;


void StateMachine::SearchStateHandler::onInitialDraw() {
    27ca:	cf 93       	push	r28
    27cc:	df 93       	push	r29
    27ce:	ec 01       	movw	r28, r24
    Ui::clear();
    27d0:	0e 94 ac 16 	call	0x2d58	; 0x2d58 <_ZN2Ui5clearEv>

    drawBorders();
    27d4:	ce 01       	movw	r24, r28
    27d6:	0e 94 0c 13 	call	0x2618	; 0x2618 <_ZN12StateMachine18SearchStateHandler11drawBordersEv>

    drawChannelText();
    27da:	ce 01       	movw	r24, r28
    27dc:	0e 94 34 13 	call	0x2668	; 0x2668 <_ZN12StateMachine18SearchStateHandler15drawChannelTextEv>
    drawFrequencyText();
    27e0:	ce 01       	movw	r24, r28
    27e2:	0e 94 4e 13 	call	0x269c	; 0x269c <_ZN12StateMachine18SearchStateHandler17drawFrequencyTextEv>
    drawScanBar();
    27e6:	ce 01       	movw	r24, r28
    27e8:	0e 94 c3 13 	call	0x2786	; 0x2786 <_ZN12StateMachine18SearchStateHandler11drawScanBarEv>
    drawRssiGraph();
    27ec:	ce 01       	movw	r24, r28
    27ee:	0e 94 6e 13 	call	0x26dc	; 0x26dc <_ZN12StateMachine18SearchStateHandler13drawRssiGraphEv>

    Ui::needDisplay();
}
    27f2:	df 91       	pop	r29
    27f4:	cf 91       	pop	r28
    drawChannelText();
    drawFrequencyText();
    drawScanBar();
    drawRssiGraph();

    Ui::needDisplay();
    27f6:	0c 94 b4 16 	jmp	0x2d68	; 0x2d68 <_ZN2Ui11needDisplayEv>

000027fa <_ZN12StateMachine18SearchStateHandler12onUpdateDrawEv>:
}

void StateMachine::SearchStateHandler::onUpdateDraw() {
    27fa:	cf 93       	push	r28
    27fc:	df 93       	push	r29
    27fe:	ec 01       	movw	r28, r24
    Ui::clearRect(
        0,
        0,
        BORDER_GRAPH_L_X,
        CHANNEL_TEXT_H
    );
    2800:	23 e2       	ldi	r18, 0x23	; 35
    2802:	30 e0       	ldi	r19, 0x00	; 0
    2804:	4b e3       	ldi	r20, 0x3B	; 59
    2806:	50 e0       	ldi	r21, 0x00	; 0
    2808:	60 e0       	ldi	r22, 0x00	; 0
    280a:	70 e0       	ldi	r23, 0x00	; 0
    280c:	80 e0       	ldi	r24, 0x00	; 0
    280e:	90 e0       	ldi	r25, 0x00	; 0
    2810:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <_ZN2Ui9clearRectEiiii>
    Ui::clearRect(
        0,
        FREQUENCY_TEXT_Y,
        BORDER_GRAPH_L_X,
        CHAR_HEIGHT * 2
    );
    2814:	2e e0       	ldi	r18, 0x0E	; 14
    2816:	30 e0       	ldi	r19, 0x00	; 0
    2818:	4b e3       	ldi	r20, 0x3B	; 59
    281a:	50 e0       	ldi	r21, 0x00	; 0
    281c:	62 e3       	ldi	r22, 0x32	; 50
    281e:	70 e0       	ldi	r23, 0x00	; 0
    2820:	80 e0       	ldi	r24, 0x00	; 0
    2822:	90 e0       	ldi	r25, 0x00	; 0
    2824:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <_ZN2Ui9clearRectEiiii>
    Ui::clearRect(
        SCANBAR_X,
        SCANBAR_Y,
        SCANBAR_W,
        SCANBAR_H
    );
    2828:	23 e0       	ldi	r18, 0x03	; 3
    282a:	30 e0       	ldi	r19, 0x00	; 0
    282c:	43 e3       	ldi	r20, 0x33	; 51
    282e:	50 e0       	ldi	r21, 0x00	; 0
    2830:	69 e2       	ldi	r22, 0x29	; 41
    2832:	70 e0       	ldi	r23, 0x00	; 0
    2834:	82 e0       	ldi	r24, 0x02	; 2
    2836:	90 e0       	ldi	r25, 0x00	; 0
    2838:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <_ZN2Ui9clearRectEiiii>

    drawChannelText();
    283c:	ce 01       	movw	r24, r28
    283e:	0e 94 34 13 	call	0x2668	; 0x2668 <_ZN12StateMachine18SearchStateHandler15drawChannelTextEv>
    drawFrequencyText();
    2842:	ce 01       	movw	r24, r28
    2844:	0e 94 4e 13 	call	0x269c	; 0x269c <_ZN12StateMachine18SearchStateHandler17drawFrequencyTextEv>
    drawScanBar();
    2848:	ce 01       	movw	r24, r28
    284a:	0e 94 c3 13 	call	0x2786	; 0x2786 <_ZN12StateMachine18SearchStateHandler11drawScanBarEv>
    drawRssiGraph();
    284e:	ce 01       	movw	r24, r28
    2850:	0e 94 6e 13 	call	0x26dc	; 0x26dc <_ZN12StateMachine18SearchStateHandler13drawRssiGraphEv>
    menu.draw();
    2854:	ce 01       	movw	r24, r28
    2856:	0c 96       	adiw	r24, 0x0c	; 12
    2858:	0e 94 ab 18 	call	0x3156	; 0x3156 <_ZN2Ui15StateMenuHelper4drawEv>

    Ui::needDisplay();
}
    285c:	df 91       	pop	r29
    285e:	cf 91       	pop	r28
    drawFrequencyText();
    drawScanBar();
    drawRssiGraph();
    menu.draw();

    Ui::needDisplay();
    2860:	0c 94 b4 16 	jmp	0x2d68	; 0x2d68 <_ZN2Ui11needDisplayEv>

00002864 <_ZN12StateMachine20SettingsStateHandler12onUpdateDrawEv>:
    Ui::display.print(PSTR2("Press mode for\nRSSI calibration"));

    Ui::needDisplay();
}

void StateMachine::SettingsStateHandler::onUpdateDraw() {
    2864:	08 95       	ret

00002866 <_ZN12StateMachine20SettingsStateHandler14onButtonChangeE6ButtonN7Buttons9PressTypeE>:

void StateMachine::SettingsStateHandler::onButtonChange(
    Button button,
    Buttons::PressType pressType
) {
    if (button == Button::MODE) {
    2866:	62 30       	cpi	r22, 0x02	; 2
    2868:	19 f4       	brne	.+6      	; 0x2870 <_ZN12StateMachine20SettingsStateHandler14onButtonChangeE6ButtonN7Buttons9PressTypeE+0xa>
        StateMachine::switchState(StateMachine::State::SETTINGS_RSSI);
    286a:	86 e0       	ldi	r24, 0x06	; 6
    286c:	0c 94 73 0e 	jmp	0x1ce6	; 0x1ce6 <_ZN12StateMachine11switchStateENS_5StateE>
    2870:	08 95       	ret

00002872 <_ZN12StateMachine20SettingsStateHandler13onInitialDrawEv>:
    }
}


void StateMachine::SettingsStateHandler::onInitialDraw() {
    Ui::clear();
    2872:	0e 94 ac 16 	call	0x2d58	; 0x2d58 <_ZN2Ui5clearEv>

    Ui::display.setTextSize(1);
    2876:	61 e0       	ldi	r22, 0x01	; 1
    2878:	86 eb       	ldi	r24, 0xB6	; 182
    287a:	92 e0       	ldi	r25, 0x02	; 2
    287c:	0e 94 5c 26 	call	0x4cb8	; 0x4cb8 <_ZN12Adafruit_GFX11setTextSizeEh>
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) {
    cursor_x = x;
    2880:	e6 eb       	ldi	r30, 0xB6	; 182
    2882:	f2 e0       	ldi	r31, 0x02	; 2
    2884:	15 86       	std	Z+13, r1	; 0x0d
    2886:	14 86       	std	Z+12, r1	; 0x0c
    cursor_y = y;
    2888:	17 86       	std	Z+15, r1	; 0x0f
    288a:	16 86       	std	Z+14, r1	; 0x0e
    Ui::display.setCursor(0, 0);
    Ui::display.print(PSTR2("Press mode for\nRSSI calibration"));
    288c:	87 ee       	ldi	r24, 0xE7	; 231
    288e:	97 e0       	ldi	r25, 0x07	; 7
    2890:	0e 94 b1 0a 	call	0x1562	; 0x1562 <_Z14PSTRtoBuffer_PPKc>
    2894:	bc 01       	movw	r22, r24
    2896:	86 eb       	ldi	r24, 0xB6	; 182
    2898:	92 e0       	ldi	r25, 0x02	; 2
    289a:	0e 94 ab 19 	call	0x3356	; 0x3356 <_ZN5Print5printEPKc>

    Ui::needDisplay();
    289e:	0c 94 b4 16 	jmp	0x2d68	; 0x2d68 <_ZN2Ui11needDisplayEv>

000028a2 <_ZN12StateMachine24SettingsRssiStateHandler7onEnterEv>:
#include "ui.h"
#include "pstr_helper.h"


void StateMachine::SettingsRssiStateHandler::onEnter() {
    internalState = InternalState::WAIT_FOR_LOW;
    28a2:	fc 01       	movw	r30, r24
    28a4:	12 82       	std	Z+2, r1	; 0x02
    28a6:	08 95       	ret

000028a8 <_ZN12StateMachine24SettingsRssiStateHandler13onInitialDrawEv>:
    Ui::needUpdate();
}


void StateMachine::SettingsRssiStateHandler::onInitialDraw() {
    Ui::needUpdate(); // Lazy. :(
    28a8:	0c 94 b0 16 	jmp	0x2d60	; 0x2d60 <_ZN2Ui10needUpdateEv>

000028ac <_ZN12StateMachine24SettingsRssiStateHandler12onUpdateDrawEv>:
}

void StateMachine::SettingsRssiStateHandler::onUpdateDraw() {
    28ac:	ef 92       	push	r14
    28ae:	ff 92       	push	r15
    28b0:	0f 93       	push	r16
    28b2:	1f 93       	push	r17
    28b4:	cf 93       	push	r28
    28b6:	df 93       	push	r29
    28b8:	ec 01       	movw	r28, r24
    Ui::clear();
    28ba:	0e 94 ac 16 	call	0x2d58	; 0x2d58 <_ZN2Ui5clearEv>

    switch (internalState) {
    28be:	8a 81       	ldd	r24, Y+2	; 0x02
    28c0:	82 30       	cpi	r24, 0x02	; 2
    28c2:	09 f4       	brne	.+2      	; 0x28c6 <_ZN12StateMachine24SettingsRssiStateHandler12onUpdateDrawEv+0x1a>
    28c4:	e9 c0       	rjmp	.+466    	; 0x2a98 <_ZN12StateMachine24SettingsRssiStateHandler12onUpdateDrawEv+0x1ec>
    28c6:	b0 f4       	brcc	.+44     	; 0x28f4 <_ZN12StateMachine24SettingsRssiStateHandler12onUpdateDrawEv+0x48>
    28c8:	88 23       	and	r24, r24
    28ca:	09 f4       	brne	.+2      	; 0x28ce <_ZN12StateMachine24SettingsRssiStateHandler12onUpdateDrawEv+0x22>
    28cc:	af c0       	rjmp	.+350    	; 0x2a2c <_ZN12StateMachine24SettingsRssiStateHandler12onUpdateDrawEv+0x180>
    28ce:	81 30       	cpi	r24, 0x01	; 1
    28d0:	09 f0       	breq	.+2      	; 0x28d4 <_ZN12StateMachine24SettingsRssiStateHandler12onUpdateDrawEv+0x28>
    28d2:	1b c1       	rjmp	.+566    	; 0x2b0a <_ZN12StateMachine24SettingsRssiStateHandler12onUpdateDrawEv+0x25e>
            Ui::display.setCursor(0, SCREEN_HEIGHT - CHAR_HEIGHT - 1);
            Ui::display.print(PSTR2("Press MODE when ready."));
        break;

        case InternalState::SCANNING_LOW:
            Ui::display.setTextSize(1);
    28d4:	61 e0       	ldi	r22, 0x01	; 1
    28d6:	86 eb       	ldi	r24, 0xB6	; 182
    28d8:	92 e0       	ldi	r25, 0x02	; 2
    28da:	0e 94 5c 26 	call	0x4cb8	; 0x4cb8 <_ZN12Adafruit_GFX11setTextSizeEh>
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) {
    cursor_x = x;
    28de:	10 92 c3 02 	sts	0x02C3, r1	; 0x8002c3 <_ZN2Ui7displayE+0xd>
    28e2:	10 92 c2 02 	sts	0x02C2, r1	; 0x8002c2 <_ZN2Ui7displayE+0xc>
    cursor_y = y;
    28e6:	10 92 c5 02 	sts	0x02C5, r1	; 0x8002c5 <_ZN2Ui7displayE+0xf>
    28ea:	10 92 c4 02 	sts	0x02C4, r1	; 0x8002c4 <_ZN2Ui7displayE+0xe>
            Ui::display.setCursor(0, 0);
            Ui::display.print(PSTR2("2/4\nScanning for lowest\nRSSI..."));
    28ee:	8f e7       	ldi	r24, 0x7F	; 127
    28f0:	98 e0       	ldi	r25, 0x08	; 8
    28f2:	04 c1       	rjmp	.+520    	; 0x2afc <_ZN12StateMachine24SettingsRssiStateHandler12onUpdateDrawEv+0x250>
}

void StateMachine::SettingsRssiStateHandler::onUpdateDraw() {
    Ui::clear();

    switch (internalState) {
    28f4:	83 30       	cpi	r24, 0x03	; 3
    28f6:	09 f4       	brne	.+2      	; 0x28fa <_ZN12StateMachine24SettingsRssiStateHandler12onUpdateDrawEv+0x4e>
    28f8:	f2 c0       	rjmp	.+484    	; 0x2ade <_ZN12StateMachine24SettingsRssiStateHandler12onUpdateDrawEv+0x232>
    28fa:	84 30       	cpi	r24, 0x04	; 4
    28fc:	09 f0       	breq	.+2      	; 0x2900 <_ZN12StateMachine24SettingsRssiStateHandler12onUpdateDrawEv+0x54>
    28fe:	05 c1       	rjmp	.+522    	; 0x2b0a <_ZN12StateMachine24SettingsRssiStateHandler12onUpdateDrawEv+0x25e>
            Ui::display.setCursor(0, 0);
            Ui::display.print(PSTR2("4/4\nScanning for highest\nRSSI..."));
        break;

        case InternalState::DONE:
            Ui::display.setTextSize(1);
    2900:	61 e0       	ldi	r22, 0x01	; 1
    2902:	86 eb       	ldi	r24, 0xB6	; 182
    2904:	92 e0       	ldi	r25, 0x02	; 2
    2906:	0e 94 5c 26 	call	0x4cb8	; 0x4cb8 <_ZN12Adafruit_GFX11setTextSizeEh>
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) {
    cursor_x = x;
    290a:	10 92 c3 02 	sts	0x02C3, r1	; 0x8002c3 <_ZN2Ui7displayE+0xd>
    290e:	10 92 c2 02 	sts	0x02C2, r1	; 0x8002c2 <_ZN2Ui7displayE+0xc>
    cursor_y = y;
    2912:	10 92 c5 02 	sts	0x02C5, r1	; 0x8002c5 <_ZN2Ui7displayE+0xf>
    2916:	10 92 c4 02 	sts	0x02C4, r1	; 0x8002c4 <_ZN2Ui7displayE+0xe>
            Ui::display.setCursor(0, 0);
            Ui::display.print(PSTR2("All done!"));
    291a:	87 e2       	ldi	r24, 0x27	; 39
    291c:	98 e0       	ldi	r25, 0x08	; 8
    291e:	0e 94 b1 0a 	call	0x1562	; 0x1562 <_Z14PSTRtoBuffer_PPKc>
    2922:	bc 01       	movw	r22, r24
    2924:	86 eb       	ldi	r24, 0xB6	; 182
    2926:	92 e0       	ldi	r25, 0x02	; 2
    2928:	0e 94 ab 19 	call	0x3356	; 0x3356 <_ZN5Print5printEPKc>
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) {
    cursor_x = x;
    292c:	10 92 c3 02 	sts	0x02C3, r1	; 0x8002c3 <_ZN2Ui7displayE+0xd>
    2930:	10 92 c2 02 	sts	0x02C2, r1	; 0x8002c2 <_ZN2Ui7displayE+0xc>
    cursor_y = y;
    2934:	ce e0       	ldi	r28, 0x0E	; 14
    2936:	d0 e0       	ldi	r29, 0x00	; 0
    2938:	d0 93 c5 02 	sts	0x02C5, r29	; 0x8002c5 <_ZN2Ui7displayE+0xf>
    293c:	c0 93 c4 02 	sts	0x02C4, r28	; 0x8002c4 <_ZN2Ui7displayE+0xe>

            Ui::display.setCursor(0, CHAR_HEIGHT * 2);
            Ui::display.print(PSTR2("Min: "));
    2940:	81 e2       	ldi	r24, 0x21	; 33
    2942:	98 e0       	ldi	r25, 0x08	; 8
    2944:	0e 94 b1 0a 	call	0x1562	; 0x1562 <_Z14PSTRtoBuffer_PPKc>
    2948:	bc 01       	movw	r22, r24
    294a:	86 eb       	ldi	r24, 0xB6	; 182
    294c:	92 e0       	ldi	r25, 0x02	; 2
    294e:	0e 94 ab 19 	call	0x3356	; 0x3356 <_ZN5Print5printEPKc>
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) {
    cursor_x = x;
    2952:	8e e1       	ldi	r24, 0x1E	; 30
    2954:	e8 2e       	mov	r14, r24
    2956:	f1 2c       	mov	r15, r1
    2958:	f0 92 c3 02 	sts	0x02C3, r15	; 0x8002c3 <_ZN2Ui7displayE+0xd>
    295c:	e0 92 c2 02 	sts	0x02C2, r14	; 0x8002c2 <_ZN2Ui7displayE+0xc>
    cursor_y = y;
    2960:	d0 93 c5 02 	sts	0x02C5, r29	; 0x8002c5 <_ZN2Ui7displayE+0xf>
    2964:	c0 93 c4 02 	sts	0x02C4, r28	; 0x8002c4 <_ZN2Ui7displayE+0xe>

            Ui::display.setCursor((CHAR_WIDTH + 1) * 5, CHAR_HEIGHT * 2);
            Ui::display.print(EepromSettings.rssiAMin);
    2968:	60 91 8f 02 	lds	r22, 0x028F	; 0x80028f <EepromSettings+0x8>
    296c:	70 91 90 02 	lds	r23, 0x0290	; 0x800290 <EepromSettings+0x9>
    2970:	4a e0       	ldi	r20, 0x0A	; 10
    2972:	50 e0       	ldi	r21, 0x00	; 0
    2974:	86 eb       	ldi	r24, 0xB6	; 182
    2976:	92 e0       	ldi	r25, 0x02	; 2
    2978:	0e 94 03 1a 	call	0x3406	; 0x3406 <_ZN5Print5printEji>
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) {
    cursor_x = x;
    297c:	08 e4       	ldi	r16, 0x48	; 72
    297e:	10 e0       	ldi	r17, 0x00	; 0
    2980:	10 93 c3 02 	sts	0x02C3, r17	; 0x8002c3 <_ZN2Ui7displayE+0xd>
    2984:	00 93 c2 02 	sts	0x02C2, r16	; 0x8002c2 <_ZN2Ui7displayE+0xc>
    cursor_y = y;
    2988:	d0 93 c5 02 	sts	0x02C5, r29	; 0x8002c5 <_ZN2Ui7displayE+0xf>
    298c:	c0 93 c4 02 	sts	0x02C4, r28	; 0x8002c4 <_ZN2Ui7displayE+0xe>
            #ifdef USE_DIVERSITY
                Ui::display.setCursor((CHAR_WIDTH + 1) * 12, CHAR_HEIGHT * 2);
                Ui::display.print(EepromSettings.rssiAMin);
    2990:	60 91 8f 02 	lds	r22, 0x028F	; 0x80028f <EepromSettings+0x8>
    2994:	70 91 90 02 	lds	r23, 0x0290	; 0x800290 <EepromSettings+0x9>
    2998:	4a e0       	ldi	r20, 0x0A	; 10
    299a:	50 e0       	ldi	r21, 0x00	; 0
    299c:	86 eb       	ldi	r24, 0xB6	; 182
    299e:	92 e0       	ldi	r25, 0x02	; 2
    29a0:	0e 94 03 1a 	call	0x3406	; 0x3406 <_ZN5Print5printEji>
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) {
    cursor_x = x;
    29a4:	10 92 c3 02 	sts	0x02C3, r1	; 0x8002c3 <_ZN2Ui7displayE+0xd>
    29a8:	10 92 c2 02 	sts	0x02C2, r1	; 0x8002c2 <_ZN2Ui7displayE+0xc>
    cursor_y = y;
    29ac:	c6 e1       	ldi	r28, 0x16	; 22
    29ae:	d0 e0       	ldi	r29, 0x00	; 0
    29b0:	d0 93 c5 02 	sts	0x02C5, r29	; 0x8002c5 <_ZN2Ui7displayE+0xf>
    29b4:	c0 93 c4 02 	sts	0x02C4, r28	; 0x8002c4 <_ZN2Ui7displayE+0xe>
            #endif

            Ui::display.setCursor(0, CHAR_HEIGHT * 3 + 1);
            Ui::display.print(PSTR2("Max: "));
    29b8:	8b e1       	ldi	r24, 0x1B	; 27
    29ba:	98 e0       	ldi	r25, 0x08	; 8
    29bc:	0e 94 b1 0a 	call	0x1562	; 0x1562 <_Z14PSTRtoBuffer_PPKc>
    29c0:	bc 01       	movw	r22, r24
    29c2:	86 eb       	ldi	r24, 0xB6	; 182
    29c4:	92 e0       	ldi	r25, 0x02	; 2
    29c6:	0e 94 ab 19 	call	0x3356	; 0x3356 <_ZN5Print5printEPKc>
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) {
    cursor_x = x;
    29ca:	f0 92 c3 02 	sts	0x02C3, r15	; 0x8002c3 <_ZN2Ui7displayE+0xd>
    29ce:	e0 92 c2 02 	sts	0x02C2, r14	; 0x8002c2 <_ZN2Ui7displayE+0xc>
    cursor_y = y;
    29d2:	d0 93 c5 02 	sts	0x02C5, r29	; 0x8002c5 <_ZN2Ui7displayE+0xf>
    29d6:	c0 93 c4 02 	sts	0x02C4, r28	; 0x8002c4 <_ZN2Ui7displayE+0xe>

            Ui::display.setCursor((CHAR_WIDTH + 1) * 5, CHAR_HEIGHT * 3 + 1);
            Ui::display.print(EepromSettings.rssiAMax);
    29da:	60 91 91 02 	lds	r22, 0x0291	; 0x800291 <EepromSettings+0xa>
    29de:	70 91 92 02 	lds	r23, 0x0292	; 0x800292 <EepromSettings+0xb>
    29e2:	4a e0       	ldi	r20, 0x0A	; 10
    29e4:	50 e0       	ldi	r21, 0x00	; 0
    29e6:	86 eb       	ldi	r24, 0xB6	; 182
    29e8:	92 e0       	ldi	r25, 0x02	; 2
    29ea:	0e 94 03 1a 	call	0x3406	; 0x3406 <_ZN5Print5printEji>
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) {
    cursor_x = x;
    29ee:	10 93 c3 02 	sts	0x02C3, r17	; 0x8002c3 <_ZN2Ui7displayE+0xd>
    29f2:	00 93 c2 02 	sts	0x02C2, r16	; 0x8002c2 <_ZN2Ui7displayE+0xc>
    cursor_y = y;
    29f6:	d0 93 c5 02 	sts	0x02C5, r29	; 0x8002c5 <_ZN2Ui7displayE+0xf>
    29fa:	c0 93 c4 02 	sts	0x02C4, r28	; 0x8002c4 <_ZN2Ui7displayE+0xe>
            #ifdef USE_DIVERSITY
                Ui::display.setCursor((CHAR_WIDTH + 1) * 12,
                    CHAR_HEIGHT * 3 + 1);
                Ui::display.print(EepromSettings.rssiBMax);
    29fe:	60 91 96 02 	lds	r22, 0x0296	; 0x800296 <EepromSettings+0xf>
    2a02:	70 91 97 02 	lds	r23, 0x0297	; 0x800297 <EepromSettings+0x10>
    2a06:	4a e0       	ldi	r20, 0x0A	; 10
    2a08:	50 e0       	ldi	r21, 0x00	; 0
    2a0a:	86 eb       	ldi	r24, 0xB6	; 182
    2a0c:	92 e0       	ldi	r25, 0x02	; 2
    2a0e:	0e 94 03 1a 	call	0x3406	; 0x3406 <_ZN5Print5printEji>
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) {
    cursor_x = x;
    2a12:	10 92 c3 02 	sts	0x02C3, r1	; 0x8002c3 <_ZN2Ui7displayE+0xd>
    2a16:	10 92 c2 02 	sts	0x02C2, r1	; 0x8002c2 <_ZN2Ui7displayE+0xc>
    cursor_y = y;
    2a1a:	88 e3       	ldi	r24, 0x38	; 56
    2a1c:	90 e0       	ldi	r25, 0x00	; 0
    2a1e:	90 93 c5 02 	sts	0x02C5, r25	; 0x8002c5 <_ZN2Ui7displayE+0xf>
    2a22:	80 93 c4 02 	sts	0x02C4, r24	; 0x8002c4 <_ZN2Ui7displayE+0xe>
            #endif

            Ui::display.setCursor(0, SCREEN_HEIGHT - CHAR_HEIGHT - 1);
            Ui::display.print(PSTR2("Press MODE to save."));
    2a26:	87 e0       	ldi	r24, 0x07	; 7
    2a28:	98 e0       	ldi	r25, 0x08	; 8
    2a2a:	68 c0       	rjmp	.+208    	; 0x2afc <_ZN12StateMachine24SettingsRssiStateHandler12onUpdateDrawEv+0x250>
void StateMachine::SettingsRssiStateHandler::onUpdateDraw() {
    Ui::clear();

    switch (internalState) {
        case InternalState::WAIT_FOR_LOW:
            Ui::display.setTextSize(1);
    2a2c:	61 e0       	ldi	r22, 0x01	; 1
    2a2e:	86 eb       	ldi	r24, 0xB6	; 182
    2a30:	92 e0       	ldi	r25, 0x02	; 2
    2a32:	0e 94 5c 26 	call	0x4cb8	; 0x4cb8 <_ZN12Adafruit_GFX11setTextSizeEh>
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) {
    cursor_x = x;
    2a36:	10 92 c3 02 	sts	0x02C3, r1	; 0x8002c3 <_ZN2Ui7displayE+0xd>
    2a3a:	10 92 c2 02 	sts	0x02C2, r1	; 0x8002c2 <_ZN2Ui7displayE+0xc>
    cursor_y = y;
    2a3e:	10 92 c5 02 	sts	0x02C5, r1	; 0x8002c5 <_ZN2Ui7displayE+0xf>
    2a42:	10 92 c4 02 	sts	0x02C4, r1	; 0x8002c4 <_ZN2Ui7displayE+0xe>
            Ui::display.setCursor(0, 0);
            Ui::display.print(PSTR2("1/4\nTurn off all VTXs."));
    2a46:	8a ec       	ldi	r24, 0xCA	; 202
    2a48:	98 e0       	ldi	r25, 0x08	; 8
    2a4a:	0e 94 b1 0a 	call	0x1562	; 0x1562 <_Z14PSTRtoBuffer_PPKc>
    2a4e:	bc 01       	movw	r22, r24
    2a50:	86 eb       	ldi	r24, 0xB6	; 182
    2a52:	92 e0       	ldi	r25, 0x02	; 2
    2a54:	0e 94 ab 19 	call	0x3356	; 0x3356 <_ZN5Print5printEPKc>
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) {
    cursor_x = x;
    2a58:	10 92 c3 02 	sts	0x02C3, r1	; 0x8002c3 <_ZN2Ui7displayE+0xd>
    2a5c:	10 92 c2 02 	sts	0x02C2, r1	; 0x8002c2 <_ZN2Ui7displayE+0xc>
    cursor_y = y;
    2a60:	80 e1       	ldi	r24, 0x10	; 16
    2a62:	90 e0       	ldi	r25, 0x00	; 0
    2a64:	90 93 c5 02 	sts	0x02C5, r25	; 0x8002c5 <_ZN2Ui7displayE+0xf>
    2a68:	80 93 c4 02 	sts	0x02C4, r24	; 0x8002c4 <_ZN2Ui7displayE+0xe>
            Ui::display.setCursor(0, (CHAR_HEIGHT + 1) * 2);
            Ui::display.print(PSTR2("Remove RX antennas."));
    2a6c:	86 eb       	ldi	r24, 0xB6	; 182
    2a6e:	98 e0       	ldi	r25, 0x08	; 8
    2a70:	0e 94 b1 0a 	call	0x1562	; 0x1562 <_Z14PSTRtoBuffer_PPKc>
    2a74:	bc 01       	movw	r22, r24
    2a76:	86 eb       	ldi	r24, 0xB6	; 182
    2a78:	92 e0       	ldi	r25, 0x02	; 2
    2a7a:	0e 94 ab 19 	call	0x3356	; 0x3356 <_ZN5Print5printEPKc>
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) {
    cursor_x = x;
    2a7e:	10 92 c3 02 	sts	0x02C3, r1	; 0x8002c3 <_ZN2Ui7displayE+0xd>
    2a82:	10 92 c2 02 	sts	0x02C2, r1	; 0x8002c2 <_ZN2Ui7displayE+0xc>
    cursor_y = y;
    2a86:	88 e3       	ldi	r24, 0x38	; 56
    2a88:	90 e0       	ldi	r25, 0x00	; 0
    2a8a:	90 93 c5 02 	sts	0x02C5, r25	; 0x8002c5 <_ZN2Ui7displayE+0xf>
    2a8e:	80 93 c4 02 	sts	0x02C4, r24	; 0x8002c4 <_ZN2Ui7displayE+0xe>

            Ui::display.setCursor(0, SCREEN_HEIGHT - CHAR_HEIGHT - 1);
            Ui::display.print(PSTR2("Press MODE when ready."));
    2a92:	8f e9       	ldi	r24, 0x9F	; 159
    2a94:	98 e0       	ldi	r25, 0x08	; 8
    2a96:	32 c0       	rjmp	.+100    	; 0x2afc <_ZN12StateMachine24SettingsRssiStateHandler12onUpdateDrawEv+0x250>
            Ui::display.setCursor(0, 0);
            Ui::display.print(PSTR2("2/4\nScanning for lowest\nRSSI..."));
        break;

        case InternalState::WAIT_FOR_HIGH:
            Ui::display.setTextSize(1);
    2a98:	61 e0       	ldi	r22, 0x01	; 1
    2a9a:	86 eb       	ldi	r24, 0xB6	; 182
    2a9c:	92 e0       	ldi	r25, 0x02	; 2
    2a9e:	0e 94 5c 26 	call	0x4cb8	; 0x4cb8 <_ZN12Adafruit_GFX11setTextSizeEh>
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) {
    cursor_x = x;
    2aa2:	10 92 c3 02 	sts	0x02C3, r1	; 0x8002c3 <_ZN2Ui7displayE+0xd>
    2aa6:	10 92 c2 02 	sts	0x02C2, r1	; 0x8002c2 <_ZN2Ui7displayE+0xc>
    cursor_y = y;
    2aaa:	10 92 c5 02 	sts	0x02C5, r1	; 0x8002c5 <_ZN2Ui7displayE+0xf>
    2aae:	10 92 c4 02 	sts	0x02C4, r1	; 0x8002c4 <_ZN2Ui7displayE+0xe>
            Ui::display.setCursor(0, 0);
            Ui::display.print(PSTR2("3/4\nTurn on your VTX."));
    2ab2:	89 e6       	ldi	r24, 0x69	; 105
    2ab4:	98 e0       	ldi	r25, 0x08	; 8
    2ab6:	0e 94 b1 0a 	call	0x1562	; 0x1562 <_Z14PSTRtoBuffer_PPKc>
    2aba:	bc 01       	movw	r22, r24
    2abc:	86 eb       	ldi	r24, 0xB6	; 182
    2abe:	92 e0       	ldi	r25, 0x02	; 2
    2ac0:	0e 94 ab 19 	call	0x3356	; 0x3356 <_ZN5Print5printEPKc>
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) {
    cursor_x = x;
    2ac4:	10 92 c3 02 	sts	0x02C3, r1	; 0x8002c3 <_ZN2Ui7displayE+0xd>
    2ac8:	10 92 c2 02 	sts	0x02C2, r1	; 0x8002c2 <_ZN2Ui7displayE+0xc>
    cursor_y = y;
    2acc:	88 e3       	ldi	r24, 0x38	; 56
    2ace:	90 e0       	ldi	r25, 0x00	; 0
    2ad0:	90 93 c5 02 	sts	0x02C5, r25	; 0x8002c5 <_ZN2Ui7displayE+0xf>
    2ad4:	80 93 c4 02 	sts	0x02C4, r24	; 0x8002c4 <_ZN2Ui7displayE+0xe>

            Ui::display.setCursor(0, SCREEN_HEIGHT - CHAR_HEIGHT - 1);
            Ui::display.print(PSTR2("Press MODE when ready."));
    2ad8:	82 e5       	ldi	r24, 0x52	; 82
    2ada:	98 e0       	ldi	r25, 0x08	; 8
    2adc:	0f c0       	rjmp	.+30     	; 0x2afc <_ZN12StateMachine24SettingsRssiStateHandler12onUpdateDrawEv+0x250>
        break;

        case InternalState::SCANNING_HIGH:
            Ui::display.setTextSize(1);
    2ade:	61 e0       	ldi	r22, 0x01	; 1
    2ae0:	86 eb       	ldi	r24, 0xB6	; 182
    2ae2:	92 e0       	ldi	r25, 0x02	; 2
    2ae4:	0e 94 5c 26 	call	0x4cb8	; 0x4cb8 <_ZN12Adafruit_GFX11setTextSizeEh>
    @param  x    X coordinate in pixels
    @param  y    Y coordinate in pixels
  */
  /**********************************************************************/
  void setCursor(int16_t x, int16_t y) {
    cursor_x = x;
    2ae8:	10 92 c3 02 	sts	0x02C3, r1	; 0x8002c3 <_ZN2Ui7displayE+0xd>
    2aec:	10 92 c2 02 	sts	0x02C2, r1	; 0x8002c2 <_ZN2Ui7displayE+0xc>
    cursor_y = y;
    2af0:	10 92 c5 02 	sts	0x02C5, r1	; 0x8002c5 <_ZN2Ui7displayE+0xf>
    2af4:	10 92 c4 02 	sts	0x02C4, r1	; 0x8002c4 <_ZN2Ui7displayE+0xe>
            Ui::display.setCursor(0, 0);
            Ui::display.print(PSTR2("4/4\nScanning for highest\nRSSI..."));
    2af8:	81 e3       	ldi	r24, 0x31	; 49
    2afa:	98 e0       	ldi	r25, 0x08	; 8
                    CHAR_HEIGHT * 3 + 1);
                Ui::display.print(EepromSettings.rssiBMax);
            #endif

            Ui::display.setCursor(0, SCREEN_HEIGHT - CHAR_HEIGHT - 1);
            Ui::display.print(PSTR2("Press MODE to save."));
    2afc:	0e 94 b1 0a 	call	0x1562	; 0x1562 <_Z14PSTRtoBuffer_PPKc>
    2b00:	bc 01       	movw	r22, r24
    2b02:	86 eb       	ldi	r24, 0xB6	; 182
    2b04:	92 e0       	ldi	r25, 0x02	; 2
    2b06:	0e 94 ab 19 	call	0x3356	; 0x3356 <_ZN5Print5printEPKc>
        break;
    }

    Ui::needDisplay();
}
    2b0a:	df 91       	pop	r29
    2b0c:	cf 91       	pop	r28
    2b0e:	1f 91       	pop	r17
    2b10:	0f 91       	pop	r16
    2b12:	ff 90       	pop	r15
    2b14:	ef 90       	pop	r14
            Ui::display.setCursor(0, SCREEN_HEIGHT - CHAR_HEIGHT - 1);
            Ui::display.print(PSTR2("Press MODE to save."));
        break;
    }

    Ui::needDisplay();
    2b16:	0c 94 b4 16 	jmp	0x2d68	; 0x2d68 <_ZN2Ui11needDisplayEv>

00002b1a <_ZN12StateMachine24SettingsRssiStateHandler14onButtonChangeE6ButtonN7Buttons9PressTypeE>:

void StateMachine::SettingsRssiStateHandler::onButtonChange(
    Button button,
    Buttons::PressType pressType
) {
    if (button != Button::MODE || pressType != Buttons::PressType::SHORT)
    2b1a:	62 30       	cpi	r22, 0x02	; 2
    2b1c:	99 f5       	brne	.+102    	; 0x2b84 <_ZN12StateMachine24SettingsRssiStateHandler14onButtonChangeE6ButtonN7Buttons9PressTypeE+0x6a>
    2b1e:	41 11       	cpse	r20, r1
    2b20:	31 c0       	rjmp	.+98     	; 0x2b84 <_ZN12StateMachine24SettingsRssiStateHandler14onButtonChangeE6ButtonN7Buttons9PressTypeE+0x6a>
    2b22:	fc 01       	movw	r30, r24
        return;

    switch (internalState) {
    2b24:	82 81       	ldd	r24, Z+2	; 0x02
    2b26:	82 30       	cpi	r24, 0x02	; 2
    2b28:	a9 f0       	breq	.+42     	; 0x2b54 <_ZN12StateMachine24SettingsRssiStateHandler14onButtonChangeE6ButtonN7Buttons9PressTypeE+0x3a>
    2b2a:	84 30       	cpi	r24, 0x04	; 4
    2b2c:	11 f1       	breq	.+68     	; 0x2b72 <_ZN12StateMachine24SettingsRssiStateHandler14onButtonChangeE6ButtonN7Buttons9PressTypeE+0x58>
    2b2e:	81 11       	cpse	r24, r1
    2b30:	27 c0       	rjmp	.+78     	; 0x2b80 <_ZN12StateMachine24SettingsRssiStateHandler14onButtonChangeE6ButtonN7Buttons9PressTypeE+0x66>
        case InternalState::WAIT_FOR_LOW:
            internalState = InternalState::SCANNING_LOW;
    2b32:	81 e0       	ldi	r24, 0x01	; 1
    2b34:	82 83       	std	Z+2, r24	; 0x02
            currentSweep = 0;
    2b36:	13 82       	std	Z+3, r1	; 0x03
            Receiver::setChannel(0);
    2b38:	80 e0       	ldi	r24, 0x00	; 0
    2b3a:	0e 94 ca 0a 	call	0x1594	; 0x1594 <_ZN8Receiver10setChannelEh>

            EepromSettings.rssiAMin = UINT16_MAX;
    2b3e:	8f ef       	ldi	r24, 0xFF	; 255
    2b40:	9f ef       	ldi	r25, 0xFF	; 255
    2b42:	90 93 90 02 	sts	0x0290, r25	; 0x800290 <EepromSettings+0x9>
    2b46:	80 93 8f 02 	sts	0x028F, r24	; 0x80028f <EepromSettings+0x8>
            #ifdef USE_DIVERSITY
                EepromSettings.rssiBMin = UINT16_MAX;
    2b4a:	90 93 95 02 	sts	0x0295, r25	; 0x800295 <EepromSettings+0xe>
    2b4e:	80 93 94 02 	sts	0x0294, r24	; 0x800294 <EepromSettings+0xd>
    2b52:	16 c0       	rjmp	.+44     	; 0x2b80 <_ZN12StateMachine24SettingsRssiStateHandler14onButtonChangeE6ButtonN7Buttons9PressTypeE+0x66>
            #endif
        break;

        case InternalState::WAIT_FOR_HIGH:
            internalState = InternalState::SCANNING_HIGH;
    2b54:	83 e0       	ldi	r24, 0x03	; 3
    2b56:	82 83       	std	Z+2, r24	; 0x02
            currentSweep = 0;
    2b58:	13 82       	std	Z+3, r1	; 0x03
            Receiver::setChannel(0);
    2b5a:	80 e0       	ldi	r24, 0x00	; 0
    2b5c:	0e 94 ca 0a 	call	0x1594	; 0x1594 <_ZN8Receiver10setChannelEh>

            EepromSettings.rssiAMax = 0;
    2b60:	10 92 92 02 	sts	0x0292, r1	; 0x800292 <EepromSettings+0xb>
    2b64:	10 92 91 02 	sts	0x0291, r1	; 0x800291 <EepromSettings+0xa>
            #ifdef USE_DIVERSITY
                EepromSettings.rssiBMax = 0;
    2b68:	10 92 97 02 	sts	0x0297, r1	; 0x800297 <EepromSettings+0x10>
    2b6c:	10 92 96 02 	sts	0x0296, r1	; 0x800296 <EepromSettings+0xf>
    2b70:	07 c0       	rjmp	.+14     	; 0x2b80 <_ZN12StateMachine24SettingsRssiStateHandler14onButtonChangeE6ButtonN7Buttons9PressTypeE+0x66>
            #endif
        break;

        case InternalState::DONE:
            EepromSettings.save();
    2b72:	87 e8       	ldi	r24, 0x87	; 135
    2b74:	92 e0       	ldi	r25, 0x02	; 2
    2b76:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <_ZN14EepromSettings4saveEv>
            StateMachine::switchState(StateMachine::State::MENU);
    2b7a:	84 e0       	ldi	r24, 0x04	; 4
    2b7c:	0e 94 73 0e 	call	0x1ce6	; 0x1ce6 <_ZN12StateMachine11switchStateENS_5StateE>
        break;
    }

    Ui::needUpdate();
    2b80:	0c 94 b0 16 	jmp	0x2d60	; 0x2d60 <_ZN2Ui10needUpdateEv>
    2b84:	08 95       	ret

00002b86 <_ZN12StateMachine24SettingsRssiStateHandler8onUpdateEv>:

void StateMachine::SettingsRssiStateHandler::onEnter() {
    internalState = InternalState::WAIT_FOR_LOW;
}

void StateMachine::SettingsRssiStateHandler::onUpdate() {
    2b86:	cf 93       	push	r28
    2b88:	df 93       	push	r29
    2b8a:	ec 01       	movw	r28, r24
    if (!Receiver::isRssiStable())
    2b8c:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <_ZN8Receiver12isRssiStableEv>
    2b90:	88 23       	and	r24, r24
    2b92:	09 f4       	brne	.+2      	; 0x2b96 <_ZN12StateMachine24SettingsRssiStateHandler8onUpdateEv+0x10>
    2b94:	63 c0       	rjmp	.+198    	; 0x2c5c <_ZN12StateMachine24SettingsRssiStateHandler8onUpdateEv+0xd6>
        return;

    switch (internalState) {
    2b96:	8a 81       	ldd	r24, Y+2	; 0x02
    2b98:	81 30       	cpi	r24, 0x01	; 1
    2b9a:	19 f0       	breq	.+6      	; 0x2ba2 <_ZN12StateMachine24SettingsRssiStateHandler8onUpdateEv+0x1c>
    2b9c:	83 30       	cpi	r24, 0x03	; 3
    2b9e:	01 f1       	breq	.+64     	; 0x2be0 <_ZN12StateMachine24SettingsRssiStateHandler8onUpdateEv+0x5a>
    2ba0:	3d c0       	rjmp	.+122    	; 0x2c1c <_ZN12StateMachine24SettingsRssiStateHandler8onUpdateEv+0x96>
        case InternalState::SCANNING_LOW:
            if (Receiver::rssiARaw < EepromSettings.rssiAMin)
    2ba2:	80 91 82 02 	lds	r24, 0x0282	; 0x800282 <_ZN8Receiver8rssiARawE>
    2ba6:	90 91 83 02 	lds	r25, 0x0283	; 0x800283 <_ZN8Receiver8rssiARawE+0x1>
    2baa:	20 91 8f 02 	lds	r18, 0x028F	; 0x80028f <EepromSettings+0x8>
    2bae:	30 91 90 02 	lds	r19, 0x0290	; 0x800290 <EepromSettings+0x9>
    2bb2:	82 17       	cp	r24, r18
    2bb4:	93 07       	cpc	r25, r19
    2bb6:	20 f4       	brcc	.+8      	; 0x2bc0 <_ZN12StateMachine24SettingsRssiStateHandler8onUpdateEv+0x3a>
                EepromSettings.rssiAMin = Receiver::rssiARaw;
    2bb8:	90 93 90 02 	sts	0x0290, r25	; 0x800290 <EepromSettings+0x9>
    2bbc:	80 93 8f 02 	sts	0x028F, r24	; 0x80028f <EepromSettings+0x8>

            #ifdef USE_DIVERSITY
                if (Receiver::rssiBRaw < EepromSettings.rssiBMin)
    2bc0:	80 91 67 02 	lds	r24, 0x0267	; 0x800267 <_ZN8Receiver8rssiBRawE>
    2bc4:	90 91 68 02 	lds	r25, 0x0268	; 0x800268 <_ZN8Receiver8rssiBRawE+0x1>
    2bc8:	20 91 94 02 	lds	r18, 0x0294	; 0x800294 <EepromSettings+0xd>
    2bcc:	30 91 95 02 	lds	r19, 0x0295	; 0x800295 <EepromSettings+0xe>
    2bd0:	82 17       	cp	r24, r18
    2bd2:	93 07       	cpc	r25, r19
    2bd4:	18 f5       	brcc	.+70     	; 0x2c1c <_ZN12StateMachine24SettingsRssiStateHandler8onUpdateEv+0x96>
                    EepromSettings.rssiBMin = Receiver::rssiBRaw;
    2bd6:	90 93 95 02 	sts	0x0295, r25	; 0x800295 <EepromSettings+0xe>
    2bda:	80 93 94 02 	sts	0x0294, r24	; 0x800294 <EepromSettings+0xd>
    2bde:	1e c0       	rjmp	.+60     	; 0x2c1c <_ZN12StateMachine24SettingsRssiStateHandler8onUpdateEv+0x96>
            #endif
        break;

        case InternalState::SCANNING_HIGH:
            if (Receiver::rssiARaw > EepromSettings.rssiAMax)
    2be0:	80 91 82 02 	lds	r24, 0x0282	; 0x800282 <_ZN8Receiver8rssiARawE>
    2be4:	90 91 83 02 	lds	r25, 0x0283	; 0x800283 <_ZN8Receiver8rssiARawE+0x1>
    2be8:	20 91 91 02 	lds	r18, 0x0291	; 0x800291 <EepromSettings+0xa>
    2bec:	30 91 92 02 	lds	r19, 0x0292	; 0x800292 <EepromSettings+0xb>
    2bf0:	28 17       	cp	r18, r24
    2bf2:	39 07       	cpc	r19, r25
    2bf4:	20 f4       	brcc	.+8      	; 0x2bfe <_ZN12StateMachine24SettingsRssiStateHandler8onUpdateEv+0x78>
                EepromSettings.rssiAMax = Receiver::rssiARaw;
    2bf6:	90 93 92 02 	sts	0x0292, r25	; 0x800292 <EepromSettings+0xb>
    2bfa:	80 93 91 02 	sts	0x0291, r24	; 0x800291 <EepromSettings+0xa>

            #ifdef USE_DIVERSITY
                if (Receiver::rssiBRaw > EepromSettings.rssiBMax)
    2bfe:	80 91 67 02 	lds	r24, 0x0267	; 0x800267 <_ZN8Receiver8rssiBRawE>
    2c02:	90 91 68 02 	lds	r25, 0x0268	; 0x800268 <_ZN8Receiver8rssiBRawE+0x1>
    2c06:	20 91 96 02 	lds	r18, 0x0296	; 0x800296 <EepromSettings+0xf>
    2c0a:	30 91 97 02 	lds	r19, 0x0297	; 0x800297 <EepromSettings+0x10>
    2c0e:	28 17       	cp	r18, r24
    2c10:	39 07       	cpc	r19, r25
    2c12:	20 f4       	brcc	.+8      	; 0x2c1c <_ZN12StateMachine24SettingsRssiStateHandler8onUpdateEv+0x96>
                    EepromSettings.rssiBMax = Receiver::rssiBRaw;
    2c14:	90 93 97 02 	sts	0x0297, r25	; 0x800297 <EepromSettings+0x10>
    2c18:	80 93 96 02 	sts	0x0296, r24	; 0x800296 <EepromSettings+0xf>
            #endif
        break;
    }

    Receiver::setChannel((Receiver::activeChannel + 1) % CHANNELS_SIZE);
    2c1c:	80 91 85 02 	lds	r24, 0x0285	; 0x800285 <_ZN8Receiver13activeChannelE>
    2c20:	90 e0       	ldi	r25, 0x00	; 0
    2c22:	01 96       	adiw	r24, 0x01	; 1
    2c24:	60 e3       	ldi	r22, 0x30	; 48
    2c26:	70 e0       	ldi	r23, 0x00	; 0
    2c28:	0e 94 8c 31 	call	0x6318	; 0x6318 <__divmodhi4>
    2c2c:	0e 94 ca 0a 	call	0x1594	; 0x1594 <_ZN8Receiver10setChannelEh>
    if (Receiver::activeChannel == 0) {
    2c30:	80 91 85 02 	lds	r24, 0x0285	; 0x800285 <_ZN8Receiver13activeChannelE>
    2c34:	81 11       	cpse	r24, r1
    2c36:	12 c0       	rjmp	.+36     	; 0x2c5c <_ZN12StateMachine24SettingsRssiStateHandler8onUpdateEv+0xd6>
        currentSweep++;
    2c38:	8b 81       	ldd	r24, Y+3	; 0x03
    2c3a:	8f 5f       	subi	r24, 0xFF	; 255
    2c3c:	8b 83       	std	Y+3, r24	; 0x03

        if (currentSweep == RSSI_SETUP_RUN) {
    2c3e:	83 30       	cpi	r24, 0x03	; 3
    2c40:	69 f4       	brne	.+26     	; 0x2c5c <_ZN12StateMachine24SettingsRssiStateHandler8onUpdateEv+0xd6>
            switch (internalState) {
    2c42:	8a 81       	ldd	r24, Y+2	; 0x02
    2c44:	81 30       	cpi	r24, 0x01	; 1
    2c46:	21 f0       	breq	.+8      	; 0x2c50 <_ZN12StateMachine24SettingsRssiStateHandler8onUpdateEv+0xca>
    2c48:	83 30       	cpi	r24, 0x03	; 3
    2c4a:	21 f4       	brne	.+8      	; 0x2c54 <_ZN12StateMachine24SettingsRssiStateHandler8onUpdateEv+0xce>
                case InternalState::SCANNING_LOW:
                    internalState = InternalState::WAIT_FOR_HIGH;
                break;

                case InternalState::SCANNING_HIGH:
                    internalState = InternalState::DONE;
    2c4c:	84 e0       	ldi	r24, 0x04	; 4
    2c4e:	01 c0       	rjmp	.+2      	; 0x2c52 <_ZN12StateMachine24SettingsRssiStateHandler8onUpdateEv+0xcc>
        currentSweep++;

        if (currentSweep == RSSI_SETUP_RUN) {
            switch (internalState) {
                case InternalState::SCANNING_LOW:
                    internalState = InternalState::WAIT_FOR_HIGH;
    2c50:	82 e0       	ldi	r24, 0x02	; 2
                break;

                case InternalState::SCANNING_HIGH:
                    internalState = InternalState::DONE;
    2c52:	8a 83       	std	Y+2, r24	; 0x02
            }

            Ui::needUpdate();
        }
    }
}
    2c54:	df 91       	pop	r29
    2c56:	cf 91       	pop	r28
                case InternalState::SCANNING_HIGH:
                    internalState = InternalState::DONE;
                break;
            }

            Ui::needUpdate();
    2c58:	0c 94 b0 16 	jmp	0x2d60	; 0x2d60 <_ZN2Ui10needUpdateEv>
        }
    }
}
    2c5c:	df 91       	pop	r29
    2c5e:	cf 91       	pop	r28
    2c60:	08 95       	ret

00002c62 <_ZN5TimerC1Ej>:
#include <Arduino.h>
#include "timer.h"


Timer::Timer(uint16_t delay) {
    2c62:	cf 93       	push	r28
    2c64:	df 93       	push	r29
    2c66:	ec 01       	movw	r28, r24
    this->delay = delay;
    2c68:	7d 83       	std	Y+5, r23	; 0x05
    2c6a:	6c 83       	std	Y+4, r22	; 0x04
    this->nextTick = millis() + this->delay;
    2c6c:	0e 94 53 1a 	call	0x34a6	; 0x34a6 <millis>
    2c70:	2c 81       	ldd	r18, Y+4	; 0x04
    2c72:	3d 81       	ldd	r19, Y+5	; 0x05
    2c74:	dc 01       	movw	r26, r24
    2c76:	cb 01       	movw	r24, r22
    2c78:	82 0f       	add	r24, r18
    2c7a:	93 1f       	adc	r25, r19
    2c7c:	a1 1d       	adc	r26, r1
    2c7e:	b1 1d       	adc	r27, r1
    2c80:	88 83       	st	Y, r24
    2c82:	99 83       	std	Y+1, r25	; 0x01
    2c84:	aa 83       	std	Y+2, r26	; 0x02
    2c86:	bb 83       	std	Y+3, r27	; 0x03
    this->ticked = false;
    2c88:	1e 82       	std	Y+6, r1	; 0x06
}
    2c8a:	df 91       	pop	r29
    2c8c:	cf 91       	pop	r28
    2c8e:	08 95       	ret

00002c90 <_ZN5Timer9hasTickedEv>:

const bool Timer::hasTicked() {
    2c90:	0f 93       	push	r16
    2c92:	1f 93       	push	r17
    2c94:	cf 93       	push	r28
    2c96:	df 93       	push	r29
    if (this->ticked)
    2c98:	fc 01       	movw	r30, r24
    2c9a:	26 81       	ldd	r18, Z+6	; 0x06
    2c9c:	21 11       	cpse	r18, r1
    2c9e:	0f c0       	rjmp	.+30     	; 0x2cbe <_ZN5Timer9hasTickedEv+0x2e>
    2ca0:	ec 01       	movw	r28, r24
        return true;

    if (millis() >= this->nextTick) {
    2ca2:	0e 94 53 1a 	call	0x34a6	; 0x34a6 <millis>
    2ca6:	08 81       	ld	r16, Y
    2ca8:	19 81       	ldd	r17, Y+1	; 0x01
    2caa:	2a 81       	ldd	r18, Y+2	; 0x02
    2cac:	3b 81       	ldd	r19, Y+3	; 0x03
    2cae:	60 17       	cp	r22, r16
    2cb0:	71 07       	cpc	r23, r17
    2cb2:	82 07       	cpc	r24, r18
    2cb4:	93 07       	cpc	r25, r19
    2cb6:	28 f0       	brcs	.+10     	; 0x2cc2 <_ZN5Timer9hasTickedEv+0x32>
        this->ticked = true;
    2cb8:	81 e0       	ldi	r24, 0x01	; 1
    2cba:	8e 83       	std	Y+6, r24	; 0x06
        return true;
    2cbc:	03 c0       	rjmp	.+6      	; 0x2cc4 <_ZN5Timer9hasTickedEv+0x34>
    this->ticked = false;
}

const bool Timer::hasTicked() {
    if (this->ticked)
        return true;
    2cbe:	81 e0       	ldi	r24, 0x01	; 1
    2cc0:	01 c0       	rjmp	.+2      	; 0x2cc4 <_ZN5Timer9hasTickedEv+0x34>
    if (millis() >= this->nextTick) {
        this->ticked = true;
        return true;
    }

    return false;
    2cc2:	80 e0       	ldi	r24, 0x00	; 0
}
    2cc4:	df 91       	pop	r29
    2cc6:	cf 91       	pop	r28
    2cc8:	1f 91       	pop	r17
    2cca:	0f 91       	pop	r16
    2ccc:	08 95       	ret

00002cce <_ZN5Timer5resetEv>:

void Timer::reset() {
    2cce:	cf 93       	push	r28
    2cd0:	df 93       	push	r29
    2cd2:	ec 01       	movw	r28, r24
    this->nextTick = millis() + this->delay;
    2cd4:	0e 94 53 1a 	call	0x34a6	; 0x34a6 <millis>
    2cd8:	2c 81       	ldd	r18, Y+4	; 0x04
    2cda:	3d 81       	ldd	r19, Y+5	; 0x05
    2cdc:	dc 01       	movw	r26, r24
    2cde:	cb 01       	movw	r24, r22
    2ce0:	82 0f       	add	r24, r18
    2ce2:	93 1f       	adc	r25, r19
    2ce4:	a1 1d       	adc	r26, r1
    2ce6:	b1 1d       	adc	r27, r1
    2ce8:	88 83       	st	Y, r24
    2cea:	99 83       	std	Y+1, r25	; 0x01
    2cec:	aa 83       	std	Y+2, r26	; 0x02
    2cee:	bb 83       	std	Y+3, r27	; 0x03
    this->ticked = false;
    2cf0:	1e 82       	std	Y+6, r1	; 0x06
}
    2cf2:	df 91       	pop	r29
    2cf4:	cf 91       	pop	r28
    2cf6:	08 95       	ret

00002cf8 <_ZN2Ui5setupEv>:
    bool shouldDrawUpdate = false;
    bool shouldDisplay = false;
    bool shouldFullRedraw = false;


    void setup() {
    2cf8:	0f 93       	push	r16
    2cfa:	cf 93       	push	r28
    2cfc:	df 93       	push	r29
        display.begin(OLED_VCCSTATE, OLED_ADDRESS);
    2cfe:	01 e0       	ldi	r16, 0x01	; 1
    2d00:	21 e0       	ldi	r18, 0x01	; 1
    2d02:	4c e3       	ldi	r20, 0x3C	; 60
    2d04:	62 e0       	ldi	r22, 0x02	; 2
    2d06:	86 eb       	ldi	r24, 0xB6	; 182
    2d08:	92 e0       	ldi	r25, 0x02	; 2
    2d0a:	0e 94 ec 28 	call	0x51d8	; 0x51d8 <_ZN16Adafruit_SSD13065beginEhhbb>
    @param   c   16-bit 5-6-5 Color to draw text with
    @note    For 'transparent' background, background and foreground
             are set to same color rather than using a separate flag.
  */
  /**********************************************************************/
  void setTextColor(uint16_t c) { textcolor = textbgcolor = c; }
    2d0e:	c6 eb       	ldi	r28, 0xB6	; 182
    2d10:	d2 e0       	ldi	r29, 0x02	; 2
    2d12:	81 e0       	ldi	r24, 0x01	; 1
    2d14:	90 e0       	ldi	r25, 0x00	; 0
    2d16:	9b 8b       	std	Y+19, r25	; 0x13
    2d18:	8a 8b       	std	Y+18, r24	; 0x12
    2d1a:	99 8b       	std	Y+17, r25	; 0x11
    2d1c:	88 8b       	std	Y+16, r24	; 0x10

        display.setTextColor(WHITE);
        display.setTextSize(1);
    2d1e:	61 e0       	ldi	r22, 0x01	; 1
    2d20:	ce 01       	movw	r24, r28
    2d22:	0e 94 5c 26 	call	0x4cb8	; 0x4cb8 <_ZN12Adafruit_GFX11setTextSizeEh>
  @brief  Set whether text that is too long for the screen width should
          automatically wrap around to the next line (else clip right).
  @param  w  true for wrapping, false for clipping
  */
  /**********************************************************************/
  void setTextWrap(bool w) { wrap = w; }
    2d26:	1f 8a       	std	Y+23, r1	; 0x17
        display.setTextWrap(false);

        display.clearDisplay();
    2d28:	ce 01       	movw	r24, r28
    2d2a:	0e 94 ce 28 	call	0x519c	; 0x519c <_ZN16Adafruit_SSD130612clearDisplayEv>

        display.begin();
    2d2e:	21 e0       	ldi	r18, 0x01	; 1
    2d30:	40 e0       	ldi	r20, 0x00	; 0
    2d32:	62 e0       	ldi	r22, 0x02	; 2
    2d34:	ce 01       	movw	r24, r28
    2d36:	0e 94 ec 28 	call	0x51d8	; 0x51d8 <_ZN16Adafruit_SSD13065beginEhhbb>
    }
    2d3a:	df 91       	pop	r29
    2d3c:	cf 91       	pop	r28
    2d3e:	0f 91       	pop	r16
    2d40:	08 95       	ret

00002d42 <_ZN2Ui6updateEv>:

    void update() {
        if (shouldDisplay) {
    2d42:	80 91 b4 02 	lds	r24, 0x02B4	; 0x8002b4 <_ZN2Ui13shouldDisplayE>
    2d46:	88 23       	and	r24, r24
    2d48:	31 f0       	breq	.+12     	; 0x2d56 <_ZN2Ui6updateEv+0x14>
            display.display();
    2d4a:	86 eb       	ldi	r24, 0xB6	; 182
    2d4c:	92 e0       	ldi	r25, 0x02	; 2
    2d4e:	0e 94 65 2c 	call	0x58ca	; 0x58ca <_ZN16Adafruit_SSD13067displayEv>
            shouldDisplay = false;
    2d52:	10 92 b4 02 	sts	0x02B4, r1	; 0x8002b4 <_ZN2Ui13shouldDisplayE>
    2d56:	08 95       	ret

00002d58 <_ZN2Ui5clearEv>:
            Ui::display.drawFastVLine(x, y + i, step / 2, INVERSE);
        }
    }

    void clear() {
        display.clearDisplay();
    2d58:	86 eb       	ldi	r24, 0xB6	; 182
    2d5a:	92 e0       	ldi	r25, 0x02	; 2
    2d5c:	0c 94 ce 28 	jmp	0x519c	; 0x519c <_ZN16Adafruit_SSD130612clearDisplayEv>

00002d60 <_ZN2Ui10needUpdateEv>:
        display.fillRect(x, y, w, h, BLACK);
    }


    void needUpdate() {
        shouldDrawUpdate = true;
    2d60:	81 e0       	ldi	r24, 0x01	; 1
    2d62:	80 93 b5 02 	sts	0x02B5, r24	; 0x8002b5 <_ZN2Ui16shouldDrawUpdateE>
    2d66:	08 95       	ret

00002d68 <_ZN2Ui11needDisplayEv>:
    }

    void needDisplay() {
        shouldDisplay = true;
    2d68:	81 e0       	ldi	r24, 0x01	; 1
    2d6a:	80 93 b4 02 	sts	0x02B4, r24	; 0x8002b4 <_ZN2Ui13shouldDisplayE>
    2d6e:	08 95       	ret

00002d70 <_ZN2Ui14needFullRedrawEv>:
    }

    void needFullRedraw() {
        shouldFullRedraw = true;
    2d70:	81 e0       	ldi	r24, 0x01	; 1
    2d72:	80 93 b3 02 	sts	0x02B3, r24	; 0x8002b3 <_ZN2Ui16shouldFullRedrawE>
    2d76:	08 95       	ret

00002d78 <_GLOBAL__sub_I__ZN2Ui7displayE>:
#include "settings_internal.h"
#include "ui.h"


namespace Ui {
    OLED_CLASS display;
    2d78:	6f ef       	ldi	r22, 0xFF	; 255
    2d7a:	86 eb       	ldi	r24, 0xB6	; 182
    2d7c:	92 e0       	ldi	r25, 0x02	; 2
    2d7e:	0c 94 4e 27 	jmp	0x4e9c	; 0x4e9c <_ZN16Adafruit_SSD1306C1Ea>

00002d82 <_GLOBAL__sub_D__ZN2Ui7displayE>:
    2d82:	86 eb       	ldi	r24, 0xB6	; 182
    2d84:	92 e0       	ldi	r25, 0x02	; 2
    2d86:	0c 94 72 27 	jmp	0x4ee4	; 0x4ee4 <_ZN16Adafruit_SSD1306D1Ev>

00002d8a <_ZN2Ui15drawDashedHLineEiiii>:
    void drawDashedHLine(
        const int x,
        const int y,
        const int w,
        const int step
    ) {
    2d8a:	6f 92       	push	r6
    2d8c:	7f 92       	push	r7
    2d8e:	8f 92       	push	r8
    2d90:	9f 92       	push	r9
    2d92:	af 92       	push	r10
    2d94:	bf 92       	push	r11
    2d96:	cf 92       	push	r12
    2d98:	df 92       	push	r13
    2d9a:	ef 92       	push	r14
    2d9c:	ff 92       	push	r15
    2d9e:	0f 93       	push	r16
    2da0:	1f 93       	push	r17
    2da2:	cf 93       	push	r28
    2da4:	df 93       	push	r29
    2da6:	5c 01       	movw	r10, r24
    2da8:	3b 01       	movw	r6, r22
    2daa:	4a 01       	movw	r8, r20
    2dac:	79 01       	movw	r14, r18
        for (int i = 0; i <= w; i += step) {
            Ui::display.drawFastHLine(x + i, y, step / 2, WHITE);
    2dae:	69 01       	movw	r12, r18
    2db0:	37 ff       	sbrs	r19, 7
    2db2:	03 c0       	rjmp	.+6      	; 0x2dba <_ZN2Ui15drawDashedHLineEiiii+0x30>
    2db4:	8f ef       	ldi	r24, 0xFF	; 255
    2db6:	c8 1a       	sub	r12, r24
    2db8:	d8 0a       	sbc	r13, r24
    2dba:	d5 94       	asr	r13
    2dbc:	c7 94       	ror	r12
        const int x,
        const int y,
        const int w,
        const int step
    ) {
        for (int i = 0; i <= w; i += step) {
    2dbe:	c0 e0       	ldi	r28, 0x00	; 0
    2dc0:	d0 e0       	ldi	r29, 0x00	; 0
    2dc2:	8c 16       	cp	r8, r28
    2dc4:	9d 06       	cpc	r9, r29
    2dc6:	74 f0       	brlt	.+28     	; 0x2de4 <_ZN2Ui15drawDashedHLineEiiii+0x5a>
            Ui::display.drawFastHLine(x + i, y, step / 2, WHITE);
    2dc8:	be 01       	movw	r22, r28
    2dca:	6a 0d       	add	r22, r10
    2dcc:	7b 1d       	adc	r23, r11
    2dce:	01 e0       	ldi	r16, 0x01	; 1
    2dd0:	10 e0       	ldi	r17, 0x00	; 0
    2dd2:	96 01       	movw	r18, r12
    2dd4:	a3 01       	movw	r20, r6
    2dd6:	86 eb       	ldi	r24, 0xB6	; 182
    2dd8:	92 e0       	ldi	r25, 0x02	; 2
    2dda:	0e 94 e2 2b 	call	0x57c4	; 0x57c4 <_ZN16Adafruit_SSD130613drawFastHLineEiiij>
        const int x,
        const int y,
        const int w,
        const int step
    ) {
        for (int i = 0; i <= w; i += step) {
    2dde:	ce 0d       	add	r28, r14
    2de0:	df 1d       	adc	r29, r15
    2de2:	ef cf       	rjmp	.-34     	; 0x2dc2 <_ZN2Ui15drawDashedHLineEiiii+0x38>
            Ui::display.drawFastHLine(x + i, y, step / 2, WHITE);
        }
    }
    2de4:	df 91       	pop	r29
    2de6:	cf 91       	pop	r28
    2de8:	1f 91       	pop	r17
    2dea:	0f 91       	pop	r16
    2dec:	ff 90       	pop	r15
    2dee:	ef 90       	pop	r14
    2df0:	df 90       	pop	r13
    2df2:	cf 90       	pop	r12
    2df4:	bf 90       	pop	r11
    2df6:	af 90       	pop	r10
    2df8:	9f 90       	pop	r9
    2dfa:	8f 90       	pop	r8
    2dfc:	7f 90       	pop	r7
    2dfe:	6f 90       	pop	r6
    2e00:	08 95       	ret

00002e02 <_ZN2Ui15drawDashedVLineEiiii>:
    void drawDashedVLine(
        const int x,
        const int y,
        const int h,
        const int step
    ) {
    2e02:	6f 92       	push	r6
    2e04:	7f 92       	push	r7
    2e06:	8f 92       	push	r8
    2e08:	9f 92       	push	r9
    2e0a:	af 92       	push	r10
    2e0c:	bf 92       	push	r11
    2e0e:	cf 92       	push	r12
    2e10:	df 92       	push	r13
    2e12:	ef 92       	push	r14
    2e14:	ff 92       	push	r15
    2e16:	0f 93       	push	r16
    2e18:	1f 93       	push	r17
    2e1a:	cf 93       	push	r28
    2e1c:	df 93       	push	r29
    2e1e:	3c 01       	movw	r6, r24
    2e20:	5b 01       	movw	r10, r22
    2e22:	4a 01       	movw	r8, r20
    2e24:	79 01       	movw	r14, r18
        for (int i = 0; i <= h; i += step) {
            Ui::display.drawFastVLine(x, y + i, step / 2, INVERSE);
    2e26:	69 01       	movw	r12, r18
    2e28:	37 ff       	sbrs	r19, 7
    2e2a:	03 c0       	rjmp	.+6      	; 0x2e32 <_ZN2Ui15drawDashedVLineEiiii+0x30>
    2e2c:	8f ef       	ldi	r24, 0xFF	; 255
    2e2e:	c8 1a       	sub	r12, r24
    2e30:	d8 0a       	sbc	r13, r24
    2e32:	d5 94       	asr	r13
    2e34:	c7 94       	ror	r12
        const int x,
        const int y,
        const int h,
        const int step
    ) {
        for (int i = 0; i <= h; i += step) {
    2e36:	c0 e0       	ldi	r28, 0x00	; 0
    2e38:	d0 e0       	ldi	r29, 0x00	; 0
    2e3a:	8c 16       	cp	r8, r28
    2e3c:	9d 06       	cpc	r9, r29
    2e3e:	74 f0       	brlt	.+28     	; 0x2e5c <_ZN2Ui15drawDashedVLineEiiii+0x5a>
            Ui::display.drawFastVLine(x, y + i, step / 2, INVERSE);
    2e40:	ae 01       	movw	r20, r28
    2e42:	4a 0d       	add	r20, r10
    2e44:	5b 1d       	adc	r21, r11
    2e46:	02 e0       	ldi	r16, 0x02	; 2
    2e48:	10 e0       	ldi	r17, 0x00	; 0
    2e4a:	96 01       	movw	r18, r12
    2e4c:	b3 01       	movw	r22, r6
    2e4e:	86 eb       	ldi	r24, 0xB6	; 182
    2e50:	92 e0       	ldi	r25, 0x02	; 2
    2e52:	0e 94 23 2c 	call	0x5846	; 0x5846 <_ZN16Adafruit_SSD130613drawFastVLineEiiij>
        const int x,
        const int y,
        const int h,
        const int step
    ) {
        for (int i = 0; i <= h; i += step) {
    2e56:	ce 0d       	add	r28, r14
    2e58:	df 1d       	adc	r29, r15
    2e5a:	ef cf       	rjmp	.-34     	; 0x2e3a <_ZN2Ui15drawDashedVLineEiiii+0x38>
            Ui::display.drawFastVLine(x, y + i, step / 2, INVERSE);
        }
    }
    2e5c:	df 91       	pop	r29
    2e5e:	cf 91       	pop	r28
    2e60:	1f 91       	pop	r17
    2e62:	0f 91       	pop	r16
    2e64:	ff 90       	pop	r15
    2e66:	ef 90       	pop	r14
    2e68:	df 90       	pop	r13
    2e6a:	cf 90       	pop	r12
    2e6c:	bf 90       	pop	r11
    2e6e:	af 90       	pop	r10
    2e70:	9f 90       	pop	r9
    2e72:	8f 90       	pop	r8
    2e74:	7f 90       	pop	r7
    2e76:	6f 90       	pop	r6
    2e78:	08 95       	ret

00002e7a <_ZN2Ui9clearRectEiiii>:

    void clear() {
        display.clearDisplay();
    }

    void clearRect(const int x, const int y, const int w, const int h) {
    2e7a:	ef 92       	push	r14
    2e7c:	ff 92       	push	r15
    2e7e:	0f 93       	push	r16
    2e80:	1f 93       	push	r17
        display.fillRect(x, y, w, h, BLACK);
    2e82:	e1 2c       	mov	r14, r1
    2e84:	f1 2c       	mov	r15, r1
    2e86:	89 01       	movw	r16, r18
    2e88:	9a 01       	movw	r18, r20
    2e8a:	ab 01       	movw	r20, r22
    2e8c:	bc 01       	movw	r22, r24
    2e8e:	86 eb       	ldi	r24, 0xB6	; 182
    2e90:	92 e0       	ldi	r25, 0x02	; 2
    2e92:	0e 94 75 1d 	call	0x3aea	; 0x3aea <_ZN12Adafruit_GFX8fillRectEiiiij>
    }
    2e96:	1f 91       	pop	r17
    2e98:	0f 91       	pop	r16
    2e9a:	ff 90       	pop	r15
    2e9c:	ef 90       	pop	r14
    2e9e:	08 95       	ret

00002ea0 <_ZN2Ui9drawGraphEPKhhhhhhh>:
        const uint8_t dataScale,
        const uint8_t x,
        const uint8_t y,
        const uint8_t w,
        const uint8_t h
    ) {
    2ea0:	2f 92       	push	r2
    2ea2:	3f 92       	push	r3
    2ea4:	4f 92       	push	r4
    2ea6:	5f 92       	push	r5
    2ea8:	6f 92       	push	r6
    2eaa:	7f 92       	push	r7
    2eac:	8f 92       	push	r8
    2eae:	9f 92       	push	r9
    2eb0:	af 92       	push	r10
    2eb2:	bf 92       	push	r11
    2eb4:	cf 92       	push	r12
    2eb6:	df 92       	push	r13
    2eb8:	ef 92       	push	r14
    2eba:	ff 92       	push	r15
    2ebc:	0f 93       	push	r16
    2ebe:	1f 93       	push	r17
    2ec0:	cf 93       	push	r28
    2ec2:	df 93       	push	r29
    2ec4:	00 d0       	rcall	.+0      	; 0x2ec6 <_ZN2Ui9drawGraphEPKhhhhhhh+0x26>
    2ec6:	00 d0       	rcall	.+0      	; 0x2ec8 <_ZN2Ui9drawGraphEPKhhhhhhh+0x28>
    2ec8:	cd b7       	in	r28, 0x3d	; 61
    2eca:	de b7       	in	r29, 0x3e	; 62
    2ecc:	3c 01       	movw	r6, r24
    2ece:	69 83       	std	Y+1, r22	; 0x01
    2ed0:	34 2e       	mov	r3, r20
    2ed2:	2b 83       	std	Y+3, r18	; 0x03
        #define SCALE_DATAPOINT(p) (p * h / dataScale)
        #define CLAMP_DATAPOINT(p) \
            (p > dataScale) ? dataScale : ((p < 0) ? 0 : p);

        Ui::clearRect(x, y, w - 1, h + 1);
    2ed4:	4e 2c       	mov	r4, r14
    2ed6:	51 2c       	mov	r5, r1
    2ed8:	a0 2e       	mov	r10, r16
    2eda:	b1 2c       	mov	r11, r1
    2edc:	2c 2d       	mov	r18, r12
    2ede:	30 e0       	ldi	r19, 0x00	; 0
    2ee0:	2f 5f       	subi	r18, 0xFF	; 255
    2ee2:	3f 4f       	sbci	r19, 0xFF	; 255
    2ee4:	a2 01       	movw	r20, r4
    2ee6:	41 50       	subi	r20, 0x01	; 1
    2ee8:	51 09       	sbc	r21, r1
    2eea:	b5 01       	movw	r22, r10
    2eec:	eb 81       	ldd	r30, Y+3	; 0x03
    2eee:	8e 2f       	mov	r24, r30
    2ef0:	90 e0       	ldi	r25, 0x00	; 0
    2ef2:	0e 94 3d 17 	call	0x2e7a	; 0x2e7a <_ZN2Ui9clearRectEiiii>

        const uint8_t xScaler = w / (dataSize - 1);
    2ef6:	69 81       	ldd	r22, Y+1	; 0x01
    2ef8:	26 2f       	mov	r18, r22
    2efa:	30 e0       	ldi	r19, 0x00	; 0
    2efc:	49 01       	movw	r8, r18
    2efe:	71 e0       	ldi	r23, 0x01	; 1
    2f00:	87 1a       	sub	r8, r23
    2f02:	91 08       	sbc	r9, r1
    2f04:	c2 01       	movw	r24, r4
    2f06:	b4 01       	movw	r22, r8
    2f08:	0e 94 8c 31 	call	0x6318	; 0x6318 <__divmodhi4>
    2f0c:	6a 83       	std	Y+2, r22	; 0x02
            const uint8_t dataPointHeight = h - SCALE_DATAPOINT(dataPoint);
            const uint8_t dataPointNextHeight =
                h - SCALE_DATAPOINT(dataPointNext);

            const uint8_t xEnd = xNext + xScaler
                    + (i == 0 || i == dataSize - 2 ? (xScalarMissing + 1) / 2 : 0);
    2f0e:	68 9d       	mul	r22, r8
    2f10:	e0 18       	sub	r14, r0
    2f12:	11 24       	eor	r1, r1
    2f14:	f1 2c       	mov	r15, r1
    2f16:	8f ef       	ldi	r24, 0xFF	; 255
    2f18:	e8 1a       	sub	r14, r24
    2f1a:	f8 0a       	sbc	r15, r24
    2f1c:	f5 94       	asr	r15
    2f1e:	e7 94       	ror	r14
    2f20:	de 2c       	mov	r13, r14
        Ui::clearRect(x, y, w - 1, h + 1);

        const uint8_t xScaler = w / (dataSize - 1);
        const uint8_t xScalarMissing = w - (xScaler * (dataSize - 1));

        uint8_t xNext = x;
    2f22:	eb 81       	ldd	r30, Y+3	; 0x03

        for (uint8_t i = 0; i < dataSize - 1; i++) {
    2f24:	21 2c       	mov	r2, r1
            const uint8_t dataPoint = CLAMP_DATAPOINT(data[i]);
            const uint8_t dataPointNext = CLAMP_DATAPOINT(data[i + 1]);

            // Need to invert the heights so it shows the right way on the
            // screen.
            const uint8_t dataPointHeight = h - SCALE_DATAPOINT(dataPoint);
    2f26:	43 2c       	mov	r4, r3
    2f28:	51 2c       	mov	r5, r1
            const uint8_t dataPointNextHeight =
                h - SCALE_DATAPOINT(dataPointNext);

            const uint8_t xEnd = xNext + xScaler
                    + (i == 0 || i == dataSize - 2 ? (xScalarMissing + 1) / 2 : 0);
    2f2a:	b9 01       	movw	r22, r18
    2f2c:	62 50       	subi	r22, 0x02	; 2
    2f2e:	71 09       	sbc	r23, r1
    2f30:	7c 83       	std	Y+4, r23	; 0x04
    2f32:	6b 83       	std	Y+3, r22	; 0x03
        const uint8_t xScaler = w / (dataSize - 1);
        const uint8_t xScalarMissing = w - (xScaler * (dataSize - 1));

        uint8_t xNext = x;

        for (uint8_t i = 0; i < dataSize - 1; i++) {
    2f34:	22 2d       	mov	r18, r2
    2f36:	30 e0       	ldi	r19, 0x00	; 0
    2f38:	28 15       	cp	r18, r8
    2f3a:	39 05       	cpc	r19, r9
    2f3c:	0c f0       	brlt	.+2      	; 0x2f40 <_ZN2Ui9drawGraphEPKhhhhhhh+0xa0>
    2f3e:	3f c0       	rjmp	.+126    	; 0x2fbe <_ZN2Ui9drawGraphEPKhhhhhhh+0x11e>
            const uint8_t dataPoint = CLAMP_DATAPOINT(data[i]);
    2f40:	d3 01       	movw	r26, r6
    2f42:	a2 0f       	add	r26, r18
    2f44:	b3 1f       	adc	r27, r19
    2f46:	8c 91       	ld	r24, X
    2f48:	38 16       	cp	r3, r24
    2f4a:	08 f4       	brcc	.+2      	; 0x2f4e <_ZN2Ui9drawGraphEPKhhhhhhh+0xae>
    2f4c:	83 2d       	mov	r24, r3
            const uint8_t dataPointNext = CLAMP_DATAPOINT(data[i + 1]);
    2f4e:	11 96       	adiw	r26, 0x01	; 1
    2f50:	fc 91       	ld	r31, X
    2f52:	3f 16       	cp	r3, r31
    2f54:	08 f4       	brcc	.+2      	; 0x2f58 <_ZN2Ui9drawGraphEPKhhhhhhh+0xb8>
    2f56:	f3 2d       	mov	r31, r3

            // Need to invert the heights so it shows the right way on the
            // screen.
            const uint8_t dataPointHeight = h - SCALE_DATAPOINT(dataPoint);
    2f58:	c8 9e       	mul	r12, r24
    2f5a:	c0 01       	movw	r24, r0
    2f5c:	11 24       	eor	r1, r1
    2f5e:	b2 01       	movw	r22, r4
    2f60:	0e 94 8c 31 	call	0x6318	; 0x6318 <__divmodhi4>
    2f64:	4c 2d       	mov	r20, r12
    2f66:	46 1b       	sub	r20, r22
            const uint8_t dataPointNextHeight =
                h - SCALE_DATAPOINT(dataPointNext);
    2f68:	cf 9e       	mul	r12, r31
    2f6a:	c0 01       	movw	r24, r0
    2f6c:	11 24       	eor	r1, r1
    2f6e:	b2 01       	movw	r22, r4
    2f70:	0e 94 8c 31 	call	0x6318	; 0x6318 <__divmodhi4>
    2f74:	9c 2d       	mov	r25, r12
    2f76:	96 1b       	sub	r25, r22

            const uint8_t xEnd = xNext + xScaler
                    + (i == 0 || i == dataSize - 2 ? (xScalarMissing + 1) / 2 : 0);
    2f78:	22 20       	and	r2, r2
    2f7a:	39 f0       	breq	.+14     	; 0x2f8a <_ZN2Ui9drawGraphEPKhhhhhhh+0xea>
    2f7c:	6b 81       	ldd	r22, Y+3	; 0x03
    2f7e:	7c 81       	ldd	r23, Y+4	; 0x04
    2f80:	26 17       	cp	r18, r22
    2f82:	37 07       	cpc	r19, r23
    2f84:	11 f0       	breq	.+4      	; 0x2f8a <_ZN2Ui9drawGraphEPKhhhhhhh+0xea>
    2f86:	80 e0       	ldi	r24, 0x00	; 0
    2f88:	01 c0       	rjmp	.+2      	; 0x2f8c <_ZN2Ui9drawGraphEPKhhhhhhh+0xec>
    2f8a:	8d 2d       	mov	r24, r13
    2f8c:	7a 81       	ldd	r23, Y+2	; 0x02
    2f8e:	87 0f       	add	r24, r23
    2f90:	8e 0f       	add	r24, r30
    2f92:	89 83       	std	Y+1, r24	; 0x01
                xNext,
                y + dataPointHeight,
                xEnd,
                y + dataPointNextHeight,
                WHITE
            );
    2f94:	85 01       	movw	r16, r10
    2f96:	09 0f       	add	r16, r25
    2f98:	11 1d       	adc	r17, r1
    2f9a:	28 2f       	mov	r18, r24
    2f9c:	30 e0       	ldi	r19, 0x00	; 0
    2f9e:	c5 01       	movw	r24, r10
    2fa0:	84 0f       	add	r24, r20
    2fa2:	91 1d       	adc	r25, r1
    2fa4:	ac 01       	movw	r20, r24
    2fa6:	6e 2f       	mov	r22, r30
    2fa8:	70 e0       	ldi	r23, 0x00	; 0
    2faa:	ee 24       	eor	r14, r14
    2fac:	e3 94       	inc	r14
    2fae:	f1 2c       	mov	r15, r1
    2fb0:	86 eb       	ldi	r24, 0xB6	; 182
    2fb2:	92 e0       	ldi	r25, 0x02	; 2
    2fb4:	0e 94 d7 1d 	call	0x3bae	; 0x3bae <_ZN12Adafruit_GFX8drawLineEiiiij>
        const uint8_t xScaler = w / (dataSize - 1);
        const uint8_t xScalarMissing = w - (xScaler * (dataSize - 1));

        uint8_t xNext = x;

        for (uint8_t i = 0; i < dataSize - 1; i++) {
    2fb8:	23 94       	inc	r2
                xEnd,
                y + dataPointNextHeight,
                WHITE
            );

            xNext = xEnd;
    2fba:	e9 81       	ldd	r30, Y+1	; 0x01
        const uint8_t xScaler = w / (dataSize - 1);
        const uint8_t xScalarMissing = w - (xScaler * (dataSize - 1));

        uint8_t xNext = x;

        for (uint8_t i = 0; i < dataSize - 1; i++) {
    2fbc:	bb cf       	rjmp	.-138    	; 0x2f34 <_ZN2Ui9drawGraphEPKhhhhhhh+0x94>
            xNext = xEnd;
        }

        #undef SCALE_DATAPOINT
        #undef CLAMP_DATAPOINT
    }
    2fbe:	0f 90       	pop	r0
    2fc0:	0f 90       	pop	r0
    2fc2:	0f 90       	pop	r0
    2fc4:	0f 90       	pop	r0
    2fc6:	df 91       	pop	r29
    2fc8:	cf 91       	pop	r28
    2fca:	1f 91       	pop	r17
    2fcc:	0f 91       	pop	r16
    2fce:	ff 90       	pop	r15
    2fd0:	ef 90       	pop	r14
    2fd2:	df 90       	pop	r13
    2fd4:	cf 90       	pop	r12
    2fd6:	bf 90       	pop	r11
    2fd8:	af 90       	pop	r10
    2fda:	9f 90       	pop	r9
    2fdc:	8f 90       	pop	r8
    2fde:	7f 90       	pop	r7
    2fe0:	6f 90       	pop	r6
    2fe2:	5f 90       	pop	r5
    2fe4:	4f 90       	pop	r4
    2fe6:	3f 90       	pop	r3
    2fe8:	2f 90       	pop	r2
    2fea:	08 95       	ret

00002fec <_ZN2Ui10MenuHelper5resetEv>:
#include "ui.h"
#include "ui_menu.h"


void Ui::MenuHelper::reset() {
    this->activeItems = 0;
    2fec:	fc 01       	movw	r30, r24
    2fee:	11 8e       	std	Z+25, r1	; 0x19
    2ff0:	10 8e       	std	Z+24, r1	; 0x18
    this->selectedItem = 0;
    2ff2:	13 8e       	std	Z+27, r1	; 0x1b
    2ff4:	12 8e       	std	Z+26, r1	; 0x1a
    2ff6:	08 95       	ret

00002ff8 <_ZN2Ui10MenuHelper7addItemEPKcPKhPFvvE>:

void Ui::MenuHelper::addItem(
    const char* text,
    const unsigned char* icon,
    const Ui::MenuHandler handler
) {
    2ff8:	cf 93       	push	r28
    this->menuItems[this->activeItems].text = text;
    2ffa:	fc 01       	movw	r30, r24
    2ffc:	a0 8d       	ldd	r26, Z+24	; 0x18
    2ffe:	b1 8d       	ldd	r27, Z+25	; 0x19
    3000:	c6 e0       	ldi	r28, 0x06	; 6
    3002:	ca 9f       	mul	r28, r26
    3004:	f0 01       	movw	r30, r0
    3006:	cb 9f       	mul	r28, r27
    3008:	f0 0d       	add	r31, r0
    300a:	11 24       	eor	r1, r1
    300c:	e8 0f       	add	r30, r24
    300e:	f9 1f       	adc	r31, r25
    3010:	71 83       	std	Z+1, r23	; 0x01
    3012:	60 83       	st	Z, r22
    this->menuItems[this->activeItems].icon = icon;
    3014:	55 83       	std	Z+5, r21	; 0x05
    3016:	44 83       	std	Z+4, r20	; 0x04
    this->menuItems[this->activeItems].handler = handler;
    3018:	33 83       	std	Z+3, r19	; 0x03
    301a:	22 83       	std	Z+2, r18	; 0x02

    this->activeItems++;
    301c:	11 96       	adiw	r26, 0x01	; 1
    301e:	fc 01       	movw	r30, r24
    3020:	b1 8f       	std	Z+25, r27	; 0x19
    3022:	a0 8f       	std	Z+24, r26	; 0x18
}
    3024:	cf 91       	pop	r28
    3026:	08 95       	ret

00003028 <_ZN2Ui10MenuHelper14selectNextItemEv>:

void Ui::MenuHelper::selectNextItem() {
    3028:	fc 01       	movw	r30, r24
    if (++this->selectedItem >= this->activeItems)
    302a:	82 8d       	ldd	r24, Z+26	; 0x1a
    302c:	93 8d       	ldd	r25, Z+27	; 0x1b
    302e:	01 96       	adiw	r24, 0x01	; 1
    3030:	93 8f       	std	Z+27, r25	; 0x1b
    3032:	82 8f       	std	Z+26, r24	; 0x1a
    3034:	20 8d       	ldd	r18, Z+24	; 0x18
    3036:	31 8d       	ldd	r19, Z+25	; 0x19
    3038:	82 17       	cp	r24, r18
    303a:	93 07       	cpc	r25, r19
    303c:	14 f0       	brlt	.+4      	; 0x3042 <_ZN2Ui10MenuHelper14selectNextItemEv+0x1a>
        this->selectedItem = 0;
    303e:	13 8e       	std	Z+27, r1	; 0x1b
    3040:	12 8e       	std	Z+26, r1	; 0x1a
    3042:	08 95       	ret

00003044 <_ZN2Ui10MenuHelper18selectPreviousItemEv>:
}

void Ui::MenuHelper::selectPreviousItem() {
    3044:	fc 01       	movw	r30, r24
    if (--this->selectedItem < 0)
    3046:	82 8d       	ldd	r24, Z+26	; 0x1a
    3048:	93 8d       	ldd	r25, Z+27	; 0x1b
    304a:	01 97       	sbiw	r24, 0x01	; 1
    304c:	93 8f       	std	Z+27, r25	; 0x1b
    304e:	82 8f       	std	Z+26, r24	; 0x1a
    3050:	97 ff       	sbrs	r25, 7
    3052:	05 c0       	rjmp	.+10     	; 0x305e <_ZN2Ui10MenuHelper18selectPreviousItemEv+0x1a>
        this->selectedItem = this->activeItems - 1;
    3054:	80 8d       	ldd	r24, Z+24	; 0x18
    3056:	91 8d       	ldd	r25, Z+25	; 0x19
    3058:	01 97       	sbiw	r24, 0x01	; 1
    305a:	93 8f       	std	Z+27, r25	; 0x1b
    305c:	82 8f       	std	Z+26, r24	; 0x1a
    305e:	08 95       	ret

00003060 <_ZN2Ui10MenuHelper12activateItemEv>:
}


void Ui::MenuHelper::activateItem() {
    this->menuItems[this->selectedItem].handler();
    3060:	fc 01       	movw	r30, r24
    3062:	42 8d       	ldd	r20, Z+26	; 0x1a
    3064:	53 8d       	ldd	r21, Z+27	; 0x1b
    3066:	66 e0       	ldi	r22, 0x06	; 6
    3068:	64 9f       	mul	r22, r20
    306a:	90 01       	movw	r18, r0
    306c:	65 9f       	mul	r22, r21
    306e:	30 0d       	add	r19, r0
    3070:	11 24       	eor	r1, r1
    3072:	e2 0f       	add	r30, r18
    3074:	f3 1f       	adc	r31, r19
    3076:	02 80       	ldd	r0, Z+2	; 0x02
    3078:	f3 81       	ldd	r31, Z+3	; 0x03
    307a:	e0 2d       	mov	r30, r0
    307c:	09 94       	ijmp

0000307e <_ZN2Ui10MenuHelper14getCurrentItemEv>:
}


Ui::MenuItem* Ui::MenuHelper::getCurrentItem() {
    return &this->menuItems[this->selectedItem];
    307e:	fc 01       	movw	r30, r24
    3080:	42 8d       	ldd	r20, Z+26	; 0x1a
    3082:	53 8d       	ldd	r21, Z+27	; 0x1b
    3084:	66 e0       	ldi	r22, 0x06	; 6
    3086:	64 9f       	mul	r22, r20
    3088:	90 01       	movw	r18, r0
    308a:	65 9f       	mul	r22, r21
    308c:	30 0d       	add	r19, r0
    308e:	11 24       	eor	r1, r1
}
    3090:	82 0f       	add	r24, r18
    3092:	93 1f       	adc	r25, r19
    3094:	08 95       	ret

00003096 <_ZN2Ui15StateMenuHelper7addItemEPFPKhPvEPFvS3_E>:

void StateMenuHelper::addItem(
    const MenuIcon icon,
    const MenuHandler handler
) {
    this->menuItems[this->activeItems].icon = icon;
    3096:	fc 01       	movw	r30, r24
    3098:	22 89       	ldd	r18, Z+18	; 0x12
    309a:	33 89       	ldd	r19, Z+19	; 0x13
    309c:	f9 01       	movw	r30, r18
    309e:	ee 0f       	add	r30, r30
    30a0:	ff 1f       	adc	r31, r31
    30a2:	ee 0f       	add	r30, r30
    30a4:	ff 1f       	adc	r31, r31
    30a6:	e8 0f       	add	r30, r24
    30a8:	f9 1f       	adc	r31, r25
    30aa:	71 83       	std	Z+1, r23	; 0x01
    30ac:	60 83       	st	Z, r22
    this->menuItems[this->activeItems].handler = handler;
    30ae:	53 83       	std	Z+3, r21	; 0x03
    30b0:	42 83       	std	Z+2, r20	; 0x02

    this->activeItems++;
    30b2:	2f 5f       	subi	r18, 0xFF	; 255
    30b4:	3f 4f       	sbci	r19, 0xFF	; 255
    30b6:	fc 01       	movw	r30, r24
    30b8:	33 8b       	std	Z+19, r19	; 0x13
    30ba:	22 8b       	std	Z+18, r18	; 0x12
    30bc:	08 95       	ret

000030be <_ZN2Ui15StateMenuHelper13handleButtonsE6ButtonN7Buttons9PressTypeE>:
}

bool StateMenuHelper::handleButtons(
    Button button,
    Buttons::PressType pressType
) {
    30be:	1f 93       	push	r17
    30c0:	cf 93       	push	r28
    30c2:	df 93       	push	r29
    30c4:	ec 01       	movw	r28, r24
    if (button == Button::MODE && pressType == Buttons::PressType::LONG) {
    30c6:	62 30       	cpi	r22, 0x02	; 2
    30c8:	89 f4       	brne	.+34     	; 0x30ec <_ZN2Ui15StateMenuHelper13handleButtonsE6ButtonN7Buttons9PressTypeE+0x2e>
    30ca:	41 30       	cpi	r20, 0x01	; 1
    30cc:	79 f4       	brne	.+30     	; 0x30ec <_ZN2Ui15StateMenuHelper13handleButtonsE6ButtonN7Buttons9PressTypeE+0x2e>
        this->visible = !this->visible;
    30ce:	8e 89       	ldd	r24, Y+22	; 0x16
    30d0:	48 27       	eor	r20, r24
    30d2:	4e 8b       	std	Y+22, r20	; 0x16
        if (!this->visible)
    30d4:	41 11       	cpse	r20, r1
    30d6:	02 c0       	rjmp	.+4      	; 0x30dc <_ZN2Ui15StateMenuHelper13handleButtonsE6ButtonN7Buttons9PressTypeE+0x1e>
            Ui::needFullRedraw();
    30d8:	0e 94 b8 16 	call	0x2d70	; 0x2d70 <_ZN2Ui14needFullRedrawEv>

        if (this->visible) {
    30dc:	1e 89       	ldd	r17, Y+22	; 0x16
    30de:	11 11       	cpse	r17, r1
    30e0:	02 c0       	rjmp	.+4      	; 0x30e6 <_ZN2Ui15StateMenuHelper13handleButtonsE6ButtonN7Buttons9PressTypeE+0x28>
            this->slideX = MENU_W;
        }

        return true;
    30e2:	11 e0       	ldi	r17, 0x01	; 1
    30e4:	33 c0       	rjmp	.+102    	; 0x314c <_ZN2Ui15StateMenuHelper13handleButtonsE6ButtonN7Buttons9PressTypeE+0x8e>
        this->visible = !this->visible;
        if (!this->visible)
            Ui::needFullRedraw();

        if (this->visible) {
            this->slideX = MENU_W;
    30e6:	80 e1       	ldi	r24, 0x10	; 16
    30e8:	8f 8b       	std	Y+23, r24	; 0x17
    30ea:	30 c0       	rjmp	.+96     	; 0x314c <_ZN2Ui15StateMenuHelper13handleButtonsE6ButtonN7Buttons9PressTypeE+0x8e>
    30ec:	1e 89       	ldd	r17, Y+22	; 0x16
        }

        return true;
    }

    if (!this->isVisible())
    30ee:	11 23       	and	r17, r17
    30f0:	69 f1       	breq	.+90     	; 0x314c <_ZN2Ui15StateMenuHelper13handleButtonsE6ButtonN7Buttons9PressTypeE+0x8e>
        return false;

    switch (button) {
    30f2:	61 30       	cpi	r22, 0x01	; 1
    30f4:	f9 f0       	breq	.+62     	; 0x3134 <_ZN2Ui15StateMenuHelper13handleButtonsE6ButtonN7Buttons9PressTypeE+0x76>
    30f6:	88 f0       	brcs	.+34     	; 0x311a <_ZN2Ui15StateMenuHelper13handleButtonsE6ButtonN7Buttons9PressTypeE+0x5c>
    30f8:	62 30       	cpi	r22, 0x02	; 2
    30fa:	41 f5       	brne	.+80     	; 0x314c <_ZN2Ui15StateMenuHelper13handleButtonsE6ButtonN7Buttons9PressTypeE+0x8e>
            if (++this->selectedItem >= this->activeItems)
                this->selectedItem = 0;
            break;

        case Button::MODE:
            this->menuItems[this->selectedItem].handler(this->state);
    30fc:	ec 89       	ldd	r30, Y+20	; 0x14
    30fe:	fd 89       	ldd	r31, Y+21	; 0x15
    3100:	ee 0f       	add	r30, r30
    3102:	ff 1f       	adc	r31, r31
    3104:	ee 0f       	add	r30, r30
    3106:	ff 1f       	adc	r31, r31
    3108:	ec 0f       	add	r30, r28
    310a:	fd 1f       	adc	r31, r29
    310c:	02 80       	ldd	r0, Z+2	; 0x02
    310e:	f3 81       	ldd	r31, Z+3	; 0x03
    3110:	e0 2d       	mov	r30, r0
    3112:	88 89       	ldd	r24, Y+16	; 0x10
    3114:	99 89       	ldd	r25, Y+17	; 0x11
    3116:	09 95       	icall
            break;
    3118:	19 c0       	rjmp	.+50     	; 0x314c <_ZN2Ui15StateMenuHelper13handleButtonsE6ButtonN7Buttons9PressTypeE+0x8e>
    if (!this->isVisible())
        return false;

    switch (button) {
        case Button::UP:
            if (--this->selectedItem < 0)
    311a:	8c 89       	ldd	r24, Y+20	; 0x14
    311c:	9d 89       	ldd	r25, Y+21	; 0x15
    311e:	01 97       	sbiw	r24, 0x01	; 1
    3120:	9d 8b       	std	Y+21, r25	; 0x15
    3122:	8c 8b       	std	Y+20, r24	; 0x14
    3124:	97 ff       	sbrs	r25, 7
    3126:	dd cf       	rjmp	.-70     	; 0x30e2 <_ZN2Ui15StateMenuHelper13handleButtonsE6ButtonN7Buttons9PressTypeE+0x24>
                this->selectedItem = this->activeItems - 1;
    3128:	8a 89       	ldd	r24, Y+18	; 0x12
    312a:	9b 89       	ldd	r25, Y+19	; 0x13
    312c:	01 97       	sbiw	r24, 0x01	; 1
    312e:	9d 8b       	std	Y+21, r25	; 0x15
    3130:	8c 8b       	std	Y+20, r24	; 0x14
    3132:	0c c0       	rjmp	.+24     	; 0x314c <_ZN2Ui15StateMenuHelper13handleButtonsE6ButtonN7Buttons9PressTypeE+0x8e>
            break;

        case Button::DOWN:
            if (++this->selectedItem >= this->activeItems)
    3134:	8c 89       	ldd	r24, Y+20	; 0x14
    3136:	9d 89       	ldd	r25, Y+21	; 0x15
    3138:	01 96       	adiw	r24, 0x01	; 1
    313a:	9d 8b       	std	Y+21, r25	; 0x15
    313c:	8c 8b       	std	Y+20, r24	; 0x14
    313e:	2a 89       	ldd	r18, Y+18	; 0x12
    3140:	3b 89       	ldd	r19, Y+19	; 0x13
    3142:	82 17       	cp	r24, r18
    3144:	93 07       	cpc	r25, r19
    3146:	6c f2       	brlt	.-102    	; 0x30e2 <_ZN2Ui15StateMenuHelper13handleButtonsE6ButtonN7Buttons9PressTypeE+0x24>
                this->selectedItem = 0;
    3148:	1d 8a       	std	Y+21, r1	; 0x15
    314a:	1c 8a       	std	Y+20, r1	; 0x14
            this->menuItems[this->selectedItem].handler(this->state);
            break;
    }

    return true;
}
    314c:	81 2f       	mov	r24, r17
    314e:	df 91       	pop	r29
    3150:	cf 91       	pop	r28
    3152:	1f 91       	pop	r17
    3154:	08 95       	ret

00003156 <_ZN2Ui15StateMenuHelper4drawEv>:

void StateMenuHelper::draw() {
    3156:	7f 92       	push	r7
    3158:	8f 92       	push	r8
    315a:	9f 92       	push	r9
    315c:	af 92       	push	r10
    315e:	bf 92       	push	r11
    3160:	cf 92       	push	r12
    3162:	df 92       	push	r13
    3164:	ef 92       	push	r14
    3166:	ff 92       	push	r15
    3168:	0f 93       	push	r16
    316a:	1f 93       	push	r17
    316c:	cf 93       	push	r28
    316e:	df 93       	push	r29
    3170:	ec 01       	movw	r28, r24
    if (!this->isVisible())
    3172:	8e 89       	ldd	r24, Y+22	; 0x16
    3174:	88 23       	and	r24, r24
    3176:	09 f4       	brne	.+2      	; 0x317a <_ZN2Ui15StateMenuHelper4drawEv+0x24>
    3178:	8b c0       	rjmp	.+278    	; 0x3290 <_ZN2Ui15StateMenuHelper4drawEv+0x13a>
        return;

    if (MENU_X != MENU_TARGET_X) {
    317a:	8f 89       	ldd	r24, Y+23	; 0x17
    317c:	88 23       	and	r24, r24
    317e:	31 f0       	breq	.+12     	; 0x318c <_ZN2Ui15StateMenuHelper4drawEv+0x36>
        this->slideX -= 4;
    3180:	84 50       	subi	r24, 0x04	; 4
        if (this->slideX < 0)
    3182:	87 fd       	sbrc	r24, 7
    3184:	02 c0       	rjmp	.+4      	; 0x318a <_ZN2Ui15StateMenuHelper4drawEv+0x34>
void StateMenuHelper::draw() {
    if (!this->isVisible())
        return;

    if (MENU_X != MENU_TARGET_X) {
        this->slideX -= 4;
    3186:	8f 8b       	std	Y+23, r24	; 0x17
    3188:	01 c0       	rjmp	.+2      	; 0x318c <_ZN2Ui15StateMenuHelper4drawEv+0x36>
        if (this->slideX < 0)
            this->slideX = 0;
    318a:	1f 8a       	std	Y+23, r1	; 0x17
        MENU_X,
        0,
        MENU_W,
        MENU_H,
        BLACK
    );
    318c:	6f 89       	ldd	r22, Y+23	; 0x17
    318e:	06 2e       	mov	r0, r22
    3190:	00 0c       	add	r0, r0
    3192:	77 0b       	sbc	r23, r23
    3194:	60 59       	subi	r22, 0x90	; 144
    3196:	7f 4f       	sbci	r23, 0xFF	; 255
    3198:	e1 2c       	mov	r14, r1
    319a:	f1 2c       	mov	r15, r1
    319c:	00 e4       	ldi	r16, 0x40	; 64
    319e:	10 e0       	ldi	r17, 0x00	; 0
    31a0:	20 e1       	ldi	r18, 0x10	; 16
    31a2:	30 e0       	ldi	r19, 0x00	; 0
    31a4:	40 e0       	ldi	r20, 0x00	; 0
    31a6:	50 e0       	ldi	r21, 0x00	; 0
    31a8:	86 eb       	ldi	r24, 0xB6	; 182
    31aa:	92 e0       	ldi	r25, 0x02	; 2
    31ac:	0e 94 75 1d 	call	0x3aea	; 0x3aea <_ZN12Adafruit_GFX8fillRectEiiiij>
    display.drawFastVLine(
        MENU_X - 1,
        0,
        MENU_H,
        WHITE
    );
    31b0:	6f 89       	ldd	r22, Y+23	; 0x17
    31b2:	06 2e       	mov	r0, r22
    31b4:	00 0c       	add	r0, r0
    31b6:	77 0b       	sbc	r23, r23
    31b8:	61 59       	subi	r22, 0x91	; 145
    31ba:	7f 4f       	sbci	r23, 0xFF	; 255
    31bc:	01 e0       	ldi	r16, 0x01	; 1
    31be:	10 e0       	ldi	r17, 0x00	; 0
    31c0:	20 e4       	ldi	r18, 0x40	; 64
    31c2:	30 e0       	ldi	r19, 0x00	; 0
    31c4:	40 e0       	ldi	r20, 0x00	; 0
    31c6:	50 e0       	ldi	r21, 0x00	; 0
    31c8:	86 eb       	ldi	r24, 0xB6	; 182
    31ca:	92 e0       	ldi	r25, 0x02	; 2
    31cc:	0e 94 23 2c 	call	0x5846	; 0x5846 <_ZN16Adafruit_SSD130613drawFastVLineEiiij>

    const uint8_t yOffset =
        SCREEN_HEIGHT_MID - ((this->activeItems * MENU_ITEM_H) / 2);
    31d0:	8a 89       	ldd	r24, Y+18	; 0x12
    31d2:	9f e1       	ldi	r25, 0x1F	; 31
    31d4:	89 2e       	mov	r8, r25
    31d6:	28 e0       	ldi	r18, 0x08	; 8
    31d8:	82 9f       	mul	r24, r18
    31da:	80 18       	sub	r8, r0
    31dc:	11 24       	eor	r1, r1

    for (uint8_t i = 0; i < this->activeItems; i++) {
    31de:	71 2c       	mov	r7, r1
    31e0:	91 2c       	mov	r9, r1
    31e2:	a7 2c       	mov	r10, r7
    31e4:	b1 2c       	mov	r11, r1
    31e6:	8a 89       	ldd	r24, Y+18	; 0x12
    31e8:	9b 89       	ldd	r25, Y+19	; 0x13
    31ea:	a8 16       	cp	r10, r24
    31ec:	b9 06       	cpc	r11, r25
    31ee:	0c f0       	brlt	.+2      	; 0x31f2 <_ZN2Ui15StateMenuHelper4drawEv+0x9c>
    31f0:	4f c0       	rjmp	.+158    	; 0x3290 <_ZN2Ui15StateMenuHelper4drawEv+0x13a>
        if (this->selectedItem == i) {
    31f2:	8c 89       	ldd	r24, Y+20	; 0x14
    31f4:	9d 89       	ldd	r25, Y+21	; 0x15
    31f6:	a8 16       	cp	r10, r24
    31f8:	b9 06       	cpc	r11, r25
    31fa:	c9 f4       	brne	.+50     	; 0x322e <_ZN2Ui15StateMenuHelper4drawEv+0xd8>
                MENU_X,
                MENU_ITEM_H * i + yOffset,
                MENU_ITEM_W,
                MENU_ITEM_H,
                WHITE
            );
    31fc:	a5 01       	movw	r20, r10
    31fe:	64 e0       	ldi	r22, 0x04	; 4
    3200:	44 0f       	add	r20, r20
    3202:	55 1f       	adc	r21, r21
    3204:	6a 95       	dec	r22
    3206:	e1 f7       	brne	.-8      	; 0x3200 <_ZN2Ui15StateMenuHelper4drawEv+0xaa>
    3208:	48 0d       	add	r20, r8
    320a:	59 1d       	adc	r21, r9
    320c:	6f 89       	ldd	r22, Y+23	; 0x17
    320e:	06 2e       	mov	r0, r22
    3210:	00 0c       	add	r0, r0
    3212:	77 0b       	sbc	r23, r23
    3214:	60 59       	subi	r22, 0x90	; 144
    3216:	7f 4f       	sbci	r23, 0xFF	; 255
    3218:	ee 24       	eor	r14, r14
    321a:	e3 94       	inc	r14
    321c:	f1 2c       	mov	r15, r1
    321e:	00 e1       	ldi	r16, 0x10	; 16
    3220:	10 e0       	ldi	r17, 0x00	; 0
    3222:	20 e1       	ldi	r18, 0x10	; 16
    3224:	30 e0       	ldi	r19, 0x00	; 0
    3226:	86 eb       	ldi	r24, 0xB6	; 182
    3228:	92 e0       	ldi	r25, 0x02	; 2
    322a:	0e 94 75 1d 	call	0x3aea	; 0x3aea <_ZN12Adafruit_GFX8fillRectEiiiij>
        }

        display.drawBitmap(
    322e:	cc 24       	eor	r12, r12
    3230:	c3 94       	inc	r12
    3232:	d1 2c       	mov	r13, r1
    3234:	8c 89       	ldd	r24, Y+20	; 0x14
    3236:	9d 89       	ldd	r25, Y+21	; 0x15
    3238:	8a 15       	cp	r24, r10
    323a:	9b 05       	cpc	r25, r11
    323c:	11 f4       	brne	.+4      	; 0x3242 <_ZN2Ui15StateMenuHelper4drawEv+0xec>
    323e:	c1 2c       	mov	r12, r1
    3240:	d1 2c       	mov	r13, r1
            MENU_X,
            MENU_ITEM_H * i + yOffset,
            this->menuItems[i].icon(this->state),
    3242:	f5 01       	movw	r30, r10
    3244:	ee 0f       	add	r30, r30
    3246:	ff 1f       	adc	r31, r31
    3248:	ee 0f       	add	r30, r30
    324a:	ff 1f       	adc	r31, r31
    324c:	ec 0f       	add	r30, r28
    324e:	fd 1f       	adc	r31, r29
                MENU_ITEM_H,
                WHITE
            );
        }

        display.drawBitmap(
    3250:	01 90       	ld	r0, Z+
    3252:	f0 81       	ld	r31, Z
    3254:	e0 2d       	mov	r30, r0
    3256:	88 89       	ldd	r24, Y+16	; 0x10
    3258:	99 89       	ldd	r25, Y+17	; 0x11
    325a:	09 95       	icall
            MENU_ITEM_H * i + yOffset,
            this->menuItems[i].icon(this->state),
            MENU_ITEM_W,
            MENU_ITEM_H,
            this->selectedItem == i ? BLACK : WHITE
        );
    325c:	a5 01       	movw	r20, r10
    325e:	24 e0       	ldi	r18, 0x04	; 4
    3260:	44 0f       	add	r20, r20
    3262:	55 1f       	adc	r21, r21
    3264:	2a 95       	dec	r18
    3266:	e1 f7       	brne	.-8      	; 0x3260 <_ZN2Ui15StateMenuHelper4drawEv+0x10a>
    3268:	48 0d       	add	r20, r8
    326a:	59 1d       	adc	r21, r9
    326c:	6f 89       	ldd	r22, Y+23	; 0x17
    326e:	06 2e       	mov	r0, r22
    3270:	00 0c       	add	r0, r0
    3272:	77 0b       	sbc	r23, r23
    3274:	60 59       	subi	r22, 0x90	; 144
    3276:	7f 4f       	sbci	r23, 0xFF	; 255
    3278:	30 e1       	ldi	r19, 0x10	; 16
    327a:	e3 2e       	mov	r14, r19
    327c:	f1 2c       	mov	r15, r1
    327e:	00 e1       	ldi	r16, 0x10	; 16
    3280:	10 e0       	ldi	r17, 0x00	; 0
    3282:	9c 01       	movw	r18, r24
    3284:	86 eb       	ldi	r24, 0xB6	; 182
    3286:	92 e0       	ldi	r25, 0x02	; 2
    3288:	0e 94 a6 22 	call	0x454c	; 0x454c <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij>
    );

    const uint8_t yOffset =
        SCREEN_HEIGHT_MID - ((this->activeItems * MENU_ITEM_H) / 2);

    for (uint8_t i = 0; i < this->activeItems; i++) {
    328c:	73 94       	inc	r7
    328e:	a9 cf       	rjmp	.-174    	; 0x31e2 <_ZN2Ui15StateMenuHelper4drawEv+0x8c>
            MENU_ITEM_W,
            MENU_ITEM_H,
            this->selectedItem == i ? BLACK : WHITE
        );
    }
}
    3290:	df 91       	pop	r29
    3292:	cf 91       	pop	r28
    3294:	1f 91       	pop	r17
    3296:	0f 91       	pop	r16
    3298:	ff 90       	pop	r15
    329a:	ef 90       	pop	r14
    329c:	df 90       	pop	r13
    329e:	cf 90       	pop	r12
    32a0:	bf 90       	pop	r11
    32a2:	af 90       	pop	r10
    32a4:	9f 90       	pop	r9
    32a6:	8f 90       	pop	r8
    32a8:	7f 90       	pop	r7
    32aa:	08 95       	ret

000032ac <initVariant>:
    32ac:	08 95       	ret

000032ae <main>:
void setupUSB() __attribute__((weak));
void setupUSB() { }

int main(void)
{
	init();
    32ae:	0e 94 cb 1a 	call	0x3596	; 0x3596 <init>

	initVariant();
    32b2:	0e 94 56 19 	call	0x32ac	; 0x32ac <initVariant>

#if defined(USBCON)
	USBDevice.attach();
#endif
	
	setup();
    32b6:	0e 94 b8 0d 	call	0x1b70	; 0x1b70 <setup>
    
	for (;;) {
		loop();
		if (serialEventRun) serialEventRun();
    32ba:	c0 e0       	ldi	r28, 0x00	; 0
    32bc:	d0 e0       	ldi	r29, 0x00	; 0
#endif
	
	setup();
    
	for (;;) {
		loop();
    32be:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <loop>
		if (serialEventRun) serialEventRun();
    32c2:	20 97       	sbiw	r28, 0x00	; 0
    32c4:	e1 f3       	breq	.-8      	; 0x32be <main+0x10>
    32c6:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    32ca:	f9 cf       	rjmp	.-14     	; 0x32be <main+0x10>

000032cc <_Znwj>:
    32cc:	0c 94 24 32 	jmp	0x6448	; 0x6448 <malloc>

000032d0 <_ZN5Print17availableForWriteEv>:
size_t Print::println(unsigned char b, int base)
{
  size_t n = print(b, base);
  n += println();
  return n;
}
    32d0:	80 e0       	ldi	r24, 0x00	; 0
    32d2:	90 e0       	ldi	r25, 0x00	; 0
    32d4:	08 95       	ret

000032d6 <_ZN5Print5flushEv>:
    32d6:	08 95       	ret

000032d8 <_ZN5Print5writeEPKhj>:
    32d8:	cf 92       	push	r12
    32da:	df 92       	push	r13
    32dc:	ef 92       	push	r14
    32de:	ff 92       	push	r15
    32e0:	0f 93       	push	r16
    32e2:	1f 93       	push	r17
    32e4:	cf 93       	push	r28
    32e6:	df 93       	push	r29
    32e8:	6c 01       	movw	r12, r24
    32ea:	7a 01       	movw	r14, r20
    32ec:	8b 01       	movw	r16, r22
    32ee:	c0 e0       	ldi	r28, 0x00	; 0
    32f0:	d0 e0       	ldi	r29, 0x00	; 0
    32f2:	ce 15       	cp	r28, r14
    32f4:	df 05       	cpc	r29, r15
    32f6:	81 f0       	breq	.+32     	; 0x3318 <_ZN5Print5writeEPKhj+0x40>
    32f8:	d8 01       	movw	r26, r16
    32fa:	6d 91       	ld	r22, X+
    32fc:	8d 01       	movw	r16, r26
    32fe:	d6 01       	movw	r26, r12
    3300:	ed 91       	ld	r30, X+
    3302:	fc 91       	ld	r31, X
    3304:	01 90       	ld	r0, Z+
    3306:	f0 81       	ld	r31, Z
    3308:	e0 2d       	mov	r30, r0
    330a:	c6 01       	movw	r24, r12
    330c:	09 95       	icall
    330e:	89 2b       	or	r24, r25
    3310:	11 f0       	breq	.+4      	; 0x3316 <_ZN5Print5writeEPKhj+0x3e>
    3312:	21 96       	adiw	r28, 0x01	; 1
    3314:	ee cf       	rjmp	.-36     	; 0x32f2 <_ZN5Print5writeEPKhj+0x1a>
    3316:	7e 01       	movw	r14, r28
    3318:	c7 01       	movw	r24, r14
    331a:	df 91       	pop	r29
    331c:	cf 91       	pop	r28
    331e:	1f 91       	pop	r17
    3320:	0f 91       	pop	r16
    3322:	ff 90       	pop	r15
    3324:	ef 90       	pop	r14
    3326:	df 90       	pop	r13
    3328:	cf 90       	pop	r12
    332a:	08 95       	ret

0000332c <_ZN5Print5writeEPKc>:
    332c:	61 15       	cp	r22, r1
    332e:	71 05       	cpc	r23, r1
    3330:	79 f0       	breq	.+30     	; 0x3350 <_ZN5Print5writeEPKc+0x24>
    3332:	fb 01       	movw	r30, r22
    3334:	01 90       	ld	r0, Z+
    3336:	00 20       	and	r0, r0
    3338:	e9 f7       	brne	.-6      	; 0x3334 <_ZN5Print5writeEPKc+0x8>
    333a:	31 97       	sbiw	r30, 0x01	; 1
    333c:	af 01       	movw	r20, r30
    333e:	46 1b       	sub	r20, r22
    3340:	57 0b       	sbc	r21, r23
    3342:	dc 01       	movw	r26, r24
    3344:	ed 91       	ld	r30, X+
    3346:	fc 91       	ld	r31, X
    3348:	02 80       	ldd	r0, Z+2	; 0x02
    334a:	f3 81       	ldd	r31, Z+3	; 0x03
    334c:	e0 2d       	mov	r30, r0
    334e:	09 94       	ijmp
    3350:	80 e0       	ldi	r24, 0x00	; 0
    3352:	90 e0       	ldi	r25, 0x00	; 0
    3354:	08 95       	ret

00003356 <_ZN5Print5printEPKc>:
    3356:	0c 94 96 19 	jmp	0x332c	; 0x332c <_ZN5Print5writeEPKc>

0000335a <_ZN5Print11printNumberEmh>:
    335a:	8f 92       	push	r8
    335c:	9f 92       	push	r9
    335e:	af 92       	push	r10
    3360:	bf 92       	push	r11
    3362:	ef 92       	push	r14
    3364:	ff 92       	push	r15
    3366:	0f 93       	push	r16
    3368:	1f 93       	push	r17
    336a:	cf 93       	push	r28
    336c:	df 93       	push	r29
    336e:	cd b7       	in	r28, 0x3d	; 61
    3370:	de b7       	in	r29, 0x3e	; 62
    3372:	a1 97       	sbiw	r28, 0x21	; 33
    3374:	0f b6       	in	r0, 0x3f	; 63
    3376:	f8 94       	cli
    3378:	de bf       	out	0x3e, r29	; 62
    337a:	0f be       	out	0x3f, r0	; 63
    337c:	cd bf       	out	0x3d, r28	; 61
    337e:	7c 01       	movw	r14, r24
    3380:	fa 01       	movw	r30, r20
    3382:	cb 01       	movw	r24, r22
    3384:	19 a2       	std	Y+33, r1	; 0x21
    3386:	22 30       	cpi	r18, 0x02	; 2
    3388:	08 f4       	brcc	.+2      	; 0x338c <_ZN5Print11printNumberEmh+0x32>
    338a:	2a e0       	ldi	r18, 0x0A	; 10
    338c:	8e 01       	movw	r16, r28
    338e:	0f 5d       	subi	r16, 0xDF	; 223
    3390:	1f 4f       	sbci	r17, 0xFF	; 255
    3392:	82 2e       	mov	r8, r18
    3394:	91 2c       	mov	r9, r1
    3396:	a1 2c       	mov	r10, r1
    3398:	b1 2c       	mov	r11, r1
    339a:	bf 01       	movw	r22, r30
    339c:	a5 01       	movw	r20, r10
    339e:	94 01       	movw	r18, r8
    33a0:	0e 94 a0 31 	call	0x6340	; 0x6340 <__udivmodsi4>
    33a4:	f9 01       	movw	r30, r18
    33a6:	ca 01       	movw	r24, r20
    33a8:	01 50       	subi	r16, 0x01	; 1
    33aa:	11 09       	sbc	r17, r1
    33ac:	6a 30       	cpi	r22, 0x0A	; 10
    33ae:	10 f4       	brcc	.+4      	; 0x33b4 <_ZN5Print11printNumberEmh+0x5a>
    33b0:	60 5d       	subi	r22, 0xD0	; 208
    33b2:	01 c0       	rjmp	.+2      	; 0x33b6 <_ZN5Print11printNumberEmh+0x5c>
    33b4:	69 5c       	subi	r22, 0xC9	; 201
    33b6:	d8 01       	movw	r26, r16
    33b8:	6c 93       	st	X, r22
    33ba:	23 2b       	or	r18, r19
    33bc:	24 2b       	or	r18, r20
    33be:	25 2b       	or	r18, r21
    33c0:	61 f7       	brne	.-40     	; 0x339a <_ZN5Print11printNumberEmh+0x40>
    33c2:	b8 01       	movw	r22, r16
    33c4:	c7 01       	movw	r24, r14
    33c6:	0e 94 96 19 	call	0x332c	; 0x332c <_ZN5Print5writeEPKc>
    33ca:	a1 96       	adiw	r28, 0x21	; 33
    33cc:	0f b6       	in	r0, 0x3f	; 63
    33ce:	f8 94       	cli
    33d0:	de bf       	out	0x3e, r29	; 62
    33d2:	0f be       	out	0x3f, r0	; 63
    33d4:	cd bf       	out	0x3d, r28	; 61
    33d6:	df 91       	pop	r29
    33d8:	cf 91       	pop	r28
    33da:	1f 91       	pop	r17
    33dc:	0f 91       	pop	r16
    33de:	ff 90       	pop	r15
    33e0:	ef 90       	pop	r14
    33e2:	bf 90       	pop	r11
    33e4:	af 90       	pop	r10
    33e6:	9f 90       	pop	r9
    33e8:	8f 90       	pop	r8
    33ea:	08 95       	ret

000033ec <_ZN5Print5printEmi>:
    33ec:	21 15       	cp	r18, r1
    33ee:	31 05       	cpc	r19, r1
    33f0:	41 f4       	brne	.+16     	; 0x3402 <_ZN5Print5printEmi+0x16>
    33f2:	dc 01       	movw	r26, r24
    33f4:	ed 91       	ld	r30, X+
    33f6:	fc 91       	ld	r31, X
    33f8:	01 90       	ld	r0, Z+
    33fa:	f0 81       	ld	r31, Z
    33fc:	e0 2d       	mov	r30, r0
    33fe:	64 2f       	mov	r22, r20
    3400:	09 94       	ijmp
    3402:	0c 94 ad 19 	jmp	0x335a	; 0x335a <_ZN5Print11printNumberEmh>

00003406 <_ZN5Print5printEji>:
{
  return print((long) n, base);
}

size_t Print::print(unsigned int n, int base)
{
    3406:	9a 01       	movw	r18, r20
  return print((unsigned long) n, base);
    3408:	ab 01       	movw	r20, r22
    340a:	60 e0       	ldi	r22, 0x00	; 0
    340c:	70 e0       	ldi	r23, 0x00	; 0
    340e:	0c 94 f6 19 	jmp	0x33ec	; 0x33ec <_ZN5Print5printEmi>

00003412 <__vector_16>:
#if defined(TIM0_OVF_vect)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
    3412:	1f 92       	push	r1
    3414:	0f 92       	push	r0
    3416:	0f b6       	in	r0, 0x3f	; 63
    3418:	0f 92       	push	r0
    341a:	11 24       	eor	r1, r1
    341c:	2f 93       	push	r18
    341e:	3f 93       	push	r19
    3420:	8f 93       	push	r24
    3422:	9f 93       	push	r25
    3424:	af 93       	push	r26
    3426:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
    3428:	80 91 f7 02 	lds	r24, 0x02F7	; 0x8002f7 <timer0_millis>
    342c:	90 91 f8 02 	lds	r25, 0x02F8	; 0x8002f8 <timer0_millis+0x1>
    3430:	a0 91 f9 02 	lds	r26, 0x02F9	; 0x8002f9 <timer0_millis+0x2>
    3434:	b0 91 fa 02 	lds	r27, 0x02FA	; 0x8002fa <timer0_millis+0x3>
	unsigned char f = timer0_fract;
    3438:	30 91 f6 02 	lds	r19, 0x02F6	; 0x8002f6 <timer0_fract>

	m += MILLIS_INC;
	f += FRACT_INC;
    343c:	23 e0       	ldi	r18, 0x03	; 3
    343e:	23 0f       	add	r18, r19
	if (f >= FRACT_MAX) {
    3440:	2d 37       	cpi	r18, 0x7D	; 125
    3442:	20 f4       	brcc	.+8      	; 0x344c <__vector_16+0x3a>
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
	unsigned char f = timer0_fract;

	m += MILLIS_INC;
    3444:	01 96       	adiw	r24, 0x01	; 1
    3446:	a1 1d       	adc	r26, r1
    3448:	b1 1d       	adc	r27, r1
    344a:	05 c0       	rjmp	.+10     	; 0x3456 <__vector_16+0x44>
	f += FRACT_INC;
	if (f >= FRACT_MAX) {
		f -= FRACT_MAX;
    344c:	26 e8       	ldi	r18, 0x86	; 134
    344e:	23 0f       	add	r18, r19
		m += 1;
    3450:	02 96       	adiw	r24, 0x02	; 2
    3452:	a1 1d       	adc	r26, r1
    3454:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
    3456:	20 93 f6 02 	sts	0x02F6, r18	; 0x8002f6 <timer0_fract>
	timer0_millis = m;
    345a:	80 93 f7 02 	sts	0x02F7, r24	; 0x8002f7 <timer0_millis>
    345e:	90 93 f8 02 	sts	0x02F8, r25	; 0x8002f8 <timer0_millis+0x1>
    3462:	a0 93 f9 02 	sts	0x02F9, r26	; 0x8002f9 <timer0_millis+0x2>
    3466:	b0 93 fa 02 	sts	0x02FA, r27	; 0x8002fa <timer0_millis+0x3>
	timer0_overflow_count++;
    346a:	80 91 fb 02 	lds	r24, 0x02FB	; 0x8002fb <timer0_overflow_count>
    346e:	90 91 fc 02 	lds	r25, 0x02FC	; 0x8002fc <timer0_overflow_count+0x1>
    3472:	a0 91 fd 02 	lds	r26, 0x02FD	; 0x8002fd <timer0_overflow_count+0x2>
    3476:	b0 91 fe 02 	lds	r27, 0x02FE	; 0x8002fe <timer0_overflow_count+0x3>
    347a:	01 96       	adiw	r24, 0x01	; 1
    347c:	a1 1d       	adc	r26, r1
    347e:	b1 1d       	adc	r27, r1
    3480:	80 93 fb 02 	sts	0x02FB, r24	; 0x8002fb <timer0_overflow_count>
    3484:	90 93 fc 02 	sts	0x02FC, r25	; 0x8002fc <timer0_overflow_count+0x1>
    3488:	a0 93 fd 02 	sts	0x02FD, r26	; 0x8002fd <timer0_overflow_count+0x2>
    348c:	b0 93 fe 02 	sts	0x02FE, r27	; 0x8002fe <timer0_overflow_count+0x3>
}
    3490:	bf 91       	pop	r27
    3492:	af 91       	pop	r26
    3494:	9f 91       	pop	r25
    3496:	8f 91       	pop	r24
    3498:	3f 91       	pop	r19
    349a:	2f 91       	pop	r18
    349c:	0f 90       	pop	r0
    349e:	0f be       	out	0x3f, r0	; 63
    34a0:	0f 90       	pop	r0
    34a2:	1f 90       	pop	r1
    34a4:	18 95       	reti

000034a6 <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
    34a6:	2f b7       	in	r18, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
    34a8:	f8 94       	cli
	m = timer0_millis;
    34aa:	60 91 f7 02 	lds	r22, 0x02F7	; 0x8002f7 <timer0_millis>
    34ae:	70 91 f8 02 	lds	r23, 0x02F8	; 0x8002f8 <timer0_millis+0x1>
    34b2:	80 91 f9 02 	lds	r24, 0x02F9	; 0x8002f9 <timer0_millis+0x2>
    34b6:	90 91 fa 02 	lds	r25, 0x02FA	; 0x8002fa <timer0_millis+0x3>
	SREG = oldSREG;
    34ba:	2f bf       	out	0x3f, r18	; 63

	return m;
}
    34bc:	08 95       	ret

000034be <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
    34be:	3f b7       	in	r19, 0x3f	; 63
	
	cli();
    34c0:	f8 94       	cli
	m = timer0_overflow_count;
    34c2:	80 91 fb 02 	lds	r24, 0x02FB	; 0x8002fb <timer0_overflow_count>
    34c6:	90 91 fc 02 	lds	r25, 0x02FC	; 0x8002fc <timer0_overflow_count+0x1>
    34ca:	a0 91 fd 02 	lds	r26, 0x02FD	; 0x8002fd <timer0_overflow_count+0x2>
    34ce:	b0 91 fe 02 	lds	r27, 0x02FE	; 0x8002fe <timer0_overflow_count+0x3>
#if defined(TCNT0)
	t = TCNT0;
    34d2:	26 b5       	in	r18, 0x26	; 38
#else
	#error TIMER 0 not defined
#endif

#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
    34d4:	a8 9b       	sbis	0x15, 0	; 21
    34d6:	05 c0       	rjmp	.+10     	; 0x34e2 <micros+0x24>
    34d8:	2f 3f       	cpi	r18, 0xFF	; 255
    34da:	19 f0       	breq	.+6      	; 0x34e2 <micros+0x24>
		m++;
    34dc:	01 96       	adiw	r24, 0x01	; 1
    34de:	a1 1d       	adc	r26, r1
    34e0:	b1 1d       	adc	r27, r1
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
    34e2:	3f bf       	out	0x3f, r19	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
    34e4:	ba 2f       	mov	r27, r26
    34e6:	a9 2f       	mov	r26, r25
    34e8:	98 2f       	mov	r25, r24
    34ea:	88 27       	eor	r24, r24
    34ec:	82 0f       	add	r24, r18
    34ee:	91 1d       	adc	r25, r1
    34f0:	a1 1d       	adc	r26, r1
    34f2:	b1 1d       	adc	r27, r1
    34f4:	bc 01       	movw	r22, r24
    34f6:	cd 01       	movw	r24, r26
    34f8:	42 e0       	ldi	r20, 0x02	; 2
    34fa:	66 0f       	add	r22, r22
    34fc:	77 1f       	adc	r23, r23
    34fe:	88 1f       	adc	r24, r24
    3500:	99 1f       	adc	r25, r25
    3502:	4a 95       	dec	r20
    3504:	d1 f7       	brne	.-12     	; 0x34fa <micros+0x3c>
}
    3506:	08 95       	ret

00003508 <delay>:

void delay(unsigned long ms)
{
    3508:	8f 92       	push	r8
    350a:	9f 92       	push	r9
    350c:	af 92       	push	r10
    350e:	bf 92       	push	r11
    3510:	cf 92       	push	r12
    3512:	df 92       	push	r13
    3514:	ef 92       	push	r14
    3516:	ff 92       	push	r15
    3518:	6b 01       	movw	r12, r22
    351a:	7c 01       	movw	r14, r24
	uint32_t start = micros();
    351c:	0e 94 5f 1a 	call	0x34be	; 0x34be <micros>
    3520:	4b 01       	movw	r8, r22
    3522:	5c 01       	movw	r10, r24

	while (ms > 0) {
    3524:	c1 14       	cp	r12, r1
    3526:	d1 04       	cpc	r13, r1
    3528:	e1 04       	cpc	r14, r1
    352a:	f1 04       	cpc	r15, r1
    352c:	01 f1       	breq	.+64     	; 0x356e <delay+0x66>
		yield();
    352e:	0e 94 99 2e 	call	0x5d32	; 0x5d32 <yield>
		while ( ms > 0 && (micros() - start) >= 1000) {
    3532:	0e 94 5f 1a 	call	0x34be	; 0x34be <micros>
    3536:	dc 01       	movw	r26, r24
    3538:	cb 01       	movw	r24, r22
    353a:	88 19       	sub	r24, r8
    353c:	99 09       	sbc	r25, r9
    353e:	aa 09       	sbc	r26, r10
    3540:	bb 09       	sbc	r27, r11
    3542:	88 3e       	cpi	r24, 0xE8	; 232
    3544:	93 40       	sbci	r25, 0x03	; 3
    3546:	a1 05       	cpc	r26, r1
    3548:	b1 05       	cpc	r27, r1
    354a:	60 f3       	brcs	.-40     	; 0x3524 <delay+0x1c>
			ms--;
    354c:	21 e0       	ldi	r18, 0x01	; 1
    354e:	c2 1a       	sub	r12, r18
    3550:	d1 08       	sbc	r13, r1
    3552:	e1 08       	sbc	r14, r1
    3554:	f1 08       	sbc	r15, r1
			start += 1000;
    3556:	88 ee       	ldi	r24, 0xE8	; 232
    3558:	88 0e       	add	r8, r24
    355a:	83 e0       	ldi	r24, 0x03	; 3
    355c:	98 1e       	adc	r9, r24
    355e:	a1 1c       	adc	r10, r1
    3560:	b1 1c       	adc	r11, r1
{
	uint32_t start = micros();

	while (ms > 0) {
		yield();
		while ( ms > 0 && (micros() - start) >= 1000) {
    3562:	c1 14       	cp	r12, r1
    3564:	d1 04       	cpc	r13, r1
    3566:	e1 04       	cpc	r14, r1
    3568:	f1 04       	cpc	r15, r1
    356a:	19 f7       	brne	.-58     	; 0x3532 <delay+0x2a>
    356c:	db cf       	rjmp	.-74     	; 0x3524 <delay+0x1c>
			ms--;
			start += 1000;
		}
	}
}
    356e:	ff 90       	pop	r15
    3570:	ef 90       	pop	r14
    3572:	df 90       	pop	r13
    3574:	cf 90       	pop	r12
    3576:	bf 90       	pop	r11
    3578:	af 90       	pop	r10
    357a:	9f 90       	pop	r9
    357c:	8f 90       	pop	r8
    357e:	08 95       	ret

00003580 <delayMicroseconds>:
#elif F_CPU >= 16000000L
	// for the 16 MHz clock on most Arduino boards

	// for a one-microsecond delay, simply return.  the overhead
	// of the function call takes 14 (16) cycles, which is 1us
	if (us <= 1) return; //  = 3 cycles, (4 when true)
    3580:	82 30       	cpi	r24, 0x02	; 2
    3582:	91 05       	cpc	r25, r1
    3584:	38 f0       	brcs	.+14     	; 0x3594 <delayMicroseconds+0x14>

	// the following loop takes 1/4 of a microsecond (4 cycles)
	// per iteration, so execute it four times for each microsecond of
	// delay requested.
	us <<= 2; // x4 us, = 4 cycles
    3586:	88 0f       	add	r24, r24
    3588:	99 1f       	adc	r25, r25
    358a:	88 0f       	add	r24, r24
    358c:	99 1f       	adc	r25, r25

	// account for the time taken in the preceeding commands.
	// we just burned 19 (21) cycles above, remove 5, (5*4=20)
	// us is at least 8 so we can substract 5
	us -= 5; // = 2 cycles,
    358e:	05 97       	sbiw	r24, 0x05	; 5
	

#endif

	// busy wait
	__asm__ __volatile__ (
    3590:	01 97       	sbiw	r24, 0x01	; 1
    3592:	f1 f7       	brne	.-4      	; 0x3590 <delayMicroseconds+0x10>
    3594:	08 95       	ret

00003596 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
    3596:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
    3598:	84 b5       	in	r24, 0x24	; 36
    359a:	82 60       	ori	r24, 0x02	; 2
    359c:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
    359e:	84 b5       	in	r24, 0x24	; 36
    35a0:	81 60       	ori	r24, 0x01	; 1
    35a2:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
    35a4:	85 b5       	in	r24, 0x25	; 37
    35a6:	82 60       	ori	r24, 0x02	; 2
    35a8:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
    35aa:	85 b5       	in	r24, 0x25	; 37
    35ac:	81 60       	ori	r24, 0x01	; 1
    35ae:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
    35b0:	ee e6       	ldi	r30, 0x6E	; 110
    35b2:	f0 e0       	ldi	r31, 0x00	; 0
    35b4:	80 81       	ld	r24, Z
    35b6:	81 60       	ori	r24, 0x01	; 1
    35b8:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
    35ba:	e1 e8       	ldi	r30, 0x81	; 129
    35bc:	f0 e0       	ldi	r31, 0x00	; 0
    35be:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
    35c0:	80 81       	ld	r24, Z
    35c2:	82 60       	ori	r24, 0x02	; 2
    35c4:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
    35c6:	80 81       	ld	r24, Z
    35c8:	81 60       	ori	r24, 0x01	; 1
    35ca:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
    35cc:	e0 e8       	ldi	r30, 0x80	; 128
    35ce:	f0 e0       	ldi	r31, 0x00	; 0
    35d0:	80 81       	ld	r24, Z
    35d2:	81 60       	ori	r24, 0x01	; 1
    35d4:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
    35d6:	e1 eb       	ldi	r30, 0xB1	; 177
    35d8:	f0 e0       	ldi	r31, 0x00	; 0
    35da:	80 81       	ld	r24, Z
    35dc:	84 60       	ori	r24, 0x04	; 4
    35de:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
    35e0:	e0 eb       	ldi	r30, 0xB0	; 176
    35e2:	f0 e0       	ldi	r31, 0x00	; 0
    35e4:	80 81       	ld	r24, Z
    35e6:	81 60       	ori	r24, 0x01	; 1
    35e8:	80 83       	st	Z, r24
#endif

#if defined(ADCSRA)
	// set a2d prescaler so we are inside the desired 50-200 KHz range.
	#if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
		sbi(ADCSRA, ADPS2);
    35ea:	ea e7       	ldi	r30, 0x7A	; 122
    35ec:	f0 e0       	ldi	r31, 0x00	; 0
    35ee:	80 81       	ld	r24, Z
    35f0:	84 60       	ori	r24, 0x04	; 4
    35f2:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS1);
    35f4:	80 81       	ld	r24, Z
    35f6:	82 60       	ori	r24, 0x02	; 2
    35f8:	80 83       	st	Z, r24
		sbi(ADCSRA, ADPS0);
    35fa:	80 81       	ld	r24, Z
    35fc:	81 60       	ori	r24, 0x01	; 1
    35fe:	80 83       	st	Z, r24
		cbi(ADCSRA, ADPS2);
		cbi(ADCSRA, ADPS1);
		sbi(ADCSRA, ADPS0);
	#endif
	// enable a2d conversions
	sbi(ADCSRA, ADEN);
    3600:	80 81       	ld	r24, Z
    3602:	80 68       	ori	r24, 0x80	; 128
    3604:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    3606:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
    360a:	08 95       	ret

0000360c <analogRead>:
#elif defined(__AVR_ATmega32U4__)
	if (pin >= 18) pin -= 18; // allow for channel or pin numbers
#elif defined(__AVR_ATmega1284__) || defined(__AVR_ATmega1284P__) || defined(__AVR_ATmega644__) || defined(__AVR_ATmega644A__) || defined(__AVR_ATmega644P__) || defined(__AVR_ATmega644PA__)
	if (pin >= 24) pin -= 24; // allow for channel or pin numbers
#else
	if (pin >= 14) pin -= 14; // allow for channel or pin numbers
    360c:	8e 30       	cpi	r24, 0x0E	; 14
    360e:	08 f0       	brcs	.+2      	; 0x3612 <analogRead+0x6>
    3610:	8e 50       	subi	r24, 0x0E	; 14
	// to 0 (the default).
#if defined(ADMUX)
#if defined(__AVR_ATtiny25__) || defined(__AVR_ATtiny45__) || defined(__AVR_ATtiny85__)
	ADMUX = (analog_reference << 4) | (pin & 0x07);
#else
	ADMUX = (analog_reference << 6) | (pin & 0x07);
    3612:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <analog_reference>
    3616:	90 e4       	ldi	r25, 0x40	; 64
    3618:	29 9f       	mul	r18, r25
    361a:	90 01       	movw	r18, r0
    361c:	11 24       	eor	r1, r1
    361e:	87 70       	andi	r24, 0x07	; 7
    3620:	82 2b       	or	r24, r18
    3622:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7f807c>
	// without a delay, we seem to read from the wrong channel
	//delay(1);

#if defined(ADCSRA) && defined(ADCL)
	// start the conversion
	sbi(ADCSRA, ADSC);
    3626:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    362a:	80 64       	ori	r24, 0x40	; 64
    362c:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>

	// ADSC is cleared when the conversion finishes
	while (bit_is_set(ADCSRA, ADSC));
    3630:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
    3634:	86 fd       	sbrc	r24, 6
    3636:	fc cf       	rjmp	.-8      	; 0x3630 <analogRead+0x24>

	// we have to read ADCL first; doing so locks both ADCL
	// and ADCH until ADCH is read.  reading ADCL second would
	// cause the results of each conversion to be discarded,
	// as ADCL and ADCH would be locked when it completed.
	low  = ADCL;
    3638:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
	high = ADCH;
    363c:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>
	low  = 0;
	high = 0;
#endif

	// combine the two bytes
	return (high << 8) | low;
    3640:	90 e0       	ldi	r25, 0x00	; 0
}
    3642:	92 2b       	or	r25, r18
    3644:	08 95       	ret

00003646 <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    3646:	83 30       	cpi	r24, 0x03	; 3
    3648:	81 f0       	breq	.+32     	; 0x366a <turnOffPWM+0x24>
    364a:	28 f4       	brcc	.+10     	; 0x3656 <turnOffPWM+0x10>
    364c:	81 30       	cpi	r24, 0x01	; 1
    364e:	99 f0       	breq	.+38     	; 0x3676 <turnOffPWM+0x30>
    3650:	82 30       	cpi	r24, 0x02	; 2
    3652:	a1 f0       	breq	.+40     	; 0x367c <turnOffPWM+0x36>
    3654:	08 95       	ret
    3656:	87 30       	cpi	r24, 0x07	; 7
    3658:	a9 f0       	breq	.+42     	; 0x3684 <turnOffPWM+0x3e>
    365a:	88 30       	cpi	r24, 0x08	; 8
    365c:	b9 f0       	breq	.+46     	; 0x368c <turnOffPWM+0x46>
    365e:	84 30       	cpi	r24, 0x04	; 4
    3660:	d1 f4       	brne	.+52     	; 0x3696 <turnOffPWM+0x50>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    3662:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    3666:	8f 7d       	andi	r24, 0xDF	; 223
    3668:	03 c0       	rjmp	.+6      	; 0x3670 <turnOffPWM+0x2a>
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    366a:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    366e:	8f 77       	andi	r24, 0x7F	; 127
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    3670:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
    3674:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    3676:	84 b5       	in	r24, 0x24	; 36
    3678:	8f 77       	andi	r24, 0x7F	; 127
    367a:	02 c0       	rjmp	.+4      	; 0x3680 <turnOffPWM+0x3a>
		#endif
		
		#if defined(TCCR0A) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    367c:	84 b5       	in	r24, 0x24	; 36
    367e:	8f 7d       	andi	r24, 0xDF	; 223
    3680:	84 bd       	out	0x24, r24	; 36
    3682:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    3684:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    3688:	8f 77       	andi	r24, 0x7F	; 127
    368a:	03 c0       	rjmp	.+6      	; 0x3692 <turnOffPWM+0x4c>
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    368c:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    3690:	8f 7d       	andi	r24, 0xDF	; 223
    3692:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7f80b0>
    3696:	08 95       	ret

00003698 <pinMode>:
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    3698:	cf 93       	push	r28
    369a:	df 93       	push	r29
	uint8_t bit = digitalPinToBitMask(pin);
    369c:	90 e0       	ldi	r25, 0x00	; 0
    369e:	fc 01       	movw	r30, r24
    36a0:	eb 50       	subi	r30, 0x0B	; 11
    36a2:	f7 4f       	sbci	r31, 0xF7	; 247
    36a4:	24 91       	lpm	r18, Z
	uint8_t port = digitalPinToPort(pin);
    36a6:	fc 01       	movw	r30, r24
    36a8:	e7 5f       	subi	r30, 0xF7	; 247
    36aa:	f6 4f       	sbci	r31, 0xF6	; 246
    36ac:	84 91       	lpm	r24, Z
	volatile uint8_t *reg, *out;

	if (port == NOT_A_PIN) return;
    36ae:	88 23       	and	r24, r24
    36b0:	61 f1       	breq	.+88     	; 0x370a <pinMode+0x72>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    36b2:	90 e0       	ldi	r25, 0x00	; 0
    36b4:	88 0f       	add	r24, r24
    36b6:	99 1f       	adc	r25, r25
    36b8:	fc 01       	movw	r30, r24
    36ba:	ef 5c       	subi	r30, 0xCF	; 207
    36bc:	f6 4f       	sbci	r31, 0xF6	; 246
    36be:	c5 91       	lpm	r28, Z+
    36c0:	d4 91       	lpm	r29, Z
	out = portOutputRegister(port);
    36c2:	fc 01       	movw	r30, r24
    36c4:	e9 5d       	subi	r30, 0xD9	; 217
    36c6:	f6 4f       	sbci	r31, 0xF6	; 246
    36c8:	a5 91       	lpm	r26, Z+
    36ca:	b4 91       	lpm	r27, Z

	if (mode == INPUT) { 
    36cc:	61 11       	cpse	r22, r1
    36ce:	09 c0       	rjmp	.+18     	; 0x36e2 <pinMode+0x4a>
		uint8_t oldSREG = SREG;
    36d0:	9f b7       	in	r25, 0x3f	; 63
                cli();
    36d2:	f8 94       	cli
		*reg &= ~bit;
    36d4:	88 81       	ld	r24, Y
    36d6:	20 95       	com	r18
    36d8:	82 23       	and	r24, r18
    36da:	88 83       	st	Y, r24
		*out &= ~bit;
    36dc:	ec 91       	ld	r30, X
    36de:	2e 23       	and	r18, r30
    36e0:	0b c0       	rjmp	.+22     	; 0x36f8 <pinMode+0x60>
		SREG = oldSREG;
	} else if (mode == INPUT_PULLUP) {
    36e2:	62 30       	cpi	r22, 0x02	; 2
    36e4:	61 f4       	brne	.+24     	; 0x36fe <pinMode+0x66>
		uint8_t oldSREG = SREG;
    36e6:	9f b7       	in	r25, 0x3f	; 63
                cli();
    36e8:	f8 94       	cli
		*reg &= ~bit;
    36ea:	88 81       	ld	r24, Y
    36ec:	32 2f       	mov	r19, r18
    36ee:	30 95       	com	r19
    36f0:	83 23       	and	r24, r19
    36f2:	88 83       	st	Y, r24
		*out |= bit;
    36f4:	ec 91       	ld	r30, X
    36f6:	2e 2b       	or	r18, r30
    36f8:	2c 93       	st	X, r18
		SREG = oldSREG;
    36fa:	9f bf       	out	0x3f, r25	; 63
    36fc:	06 c0       	rjmp	.+12     	; 0x370a <pinMode+0x72>
	} else {
		uint8_t oldSREG = SREG;
    36fe:	8f b7       	in	r24, 0x3f	; 63
                cli();
    3700:	f8 94       	cli
		*reg |= bit;
    3702:	e8 81       	ld	r30, Y
    3704:	2e 2b       	or	r18, r30
    3706:	28 83       	st	Y, r18
		SREG = oldSREG;
    3708:	8f bf       	out	0x3f, r24	; 63
	}
}
    370a:	df 91       	pop	r29
    370c:	cf 91       	pop	r28
    370e:	08 95       	ret

00003710 <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    3710:	1f 93       	push	r17
    3712:	cf 93       	push	r28
    3714:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    3716:	28 2f       	mov	r18, r24
    3718:	30 e0       	ldi	r19, 0x00	; 0
    371a:	f9 01       	movw	r30, r18
    371c:	ef 51       	subi	r30, 0x1F	; 31
    371e:	f7 4f       	sbci	r31, 0xF7	; 247
    3720:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    3722:	f9 01       	movw	r30, r18
    3724:	eb 50       	subi	r30, 0x0B	; 11
    3726:	f7 4f       	sbci	r31, 0xF7	; 247
    3728:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    372a:	f9 01       	movw	r30, r18
    372c:	e7 5f       	subi	r30, 0xF7	; 247
    372e:	f6 4f       	sbci	r31, 0xF6	; 246
    3730:	c4 91       	lpm	r28, Z
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    3732:	cc 23       	and	r28, r28
    3734:	c1 f0       	breq	.+48     	; 0x3766 <digitalWrite+0x56>
    3736:	16 2f       	mov	r17, r22

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    3738:	81 11       	cpse	r24, r1
    373a:	0e 94 23 1b 	call	0x3646	; 0x3646 <turnOffPWM>

	out = portOutputRegister(port);
    373e:	ec 2f       	mov	r30, r28
    3740:	f0 e0       	ldi	r31, 0x00	; 0
    3742:	ee 0f       	add	r30, r30
    3744:	ff 1f       	adc	r31, r31
    3746:	e9 5d       	subi	r30, 0xD9	; 217
    3748:	f6 4f       	sbci	r31, 0xF6	; 246
    374a:	a5 91       	lpm	r26, Z+
    374c:	b4 91       	lpm	r27, Z

	uint8_t oldSREG = SREG;
    374e:	9f b7       	in	r25, 0x3f	; 63
	cli();
    3750:	f8 94       	cli

	if (val == LOW) {
    3752:	11 11       	cpse	r17, r1
    3754:	04 c0       	rjmp	.+8      	; 0x375e <digitalWrite+0x4e>
		*out &= ~bit;
    3756:	8c 91       	ld	r24, X
    3758:	d0 95       	com	r29
    375a:	d8 23       	and	r29, r24
    375c:	02 c0       	rjmp	.+4      	; 0x3762 <digitalWrite+0x52>
	} else {
		*out |= bit;
    375e:	ec 91       	ld	r30, X
    3760:	de 2b       	or	r29, r30
    3762:	dc 93       	st	X, r29
	}

	SREG = oldSREG;
    3764:	9f bf       	out	0x3f, r25	; 63
}
    3766:	df 91       	pop	r29
    3768:	cf 91       	pop	r28
    376a:	1f 91       	pop	r17
    376c:	08 95       	ret

0000376e <digitalRead>:

int digitalRead(uint8_t pin)
{
    376e:	cf 93       	push	r28
    3770:	df 93       	push	r29
	uint8_t timer = digitalPinToTimer(pin);
    3772:	28 2f       	mov	r18, r24
    3774:	30 e0       	ldi	r19, 0x00	; 0
    3776:	f9 01       	movw	r30, r18
    3778:	ef 51       	subi	r30, 0x1F	; 31
    377a:	f7 4f       	sbci	r31, 0xF7	; 247
    377c:	84 91       	lpm	r24, Z
	uint8_t bit = digitalPinToBitMask(pin);
    377e:	f9 01       	movw	r30, r18
    3780:	eb 50       	subi	r30, 0x0B	; 11
    3782:	f7 4f       	sbci	r31, 0xF7	; 247
    3784:	d4 91       	lpm	r29, Z
	uint8_t port = digitalPinToPort(pin);
    3786:	f9 01       	movw	r30, r18
    3788:	e7 5f       	subi	r30, 0xF7	; 247
    378a:	f6 4f       	sbci	r31, 0xF6	; 246
    378c:	c4 91       	lpm	r28, Z

	if (port == NOT_A_PIN) return LOW;
    378e:	cc 23       	and	r28, r28
    3790:	91 f0       	breq	.+36     	; 0x37b6 <digitalRead+0x48>

	// If the pin that support PWM output, we need to turn it off
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    3792:	81 11       	cpse	r24, r1
    3794:	0e 94 23 1b 	call	0x3646	; 0x3646 <turnOffPWM>

	if (*portInputRegister(port) & bit) return HIGH;
    3798:	ec 2f       	mov	r30, r28
    379a:	f0 e0       	ldi	r31, 0x00	; 0
    379c:	ee 0f       	add	r30, r30
    379e:	ff 1f       	adc	r31, r31
    37a0:	e3 5e       	subi	r30, 0xE3	; 227
    37a2:	f6 4f       	sbci	r31, 0xF6	; 246
    37a4:	a5 91       	lpm	r26, Z+
    37a6:	b4 91       	lpm	r27, Z
    37a8:	ec 91       	ld	r30, X
{
	uint8_t timer = digitalPinToTimer(pin);
	uint8_t bit = digitalPinToBitMask(pin);
	uint8_t port = digitalPinToPort(pin);

	if (port == NOT_A_PIN) return LOW;
    37aa:	ed 23       	and	r30, r29
    37ac:	81 e0       	ldi	r24, 0x01	; 1
    37ae:	90 e0       	ldi	r25, 0x00	; 0
    37b0:	21 f4       	brne	.+8      	; 0x37ba <digitalRead+0x4c>
    37b2:	80 e0       	ldi	r24, 0x00	; 0
    37b4:	02 c0       	rjmp	.+4      	; 0x37ba <digitalRead+0x4c>
    37b6:	80 e0       	ldi	r24, 0x00	; 0
    37b8:	90 e0       	ldi	r25, 0x00	; 0
	// before getting a digital reading.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);

	if (*portInputRegister(port) & bit) return HIGH;
	return LOW;
}
    37ba:	df 91       	pop	r29
    37bc:	cf 91       	pop	r28
    37be:	08 95       	ret

000037c0 <_Z3maplllll>:
  long diff = howbig - howsmall;
  return random(diff) + howsmall;
}

long map(long x, long in_min, long in_max, long out_min, long out_max)
{
    37c0:	4f 92       	push	r4
    37c2:	5f 92       	push	r5
    37c4:	6f 92       	push	r6
    37c6:	7f 92       	push	r7
    37c8:	af 92       	push	r10
    37ca:	bf 92       	push	r11
    37cc:	cf 92       	push	r12
    37ce:	df 92       	push	r13
    37d0:	ef 92       	push	r14
    37d2:	ff 92       	push	r15
    37d4:	0f 93       	push	r16
    37d6:	1f 93       	push	r17
    37d8:	cf 93       	push	r28
    37da:	df 93       	push	r29
    37dc:	cd b7       	in	r28, 0x3d	; 61
    37de:	de b7       	in	r29, 0x3e	; 62
    37e0:	29 01       	movw	r4, r18
    37e2:	3a 01       	movw	r6, r20
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    37e4:	9b 01       	movw	r18, r22
    37e6:	ac 01       	movw	r20, r24
    37e8:	24 19       	sub	r18, r4
    37ea:	35 09       	sbc	r19, r5
    37ec:	46 09       	sbc	r20, r6
    37ee:	57 09       	sbc	r21, r7
    37f0:	89 89       	ldd	r24, Y+17	; 0x11
    37f2:	9a 89       	ldd	r25, Y+18	; 0x12
    37f4:	ab 89       	ldd	r26, Y+19	; 0x13
    37f6:	bc 89       	ldd	r27, Y+20	; 0x14
    37f8:	bc 01       	movw	r22, r24
    37fa:	cd 01       	movw	r24, r26
    37fc:	6a 19       	sub	r22, r10
    37fe:	7b 09       	sbc	r23, r11
    3800:	8c 09       	sbc	r24, r12
    3802:	9d 09       	sbc	r25, r13
    3804:	0e 94 7c 31 	call	0x62f8	; 0x62f8 <__mulsi3>
    3808:	a8 01       	movw	r20, r16
    380a:	97 01       	movw	r18, r14
    380c:	24 19       	sub	r18, r4
    380e:	35 09       	sbc	r19, r5
    3810:	46 09       	sbc	r20, r6
    3812:	57 09       	sbc	r21, r7
    3814:	0e 94 c2 31 	call	0x6384	; 0x6384 <__divmodsi4>
    3818:	ca 01       	movw	r24, r20
    381a:	b9 01       	movw	r22, r18
    381c:	6a 0d       	add	r22, r10
    381e:	7b 1d       	adc	r23, r11
    3820:	8c 1d       	adc	r24, r12
    3822:	9d 1d       	adc	r25, r13
}
    3824:	df 91       	pop	r29
    3826:	cf 91       	pop	r28
    3828:	1f 91       	pop	r17
    382a:	0f 91       	pop	r16
    382c:	ff 90       	pop	r15
    382e:	ef 90       	pop	r14
    3830:	df 90       	pop	r13
    3832:	cf 90       	pop	r12
    3834:	bf 90       	pop	r11
    3836:	af 90       	pop	r10
    3838:	7f 90       	pop	r7
    383a:	6f 90       	pop	r6
    383c:	5f 90       	pop	r5
    383e:	4f 90       	pop	r4
    3840:	08 95       	ret

00003842 <_ZN12Adafruit_GFX9writeLineEiiiij>:
*/
/**************************************************************************/
void Adafruit_GFX::drawChar(int16_t x, int16_t y, unsigned char c,
                            uint16_t color, uint16_t bg, uint8_t size) {
  drawChar(x, y, c, color, bg, size, size);
}
    3842:	2f 92       	push	r2
    3844:	3f 92       	push	r3
    3846:	4f 92       	push	r4
    3848:	5f 92       	push	r5
    384a:	6f 92       	push	r6
    384c:	7f 92       	push	r7
    384e:	8f 92       	push	r8
    3850:	9f 92       	push	r9
    3852:	af 92       	push	r10
    3854:	bf 92       	push	r11
    3856:	cf 92       	push	r12
    3858:	df 92       	push	r13
    385a:	ef 92       	push	r14
    385c:	ff 92       	push	r15
    385e:	0f 93       	push	r16
    3860:	1f 93       	push	r17
    3862:	cf 93       	push	r28
    3864:	df 93       	push	r29
    3866:	00 d0       	rcall	.+0      	; 0x3868 <_ZN12Adafruit_GFX9writeLineEiiiij+0x26>
    3868:	00 d0       	rcall	.+0      	; 0x386a <_ZN12Adafruit_GFX9writeLineEiiiij+0x28>
    386a:	00 d0       	rcall	.+0      	; 0x386c <_ZN12Adafruit_GFX9writeLineEiiiij+0x2a>
    386c:	cd b7       	in	r28, 0x3d	; 61
    386e:	de b7       	in	r29, 0x3e	; 62
    3870:	2c 01       	movw	r4, r24
    3872:	7e 83       	std	Y+6, r23	; 0x06
    3874:	6d 83       	std	Y+5, r22	; 0x05
    3876:	6a 01       	movw	r12, r20
    3878:	59 01       	movw	r10, r18
    387a:	c8 01       	movw	r24, r16
    387c:	fc 82       	std	Y+4, r15	; 0x04
    387e:	eb 82       	std	Y+3, r14	; 0x03
    3880:	48 01       	movw	r8, r16
    3882:	84 1a       	sub	r8, r20
    3884:	95 0a       	sbc	r9, r21
    3886:	97 fe       	sbrs	r9, 7
    3888:	03 c0       	rjmp	.+6      	; 0x3890 <_ZN12Adafruit_GFX9writeLineEiiiij+0x4e>
    388a:	91 94       	neg	r9
    388c:	81 94       	neg	r8
    388e:	91 08       	sbc	r9, r1
    3890:	35 01       	movw	r6, r10
    3892:	2d 81       	ldd	r18, Y+5	; 0x05
    3894:	3e 81       	ldd	r19, Y+6	; 0x06
    3896:	62 1a       	sub	r6, r18
    3898:	73 0a       	sbc	r7, r19
    389a:	77 fe       	sbrs	r7, 7
    389c:	03 c0       	rjmp	.+6      	; 0x38a4 <_ZN12Adafruit_GFX9writeLineEiiiij+0x62>
    389e:	71 94       	neg	r7
    38a0:	61 94       	neg	r6
    38a2:	71 08       	sbc	r7, r1
    38a4:	68 14       	cp	r6, r8
    38a6:	79 04       	cpc	r7, r9
    38a8:	5c f4       	brge	.+22     	; 0x38c0 <_ZN12Adafruit_GFX9writeLineEiiiij+0x7e>
    38aa:	3a 2d       	mov	r19, r10
    38ac:	2b 2d       	mov	r18, r11
    38ae:	5c 01       	movw	r10, r24
    38b0:	83 2f       	mov	r24, r19
    38b2:	92 2f       	mov	r25, r18
    38b4:	3d 81       	ldd	r19, Y+5	; 0x05
    38b6:	2e 81       	ldd	r18, Y+6	; 0x06
    38b8:	de 82       	std	Y+6, r13	; 0x06
    38ba:	cd 82       	std	Y+5, r12	; 0x05
    38bc:	c3 2e       	mov	r12, r19
    38be:	d2 2e       	mov	r13, r18
    38c0:	ad 81       	ldd	r26, Y+5	; 0x05
    38c2:	be 81       	ldd	r27, Y+6	; 0x06
    38c4:	aa 16       	cp	r10, r26
    38c6:	bb 06       	cpc	r11, r27
    38c8:	5c f4       	brge	.+22     	; 0x38e0 <_ZN12Adafruit_GFX9writeLineEiiiij+0x9e>
    38ca:	3c 2d       	mov	r19, r12
    38cc:	2d 2d       	mov	r18, r13
    38ce:	6c 01       	movw	r12, r24
    38d0:	83 2f       	mov	r24, r19
    38d2:	92 2f       	mov	r25, r18
    38d4:	3d 81       	ldd	r19, Y+5	; 0x05
    38d6:	2e 81       	ldd	r18, Y+6	; 0x06
    38d8:	be 82       	std	Y+6, r11	; 0x06
    38da:	ad 82       	std	Y+5, r10	; 0x05
    38dc:	a3 2e       	mov	r10, r19
    38de:	b2 2e       	mov	r11, r18
    38e0:	85 01       	movw	r16, r10
    38e2:	2d 81       	ldd	r18, Y+5	; 0x05
    38e4:	3e 81       	ldd	r19, Y+6	; 0x06
    38e6:	02 1b       	sub	r16, r18
    38e8:	13 0b       	sbc	r17, r19
    38ea:	1c 01       	movw	r2, r24
    38ec:	2c 18       	sub	r2, r12
    38ee:	3d 08       	sbc	r3, r13
    38f0:	37 fe       	sbrs	r3, 7
    38f2:	03 c0       	rjmp	.+6      	; 0x38fa <_ZN12Adafruit_GFX9writeLineEiiiij+0xb8>
    38f4:	31 94       	neg	r3
    38f6:	21 94       	neg	r2
    38f8:	31 08       	sbc	r3, r1
    38fa:	78 01       	movw	r14, r16
    38fc:	17 ff       	sbrs	r17, 7
    38fe:	03 c0       	rjmp	.+6      	; 0x3906 <_ZN12Adafruit_GFX9writeLineEiiiij+0xc4>
    3900:	3f ef       	ldi	r19, 0xFF	; 255
    3902:	e3 1a       	sub	r14, r19
    3904:	f3 0a       	sbc	r15, r19
    3906:	f5 94       	asr	r15
    3908:	e7 94       	ror	r14
    390a:	c8 16       	cp	r12, r24
    390c:	d9 06       	cpc	r13, r25
    390e:	2c f0       	brlt	.+10     	; 0x391a <_ZN12Adafruit_GFX9writeLineEiiiij+0xd8>
    3910:	8f ef       	ldi	r24, 0xFF	; 255
    3912:	9f ef       	ldi	r25, 0xFF	; 255
    3914:	9a 83       	std	Y+2, r25	; 0x02
    3916:	89 83       	std	Y+1, r24	; 0x01
    3918:	04 c0       	rjmp	.+8      	; 0x3922 <_ZN12Adafruit_GFX9writeLineEiiiij+0xe0>
    391a:	a1 e0       	ldi	r26, 0x01	; 1
    391c:	b0 e0       	ldi	r27, 0x00	; 0
    391e:	ba 83       	std	Y+2, r27	; 0x02
    3920:	a9 83       	std	Y+1, r26	; 0x01
    3922:	2d 81       	ldd	r18, Y+5	; 0x05
    3924:	3e 81       	ldd	r19, Y+6	; 0x06
    3926:	a2 16       	cp	r10, r18
    3928:	b3 06       	cpc	r11, r19
    392a:	24 f1       	brlt	.+72     	; 0x3974 <_ZN12Adafruit_GFX9writeLineEiiiij+0x132>
    392c:	d2 01       	movw	r26, r4
    392e:	ed 91       	ld	r30, X+
    3930:	fc 91       	ld	r31, X
    3932:	04 84       	ldd	r0, Z+12	; 0x0c
    3934:	f5 85       	ldd	r31, Z+13	; 0x0d
    3936:	e0 2d       	mov	r30, r0
    3938:	2b 81       	ldd	r18, Y+3	; 0x03
    393a:	3c 81       	ldd	r19, Y+4	; 0x04
    393c:	68 14       	cp	r6, r8
    393e:	79 04       	cpc	r7, r9
    3940:	24 f4       	brge	.+8      	; 0x394a <_ZN12Adafruit_GFX9writeLineEiiiij+0x108>
    3942:	4d 81       	ldd	r20, Y+5	; 0x05
    3944:	5e 81       	ldd	r21, Y+6	; 0x06
    3946:	b6 01       	movw	r22, r12
    3948:	03 c0       	rjmp	.+6      	; 0x3950 <_ZN12Adafruit_GFX9writeLineEiiiij+0x10e>
    394a:	a6 01       	movw	r20, r12
    394c:	6d 81       	ldd	r22, Y+5	; 0x05
    394e:	7e 81       	ldd	r23, Y+6	; 0x06
    3950:	c2 01       	movw	r24, r4
    3952:	09 95       	icall
    3954:	e2 18       	sub	r14, r2
    3956:	f3 08       	sbc	r15, r3
    3958:	f7 fe       	sbrs	r15, 7
    395a:	06 c0       	rjmp	.+12     	; 0x3968 <_ZN12Adafruit_GFX9writeLineEiiiij+0x126>
    395c:	29 81       	ldd	r18, Y+1	; 0x01
    395e:	3a 81       	ldd	r19, Y+2	; 0x02
    3960:	c2 0e       	add	r12, r18
    3962:	d3 1e       	adc	r13, r19
    3964:	e0 0e       	add	r14, r16
    3966:	f1 1e       	adc	r15, r17
    3968:	8d 81       	ldd	r24, Y+5	; 0x05
    396a:	9e 81       	ldd	r25, Y+6	; 0x06
    396c:	01 96       	adiw	r24, 0x01	; 1
    396e:	9e 83       	std	Y+6, r25	; 0x06
    3970:	8d 83       	std	Y+5, r24	; 0x05
    3972:	d7 cf       	rjmp	.-82     	; 0x3922 <_ZN12Adafruit_GFX9writeLineEiiiij+0xe0>
    3974:	26 96       	adiw	r28, 0x06	; 6
    3976:	0f b6       	in	r0, 0x3f	; 63
    3978:	f8 94       	cli
    397a:	de bf       	out	0x3e, r29	; 62
    397c:	0f be       	out	0x3f, r0	; 63
    397e:	cd bf       	out	0x3d, r28	; 61
    3980:	df 91       	pop	r29
    3982:	cf 91       	pop	r28
    3984:	1f 91       	pop	r17
    3986:	0f 91       	pop	r16
    3988:	ff 90       	pop	r15
    398a:	ef 90       	pop	r14
    398c:	df 90       	pop	r13
    398e:	cf 90       	pop	r12
    3990:	bf 90       	pop	r11
    3992:	af 90       	pop	r10
    3994:	9f 90       	pop	r9
    3996:	8f 90       	pop	r8
    3998:	7f 90       	pop	r7
    399a:	6f 90       	pop	r6
    399c:	5f 90       	pop	r5
    399e:	4f 90       	pop	r4
    39a0:	3f 90       	pop	r3
    39a2:	2f 90       	pop	r2
    39a4:	08 95       	ret

000039a6 <_ZN12Adafruit_GFX10writePixelEiij>:
    39a6:	dc 01       	movw	r26, r24
    39a8:	ed 91       	ld	r30, X+
    39aa:	fc 91       	ld	r31, X
    39ac:	00 84       	ldd	r0, Z+8	; 0x08
    39ae:	f1 85       	ldd	r31, Z+9	; 0x09
    39b0:	e0 2d       	mov	r30, r0
    39b2:	09 94       	ijmp

000039b4 <_ZN12Adafruit_GFX14writeFastVLineEiiij>:
    39b4:	0f 93       	push	r16
    39b6:	1f 93       	push	r17
    39b8:	dc 01       	movw	r26, r24
    39ba:	ed 91       	ld	r30, X+
    39bc:	fc 91       	ld	r31, X
    39be:	04 8c       	ldd	r0, Z+28	; 0x1c
    39c0:	f5 8d       	ldd	r31, Z+29	; 0x1d
    39c2:	e0 2d       	mov	r30, r0
    39c4:	09 95       	icall
    39c6:	1f 91       	pop	r17
    39c8:	0f 91       	pop	r16
    39ca:	08 95       	ret

000039cc <_ZN12Adafruit_GFX14writeFastHLineEiiij>:
    39cc:	0f 93       	push	r16
    39ce:	1f 93       	push	r17
    39d0:	dc 01       	movw	r26, r24
    39d2:	ed 91       	ld	r30, X+
    39d4:	fc 91       	ld	r31, X
    39d6:	06 8c       	ldd	r0, Z+30	; 0x1e
    39d8:	f7 8d       	ldd	r31, Z+31	; 0x1f
    39da:	e0 2d       	mov	r30, r0
    39dc:	09 95       	icall
    39de:	1f 91       	pop	r17
    39e0:	0f 91       	pop	r16
    39e2:	08 95       	ret

000039e4 <_ZN12Adafruit_GFX13writeFillRectEiiiij>:
    39e4:	ef 92       	push	r14
    39e6:	ff 92       	push	r15
    39e8:	0f 93       	push	r16
    39ea:	1f 93       	push	r17
    39ec:	dc 01       	movw	r26, r24
    39ee:	ed 91       	ld	r30, X+
    39f0:	fc 91       	ld	r31, X
    39f2:	00 a0       	ldd	r0, Z+32	; 0x20
    39f4:	f1 a1       	ldd	r31, Z+33	; 0x21
    39f6:	e0 2d       	mov	r30, r0
    39f8:	09 95       	icall
    39fa:	1f 91       	pop	r17
    39fc:	0f 91       	pop	r16
    39fe:	ff 90       	pop	r15
    3a00:	ef 90       	pop	r14
    3a02:	08 95       	ret

00003a04 <_ZN12Adafruit_GFX10startWriteEv>:
    3a04:	08 95       	ret

00003a06 <_ZN12Adafruit_GFX13drawFastVLineEiiij>:
    3a06:	8f 92       	push	r8
    3a08:	9f 92       	push	r9
    3a0a:	af 92       	push	r10
    3a0c:	bf 92       	push	r11
    3a0e:	cf 92       	push	r12
    3a10:	df 92       	push	r13
    3a12:	ef 92       	push	r14
    3a14:	ff 92       	push	r15
    3a16:	0f 93       	push	r16
    3a18:	1f 93       	push	r17
    3a1a:	cf 93       	push	r28
    3a1c:	df 93       	push	r29
    3a1e:	ec 01       	movw	r28, r24
    3a20:	5b 01       	movw	r10, r22
    3a22:	4a 01       	movw	r8, r20
    3a24:	69 01       	movw	r12, r18
    3a26:	78 01       	movw	r14, r16
    3a28:	e8 81       	ld	r30, Y
    3a2a:	f9 81       	ldd	r31, Y+1	; 0x01
    3a2c:	02 84       	ldd	r0, Z+10	; 0x0a
    3a2e:	f3 85       	ldd	r31, Z+11	; 0x0b
    3a30:	e0 2d       	mov	r30, r0
    3a32:	09 95       	icall
    3a34:	c8 0c       	add	r12, r8
    3a36:	d9 1c       	adc	r13, r9
    3a38:	86 01       	movw	r16, r12
    3a3a:	01 50       	subi	r16, 0x01	; 1
    3a3c:	11 09       	sbc	r17, r1
    3a3e:	e8 81       	ld	r30, Y
    3a40:	f9 81       	ldd	r31, Y+1	; 0x01
    3a42:	04 88       	ldd	r0, Z+20	; 0x14
    3a44:	f5 89       	ldd	r31, Z+21	; 0x15
    3a46:	e0 2d       	mov	r30, r0
    3a48:	95 01       	movw	r18, r10
    3a4a:	a4 01       	movw	r20, r8
    3a4c:	b5 01       	movw	r22, r10
    3a4e:	ce 01       	movw	r24, r28
    3a50:	09 95       	icall
    3a52:	e8 81       	ld	r30, Y
    3a54:	f9 81       	ldd	r31, Y+1	; 0x01
    3a56:	06 88       	ldd	r0, Z+22	; 0x16
    3a58:	f7 89       	ldd	r31, Z+23	; 0x17
    3a5a:	e0 2d       	mov	r30, r0
    3a5c:	ce 01       	movw	r24, r28
    3a5e:	df 91       	pop	r29
    3a60:	cf 91       	pop	r28
    3a62:	1f 91       	pop	r17
    3a64:	0f 91       	pop	r16
    3a66:	ff 90       	pop	r15
    3a68:	ef 90       	pop	r14
    3a6a:	df 90       	pop	r13
    3a6c:	cf 90       	pop	r12
    3a6e:	bf 90       	pop	r11
    3a70:	af 90       	pop	r10
    3a72:	9f 90       	pop	r9
    3a74:	8f 90       	pop	r8
    3a76:	09 94       	ijmp

00003a78 <_ZN12Adafruit_GFX13drawFastHLineEiiij>:
    3a78:	8f 92       	push	r8
    3a7a:	9f 92       	push	r9
    3a7c:	af 92       	push	r10
    3a7e:	bf 92       	push	r11
    3a80:	cf 92       	push	r12
    3a82:	df 92       	push	r13
    3a84:	ef 92       	push	r14
    3a86:	ff 92       	push	r15
    3a88:	0f 93       	push	r16
    3a8a:	1f 93       	push	r17
    3a8c:	cf 93       	push	r28
    3a8e:	df 93       	push	r29
    3a90:	ec 01       	movw	r28, r24
    3a92:	5b 01       	movw	r10, r22
    3a94:	4a 01       	movw	r8, r20
    3a96:	69 01       	movw	r12, r18
    3a98:	e8 81       	ld	r30, Y
    3a9a:	f9 81       	ldd	r31, Y+1	; 0x01
    3a9c:	02 84       	ldd	r0, Z+10	; 0x0a
    3a9e:	f3 85       	ldd	r31, Z+11	; 0x0b
    3aa0:	e0 2d       	mov	r30, r0
    3aa2:	09 95       	icall
    3aa4:	95 01       	movw	r18, r10
    3aa6:	2c 0d       	add	r18, r12
    3aa8:	3d 1d       	adc	r19, r13
    3aaa:	21 50       	subi	r18, 0x01	; 1
    3aac:	31 09       	sbc	r19, r1
    3aae:	e8 81       	ld	r30, Y
    3ab0:	f9 81       	ldd	r31, Y+1	; 0x01
    3ab2:	04 88       	ldd	r0, Z+20	; 0x14
    3ab4:	f5 89       	ldd	r31, Z+21	; 0x15
    3ab6:	e0 2d       	mov	r30, r0
    3ab8:	78 01       	movw	r14, r16
    3aba:	84 01       	movw	r16, r8
    3abc:	a4 01       	movw	r20, r8
    3abe:	b5 01       	movw	r22, r10
    3ac0:	ce 01       	movw	r24, r28
    3ac2:	09 95       	icall
    3ac4:	e8 81       	ld	r30, Y
    3ac6:	f9 81       	ldd	r31, Y+1	; 0x01
    3ac8:	06 88       	ldd	r0, Z+22	; 0x16
    3aca:	f7 89       	ldd	r31, Z+23	; 0x17
    3acc:	e0 2d       	mov	r30, r0
    3ace:	ce 01       	movw	r24, r28
    3ad0:	df 91       	pop	r29
    3ad2:	cf 91       	pop	r28
    3ad4:	1f 91       	pop	r17
    3ad6:	0f 91       	pop	r16
    3ad8:	ff 90       	pop	r15
    3ada:	ef 90       	pop	r14
    3adc:	df 90       	pop	r13
    3ade:	cf 90       	pop	r12
    3ae0:	bf 90       	pop	r11
    3ae2:	af 90       	pop	r10
    3ae4:	9f 90       	pop	r9
    3ae6:	8f 90       	pop	r8
    3ae8:	09 94       	ijmp

00003aea <_ZN12Adafruit_GFX8fillRectEiiiij>:
    3aea:	4f 92       	push	r4
    3aec:	5f 92       	push	r5
    3aee:	6f 92       	push	r6
    3af0:	7f 92       	push	r7
    3af2:	8f 92       	push	r8
    3af4:	9f 92       	push	r9
    3af6:	af 92       	push	r10
    3af8:	bf 92       	push	r11
    3afa:	cf 92       	push	r12
    3afc:	df 92       	push	r13
    3afe:	ef 92       	push	r14
    3b00:	ff 92       	push	r15
    3b02:	0f 93       	push	r16
    3b04:	1f 93       	push	r17
    3b06:	cf 93       	push	r28
    3b08:	df 93       	push	r29
    3b0a:	6c 01       	movw	r12, r24
    3b0c:	2b 01       	movw	r4, r22
    3b0e:	5a 01       	movw	r10, r20
    3b10:	39 01       	movw	r6, r18
    3b12:	48 01       	movw	r8, r16
    3b14:	dc 01       	movw	r26, r24
    3b16:	ed 91       	ld	r30, X+
    3b18:	fc 91       	ld	r31, X
    3b1a:	02 84       	ldd	r0, Z+10	; 0x0a
    3b1c:	f3 85       	ldd	r31, Z+11	; 0x0b
    3b1e:	e0 2d       	mov	r30, r0
    3b20:	09 95       	icall
    3b22:	e2 01       	movw	r28, r4
    3b24:	64 0c       	add	r6, r4
    3b26:	75 1c       	adc	r7, r5
    3b28:	d6 01       	movw	r26, r12
    3b2a:	ed 91       	ld	r30, X+
    3b2c:	fc 91       	ld	r31, X
    3b2e:	c6 15       	cp	r28, r6
    3b30:	d7 05       	cpc	r29, r7
    3b32:	5c f4       	brge	.+22     	; 0x3b4a <_ZN12Adafruit_GFX8fillRectEiiiij+0x60>
    3b34:	00 88       	ldd	r0, Z+16	; 0x10
    3b36:	f1 89       	ldd	r31, Z+17	; 0x11
    3b38:	e0 2d       	mov	r30, r0
    3b3a:	87 01       	movw	r16, r14
    3b3c:	94 01       	movw	r18, r8
    3b3e:	a5 01       	movw	r20, r10
    3b40:	be 01       	movw	r22, r28
    3b42:	c6 01       	movw	r24, r12
    3b44:	09 95       	icall
    3b46:	21 96       	adiw	r28, 0x01	; 1
    3b48:	ef cf       	rjmp	.-34     	; 0x3b28 <_ZN12Adafruit_GFX8fillRectEiiiij+0x3e>
    3b4a:	06 88       	ldd	r0, Z+22	; 0x16
    3b4c:	f7 89       	ldd	r31, Z+23	; 0x17
    3b4e:	e0 2d       	mov	r30, r0
    3b50:	c6 01       	movw	r24, r12
    3b52:	df 91       	pop	r29
    3b54:	cf 91       	pop	r28
    3b56:	1f 91       	pop	r17
    3b58:	0f 91       	pop	r16
    3b5a:	ff 90       	pop	r15
    3b5c:	ef 90       	pop	r14
    3b5e:	df 90       	pop	r13
    3b60:	cf 90       	pop	r12
    3b62:	bf 90       	pop	r11
    3b64:	af 90       	pop	r10
    3b66:	9f 90       	pop	r9
    3b68:	8f 90       	pop	r8
    3b6a:	7f 90       	pop	r7
    3b6c:	6f 90       	pop	r6
    3b6e:	5f 90       	pop	r5
    3b70:	4f 90       	pop	r4
    3b72:	09 94       	ijmp

00003b74 <_ZN12Adafruit_GFX10fillScreenEj>:
    3b74:	ef 92       	push	r14
    3b76:	ff 92       	push	r15
    3b78:	0f 93       	push	r16
    3b7a:	1f 93       	push	r17
    3b7c:	dc 01       	movw	r26, r24
    3b7e:	1a 96       	adiw	r26, 0x0a	; 10
    3b80:	0d 91       	ld	r16, X+
    3b82:	1c 91       	ld	r17, X
    3b84:	1b 97       	sbiw	r26, 0x0b	; 11
    3b86:	18 96       	adiw	r26, 0x08	; 8
    3b88:	2d 91       	ld	r18, X+
    3b8a:	3c 91       	ld	r19, X
    3b8c:	19 97       	sbiw	r26, 0x09	; 9
    3b8e:	ed 91       	ld	r30, X+
    3b90:	fc 91       	ld	r31, X
    3b92:	00 a0       	ldd	r0, Z+32	; 0x20
    3b94:	f1 a1       	ldd	r31, Z+33	; 0x21
    3b96:	e0 2d       	mov	r30, r0
    3b98:	7b 01       	movw	r14, r22
    3b9a:	40 e0       	ldi	r20, 0x00	; 0
    3b9c:	50 e0       	ldi	r21, 0x00	; 0
    3b9e:	60 e0       	ldi	r22, 0x00	; 0
    3ba0:	70 e0       	ldi	r23, 0x00	; 0
    3ba2:	09 95       	icall
    3ba4:	1f 91       	pop	r17
    3ba6:	0f 91       	pop	r16
    3ba8:	ff 90       	pop	r15
    3baa:	ef 90       	pop	r14
    3bac:	08 95       	ret

00003bae <_ZN12Adafruit_GFX8drawLineEiiiij>:
    3bae:	8f 92       	push	r8
    3bb0:	9f 92       	push	r9
    3bb2:	af 92       	push	r10
    3bb4:	bf 92       	push	r11
    3bb6:	cf 92       	push	r12
    3bb8:	df 92       	push	r13
    3bba:	ef 92       	push	r14
    3bbc:	ff 92       	push	r15
    3bbe:	0f 93       	push	r16
    3bc0:	1f 93       	push	r17
    3bc2:	cf 93       	push	r28
    3bc4:	df 93       	push	r29
    3bc6:	4c 01       	movw	r8, r24
    3bc8:	6b 01       	movw	r12, r22
    3bca:	5a 01       	movw	r10, r20
    3bcc:	e9 01       	movw	r28, r18
    3bce:	dc 01       	movw	r26, r24
    3bd0:	ed 91       	ld	r30, X+
    3bd2:	fc 91       	ld	r31, X
    3bd4:	62 17       	cp	r22, r18
    3bd6:	73 07       	cpc	r23, r19
    3bd8:	81 f4       	brne	.+32     	; 0x3bfa <_ZN12Adafruit_GFX8drawLineEiiiij+0x4c>
    3bda:	04 17       	cp	r16, r20
    3bdc:	15 07       	cpc	r17, r21
    3bde:	24 f4       	brge	.+8      	; 0x3be8 <_ZN12Adafruit_GFX8drawLineEiiiij+0x3a>
    3be0:	8b 2d       	mov	r24, r11
    3be2:	58 01       	movw	r10, r16
    3be4:	04 2f       	mov	r16, r20
    3be6:	18 2f       	mov	r17, r24
    3be8:	0a 19       	sub	r16, r10
    3bea:	1b 09       	sbc	r17, r11
    3bec:	98 01       	movw	r18, r16
    3bee:	2f 5f       	subi	r18, 0xFF	; 255
    3bf0:	3f 4f       	sbci	r19, 0xFF	; 255
    3bf2:	04 8c       	ldd	r0, Z+28	; 0x1c
    3bf4:	f5 8d       	ldd	r31, Z+29	; 0x1d
    3bf6:	e0 2d       	mov	r30, r0
    3bf8:	12 c0       	rjmp	.+36     	; 0x3c1e <_ZN12Adafruit_GFX8drawLineEiiiij+0x70>
    3bfa:	40 17       	cp	r20, r16
    3bfc:	51 07       	cpc	r21, r17
    3bfe:	09 f5       	brne	.+66     	; 0x3c42 <_ZN12Adafruit_GFX8drawLineEiiiij+0x94>
    3c00:	26 17       	cp	r18, r22
    3c02:	37 07       	cpc	r19, r23
    3c04:	24 f4       	brge	.+8      	; 0x3c0e <_ZN12Adafruit_GFX8drawLineEiiiij+0x60>
    3c06:	8d 2d       	mov	r24, r13
    3c08:	69 01       	movw	r12, r18
    3c0a:	c6 2f       	mov	r28, r22
    3c0c:	d8 2f       	mov	r29, r24
    3c0e:	9e 01       	movw	r18, r28
    3c10:	2c 19       	sub	r18, r12
    3c12:	3d 09       	sbc	r19, r13
    3c14:	2f 5f       	subi	r18, 0xFF	; 255
    3c16:	3f 4f       	sbci	r19, 0xFF	; 255
    3c18:	06 8c       	ldd	r0, Z+30	; 0x1e
    3c1a:	f7 8d       	ldd	r31, Z+31	; 0x1f
    3c1c:	e0 2d       	mov	r30, r0
    3c1e:	87 01       	movw	r16, r14
    3c20:	a5 01       	movw	r20, r10
    3c22:	b6 01       	movw	r22, r12
    3c24:	c4 01       	movw	r24, r8
    3c26:	09 95       	icall
    3c28:	df 91       	pop	r29
    3c2a:	cf 91       	pop	r28
    3c2c:	1f 91       	pop	r17
    3c2e:	0f 91       	pop	r16
    3c30:	ff 90       	pop	r15
    3c32:	ef 90       	pop	r14
    3c34:	df 90       	pop	r13
    3c36:	cf 90       	pop	r12
    3c38:	bf 90       	pop	r11
    3c3a:	af 90       	pop	r10
    3c3c:	9f 90       	pop	r9
    3c3e:	8f 90       	pop	r8
    3c40:	08 95       	ret
    3c42:	02 84       	ldd	r0, Z+10	; 0x0a
    3c44:	f3 85       	ldd	r31, Z+11	; 0x0b
    3c46:	e0 2d       	mov	r30, r0
    3c48:	09 95       	icall
    3c4a:	d4 01       	movw	r26, r8
    3c4c:	ed 91       	ld	r30, X+
    3c4e:	fc 91       	ld	r31, X
    3c50:	04 88       	ldd	r0, Z+20	; 0x14
    3c52:	f5 89       	ldd	r31, Z+21	; 0x15
    3c54:	e0 2d       	mov	r30, r0
    3c56:	9e 01       	movw	r18, r28
    3c58:	a5 01       	movw	r20, r10
    3c5a:	b6 01       	movw	r22, r12
    3c5c:	c4 01       	movw	r24, r8
    3c5e:	09 95       	icall
    3c60:	d4 01       	movw	r26, r8
    3c62:	ed 91       	ld	r30, X+
    3c64:	fc 91       	ld	r31, X
    3c66:	06 88       	ldd	r0, Z+22	; 0x16
    3c68:	f7 89       	ldd	r31, Z+23	; 0x17
    3c6a:	e0 2d       	mov	r30, r0
    3c6c:	c4 01       	movw	r24, r8
    3c6e:	df 91       	pop	r29
    3c70:	cf 91       	pop	r28
    3c72:	1f 91       	pop	r17
    3c74:	0f 91       	pop	r16
    3c76:	ff 90       	pop	r15
    3c78:	ef 90       	pop	r14
    3c7a:	df 90       	pop	r13
    3c7c:	cf 90       	pop	r12
    3c7e:	bf 90       	pop	r11
    3c80:	af 90       	pop	r10
    3c82:	9f 90       	pop	r9
    3c84:	8f 90       	pop	r8
    3c86:	09 94       	ijmp

00003c88 <_ZN12Adafruit_GFX8drawRectEiiiij>:
    3c88:	6f 92       	push	r6
    3c8a:	7f 92       	push	r7
    3c8c:	8f 92       	push	r8
    3c8e:	9f 92       	push	r9
    3c90:	af 92       	push	r10
    3c92:	bf 92       	push	r11
    3c94:	cf 92       	push	r12
    3c96:	df 92       	push	r13
    3c98:	ef 92       	push	r14
    3c9a:	ff 92       	push	r15
    3c9c:	0f 93       	push	r16
    3c9e:	1f 93       	push	r17
    3ca0:	cf 93       	push	r28
    3ca2:	df 93       	push	r29
    3ca4:	ec 01       	movw	r28, r24
    3ca6:	4b 01       	movw	r8, r22
    3ca8:	5a 01       	movw	r10, r20
    3caa:	69 01       	movw	r12, r18
    3cac:	38 01       	movw	r6, r16
    3cae:	e8 81       	ld	r30, Y
    3cb0:	f9 81       	ldd	r31, Y+1	; 0x01
    3cb2:	02 84       	ldd	r0, Z+10	; 0x0a
    3cb4:	f3 85       	ldd	r31, Z+11	; 0x0b
    3cb6:	e0 2d       	mov	r30, r0
    3cb8:	09 95       	icall
    3cba:	e8 81       	ld	r30, Y
    3cbc:	f9 81       	ldd	r31, Y+1	; 0x01
    3cbe:	02 88       	ldd	r0, Z+18	; 0x12
    3cc0:	f3 89       	ldd	r31, Z+19	; 0x13
    3cc2:	e0 2d       	mov	r30, r0
    3cc4:	87 01       	movw	r16, r14
    3cc6:	96 01       	movw	r18, r12
    3cc8:	a5 01       	movw	r20, r10
    3cca:	b4 01       	movw	r22, r8
    3ccc:	ce 01       	movw	r24, r28
    3cce:	09 95       	icall
    3cd0:	a5 01       	movw	r20, r10
    3cd2:	46 0d       	add	r20, r6
    3cd4:	57 1d       	adc	r21, r7
    3cd6:	41 50       	subi	r20, 0x01	; 1
    3cd8:	51 09       	sbc	r21, r1
    3cda:	e8 81       	ld	r30, Y
    3cdc:	f9 81       	ldd	r31, Y+1	; 0x01
    3cde:	02 88       	ldd	r0, Z+18	; 0x12
    3ce0:	f3 89       	ldd	r31, Z+19	; 0x13
    3ce2:	e0 2d       	mov	r30, r0
    3ce4:	96 01       	movw	r18, r12
    3ce6:	b4 01       	movw	r22, r8
    3ce8:	ce 01       	movw	r24, r28
    3cea:	09 95       	icall
    3cec:	e8 81       	ld	r30, Y
    3cee:	f9 81       	ldd	r31, Y+1	; 0x01
    3cf0:	00 88       	ldd	r0, Z+16	; 0x10
    3cf2:	f1 89       	ldd	r31, Z+17	; 0x11
    3cf4:	e0 2d       	mov	r30, r0
    3cf6:	93 01       	movw	r18, r6
    3cf8:	a5 01       	movw	r20, r10
    3cfa:	b4 01       	movw	r22, r8
    3cfc:	ce 01       	movw	r24, r28
    3cfe:	09 95       	icall
    3d00:	c8 0c       	add	r12, r8
    3d02:	d9 1c       	adc	r13, r9
    3d04:	b6 01       	movw	r22, r12
    3d06:	61 50       	subi	r22, 0x01	; 1
    3d08:	71 09       	sbc	r23, r1
    3d0a:	e8 81       	ld	r30, Y
    3d0c:	f9 81       	ldd	r31, Y+1	; 0x01
    3d0e:	00 88       	ldd	r0, Z+16	; 0x10
    3d10:	f1 89       	ldd	r31, Z+17	; 0x11
    3d12:	e0 2d       	mov	r30, r0
    3d14:	93 01       	movw	r18, r6
    3d16:	a5 01       	movw	r20, r10
    3d18:	ce 01       	movw	r24, r28
    3d1a:	09 95       	icall
    3d1c:	e8 81       	ld	r30, Y
    3d1e:	f9 81       	ldd	r31, Y+1	; 0x01
    3d20:	06 88       	ldd	r0, Z+22	; 0x16
    3d22:	f7 89       	ldd	r31, Z+23	; 0x17
    3d24:	e0 2d       	mov	r30, r0
    3d26:	ce 01       	movw	r24, r28
    3d28:	df 91       	pop	r29
    3d2a:	cf 91       	pop	r28
    3d2c:	1f 91       	pop	r17
    3d2e:	0f 91       	pop	r16
    3d30:	ff 90       	pop	r15
    3d32:	ef 90       	pop	r14
    3d34:	df 90       	pop	r13
    3d36:	cf 90       	pop	r12
    3d38:	bf 90       	pop	r11
    3d3a:	af 90       	pop	r10
    3d3c:	9f 90       	pop	r9
    3d3e:	8f 90       	pop	r8
    3d40:	7f 90       	pop	r7
    3d42:	6f 90       	pop	r6
    3d44:	09 94       	ijmp

00003d46 <_ZN12Adafruit_GFX13invertDisplayEb>:
    3d46:	08 95       	ret

00003d48 <_ZN12Adafruit_GFX11setRotationEh>:
    3d48:	fc 01       	movw	r30, r24
    3d4a:	63 70       	andi	r22, 0x03	; 3
    3d4c:	66 8b       	std	Z+22, r22	; 0x16
    3d4e:	84 81       	ldd	r24, Z+4	; 0x04
    3d50:	95 81       	ldd	r25, Z+5	; 0x05
    3d52:	26 81       	ldd	r18, Z+6	; 0x06
    3d54:	37 81       	ldd	r19, Z+7	; 0x07
    3d56:	61 30       	cpi	r22, 0x01	; 1
    3d58:	39 f0       	breq	.+14     	; 0x3d68 <_ZN12Adafruit_GFX11setRotationEh+0x20>
    3d5a:	63 30       	cpi	r22, 0x03	; 3
    3d5c:	29 f0       	breq	.+10     	; 0x3d68 <_ZN12Adafruit_GFX11setRotationEh+0x20>
    3d5e:	91 87       	std	Z+9, r25	; 0x09
    3d60:	80 87       	std	Z+8, r24	; 0x08
    3d62:	33 87       	std	Z+11, r19	; 0x0b
    3d64:	22 87       	std	Z+10, r18	; 0x0a
    3d66:	08 95       	ret
    3d68:	31 87       	std	Z+9, r19	; 0x09
    3d6a:	20 87       	std	Z+8, r18	; 0x08
    3d6c:	93 87       	std	Z+11, r25	; 0x0b
    3d6e:	82 87       	std	Z+10, r24	; 0x0a
    3d70:	08 95       	ret

00003d72 <_ZN12Adafruit_GFXC1Eii>:
    3d72:	fc 01       	movw	r30, r24
    3d74:	13 82       	std	Z+3, r1	; 0x03
    3d76:	12 82       	std	Z+2, r1	; 0x02
    3d78:	8b e6       	ldi	r24, 0x6B	; 107
    3d7a:	91 e0       	ldi	r25, 0x01	; 1
    3d7c:	91 83       	std	Z+1, r25	; 0x01
    3d7e:	80 83       	st	Z, r24
    3d80:	75 83       	std	Z+5, r23	; 0x05
    3d82:	64 83       	std	Z+4, r22	; 0x04
    3d84:	57 83       	std	Z+7, r21	; 0x07
    3d86:	46 83       	std	Z+6, r20	; 0x06
    3d88:	71 87       	std	Z+9, r23	; 0x09
    3d8a:	60 87       	std	Z+8, r22	; 0x08
    3d8c:	53 87       	std	Z+11, r21	; 0x0b
    3d8e:	42 87       	std	Z+10, r20	; 0x0a
    3d90:	16 8a       	std	Z+22, r1	; 0x16
    3d92:	15 86       	std	Z+13, r1	; 0x0d
    3d94:	14 86       	std	Z+12, r1	; 0x0c
    3d96:	17 86       	std	Z+15, r1	; 0x0f
    3d98:	16 86       	std	Z+14, r1	; 0x0e
    3d9a:	81 e0       	ldi	r24, 0x01	; 1
    3d9c:	85 8b       	std	Z+21, r24	; 0x15
    3d9e:	84 8b       	std	Z+20, r24	; 0x14
    3da0:	2f ef       	ldi	r18, 0xFF	; 255
    3da2:	3f ef       	ldi	r19, 0xFF	; 255
    3da4:	33 8b       	std	Z+19, r19	; 0x13
    3da6:	22 8b       	std	Z+18, r18	; 0x12
    3da8:	31 8b       	std	Z+17, r19	; 0x11
    3daa:	20 8b       	std	Z+16, r18	; 0x10
    3dac:	87 8b       	std	Z+23, r24	; 0x17
    3dae:	10 8e       	std	Z+24, r1	; 0x18
    3db0:	12 8e       	std	Z+26, r1	; 0x1a
    3db2:	11 8e       	std	Z+25, r1	; 0x19
    3db4:	08 95       	ret

00003db6 <_ZN12Adafruit_GFX16drawCircleHelperEiiihj>:
    3db6:	2f 92       	push	r2
    3db8:	3f 92       	push	r3
    3dba:	4f 92       	push	r4
    3dbc:	5f 92       	push	r5
    3dbe:	6f 92       	push	r6
    3dc0:	7f 92       	push	r7
    3dc2:	8f 92       	push	r8
    3dc4:	9f 92       	push	r9
    3dc6:	af 92       	push	r10
    3dc8:	bf 92       	push	r11
    3dca:	cf 92       	push	r12
    3dcc:	df 92       	push	r13
    3dce:	ef 92       	push	r14
    3dd0:	ff 92       	push	r15
    3dd2:	0f 93       	push	r16
    3dd4:	1f 93       	push	r17
    3dd6:	cf 93       	push	r28
    3dd8:	df 93       	push	r29
    3dda:	00 d0       	rcall	.+0      	; 0x3ddc <_ZN12Adafruit_GFX16drawCircleHelperEiiihj+0x26>
    3ddc:	00 d0       	rcall	.+0      	; 0x3dde <_ZN12Adafruit_GFX16drawCircleHelperEiiihj+0x28>
    3dde:	00 d0       	rcall	.+0      	; 0x3de0 <_ZN12Adafruit_GFX16drawCircleHelperEiiihj+0x2a>
    3de0:	cd b7       	in	r28, 0x3d	; 61
    3de2:	de b7       	in	r29, 0x3e	; 62
    3de4:	9e 83       	std	Y+6, r25	; 0x06
    3de6:	8d 83       	std	Y+5, r24	; 0x05
    3de8:	4b 01       	movw	r8, r22
    3dea:	3a 01       	movw	r6, r20
    3dec:	69 01       	movw	r12, r18
    3dee:	80 2f       	mov	r24, r16
    3df0:	21 e0       	ldi	r18, 0x01	; 1
    3df2:	30 e0       	ldi	r19, 0x00	; 0
    3df4:	29 01       	movw	r4, r18
    3df6:	4c 18       	sub	r4, r12
    3df8:	5d 08       	sbc	r5, r13
    3dfa:	22 24       	eor	r2, r2
    3dfc:	33 24       	eor	r3, r3
    3dfe:	2c 18       	sub	r2, r12
    3e00:	3d 08       	sbc	r3, r13
    3e02:	22 0c       	add	r2, r2
    3e04:	33 1c       	adc	r3, r3
    3e06:	aa 24       	eor	r10, r10
    3e08:	a3 94       	inc	r10
    3e0a:	b1 2c       	mov	r11, r1
    3e0c:	01 e0       	ldi	r16, 0x01	; 1
    3e0e:	10 e0       	ldi	r17, 0x00	; 0
    3e10:	98 2f       	mov	r25, r24
    3e12:	94 70       	andi	r25, 0x04	; 4
    3e14:	99 83       	std	Y+1, r25	; 0x01
    3e16:	a8 2f       	mov	r26, r24
    3e18:	a2 70       	andi	r26, 0x02	; 2
    3e1a:	aa 83       	std	Y+2, r26	; 0x02
    3e1c:	b8 2f       	mov	r27, r24
    3e1e:	b8 70       	andi	r27, 0x08	; 8
    3e20:	bb 83       	std	Y+3, r27	; 0x03
    3e22:	81 70       	andi	r24, 0x01	; 1
    3e24:	8c 83       	std	Y+4, r24	; 0x04
    3e26:	c5 01       	movw	r24, r10
    3e28:	01 97       	sbiw	r24, 0x01	; 1
    3e2a:	8c 15       	cp	r24, r12
    3e2c:	9d 05       	cpc	r25, r13
    3e2e:	0c f0       	brlt	.+2      	; 0x3e32 <_ZN12Adafruit_GFX16drawCircleHelperEiiihj+0x7c>
    3e30:	a7 c0       	rjmp	.+334    	; 0x3f80 <_ZN12Adafruit_GFX16drawCircleHelperEiiihj+0x1ca>
    3e32:	57 fc       	sbrc	r5, 7
    3e34:	08 c0       	rjmp	.+16     	; 0x3e46 <_ZN12Adafruit_GFX16drawCircleHelperEiiihj+0x90>
    3e36:	91 e0       	ldi	r25, 0x01	; 1
    3e38:	c9 1a       	sub	r12, r25
    3e3a:	d1 08       	sbc	r13, r1
    3e3c:	a2 e0       	ldi	r26, 0x02	; 2
    3e3e:	2a 0e       	add	r2, r26
    3e40:	31 1c       	adc	r3, r1
    3e42:	42 0c       	add	r4, r2
    3e44:	53 1c       	adc	r5, r3
    3e46:	0e 5f       	subi	r16, 0xFE	; 254
    3e48:	1f 4f       	sbci	r17, 0xFF	; 255
    3e4a:	40 0e       	add	r4, r16
    3e4c:	51 1e       	adc	r5, r17
    3e4e:	b9 81       	ldd	r27, Y+1	; 0x01
    3e50:	bb 23       	and	r27, r27
    3e52:	11 f1       	breq	.+68     	; 0x3e98 <_ZN12Adafruit_GFX16drawCircleHelperEiiihj+0xe2>
    3e54:	ad 81       	ldd	r26, Y+5	; 0x05
    3e56:	be 81       	ldd	r27, Y+6	; 0x06
    3e58:	ed 91       	ld	r30, X+
    3e5a:	fc 91       	ld	r31, X
    3e5c:	11 97       	sbiw	r26, 0x01	; 1
    3e5e:	04 84       	ldd	r0, Z+12	; 0x0c
    3e60:	f5 85       	ldd	r31, Z+13	; 0x0d
    3e62:	e0 2d       	mov	r30, r0
    3e64:	97 01       	movw	r18, r14
    3e66:	a6 01       	movw	r20, r12
    3e68:	46 0d       	add	r20, r6
    3e6a:	57 1d       	adc	r21, r7
    3e6c:	b4 01       	movw	r22, r8
    3e6e:	6a 0d       	add	r22, r10
    3e70:	7b 1d       	adc	r23, r11
    3e72:	cd 01       	movw	r24, r26
    3e74:	09 95       	icall
    3e76:	ad 81       	ldd	r26, Y+5	; 0x05
    3e78:	be 81       	ldd	r27, Y+6	; 0x06
    3e7a:	ed 91       	ld	r30, X+
    3e7c:	fc 91       	ld	r31, X
    3e7e:	11 97       	sbiw	r26, 0x01	; 1
    3e80:	04 84       	ldd	r0, Z+12	; 0x0c
    3e82:	f5 85       	ldd	r31, Z+13	; 0x0d
    3e84:	e0 2d       	mov	r30, r0
    3e86:	97 01       	movw	r18, r14
    3e88:	a3 01       	movw	r20, r6
    3e8a:	4a 0d       	add	r20, r10
    3e8c:	5b 1d       	adc	r21, r11
    3e8e:	b6 01       	movw	r22, r12
    3e90:	68 0d       	add	r22, r8
    3e92:	79 1d       	adc	r23, r9
    3e94:	cd 01       	movw	r24, r26
    3e96:	09 95       	icall
    3e98:	ba 81       	ldd	r27, Y+2	; 0x02
    3e9a:	bb 23       	and	r27, r27
    3e9c:	11 f1       	breq	.+68     	; 0x3ee2 <_ZN12Adafruit_GFX16drawCircleHelperEiiihj+0x12c>
    3e9e:	ad 81       	ldd	r26, Y+5	; 0x05
    3ea0:	be 81       	ldd	r27, Y+6	; 0x06
    3ea2:	ed 91       	ld	r30, X+
    3ea4:	fc 91       	ld	r31, X
    3ea6:	11 97       	sbiw	r26, 0x01	; 1
    3ea8:	04 84       	ldd	r0, Z+12	; 0x0c
    3eaa:	f5 85       	ldd	r31, Z+13	; 0x0d
    3eac:	e0 2d       	mov	r30, r0
    3eae:	97 01       	movw	r18, r14
    3eb0:	a3 01       	movw	r20, r6
    3eb2:	4c 19       	sub	r20, r12
    3eb4:	5d 09       	sbc	r21, r13
    3eb6:	b4 01       	movw	r22, r8
    3eb8:	6a 0d       	add	r22, r10
    3eba:	7b 1d       	adc	r23, r11
    3ebc:	cd 01       	movw	r24, r26
    3ebe:	09 95       	icall
    3ec0:	ad 81       	ldd	r26, Y+5	; 0x05
    3ec2:	be 81       	ldd	r27, Y+6	; 0x06
    3ec4:	ed 91       	ld	r30, X+
    3ec6:	fc 91       	ld	r31, X
    3ec8:	11 97       	sbiw	r26, 0x01	; 1
    3eca:	04 84       	ldd	r0, Z+12	; 0x0c
    3ecc:	f5 85       	ldd	r31, Z+13	; 0x0d
    3ece:	e0 2d       	mov	r30, r0
    3ed0:	97 01       	movw	r18, r14
    3ed2:	a3 01       	movw	r20, r6
    3ed4:	4a 19       	sub	r20, r10
    3ed6:	5b 09       	sbc	r21, r11
    3ed8:	b6 01       	movw	r22, r12
    3eda:	68 0d       	add	r22, r8
    3edc:	79 1d       	adc	r23, r9
    3ede:	cd 01       	movw	r24, r26
    3ee0:	09 95       	icall
    3ee2:	bb 81       	ldd	r27, Y+3	; 0x03
    3ee4:	bb 23       	and	r27, r27
    3ee6:	11 f1       	breq	.+68     	; 0x3f2c <_ZN12Adafruit_GFX16drawCircleHelperEiiihj+0x176>
    3ee8:	ad 81       	ldd	r26, Y+5	; 0x05
    3eea:	be 81       	ldd	r27, Y+6	; 0x06
    3eec:	ed 91       	ld	r30, X+
    3eee:	fc 91       	ld	r31, X
    3ef0:	11 97       	sbiw	r26, 0x01	; 1
    3ef2:	04 84       	ldd	r0, Z+12	; 0x0c
    3ef4:	f5 85       	ldd	r31, Z+13	; 0x0d
    3ef6:	e0 2d       	mov	r30, r0
    3ef8:	97 01       	movw	r18, r14
    3efa:	a3 01       	movw	r20, r6
    3efc:	4a 0d       	add	r20, r10
    3efe:	5b 1d       	adc	r21, r11
    3f00:	b4 01       	movw	r22, r8
    3f02:	6c 19       	sub	r22, r12
    3f04:	7d 09       	sbc	r23, r13
    3f06:	cd 01       	movw	r24, r26
    3f08:	09 95       	icall
    3f0a:	ad 81       	ldd	r26, Y+5	; 0x05
    3f0c:	be 81       	ldd	r27, Y+6	; 0x06
    3f0e:	ed 91       	ld	r30, X+
    3f10:	fc 91       	ld	r31, X
    3f12:	11 97       	sbiw	r26, 0x01	; 1
    3f14:	04 84       	ldd	r0, Z+12	; 0x0c
    3f16:	f5 85       	ldd	r31, Z+13	; 0x0d
    3f18:	e0 2d       	mov	r30, r0
    3f1a:	97 01       	movw	r18, r14
    3f1c:	a6 01       	movw	r20, r12
    3f1e:	46 0d       	add	r20, r6
    3f20:	57 1d       	adc	r21, r7
    3f22:	b4 01       	movw	r22, r8
    3f24:	6a 19       	sub	r22, r10
    3f26:	7b 09       	sbc	r23, r11
    3f28:	cd 01       	movw	r24, r26
    3f2a:	09 95       	icall
    3f2c:	bc 81       	ldd	r27, Y+4	; 0x04
    3f2e:	b1 11       	cpse	r27, r1
    3f30:	04 c0       	rjmp	.+8      	; 0x3f3a <_ZN12Adafruit_GFX16drawCircleHelperEiiihj+0x184>
    3f32:	8f ef       	ldi	r24, 0xFF	; 255
    3f34:	a8 1a       	sub	r10, r24
    3f36:	b8 0a       	sbc	r11, r24
    3f38:	76 cf       	rjmp	.-276    	; 0x3e26 <_ZN12Adafruit_GFX16drawCircleHelperEiiihj+0x70>
    3f3a:	ad 81       	ldd	r26, Y+5	; 0x05
    3f3c:	be 81       	ldd	r27, Y+6	; 0x06
    3f3e:	ed 91       	ld	r30, X+
    3f40:	fc 91       	ld	r31, X
    3f42:	11 97       	sbiw	r26, 0x01	; 1
    3f44:	04 84       	ldd	r0, Z+12	; 0x0c
    3f46:	f5 85       	ldd	r31, Z+13	; 0x0d
    3f48:	e0 2d       	mov	r30, r0
    3f4a:	97 01       	movw	r18, r14
    3f4c:	a3 01       	movw	r20, r6
    3f4e:	4a 19       	sub	r20, r10
    3f50:	5b 09       	sbc	r21, r11
    3f52:	b4 01       	movw	r22, r8
    3f54:	6c 19       	sub	r22, r12
    3f56:	7d 09       	sbc	r23, r13
    3f58:	cd 01       	movw	r24, r26
    3f5a:	09 95       	icall
    3f5c:	ad 81       	ldd	r26, Y+5	; 0x05
    3f5e:	be 81       	ldd	r27, Y+6	; 0x06
    3f60:	ed 91       	ld	r30, X+
    3f62:	fc 91       	ld	r31, X
    3f64:	11 97       	sbiw	r26, 0x01	; 1
    3f66:	04 84       	ldd	r0, Z+12	; 0x0c
    3f68:	f5 85       	ldd	r31, Z+13	; 0x0d
    3f6a:	e0 2d       	mov	r30, r0
    3f6c:	97 01       	movw	r18, r14
    3f6e:	a3 01       	movw	r20, r6
    3f70:	4c 19       	sub	r20, r12
    3f72:	5d 09       	sbc	r21, r13
    3f74:	b4 01       	movw	r22, r8
    3f76:	6a 19       	sub	r22, r10
    3f78:	7b 09       	sbc	r23, r11
    3f7a:	cd 01       	movw	r24, r26
    3f7c:	09 95       	icall
    3f7e:	d9 cf       	rjmp	.-78     	; 0x3f32 <_ZN12Adafruit_GFX16drawCircleHelperEiiihj+0x17c>
    3f80:	26 96       	adiw	r28, 0x06	; 6
    3f82:	0f b6       	in	r0, 0x3f	; 63
    3f84:	f8 94       	cli
    3f86:	de bf       	out	0x3e, r29	; 62
    3f88:	0f be       	out	0x3f, r0	; 63
    3f8a:	cd bf       	out	0x3d, r28	; 61
    3f8c:	df 91       	pop	r29
    3f8e:	cf 91       	pop	r28
    3f90:	1f 91       	pop	r17
    3f92:	0f 91       	pop	r16
    3f94:	ff 90       	pop	r15
    3f96:	ef 90       	pop	r14
    3f98:	df 90       	pop	r13
    3f9a:	cf 90       	pop	r12
    3f9c:	bf 90       	pop	r11
    3f9e:	af 90       	pop	r10
    3fa0:	9f 90       	pop	r9
    3fa2:	8f 90       	pop	r8
    3fa4:	7f 90       	pop	r7
    3fa6:	6f 90       	pop	r6
    3fa8:	5f 90       	pop	r5
    3faa:	4f 90       	pop	r4
    3fac:	3f 90       	pop	r3
    3fae:	2f 90       	pop	r2
    3fb0:	08 95       	ret

00003fb2 <_ZN12Adafruit_GFX13drawRoundRectEiiiiij>:
    3fb2:	2f 92       	push	r2
    3fb4:	3f 92       	push	r3
    3fb6:	4f 92       	push	r4
    3fb8:	5f 92       	push	r5
    3fba:	6f 92       	push	r6
    3fbc:	7f 92       	push	r7
    3fbe:	8f 92       	push	r8
    3fc0:	9f 92       	push	r9
    3fc2:	af 92       	push	r10
    3fc4:	bf 92       	push	r11
    3fc6:	cf 92       	push	r12
    3fc8:	df 92       	push	r13
    3fca:	ef 92       	push	r14
    3fcc:	ff 92       	push	r15
    3fce:	0f 93       	push	r16
    3fd0:	1f 93       	push	r17
    3fd2:	cf 93       	push	r28
    3fd4:	df 93       	push	r29
    3fd6:	cd b7       	in	r28, 0x3d	; 61
    3fd8:	de b7       	in	r29, 0x3e	; 62
    3fda:	28 97       	sbiw	r28, 0x08	; 8
    3fdc:	0f b6       	in	r0, 0x3f	; 63
    3fde:	f8 94       	cli
    3fe0:	de bf       	out	0x3e, r29	; 62
    3fe2:	0f be       	out	0x3f, r0	; 63
    3fe4:	cd bf       	out	0x3d, r28	; 61
    3fe6:	5c 01       	movw	r10, r24
    3fe8:	7a 83       	std	Y+2, r23	; 0x02
    3fea:	69 83       	std	Y+1, r22	; 0x01
    3fec:	2a 01       	movw	r4, r20
    3fee:	39 01       	movw	r6, r18
    3ff0:	48 01       	movw	r8, r16
    3ff2:	20 17       	cp	r18, r16
    3ff4:	31 07       	cpc	r19, r17
    3ff6:	34 f4       	brge	.+12     	; 0x4004 <_ZN12Adafruit_GFX13drawRoundRectEiiiiij+0x52>
    3ff8:	3c 83       	std	Y+4, r19	; 0x04
    3ffa:	2b 83       	std	Y+3, r18	; 0x03
    3ffc:	37 ff       	sbrs	r19, 7
    3ffe:	0a c0       	rjmp	.+20     	; 0x4014 <_ZN12Adafruit_GFX13drawRoundRectEiiiiij+0x62>
    4000:	c9 01       	movw	r24, r18
    4002:	05 c0       	rjmp	.+10     	; 0x400e <_ZN12Adafruit_GFX13drawRoundRectEiiiiij+0x5c>
    4004:	1c 83       	std	Y+4, r17	; 0x04
    4006:	0b 83       	std	Y+3, r16	; 0x03
    4008:	17 ff       	sbrs	r17, 7
    400a:	04 c0       	rjmp	.+8      	; 0x4014 <_ZN12Adafruit_GFX13drawRoundRectEiiiiij+0x62>
    400c:	c8 01       	movw	r24, r16
    400e:	01 96       	adiw	r24, 0x01	; 1
    4010:	9c 83       	std	Y+4, r25	; 0x04
    4012:	8b 83       	std	Y+3, r24	; 0x03
    4014:	ab 81       	ldd	r26, Y+3	; 0x03
    4016:	bc 81       	ldd	r27, Y+4	; 0x04
    4018:	b5 95       	asr	r27
    401a:	a7 95       	ror	r26
    401c:	bc 83       	std	Y+4, r27	; 0x04
    401e:	ab 83       	std	Y+3, r26	; 0x03
    4020:	8b 81       	ldd	r24, Y+3	; 0x03
    4022:	9c 81       	ldd	r25, Y+4	; 0x04
    4024:	98 87       	std	Y+8, r25	; 0x08
    4026:	8f 83       	std	Y+7, r24	; 0x07
    4028:	e8 16       	cp	r14, r24
    402a:	f9 06       	cpc	r15, r25
    402c:	14 f4       	brge	.+4      	; 0x4032 <_ZN12Adafruit_GFX13drawRoundRectEiiiiij+0x80>
    402e:	f8 86       	std	Y+8, r15	; 0x08
    4030:	ef 82       	std	Y+7, r14	; 0x07
    4032:	d5 01       	movw	r26, r10
    4034:	ed 91       	ld	r30, X+
    4036:	fc 91       	ld	r31, X
    4038:	02 84       	ldd	r0, Z+10	; 0x0a
    403a:	f3 85       	ldd	r31, Z+11	; 0x0b
    403c:	e0 2d       	mov	r30, r0
    403e:	c5 01       	movw	r24, r10
    4040:	09 95       	icall
    4042:	8f 81       	ldd	r24, Y+7	; 0x07
    4044:	98 85       	ldd	r25, Y+8	; 0x08
    4046:	88 0f       	add	r24, r24
    4048:	99 1f       	adc	r25, r25
    404a:	9c 83       	std	Y+4, r25	; 0x04
    404c:	8b 83       	std	Y+3, r24	; 0x03
    404e:	73 01       	movw	r14, r6
    4050:	e8 1a       	sub	r14, r24
    4052:	f9 0a       	sbc	r15, r25
    4054:	29 80       	ldd	r2, Y+1	; 0x01
    4056:	3a 80       	ldd	r3, Y+2	; 0x02
    4058:	af 81       	ldd	r26, Y+7	; 0x07
    405a:	b8 85       	ldd	r27, Y+8	; 0x08
    405c:	2a 0e       	add	r2, r26
    405e:	3b 1e       	adc	r3, r27
    4060:	d5 01       	movw	r26, r10
    4062:	ed 91       	ld	r30, X+
    4064:	fc 91       	ld	r31, X
    4066:	02 88       	ldd	r0, Z+18	; 0x12
    4068:	f3 89       	ldd	r31, Z+19	; 0x13
    406a:	e0 2d       	mov	r30, r0
    406c:	86 01       	movw	r16, r12
    406e:	97 01       	movw	r18, r14
    4070:	a2 01       	movw	r20, r4
    4072:	b1 01       	movw	r22, r2
    4074:	c5 01       	movw	r24, r10
    4076:	09 95       	icall
    4078:	c4 01       	movw	r24, r8
    407a:	84 0d       	add	r24, r4
    407c:	95 1d       	adc	r25, r5
    407e:	9e 83       	std	Y+6, r25	; 0x06
    4080:	8d 83       	std	Y+5, r24	; 0x05
    4082:	ac 01       	movw	r20, r24
    4084:	41 50       	subi	r20, 0x01	; 1
    4086:	51 09       	sbc	r21, r1
    4088:	d5 01       	movw	r26, r10
    408a:	ed 91       	ld	r30, X+
    408c:	fc 91       	ld	r31, X
    408e:	02 88       	ldd	r0, Z+18	; 0x12
    4090:	f3 89       	ldd	r31, Z+19	; 0x13
    4092:	e0 2d       	mov	r30, r0
    4094:	97 01       	movw	r18, r14
    4096:	b1 01       	movw	r22, r2
    4098:	c5 01       	movw	r24, r10
    409a:	09 95       	icall
    409c:	8b 81       	ldd	r24, Y+3	; 0x03
    409e:	9c 81       	ldd	r25, Y+4	; 0x04
    40a0:	88 1a       	sub	r8, r24
    40a2:	99 0a       	sbc	r9, r25
    40a4:	af 81       	ldd	r26, Y+7	; 0x07
    40a6:	b8 85       	ldd	r27, Y+8	; 0x08
    40a8:	4a 0e       	add	r4, r26
    40aa:	5b 1e       	adc	r5, r27
    40ac:	d5 01       	movw	r26, r10
    40ae:	ed 91       	ld	r30, X+
    40b0:	fc 91       	ld	r31, X
    40b2:	00 88       	ldd	r0, Z+16	; 0x10
    40b4:	f1 89       	ldd	r31, Z+17	; 0x11
    40b6:	e0 2d       	mov	r30, r0
    40b8:	94 01       	movw	r18, r8
    40ba:	a2 01       	movw	r20, r4
    40bc:	69 81       	ldd	r22, Y+1	; 0x01
    40be:	7a 81       	ldd	r23, Y+2	; 0x02
    40c0:	c5 01       	movw	r24, r10
    40c2:	09 95       	icall
    40c4:	89 81       	ldd	r24, Y+1	; 0x01
    40c6:	9a 81       	ldd	r25, Y+2	; 0x02
    40c8:	68 0e       	add	r6, r24
    40ca:	79 1e       	adc	r7, r25
    40cc:	b3 01       	movw	r22, r6
    40ce:	61 50       	subi	r22, 0x01	; 1
    40d0:	71 09       	sbc	r23, r1
    40d2:	d5 01       	movw	r26, r10
    40d4:	ed 91       	ld	r30, X+
    40d6:	fc 91       	ld	r31, X
    40d8:	00 88       	ldd	r0, Z+16	; 0x10
    40da:	f1 89       	ldd	r31, Z+17	; 0x11
    40dc:	e0 2d       	mov	r30, r0
    40de:	94 01       	movw	r18, r8
    40e0:	a2 01       	movw	r20, r4
    40e2:	c5 01       	movw	r24, r10
    40e4:	09 95       	icall
    40e6:	76 01       	movw	r14, r12
    40e8:	01 e0       	ldi	r16, 0x01	; 1
    40ea:	2f 81       	ldd	r18, Y+7	; 0x07
    40ec:	38 85       	ldd	r19, Y+8	; 0x08
    40ee:	a2 01       	movw	r20, r4
    40f0:	b1 01       	movw	r22, r2
    40f2:	c5 01       	movw	r24, r10
    40f4:	0e 94 db 1e 	call	0x3db6	; 0x3db6 <_ZN12Adafruit_GFX16drawCircleHelperEiiihj>
    40f8:	8f 81       	ldd	r24, Y+7	; 0x07
    40fa:	98 85       	ldd	r25, Y+8	; 0x08
    40fc:	68 1a       	sub	r6, r24
    40fe:	79 0a       	sbc	r7, r25
    4100:	91 e0       	ldi	r25, 0x01	; 1
    4102:	69 1a       	sub	r6, r25
    4104:	71 08       	sbc	r7, r1
    4106:	02 e0       	ldi	r16, 0x02	; 2
    4108:	2f 81       	ldd	r18, Y+7	; 0x07
    410a:	38 85       	ldd	r19, Y+8	; 0x08
    410c:	a2 01       	movw	r20, r4
    410e:	b3 01       	movw	r22, r6
    4110:	c5 01       	movw	r24, r10
    4112:	0e 94 db 1e 	call	0x3db6	; 0x3db6 <_ZN12Adafruit_GFX16drawCircleHelperEiiihj>
    4116:	8d 80       	ldd	r8, Y+5	; 0x05
    4118:	9e 80       	ldd	r9, Y+6	; 0x06
    411a:	af 81       	ldd	r26, Y+7	; 0x07
    411c:	b8 85       	ldd	r27, Y+8	; 0x08
    411e:	8a 1a       	sub	r8, r26
    4120:	9b 0a       	sbc	r9, r27
    4122:	b1 e0       	ldi	r27, 0x01	; 1
    4124:	8b 1a       	sub	r8, r27
    4126:	91 08       	sbc	r9, r1
    4128:	04 e0       	ldi	r16, 0x04	; 4
    412a:	2f 81       	ldd	r18, Y+7	; 0x07
    412c:	38 85       	ldd	r19, Y+8	; 0x08
    412e:	a4 01       	movw	r20, r8
    4130:	b3 01       	movw	r22, r6
    4132:	c5 01       	movw	r24, r10
    4134:	0e 94 db 1e 	call	0x3db6	; 0x3db6 <_ZN12Adafruit_GFX16drawCircleHelperEiiihj>
    4138:	08 e0       	ldi	r16, 0x08	; 8
    413a:	2f 81       	ldd	r18, Y+7	; 0x07
    413c:	38 85       	ldd	r19, Y+8	; 0x08
    413e:	a4 01       	movw	r20, r8
    4140:	b1 01       	movw	r22, r2
    4142:	c5 01       	movw	r24, r10
    4144:	0e 94 db 1e 	call	0x3db6	; 0x3db6 <_ZN12Adafruit_GFX16drawCircleHelperEiiihj>
    4148:	d5 01       	movw	r26, r10
    414a:	ed 91       	ld	r30, X+
    414c:	fc 91       	ld	r31, X
    414e:	06 88       	ldd	r0, Z+22	; 0x16
    4150:	f7 89       	ldd	r31, Z+23	; 0x17
    4152:	e0 2d       	mov	r30, r0
    4154:	c5 01       	movw	r24, r10
    4156:	28 96       	adiw	r28, 0x08	; 8
    4158:	0f b6       	in	r0, 0x3f	; 63
    415a:	f8 94       	cli
    415c:	de bf       	out	0x3e, r29	; 62
    415e:	0f be       	out	0x3f, r0	; 63
    4160:	cd bf       	out	0x3d, r28	; 61
    4162:	df 91       	pop	r29
    4164:	cf 91       	pop	r28
    4166:	1f 91       	pop	r17
    4168:	0f 91       	pop	r16
    416a:	ff 90       	pop	r15
    416c:	ef 90       	pop	r14
    416e:	df 90       	pop	r13
    4170:	cf 90       	pop	r12
    4172:	bf 90       	pop	r11
    4174:	af 90       	pop	r10
    4176:	9f 90       	pop	r9
    4178:	8f 90       	pop	r8
    417a:	7f 90       	pop	r7
    417c:	6f 90       	pop	r6
    417e:	5f 90       	pop	r5
    4180:	4f 90       	pop	r4
    4182:	3f 90       	pop	r3
    4184:	2f 90       	pop	r2
    4186:	09 94       	ijmp

00004188 <_ZN12Adafruit_GFX12fillTriangleEiiiiiij>:
    4188:	2f 92       	push	r2
    418a:	3f 92       	push	r3
    418c:	4f 92       	push	r4
    418e:	5f 92       	push	r5
    4190:	6f 92       	push	r6
    4192:	7f 92       	push	r7
    4194:	8f 92       	push	r8
    4196:	9f 92       	push	r9
    4198:	af 92       	push	r10
    419a:	bf 92       	push	r11
    419c:	cf 92       	push	r12
    419e:	df 92       	push	r13
    41a0:	ef 92       	push	r14
    41a2:	ff 92       	push	r15
    41a4:	0f 93       	push	r16
    41a6:	1f 93       	push	r17
    41a8:	cf 93       	push	r28
    41aa:	df 93       	push	r29
    41ac:	cd b7       	in	r28, 0x3d	; 61
    41ae:	de b7       	in	r29, 0x3e	; 62
    41b0:	aa 97       	sbiw	r28, 0x2a	; 42
    41b2:	0f b6       	in	r0, 0x3f	; 63
    41b4:	f8 94       	cli
    41b6:	de bf       	out	0x3e, r29	; 62
    41b8:	0f be       	out	0x3f, r0	; 63
    41ba:	cd bf       	out	0x3d, r28	; 61
    41bc:	9a 83       	std	Y+2, r25	; 0x02
    41be:	89 83       	std	Y+1, r24	; 0x01
    41c0:	7a a7       	std	Y+42, r23	; 0x2a
    41c2:	69 a7       	std	Y+41, r22	; 0x29
    41c4:	4a 01       	movw	r8, r20
    41c6:	19 01       	movw	r2, r18
    41c8:	38 01       	movw	r6, r16
    41ca:	ba 8a       	std	Y+18, r11	; 0x12
    41cc:	a9 8a       	std	Y+17, r10	; 0x11
    41ce:	04 17       	cp	r16, r20
    41d0:	15 07       	cpc	r17, r21
    41d2:	54 f4       	brge	.+20     	; 0x41e8 <_ZN12Adafruit_GFX12fillTriangleEiiiiiij+0x60>
    41d4:	c4 16       	cp	r12, r20
    41d6:	d5 06       	cpc	r13, r21
    41d8:	a4 f4       	brge	.+40     	; 0x4202 <_ZN12Adafruit_GFX12fillTriangleEiiiiiij+0x7a>
    41da:	5c 83       	std	Y+4, r21	; 0x04
    41dc:	4b 83       	std	Y+3, r20	; 0x03
    41de:	48 01       	movw	r8, r16
    41e0:	5b 01       	movw	r10, r22
    41e2:	3a a7       	std	Y+42, r19	; 0x2a
    41e4:	29 a7       	std	Y+41, r18	; 0x29
    41e6:	07 c0       	rjmp	.+14     	; 0x41f6 <_ZN12Adafruit_GFX12fillTriangleEiiiiiij+0x6e>
    41e8:	c0 16       	cp	r12, r16
    41ea:	d1 06       	cpc	r13, r17
    41ec:	0c f0       	brlt	.+2      	; 0x41f0 <_ZN12Adafruit_GFX12fillTriangleEiiiiiij+0x68>
    41ee:	aa c1       	rjmp	.+852    	; 0x4544 <_ZN12Adafruit_GFX12fillTriangleEiiiiiij+0x3bc>
    41f0:	7c 82       	std	Y+4, r7	; 0x04
    41f2:	6b 82       	std	Y+3, r6	; 0x03
    41f4:	51 01       	movw	r10, r2
    41f6:	c8 14       	cp	r12, r8
    41f8:	d9 04       	cpc	r13, r9
    41fa:	84 f0       	brlt	.+32     	; 0x421c <_ZN12Adafruit_GFX12fillTriangleEiiiiiij+0x94>
    41fc:	36 01       	movw	r6, r12
    41fe:	17 01       	movw	r2, r14
    4200:	13 c0       	rjmp	.+38     	; 0x4228 <_ZN12Adafruit_GFX12fillTriangleEiiiiiij+0xa0>
    4202:	dc 82       	std	Y+4, r13	; 0x04
    4204:	cb 82       	std	Y+3, r12	; 0x03
    4206:	57 01       	movw	r10, r14
    4208:	87 2d       	mov	r24, r7
    420a:	3a 01       	movw	r6, r20
    420c:	80 2e       	mov	r8, r16
    420e:	98 2e       	mov	r9, r24
    4210:	83 2d       	mov	r24, r3
    4212:	29 a4       	ldd	r2, Y+41	; 0x29
    4214:	3a a4       	ldd	r3, Y+42	; 0x2a
    4216:	29 a7       	std	Y+41, r18	; 0x29
    4218:	8a a7       	std	Y+42, r24	; 0x2a
    421a:	06 c0       	rjmp	.+12     	; 0x4228 <_ZN12Adafruit_GFX12fillTriangleEiiiiiij+0xa0>
    421c:	34 01       	movw	r6, r8
    421e:	29 a4       	ldd	r2, Y+41	; 0x29
    4220:	3a a4       	ldd	r3, Y+42	; 0x2a
    4222:	46 01       	movw	r8, r12
    4224:	e9 a6       	std	Y+41, r14	; 0x29
    4226:	fa a6       	std	Y+42, r15	; 0x2a
    4228:	a9 81       	ldd	r26, Y+1	; 0x01
    422a:	ba 81       	ldd	r27, Y+2	; 0x02
    422c:	ed 91       	ld	r30, X+
    422e:	fc 91       	ld	r31, X
    4230:	11 97       	sbiw	r26, 0x01	; 1
    4232:	02 84       	ldd	r0, Z+10	; 0x0a
    4234:	f3 85       	ldd	r31, Z+11	; 0x0b
    4236:	e0 2d       	mov	r30, r0
    4238:	cd 01       	movw	r24, r26
    423a:	09 95       	icall
    423c:	2b 81       	ldd	r18, Y+3	; 0x03
    423e:	3c 81       	ldd	r19, Y+4	; 0x04
    4240:	82 16       	cp	r8, r18
    4242:	93 06       	cpc	r9, r19
    4244:	81 f5       	brne	.+96     	; 0x42a6 <_ZN12Adafruit_GFX12fillTriangleEiiiiiij+0x11e>
    4246:	49 a5       	ldd	r20, Y+41	; 0x29
    4248:	5a a5       	ldd	r21, Y+42	; 0x2a
    424a:	24 16       	cp	r2, r20
    424c:	35 06       	cpc	r3, r21
    424e:	5c f0       	brlt	.+22     	; 0x4266 <_ZN12Adafruit_GFX12fillTriangleEiiiiiij+0xde>
    4250:	99 a5       	ldd	r25, Y+41	; 0x29
    4252:	8a a5       	ldd	r24, Y+42	; 0x2a
    4254:	42 15       	cp	r20, r2
    4256:	53 05       	cpc	r21, r3
    4258:	14 f4       	brge	.+4      	; 0x425e <_ZN12Adafruit_GFX12fillTriangleEiiiiiij+0xd6>
    425a:	92 2d       	mov	r25, r2
    425c:	83 2d       	mov	r24, r3
    425e:	29 a4       	ldd	r2, Y+41	; 0x29
    4260:	3a a4       	ldd	r3, Y+42	; 0x2a
    4262:	99 a7       	std	Y+41, r25	; 0x29
    4264:	8a a7       	std	Y+42, r24	; 0x2a
    4266:	a2 14       	cp	r10, r2
    4268:	b3 04       	cpc	r11, r3
    426a:	44 f0       	brlt	.+16     	; 0x427c <_ZN12Adafruit_GFX12fillTriangleEiiiiiij+0xf4>
    426c:	69 a5       	ldd	r22, Y+41	; 0x29
    426e:	7a a5       	ldd	r23, Y+42	; 0x2a
    4270:	6a 15       	cp	r22, r10
    4272:	7b 05       	cpc	r23, r11
    4274:	14 f4       	brge	.+4      	; 0x427a <_ZN12Adafruit_GFX12fillTriangleEiiiiiij+0xf2>
    4276:	ba a6       	std	Y+42, r11	; 0x2a
    4278:	a9 a6       	std	Y+41, r10	; 0x29
    427a:	51 01       	movw	r10, r2
    427c:	29 a5       	ldd	r18, Y+41	; 0x29
    427e:	3a a5       	ldd	r19, Y+42	; 0x2a
    4280:	2a 19       	sub	r18, r10
    4282:	3b 09       	sbc	r19, r11
    4284:	2f 5f       	subi	r18, 0xFF	; 255
    4286:	3f 4f       	sbci	r19, 0xFF	; 255
    4288:	a9 81       	ldd	r26, Y+1	; 0x01
    428a:	ba 81       	ldd	r27, Y+2	; 0x02
    428c:	ed 91       	ld	r30, X+
    428e:	fc 91       	ld	r31, X
    4290:	11 97       	sbiw	r26, 0x01	; 1
    4292:	02 88       	ldd	r0, Z+18	; 0x12
    4294:	f3 89       	ldd	r31, Z+19	; 0x13
    4296:	e0 2d       	mov	r30, r0
    4298:	09 89       	ldd	r16, Y+17	; 0x11
    429a:	1a 89       	ldd	r17, Y+18	; 0x12
    429c:	a4 01       	movw	r20, r8
    429e:	b5 01       	movw	r22, r10
    42a0:	cd 01       	movw	r24, r26
    42a2:	09 95       	icall
    42a4:	2d c1       	rjmp	.+602    	; 0x4500 <_ZN12Adafruit_GFX12fillTriangleEiiiiiij+0x378>
    42a6:	c1 01       	movw	r24, r2
    42a8:	29 a5       	ldd	r18, Y+41	; 0x29
    42aa:	3a a5       	ldd	r19, Y+42	; 0x2a
    42ac:	82 1b       	sub	r24, r18
    42ae:	93 0b       	sbc	r25, r19
    42b0:	93 01       	movw	r18, r6
    42b2:	28 19       	sub	r18, r8
    42b4:	39 09       	sbc	r19, r9
    42b6:	65 01       	movw	r12, r10
    42b8:	49 a5       	ldd	r20, Y+41	; 0x29
    42ba:	5a a5       	ldd	r21, Y+42	; 0x2a
    42bc:	c4 1a       	sub	r12, r20
    42be:	d5 0a       	sbc	r13, r21
    42c0:	6b 81       	ldd	r22, Y+3	; 0x03
    42c2:	7c 81       	ldd	r23, Y+4	; 0x04
    42c4:	68 19       	sub	r22, r8
    42c6:	79 09       	sbc	r23, r9
    42c8:	7a 87       	std	Y+10, r23	; 0x0a
    42ca:	69 87       	std	Y+9, r22	; 0x09
    42cc:	25 01       	movw	r4, r10
    42ce:	42 18       	sub	r4, r2
    42d0:	53 08       	sbc	r5, r3
    42d2:	ab 81       	ldd	r26, Y+3	; 0x03
    42d4:	bc 81       	ldd	r27, Y+4	; 0x04
    42d6:	a6 19       	sub	r26, r6
    42d8:	b7 09       	sbc	r27, r7
    42da:	bc 8b       	std	Y+20, r27	; 0x14
    42dc:	ab 8b       	std	Y+19, r26	; 0x13
    42de:	4b 81       	ldd	r20, Y+3	; 0x03
    42e0:	5c 81       	ldd	r21, Y+4	; 0x04
    42e2:	64 16       	cp	r6, r20
    42e4:	75 06       	cpc	r7, r21
    42e6:	31 f0       	breq	.+12     	; 0x42f4 <_ZN12Adafruit_GFX12fillTriangleEiiiiiij+0x16c>
    42e8:	b3 01       	movw	r22, r6
    42ea:	61 50       	subi	r22, 0x01	; 1
    42ec:	71 09       	sbc	r23, r1
    42ee:	78 8f       	std	Y+24, r23	; 0x18
    42f0:	6f 8b       	std	Y+23, r22	; 0x17
    42f2:	02 c0       	rjmp	.+4      	; 0x42f8 <_ZN12Adafruit_GFX12fillTriangleEiiiiiij+0x170>
    42f4:	78 8e       	std	Y+24, r7	; 0x18
    42f6:	6f 8a       	std	Y+23, r6	; 0x17
    42f8:	54 01       	movw	r10, r8
    42fa:	1d 86       	std	Y+13, r1	; 0x0d
    42fc:	1e 86       	std	Y+14, r1	; 0x0e
    42fe:	1f 86       	std	Y+15, r1	; 0x0f
    4300:	18 8a       	std	Y+16, r1	; 0x10
    4302:	1d 82       	std	Y+5, r1	; 0x05
    4304:	1e 82       	std	Y+6, r1	; 0x06
    4306:	1f 82       	std	Y+7, r1	; 0x07
    4308:	18 86       	std	Y+8, r1	; 0x08
    430a:	a6 01       	movw	r20, r12
    430c:	0d 2c       	mov	r0, r13
    430e:	00 0c       	add	r0, r0
    4310:	66 0b       	sbc	r22, r22
    4312:	77 0b       	sbc	r23, r23
    4314:	49 8f       	std	Y+25, r20	; 0x19
    4316:	5a 8f       	std	Y+26, r21	; 0x1a
    4318:	6b 8f       	std	Y+27, r22	; 0x1b
    431a:	7c 8f       	std	Y+28, r23	; 0x1c
    431c:	a9 01       	movw	r20, r18
    431e:	33 0f       	add	r19, r19
    4320:	66 0b       	sbc	r22, r22
    4322:	77 0b       	sbc	r23, r23
    4324:	4d 8f       	std	Y+29, r20	; 0x1d
    4326:	5e 8f       	std	Y+30, r21	; 0x1e
    4328:	6f 8f       	std	Y+31, r22	; 0x1f
    432a:	78 a3       	std	Y+32, r23	; 0x20
    432c:	29 85       	ldd	r18, Y+9	; 0x09
    432e:	3a 85       	ldd	r19, Y+10	; 0x0a
    4330:	03 2e       	mov	r0, r19
    4332:	00 0c       	add	r0, r0
    4334:	44 0b       	sbc	r20, r20
    4336:	55 0b       	sbc	r21, r21
    4338:	29 a3       	std	Y+33, r18	; 0x21
    433a:	3a a3       	std	Y+34, r19	; 0x22
    433c:	4b a3       	std	Y+35, r20	; 0x23
    433e:	5c a3       	std	Y+36, r21	; 0x24
    4340:	ac 01       	movw	r20, r24
    4342:	99 0f       	add	r25, r25
    4344:	66 0b       	sbc	r22, r22
    4346:	77 0b       	sbc	r23, r23
    4348:	4d a3       	std	Y+37, r20	; 0x25
    434a:	5e a3       	std	Y+38, r21	; 0x26
    434c:	6f a3       	std	Y+39, r22	; 0x27
    434e:	78 a7       	std	Y+40, r23	; 0x28
    4350:	6f 89       	ldd	r22, Y+23	; 0x17
    4352:	78 8d       	ldd	r23, Y+24	; 0x18
    4354:	6a 15       	cp	r22, r10
    4356:	7b 05       	cpc	r23, r11
    4358:	0c f4       	brge	.+2      	; 0x435c <_ZN12Adafruit_GFX12fillTriangleEiiiiiij+0x1d4>
    435a:	5a c0       	rjmp	.+180    	; 0x4410 <_ZN12Adafruit_GFX12fillTriangleEiiiiiij+0x288>
    435c:	6d 81       	ldd	r22, Y+5	; 0x05
    435e:	7e 81       	ldd	r23, Y+6	; 0x06
    4360:	8f 81       	ldd	r24, Y+7	; 0x07
    4362:	98 85       	ldd	r25, Y+8	; 0x08
    4364:	2d 8d       	ldd	r18, Y+29	; 0x1d
    4366:	3e 8d       	ldd	r19, Y+30	; 0x1e
    4368:	4f 8d       	ldd	r20, Y+31	; 0x1f
    436a:	58 a1       	ldd	r21, Y+32	; 0x20
    436c:	0e 94 c2 31 	call	0x6384	; 0x6384 <__divmodsi4>
    4370:	e9 a4       	ldd	r14, Y+41	; 0x29
    4372:	fa a4       	ldd	r15, Y+42	; 0x2a
    4374:	e2 0e       	add	r14, r18
    4376:	f3 1e       	adc	r15, r19
    4378:	6d 85       	ldd	r22, Y+13	; 0x0d
    437a:	7e 85       	ldd	r23, Y+14	; 0x0e
    437c:	8f 85       	ldd	r24, Y+15	; 0x0f
    437e:	98 89       	ldd	r25, Y+16	; 0x10
    4380:	29 a1       	ldd	r18, Y+33	; 0x21
    4382:	3a a1       	ldd	r19, Y+34	; 0x22
    4384:	4b a1       	ldd	r20, Y+35	; 0x23
    4386:	5c a1       	ldd	r21, Y+36	; 0x24
    4388:	0e 94 c2 31 	call	0x6384	; 0x6384 <__divmodsi4>
    438c:	89 a5       	ldd	r24, Y+41	; 0x29
    438e:	9a a5       	ldd	r25, Y+42	; 0x2a
    4390:	28 0f       	add	r18, r24
    4392:	39 1f       	adc	r19, r25
    4394:	4d 81       	ldd	r20, Y+5	; 0x05
    4396:	5e 81       	ldd	r21, Y+6	; 0x06
    4398:	6f 81       	ldd	r22, Y+7	; 0x07
    439a:	78 85       	ldd	r23, Y+8	; 0x08
    439c:	8d a1       	ldd	r24, Y+37	; 0x25
    439e:	9e a1       	ldd	r25, Y+38	; 0x26
    43a0:	af a1       	ldd	r26, Y+39	; 0x27
    43a2:	b8 a5       	ldd	r27, Y+40	; 0x28
    43a4:	48 0f       	add	r20, r24
    43a6:	59 1f       	adc	r21, r25
    43a8:	6a 1f       	adc	r22, r26
    43aa:	7b 1f       	adc	r23, r27
    43ac:	4d 83       	std	Y+5, r20	; 0x05
    43ae:	5e 83       	std	Y+6, r21	; 0x06
    43b0:	6f 83       	std	Y+7, r22	; 0x07
    43b2:	78 87       	std	Y+8, r23	; 0x08
    43b4:	4d 85       	ldd	r20, Y+13	; 0x0d
    43b6:	5e 85       	ldd	r21, Y+14	; 0x0e
    43b8:	6f 85       	ldd	r22, Y+15	; 0x0f
    43ba:	78 89       	ldd	r23, Y+16	; 0x10
    43bc:	89 8d       	ldd	r24, Y+25	; 0x19
    43be:	9a 8d       	ldd	r25, Y+26	; 0x1a
    43c0:	ab 8d       	ldd	r26, Y+27	; 0x1b
    43c2:	bc 8d       	ldd	r27, Y+28	; 0x1c
    43c4:	48 0f       	add	r20, r24
    43c6:	59 1f       	adc	r21, r25
    43c8:	6a 1f       	adc	r22, r26
    43ca:	7b 1f       	adc	r23, r27
    43cc:	4d 87       	std	Y+13, r20	; 0x0d
    43ce:	5e 87       	std	Y+14, r21	; 0x0e
    43d0:	6f 87       	std	Y+15, r22	; 0x0f
    43d2:	78 8b       	std	Y+16, r23	; 0x10
    43d4:	2e 15       	cp	r18, r14
    43d6:	3f 05       	cpc	r19, r15
    43d8:	2c f4       	brge	.+10     	; 0x43e4 <_ZN12Adafruit_GFX12fillTriangleEiiiiiij+0x25c>
    43da:	9e 2d       	mov	r25, r14
    43dc:	8f 2d       	mov	r24, r15
    43de:	79 01       	movw	r14, r18
    43e0:	29 2f       	mov	r18, r25
    43e2:	38 2f       	mov	r19, r24
    43e4:	2e 19       	sub	r18, r14
    43e6:	3f 09       	sbc	r19, r15
    43e8:	2f 5f       	subi	r18, 0xFF	; 255
    43ea:	3f 4f       	sbci	r19, 0xFF	; 255
    43ec:	a9 81       	ldd	r26, Y+1	; 0x01
    43ee:	ba 81       	ldd	r27, Y+2	; 0x02
    43f0:	ed 91       	ld	r30, X+
    43f2:	fc 91       	ld	r31, X
    43f4:	11 97       	sbiw	r26, 0x01	; 1
    43f6:	02 88       	ldd	r0, Z+18	; 0x12
    43f8:	f3 89       	ldd	r31, Z+19	; 0x13
    43fa:	e0 2d       	mov	r30, r0
    43fc:	09 89       	ldd	r16, Y+17	; 0x11
    43fe:	1a 89       	ldd	r17, Y+18	; 0x12
    4400:	a5 01       	movw	r20, r10
    4402:	b7 01       	movw	r22, r14
    4404:	cd 01       	movw	r24, r26
    4406:	09 95       	icall
    4408:	bf ef       	ldi	r27, 0xFF	; 255
    440a:	ab 1a       	sub	r10, r27
    440c:	bb 0a       	sbc	r11, r27
    440e:	a0 cf       	rjmp	.-192    	; 0x4350 <_ZN12Adafruit_GFX12fillTriangleEiiiiiij+0x1c8>
    4410:	92 01       	movw	r18, r4
    4412:	05 2c       	mov	r0, r5
    4414:	00 0c       	add	r0, r0
    4416:	44 0b       	sbc	r20, r20
    4418:	55 0b       	sbc	r21, r21
    441a:	2d 83       	std	Y+5, r18	; 0x05
    441c:	3e 83       	std	Y+6, r19	; 0x06
    441e:	4f 83       	std	Y+7, r20	; 0x07
    4420:	58 87       	std	Y+8, r21	; 0x08
    4422:	d5 01       	movw	r26, r10
    4424:	a6 19       	sub	r26, r6
    4426:	b7 09       	sbc	r27, r7
    4428:	92 01       	movw	r18, r4
    442a:	0e 94 e1 31 	call	0x63c2	; 0x63c2 <__mulhisi3>
    442e:	2b 01       	movw	r4, r22
    4430:	3c 01       	movw	r6, r24
    4432:	d5 01       	movw	r26, r10
    4434:	a8 19       	sub	r26, r8
    4436:	b9 09       	sbc	r27, r9
    4438:	96 01       	movw	r18, r12
    443a:	0e 94 e1 31 	call	0x63c2	; 0x63c2 <__mulhisi3>
    443e:	6b 01       	movw	r12, r22
    4440:	7c 01       	movw	r14, r24
    4442:	4b 89       	ldd	r20, Y+19	; 0x13
    4444:	5c 89       	ldd	r21, Y+20	; 0x14
    4446:	05 2e       	mov	r0, r21
    4448:	00 0c       	add	r0, r0
    444a:	66 0b       	sbc	r22, r22
    444c:	77 0b       	sbc	r23, r23
    444e:	4b 8b       	std	Y+19, r20	; 0x13
    4450:	5c 8b       	std	Y+20, r21	; 0x14
    4452:	6d 8b       	std	Y+21, r22	; 0x15
    4454:	7e 8b       	std	Y+22, r23	; 0x16
    4456:	69 85       	ldd	r22, Y+9	; 0x09
    4458:	7a 85       	ldd	r23, Y+10	; 0x0a
    445a:	07 2e       	mov	r0, r23
    445c:	00 0c       	add	r0, r0
    445e:	88 0b       	sbc	r24, r24
    4460:	99 0b       	sbc	r25, r25
    4462:	69 87       	std	Y+9, r22	; 0x09
    4464:	7a 87       	std	Y+10, r23	; 0x0a
    4466:	8b 87       	std	Y+11, r24	; 0x0b
    4468:	9c 87       	std	Y+12, r25	; 0x0c
    446a:	8b 81       	ldd	r24, Y+3	; 0x03
    446c:	9c 81       	ldd	r25, Y+4	; 0x04
    446e:	8a 15       	cp	r24, r10
    4470:	9b 05       	cpc	r25, r11
    4472:	0c f4       	brge	.+2      	; 0x4476 <_ZN12Adafruit_GFX12fillTriangleEiiiiiij+0x2ee>
    4474:	45 c0       	rjmp	.+138    	; 0x4500 <_ZN12Adafruit_GFX12fillTriangleEiiiiiij+0x378>
    4476:	c3 01       	movw	r24, r6
    4478:	b2 01       	movw	r22, r4
    447a:	2b 89       	ldd	r18, Y+19	; 0x13
    447c:	3c 89       	ldd	r19, Y+20	; 0x14
    447e:	4d 89       	ldd	r20, Y+21	; 0x15
    4480:	5e 89       	ldd	r21, Y+22	; 0x16
    4482:	0e 94 c2 31 	call	0x6384	; 0x6384 <__divmodsi4>
    4486:	41 01       	movw	r8, r2
    4488:	82 0e       	add	r8, r18
    448a:	93 1e       	adc	r9, r19
    448c:	c7 01       	movw	r24, r14
    448e:	b6 01       	movw	r22, r12
    4490:	29 85       	ldd	r18, Y+9	; 0x09
    4492:	3a 85       	ldd	r19, Y+10	; 0x0a
    4494:	4b 85       	ldd	r20, Y+11	; 0x0b
    4496:	5c 85       	ldd	r21, Y+12	; 0x0c
    4498:	0e 94 c2 31 	call	0x6384	; 0x6384 <__divmodsi4>
    449c:	a9 a5       	ldd	r26, Y+41	; 0x29
    449e:	ba a5       	ldd	r27, Y+42	; 0x2a
    44a0:	2a 0f       	add	r18, r26
    44a2:	3b 1f       	adc	r19, r27
    44a4:	4d 81       	ldd	r20, Y+5	; 0x05
    44a6:	5e 81       	ldd	r21, Y+6	; 0x06
    44a8:	6f 81       	ldd	r22, Y+7	; 0x07
    44aa:	78 85       	ldd	r23, Y+8	; 0x08
    44ac:	44 0e       	add	r4, r20
    44ae:	55 1e       	adc	r5, r21
    44b0:	66 1e       	adc	r6, r22
    44b2:	77 1e       	adc	r7, r23
    44b4:	69 8d       	ldd	r22, Y+25	; 0x19
    44b6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    44b8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    44ba:	9c 8d       	ldd	r25, Y+28	; 0x1c
    44bc:	c6 0e       	add	r12, r22
    44be:	d7 1e       	adc	r13, r23
    44c0:	e8 1e       	adc	r14, r24
    44c2:	f9 1e       	adc	r15, r25
    44c4:	28 15       	cp	r18, r8
    44c6:	39 05       	cpc	r19, r9
    44c8:	2c f4       	brge	.+10     	; 0x44d4 <_ZN12Adafruit_GFX12fillTriangleEiiiiiij+0x34c>
    44ca:	98 2d       	mov	r25, r8
    44cc:	89 2d       	mov	r24, r9
    44ce:	49 01       	movw	r8, r18
    44d0:	29 2f       	mov	r18, r25
    44d2:	38 2f       	mov	r19, r24
    44d4:	28 19       	sub	r18, r8
    44d6:	39 09       	sbc	r19, r9
    44d8:	2f 5f       	subi	r18, 0xFF	; 255
    44da:	3f 4f       	sbci	r19, 0xFF	; 255
    44dc:	a9 81       	ldd	r26, Y+1	; 0x01
    44de:	ba 81       	ldd	r27, Y+2	; 0x02
    44e0:	ed 91       	ld	r30, X+
    44e2:	fc 91       	ld	r31, X
    44e4:	11 97       	sbiw	r26, 0x01	; 1
    44e6:	02 88       	ldd	r0, Z+18	; 0x12
    44e8:	f3 89       	ldd	r31, Z+19	; 0x13
    44ea:	e0 2d       	mov	r30, r0
    44ec:	09 89       	ldd	r16, Y+17	; 0x11
    44ee:	1a 89       	ldd	r17, Y+18	; 0x12
    44f0:	a5 01       	movw	r20, r10
    44f2:	b4 01       	movw	r22, r8
    44f4:	cd 01       	movw	r24, r26
    44f6:	09 95       	icall
    44f8:	bf ef       	ldi	r27, 0xFF	; 255
    44fa:	ab 1a       	sub	r10, r27
    44fc:	bb 0a       	sbc	r11, r27
    44fe:	b5 cf       	rjmp	.-150    	; 0x446a <_ZN12Adafruit_GFX12fillTriangleEiiiiiij+0x2e2>
    4500:	a9 81       	ldd	r26, Y+1	; 0x01
    4502:	ba 81       	ldd	r27, Y+2	; 0x02
    4504:	ed 91       	ld	r30, X+
    4506:	fc 91       	ld	r31, X
    4508:	11 97       	sbiw	r26, 0x01	; 1
    450a:	06 88       	ldd	r0, Z+22	; 0x16
    450c:	f7 89       	ldd	r31, Z+23	; 0x17
    450e:	e0 2d       	mov	r30, r0
    4510:	cd 01       	movw	r24, r26
    4512:	aa 96       	adiw	r28, 0x2a	; 42
    4514:	0f b6       	in	r0, 0x3f	; 63
    4516:	f8 94       	cli
    4518:	de bf       	out	0x3e, r29	; 62
    451a:	0f be       	out	0x3f, r0	; 63
    451c:	cd bf       	out	0x3d, r28	; 61
    451e:	df 91       	pop	r29
    4520:	cf 91       	pop	r28
    4522:	1f 91       	pop	r17
    4524:	0f 91       	pop	r16
    4526:	ff 90       	pop	r15
    4528:	ef 90       	pop	r14
    452a:	df 90       	pop	r13
    452c:	cf 90       	pop	r12
    452e:	bf 90       	pop	r11
    4530:	af 90       	pop	r10
    4532:	9f 90       	pop	r9
    4534:	8f 90       	pop	r8
    4536:	7f 90       	pop	r7
    4538:	6f 90       	pop	r6
    453a:	5f 90       	pop	r5
    453c:	4f 90       	pop	r4
    453e:	3f 90       	pop	r3
    4540:	2f 90       	pop	r2
    4542:	09 94       	ijmp
    4544:	dc 82       	std	Y+4, r13	; 0x04
    4546:	cb 82       	std	Y+3, r12	; 0x03
    4548:	57 01       	movw	r10, r14
    454a:	6e ce       	rjmp	.-804    	; 0x4228 <_ZN12Adafruit_GFX12fillTriangleEiiiiiij+0xa0>

0000454c <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij>:
    454c:	3f 92       	push	r3
    454e:	4f 92       	push	r4
    4550:	5f 92       	push	r5
    4552:	6f 92       	push	r6
    4554:	7f 92       	push	r7
    4556:	8f 92       	push	r8
    4558:	9f 92       	push	r9
    455a:	af 92       	push	r10
    455c:	bf 92       	push	r11
    455e:	cf 92       	push	r12
    4560:	df 92       	push	r13
    4562:	ef 92       	push	r14
    4564:	ff 92       	push	r15
    4566:	0f 93       	push	r16
    4568:	1f 93       	push	r17
    456a:	cf 93       	push	r28
    456c:	df 93       	push	r29
    456e:	cd b7       	in	r28, 0x3d	; 61
    4570:	de b7       	in	r29, 0x3e	; 62
    4572:	2a 97       	sbiw	r28, 0x0a	; 10
    4574:	0f b6       	in	r0, 0x3f	; 63
    4576:	f8 94       	cli
    4578:	de bf       	out	0x3e, r29	; 62
    457a:	0f be       	out	0x3f, r0	; 63
    457c:	cd bf       	out	0x3d, r28	; 61
    457e:	5c 01       	movw	r10, r24
    4580:	7e 83       	std	Y+6, r23	; 0x06
    4582:	6d 83       	std	Y+5, r22	; 0x05
    4584:	58 87       	std	Y+8, r21	; 0x08
    4586:	4f 83       	std	Y+7, r20	; 0x07
    4588:	29 01       	movw	r4, r18
    458a:	37 01       	movw	r6, r14
    458c:	dc 01       	movw	r26, r24
    458e:	ed 91       	ld	r30, X+
    4590:	fc 91       	ld	r31, X
    4592:	02 84       	ldd	r0, Z+10	; 0x0a
    4594:	f3 85       	ldd	r31, Z+11	; 0x0b
    4596:	e0 2d       	mov	r30, r0
    4598:	09 95       	icall
    459a:	c8 01       	movw	r24, r16
    459c:	07 96       	adiw	r24, 0x07	; 7
    459e:	97 fd       	sbrc	r25, 7
    45a0:	07 96       	adiw	r24, 0x07	; 7
    45a2:	9c 01       	movw	r18, r24
    45a4:	93 e0       	ldi	r25, 0x03	; 3
    45a6:	35 95       	asr	r19
    45a8:	27 95       	ror	r18
    45aa:	9a 95       	dec	r25
    45ac:	e1 f7       	brne	.-8      	; 0x45a6 <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij+0x5a>
    45ae:	3a 83       	std	Y+2, r19	; 0x02
    45b0:	29 83       	std	Y+1, r18	; 0x01
    45b2:	81 2c       	mov	r8, r1
    45b4:	91 2c       	mov	r9, r1
    45b6:	e1 2c       	mov	r14, r1
    45b8:	f1 2c       	mov	r15, r1
    45ba:	31 2c       	mov	r3, r1
    45bc:	8f 81       	ldd	r24, Y+7	; 0x07
    45be:	98 85       	ldd	r25, Y+8	; 0x08
    45c0:	8e 0d       	add	r24, r14
    45c2:	9f 1d       	adc	r25, r15
    45c4:	9c 83       	std	Y+4, r25	; 0x04
    45c6:	8b 83       	std	Y+3, r24	; 0x03
    45c8:	e6 14       	cp	r14, r6
    45ca:	f7 04       	cpc	r15, r7
    45cc:	0c f0       	brlt	.+2      	; 0x45d0 <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij+0x84>
    45ce:	3d c0       	rjmp	.+122    	; 0x464a <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij+0xfe>
    45d0:	1a 86       	std	Y+10, r1	; 0x0a
    45d2:	19 86       	std	Y+9, r1	; 0x09
    45d4:	a9 85       	ldd	r26, Y+9	; 0x09
    45d6:	ba 85       	ldd	r27, Y+10	; 0x0a
    45d8:	a0 17       	cp	r26, r16
    45da:	b1 07       	cpc	r27, r17
    45dc:	74 f5       	brge	.+92     	; 0x463a <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij+0xee>
    45de:	cd 01       	movw	r24, r26
    45e0:	87 70       	andi	r24, 0x07	; 7
    45e2:	99 27       	eor	r25, r25
    45e4:	89 2b       	or	r24, r25
    45e6:	11 f0       	breq	.+4      	; 0x45ec <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij+0xa0>
    45e8:	33 0c       	add	r3, r3
    45ea:	0e c0       	rjmp	.+28     	; 0x4608 <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij+0xbc>
    45ec:	e9 85       	ldd	r30, Y+9	; 0x09
    45ee:	fa 85       	ldd	r31, Y+10	; 0x0a
    45f0:	f7 fd       	sbrc	r31, 7
    45f2:	37 96       	adiw	r30, 0x07	; 7
    45f4:	83 e0       	ldi	r24, 0x03	; 3
    45f6:	f5 95       	asr	r31
    45f8:	e7 95       	ror	r30
    45fa:	8a 95       	dec	r24
    45fc:	e1 f7       	brne	.-8      	; 0x45f6 <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij+0xaa>
    45fe:	e8 0d       	add	r30, r8
    4600:	f9 1d       	adc	r31, r9
    4602:	e4 0d       	add	r30, r4
    4604:	f5 1d       	adc	r31, r5
    4606:	34 90       	lpm	r3, Z
    4608:	37 fe       	sbrs	r3, 7
    460a:	11 c0       	rjmp	.+34     	; 0x462e <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij+0xe2>
    460c:	d5 01       	movw	r26, r10
    460e:	ed 91       	ld	r30, X+
    4610:	fc 91       	ld	r31, X
    4612:	04 84       	ldd	r0, Z+12	; 0x0c
    4614:	f5 85       	ldd	r31, Z+13	; 0x0d
    4616:	e0 2d       	mov	r30, r0
    4618:	96 01       	movw	r18, r12
    461a:	4b 81       	ldd	r20, Y+3	; 0x03
    461c:	5c 81       	ldd	r21, Y+4	; 0x04
    461e:	6d 81       	ldd	r22, Y+5	; 0x05
    4620:	7e 81       	ldd	r23, Y+6	; 0x06
    4622:	89 85       	ldd	r24, Y+9	; 0x09
    4624:	9a 85       	ldd	r25, Y+10	; 0x0a
    4626:	68 0f       	add	r22, r24
    4628:	79 1f       	adc	r23, r25
    462a:	c5 01       	movw	r24, r10
    462c:	09 95       	icall
    462e:	a9 85       	ldd	r26, Y+9	; 0x09
    4630:	ba 85       	ldd	r27, Y+10	; 0x0a
    4632:	11 96       	adiw	r26, 0x01	; 1
    4634:	ba 87       	std	Y+10, r27	; 0x0a
    4636:	a9 87       	std	Y+9, r26	; 0x09
    4638:	cd cf       	rjmp	.-102    	; 0x45d4 <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij+0x88>
    463a:	bf ef       	ldi	r27, 0xFF	; 255
    463c:	eb 1a       	sub	r14, r27
    463e:	fb 0a       	sbc	r15, r27
    4640:	29 81       	ldd	r18, Y+1	; 0x01
    4642:	3a 81       	ldd	r19, Y+2	; 0x02
    4644:	82 0e       	add	r8, r18
    4646:	93 1e       	adc	r9, r19
    4648:	b9 cf       	rjmp	.-142    	; 0x45bc <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij+0x70>
    464a:	d5 01       	movw	r26, r10
    464c:	ed 91       	ld	r30, X+
    464e:	fc 91       	ld	r31, X
    4650:	06 88       	ldd	r0, Z+22	; 0x16
    4652:	f7 89       	ldd	r31, Z+23	; 0x17
    4654:	e0 2d       	mov	r30, r0
    4656:	c5 01       	movw	r24, r10
    4658:	2a 96       	adiw	r28, 0x0a	; 10
    465a:	0f b6       	in	r0, 0x3f	; 63
    465c:	f8 94       	cli
    465e:	de bf       	out	0x3e, r29	; 62
    4660:	0f be       	out	0x3f, r0	; 63
    4662:	cd bf       	out	0x3d, r28	; 61
    4664:	df 91       	pop	r29
    4666:	cf 91       	pop	r28
    4668:	1f 91       	pop	r17
    466a:	0f 91       	pop	r16
    466c:	ff 90       	pop	r15
    466e:	ef 90       	pop	r14
    4670:	df 90       	pop	r13
    4672:	cf 90       	pop	r12
    4674:	bf 90       	pop	r11
    4676:	af 90       	pop	r10
    4678:	9f 90       	pop	r9
    467a:	8f 90       	pop	r8
    467c:	7f 90       	pop	r7
    467e:	6f 90       	pop	r6
    4680:	5f 90       	pop	r5
    4682:	4f 90       	pop	r4
    4684:	3f 90       	pop	r3
    4686:	09 94       	ijmp

00004688 <_ZN12Adafruit_GFX8drawCharEiihjjhh>:
    4688:	2f 92       	push	r2
    468a:	3f 92       	push	r3
    468c:	4f 92       	push	r4
    468e:	5f 92       	push	r5
    4690:	6f 92       	push	r6
    4692:	7f 92       	push	r7
    4694:	8f 92       	push	r8
    4696:	9f 92       	push	r9
    4698:	af 92       	push	r10
    469a:	bf 92       	push	r11
    469c:	cf 92       	push	r12
    469e:	df 92       	push	r13
    46a0:	ef 92       	push	r14
    46a2:	ff 92       	push	r15
    46a4:	0f 93       	push	r16
    46a6:	1f 93       	push	r17
    46a8:	cf 93       	push	r28
    46aa:	df 93       	push	r29
    46ac:	cd b7       	in	r28, 0x3d	; 61
    46ae:	de b7       	in	r29, 0x3e	; 62
    46b0:	6b 97       	sbiw	r28, 0x1b	; 27
    46b2:	0f b6       	in	r0, 0x3f	; 63
    46b4:	f8 94       	cli
    46b6:	de bf       	out	0x3e, r29	; 62
    46b8:	0f be       	out	0x3f, r0	; 63
    46ba:	cd bf       	out	0x3d, r28	; 61
    46bc:	9b 8f       	std	Y+27, r25	; 0x1b
    46be:	8a 8f       	std	Y+26, r24	; 0x1a
    46c0:	2b 01       	movw	r4, r22
    46c2:	5a 83       	std	Y+2, r21	; 0x02
    46c4:	49 83       	std	Y+1, r20	; 0x01
    46c6:	d2 2e       	mov	r13, r18
    46c8:	19 87       	std	Y+9, r17	; 0x09
    46ca:	08 87       	std	Y+8, r16	; 0x08
    46cc:	47 01       	movw	r8, r14
    46ce:	ab 82       	std	Y+3, r10	; 0x03
    46d0:	dc 01       	movw	r26, r24
    46d2:	59 96       	adiw	r26, 0x19	; 25
    46d4:	2d 91       	ld	r18, X+
    46d6:	3c 91       	ld	r19, X
    46d8:	5a 97       	sbiw	r26, 0x1a	; 26
    46da:	21 15       	cp	r18, r1
    46dc:	31 05       	cpc	r19, r1
    46de:	09 f0       	breq	.+2      	; 0x46e2 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x5a>
    46e0:	00 c1       	rjmp	.+512    	; 0x48e2 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x25a>
    46e2:	18 96       	adiw	r26, 0x08	; 8
    46e4:	8d 91       	ld	r24, X+
    46e6:	9c 91       	ld	r25, X
    46e8:	19 97       	sbiw	r26, 0x09	; 9
    46ea:	68 17       	cp	r22, r24
    46ec:	79 07       	cpc	r23, r25
    46ee:	0c f0       	brlt	.+2      	; 0x46f2 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x6a>
    46f0:	e7 c1       	rjmp	.+974    	; 0x4ac0 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x438>
    46f2:	1a 96       	adiw	r26, 0x0a	; 10
    46f4:	8d 91       	ld	r24, X+
    46f6:	9c 91       	ld	r25, X
    46f8:	1b 97       	sbiw	r26, 0x0b	; 11
    46fa:	48 17       	cp	r20, r24
    46fc:	59 07       	cpc	r21, r25
    46fe:	0c f0       	brlt	.+2      	; 0x4702 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x7a>
    4700:	df c1       	rjmp	.+958    	; 0x4ac0 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x438>
    4702:	2c 2c       	mov	r2, r12
    4704:	31 2c       	mov	r3, r1
    4706:	fb 01       	movw	r30, r22
    4708:	26 e0       	ldi	r18, 0x06	; 6
    470a:	c2 9e       	mul	r12, r18
    470c:	e0 0d       	add	r30, r0
    470e:	f1 1d       	adc	r31, r1
    4710:	11 24       	eor	r1, r1
    4712:	fd 87       	std	Y+13, r31	; 0x0d
    4714:	ec 87       	std	Y+12, r30	; 0x0c
    4716:	1e 16       	cp	r1, r30
    4718:	1f 06       	cpc	r1, r31
    471a:	0c f0       	brlt	.+2      	; 0x471e <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x96>
    471c:	d1 c1       	rjmp	.+930    	; 0x4ac0 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x438>
    471e:	4a 2d       	mov	r20, r10
    4720:	50 e0       	ldi	r21, 0x00	; 0
    4722:	5b 87       	std	Y+11, r21	; 0x0b
    4724:	4a 87       	std	Y+10, r20	; 0x0a
    4726:	83 e0       	ldi	r24, 0x03	; 3
    4728:	44 0f       	add	r20, r20
    472a:	55 1f       	adc	r21, r21
    472c:	8a 95       	dec	r24
    472e:	e1 f7       	brne	.-8      	; 0x4728 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0xa0>
    4730:	5f 87       	std	Y+15, r21	; 0x0f
    4732:	4e 87       	std	Y+14, r20	; 0x0e
    4734:	89 81       	ldd	r24, Y+1	; 0x01
    4736:	9a 81       	ldd	r25, Y+2	; 0x02
    4738:	84 0f       	add	r24, r20
    473a:	95 1f       	adc	r25, r21
    473c:	18 16       	cp	r1, r24
    473e:	19 06       	cpc	r1, r25
    4740:	0c f0       	brlt	.+2      	; 0x4744 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0xbc>
    4742:	be c1       	rjmp	.+892    	; 0x4ac0 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x438>
    4744:	58 96       	adiw	r26, 0x18	; 24
    4746:	8c 91       	ld	r24, X
    4748:	81 11       	cpse	r24, r1
    474a:	04 c0       	rjmp	.+8      	; 0x4754 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0xcc>
    474c:	6f ea       	ldi	r22, 0xAF	; 175
    474e:	6d 15       	cp	r22, r13
    4750:	08 f4       	brcc	.+2      	; 0x4754 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0xcc>
    4752:	d3 94       	inc	r13
    4754:	aa 8d       	ldd	r26, Y+26	; 0x1a
    4756:	bb 8d       	ldd	r27, Y+27	; 0x1b
    4758:	ed 91       	ld	r30, X+
    475a:	fc 91       	ld	r31, X
    475c:	11 97       	sbiw	r26, 0x01	; 1
    475e:	02 84       	ldd	r0, Z+10	; 0x0a
    4760:	f3 85       	ldd	r31, Z+11	; 0x0b
    4762:	e0 2d       	mov	r30, r0
    4764:	cd 01       	movw	r24, r26
    4766:	09 95       	icall
    4768:	b5 e0       	ldi	r27, 0x05	; 5
    476a:	db 9e       	mul	r13, r27
    476c:	c0 01       	movw	r24, r0
    476e:	11 24       	eor	r1, r1
    4770:	ec 2d       	mov	r30, r12
    4772:	f0 e0       	ldi	r31, 0x00	; 0
    4774:	f9 8b       	std	Y+17, r31	; 0x11
    4776:	e8 8b       	std	Y+16, r30	; 0x10
    4778:	92 01       	movw	r18, r4
    477a:	2b 5f       	subi	r18, 0xFB	; 251
    477c:	3f 4f       	sbci	r19, 0xFF	; 255
    477e:	3b 8b       	std	Y+19, r19	; 0x13
    4780:	2a 8b       	std	Y+18, r18	; 0x12
    4782:	32 01       	movw	r6, r4
    4784:	5d 82       	std	Y+5, r5	; 0x05
    4786:	4c 82       	std	Y+4, r4	; 0x04
    4788:	ac 01       	movw	r20, r24
    478a:	44 19       	sub	r20, r4
    478c:	55 09       	sbc	r21, r5
    478e:	5d 8b       	std	Y+21, r21	; 0x15
    4790:	4c 8b       	std	Y+20, r20	; 0x14
    4792:	7b 81       	ldd	r23, Y+3	; 0x03
    4794:	67 2f       	mov	r22, r23
    4796:	70 e0       	ldi	r23, 0x00	; 0
    4798:	7f 8b       	std	Y+23, r23	; 0x17
    479a:	6e 8b       	std	Y+22, r22	; 0x16
    479c:	89 81       	ldd	r24, Y+1	; 0x01
    479e:	9a 81       	ldd	r25, Y+2	; 0x02
    47a0:	08 96       	adiw	r24, 0x08	; 8
    47a2:	99 8f       	std	Y+25, r25	; 0x19
    47a4:	88 8f       	std	Y+24, r24	; 0x18
    47a6:	ec 89       	ldd	r30, Y+20	; 0x14
    47a8:	fd 89       	ldd	r31, Y+21	; 0x15
    47aa:	e6 0d       	add	r30, r6
    47ac:	f7 1d       	adc	r31, r7
    47ae:	e5 5c       	subi	r30, 0xC5	; 197
    47b0:	f6 4f       	sbci	r31, 0xF6	; 246
    47b2:	d4 90       	lpm	r13, Z
    47b4:	a9 81       	ldd	r26, Y+1	; 0x01
    47b6:	ba 81       	ldd	r27, Y+2	; 0x02
    47b8:	bf 83       	std	Y+7, r27	; 0x07
    47ba:	ae 83       	std	Y+6, r26	; 0x06
    47bc:	5d 01       	movw	r10, r26
    47be:	d0 fe       	sbrs	r13, 0
    47c0:	16 c0       	rjmp	.+44     	; 0x47ee <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x166>
    47c2:	aa 8d       	ldd	r26, Y+26	; 0x1a
    47c4:	bb 8d       	ldd	r27, Y+27	; 0x1b
    47c6:	ed 91       	ld	r30, X+
    47c8:	fc 91       	ld	r31, X
    47ca:	b1 e0       	ldi	r27, 0x01	; 1
    47cc:	cb 12       	cpse	r12, r27
    47ce:	09 c0       	rjmp	.+18     	; 0x47e2 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x15a>
    47d0:	2b 81       	ldd	r18, Y+3	; 0x03
    47d2:	21 30       	cpi	r18, 0x01	; 1
    47d4:	31 f4       	brne	.+12     	; 0x47e2 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x15a>
    47d6:	04 84       	ldd	r0, Z+12	; 0x0c
    47d8:	f5 85       	ldd	r31, Z+13	; 0x0d
    47da:	e0 2d       	mov	r30, r0
    47dc:	28 85       	ldd	r18, Y+8	; 0x08
    47de:	39 85       	ldd	r19, Y+9	; 0x09
    47e0:	19 c0       	rjmp	.+50     	; 0x4814 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x18c>
    47e2:	06 84       	ldd	r0, Z+14	; 0x0e
    47e4:	f7 85       	ldd	r31, Z+15	; 0x0f
    47e6:	e0 2d       	mov	r30, r0
    47e8:	e8 84       	ldd	r14, Y+8	; 0x08
    47ea:	f9 84       	ldd	r15, Y+9	; 0x09
    47ec:	1d c0       	rjmp	.+58     	; 0x4828 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x1a0>
    47ee:	48 85       	ldd	r20, Y+8	; 0x08
    47f0:	59 85       	ldd	r21, Y+9	; 0x09
    47f2:	48 15       	cp	r20, r8
    47f4:	59 05       	cpc	r21, r9
    47f6:	11 f1       	breq	.+68     	; 0x483c <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x1b4>
    47f8:	aa 8d       	ldd	r26, Y+26	; 0x1a
    47fa:	bb 8d       	ldd	r27, Y+27	; 0x1b
    47fc:	ed 91       	ld	r30, X+
    47fe:	fc 91       	ld	r31, X
    4800:	b1 e0       	ldi	r27, 0x01	; 1
    4802:	cb 12       	cpse	r12, r27
    4804:	0d c0       	rjmp	.+26     	; 0x4820 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x198>
    4806:	2b 81       	ldd	r18, Y+3	; 0x03
    4808:	21 30       	cpi	r18, 0x01	; 1
    480a:	51 f4       	brne	.+20     	; 0x4820 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x198>
    480c:	04 84       	ldd	r0, Z+12	; 0x0c
    480e:	f5 85       	ldd	r31, Z+13	; 0x0d
    4810:	e0 2d       	mov	r30, r0
    4812:	94 01       	movw	r18, r8
    4814:	a5 01       	movw	r20, r10
    4816:	b3 01       	movw	r22, r6
    4818:	8a 8d       	ldd	r24, Y+26	; 0x1a
    481a:	9b 8d       	ldd	r25, Y+27	; 0x1b
    481c:	09 95       	icall
    481e:	0e c0       	rjmp	.+28     	; 0x483c <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x1b4>
    4820:	06 84       	ldd	r0, Z+14	; 0x0e
    4822:	f7 85       	ldd	r31, Z+15	; 0x0f
    4824:	e0 2d       	mov	r30, r0
    4826:	74 01       	movw	r14, r8
    4828:	0a 85       	ldd	r16, Y+10	; 0x0a
    482a:	1b 85       	ldd	r17, Y+11	; 0x0b
    482c:	91 01       	movw	r18, r2
    482e:	4e 81       	ldd	r20, Y+6	; 0x06
    4830:	5f 81       	ldd	r21, Y+7	; 0x07
    4832:	6c 81       	ldd	r22, Y+4	; 0x04
    4834:	7d 81       	ldd	r23, Y+5	; 0x05
    4836:	8a 8d       	ldd	r24, Y+26	; 0x1a
    4838:	9b 8d       	ldd	r25, Y+27	; 0x1b
    483a:	09 95       	icall
    483c:	d6 94       	lsr	r13
    483e:	4e 81       	ldd	r20, Y+6	; 0x06
    4840:	5f 81       	ldd	r21, Y+7	; 0x07
    4842:	6e 89       	ldd	r22, Y+22	; 0x16
    4844:	7f 89       	ldd	r23, Y+23	; 0x17
    4846:	46 0f       	add	r20, r22
    4848:	57 1f       	adc	r21, r23
    484a:	5f 83       	std	Y+7, r21	; 0x07
    484c:	4e 83       	std	Y+6, r20	; 0x06
    484e:	7f ef       	ldi	r23, 0xFF	; 255
    4850:	a7 1a       	sub	r10, r23
    4852:	b7 0a       	sbc	r11, r23
    4854:	88 8d       	ldd	r24, Y+24	; 0x18
    4856:	99 8d       	ldd	r25, Y+25	; 0x19
    4858:	a8 16       	cp	r10, r24
    485a:	b9 06       	cpc	r11, r25
    485c:	09 f0       	breq	.+2      	; 0x4860 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x1d8>
    485e:	af cf       	rjmp	.-162    	; 0x47be <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x136>
    4860:	ac 81       	ldd	r26, Y+4	; 0x04
    4862:	bd 81       	ldd	r27, Y+5	; 0x05
    4864:	e8 89       	ldd	r30, Y+16	; 0x10
    4866:	f9 89       	ldd	r31, Y+17	; 0x11
    4868:	ae 0f       	add	r26, r30
    486a:	bf 1f       	adc	r27, r31
    486c:	bd 83       	std	Y+5, r27	; 0x05
    486e:	ac 83       	std	Y+4, r26	; 0x04
    4870:	ff ef       	ldi	r31, 0xFF	; 255
    4872:	6f 1a       	sub	r6, r31
    4874:	7f 0a       	sbc	r7, r31
    4876:	2a 89       	ldd	r18, Y+18	; 0x12
    4878:	3b 89       	ldd	r19, Y+19	; 0x13
    487a:	62 16       	cp	r6, r18
    487c:	73 06       	cpc	r7, r19
    487e:	09 f0       	breq	.+2      	; 0x4882 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x1fa>
    4880:	92 cf       	rjmp	.-220    	; 0x47a6 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x11e>
    4882:	48 85       	ldd	r20, Y+8	; 0x08
    4884:	59 85       	ldd	r21, Y+9	; 0x09
    4886:	48 15       	cp	r20, r8
    4888:	59 05       	cpc	r21, r9
    488a:	09 f4       	brne	.+2      	; 0x488e <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x206>
    488c:	f7 c0       	rjmp	.+494    	; 0x4a7c <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x3f4>
    488e:	aa 8d       	ldd	r26, Y+26	; 0x1a
    4890:	bb 8d       	ldd	r27, Y+27	; 0x1b
    4892:	ed 91       	ld	r30, X+
    4894:	fc 91       	ld	r31, X
    4896:	b1 e0       	ldi	r27, 0x01	; 1
    4898:	cb 12       	cpse	r12, r27
    489a:	12 c0       	rjmp	.+36     	; 0x48c0 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x238>
    489c:	2b 81       	ldd	r18, Y+3	; 0x03
    489e:	21 30       	cpi	r18, 0x01	; 1
    48a0:	79 f4       	brne	.+30     	; 0x48c0 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x238>
    48a2:	b2 01       	movw	r22, r4
    48a4:	6b 5f       	subi	r22, 0xFB	; 251
    48a6:	7f 4f       	sbci	r23, 0xFF	; 255
    48a8:	00 88       	ldd	r0, Z+16	; 0x10
    48aa:	f1 89       	ldd	r31, Z+17	; 0x11
    48ac:	e0 2d       	mov	r30, r0
    48ae:	84 01       	movw	r16, r8
    48b0:	28 e0       	ldi	r18, 0x08	; 8
    48b2:	30 e0       	ldi	r19, 0x00	; 0
    48b4:	49 81       	ldd	r20, Y+1	; 0x01
    48b6:	5a 81       	ldd	r21, Y+2	; 0x02
    48b8:	8a 8d       	ldd	r24, Y+26	; 0x1a
    48ba:	9b 8d       	ldd	r25, Y+27	; 0x1b
    48bc:	09 95       	icall
    48be:	de c0       	rjmp	.+444    	; 0x4a7c <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x3f4>
    48c0:	6c 85       	ldd	r22, Y+12	; 0x0c
    48c2:	7d 85       	ldd	r23, Y+13	; 0x0d
    48c4:	62 19       	sub	r22, r2
    48c6:	73 09       	sbc	r23, r3
    48c8:	06 84       	ldd	r0, Z+14	; 0x0e
    48ca:	f7 85       	ldd	r31, Z+15	; 0x0f
    48cc:	e0 2d       	mov	r30, r0
    48ce:	74 01       	movw	r14, r8
    48d0:	0e 85       	ldd	r16, Y+14	; 0x0e
    48d2:	1f 85       	ldd	r17, Y+15	; 0x0f
    48d4:	91 01       	movw	r18, r2
    48d6:	49 81       	ldd	r20, Y+1	; 0x01
    48d8:	5a 81       	ldd	r21, Y+2	; 0x02
    48da:	8a 8d       	ldd	r24, Y+26	; 0x1a
    48dc:	9b 8d       	ldd	r25, Y+27	; 0x1b
    48de:	09 95       	icall
    48e0:	cd c0       	rjmp	.+410    	; 0x4a7c <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x3f4>
    48e2:	f9 01       	movw	r30, r18
    48e4:	34 96       	adiw	r30, 0x04	; 4
    48e6:	e4 91       	lpm	r30, Z
    48e8:	de 1a       	sub	r13, r30
    48ea:	f9 01       	movw	r30, r18
    48ec:	32 96       	adiw	r30, 0x02	; 2
    48ee:	85 91       	lpm	r24, Z+
    48f0:	94 91       	lpm	r25, Z
    48f2:	b7 e0       	ldi	r27, 0x07	; 7
    48f4:	db 9e       	mul	r13, r27
    48f6:	80 0d       	add	r24, r0
    48f8:	91 1d       	adc	r25, r1
    48fa:	11 24       	eor	r1, r1
    48fc:	f9 01       	movw	r30, r18
    48fe:	25 91       	lpm	r18, Z+
    4900:	34 91       	lpm	r19, Z
    4902:	39 8b       	std	Y+17, r19	; 0x11
    4904:	28 8b       	std	Y+16, r18	; 0x10
    4906:	fc 01       	movw	r30, r24
    4908:	25 90       	lpm	r2, Z+
    490a:	34 90       	lpm	r3, Z
    490c:	fc 01       	movw	r30, r24
    490e:	32 96       	adiw	r30, 0x02	; 2
    4910:	74 90       	lpm	r7, Z
    4912:	31 96       	adiw	r30, 0x01	; 1
    4914:	a4 90       	lpm	r10, Z
    4916:	32 96       	adiw	r30, 0x02	; 2
    4918:	94 90       	lpm	r9, Z
    491a:	31 96       	adiw	r30, 0x01	; 1
    491c:	b4 90       	lpm	r11, Z
    491e:	31 e0       	ldi	r19, 0x01	; 1
    4920:	3c 15       	cp	r19, r12
    4922:	18 f0       	brcs	.+6      	; 0x492a <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x2a2>
    4924:	4b 81       	ldd	r20, Y+3	; 0x03
    4926:	42 30       	cpi	r20, 0x02	; 2
    4928:	68 f0       	brcs	.+26     	; 0x4944 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x2bc>
    492a:	69 2d       	mov	r22, r9
    492c:	09 2c       	mov	r0, r9
    492e:	00 0c       	add	r0, r0
    4930:	77 0b       	sbc	r23, r23
    4932:	7d 83       	std	Y+5, r23	; 0x05
    4934:	6c 83       	std	Y+4, r22	; 0x04
    4936:	8b 2d       	mov	r24, r11
    4938:	0b 2c       	mov	r0, r11
    493a:	00 0c       	add	r0, r0
    493c:	99 0b       	sbc	r25, r25
    493e:	9f 83       	std	Y+7, r25	; 0x07
    4940:	8e 83       	std	Y+6, r24	; 0x06
    4942:	04 c0       	rjmp	.+8      	; 0x494c <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x2c4>
    4944:	1f 82       	std	Y+7, r1	; 0x07
    4946:	1e 82       	std	Y+6, r1	; 0x06
    4948:	1d 82       	std	Y+5, r1	; 0x05
    494a:	1c 82       	std	Y+4, r1	; 0x04
    494c:	aa 8d       	ldd	r26, Y+26	; 0x1a
    494e:	bb 8d       	ldd	r27, Y+27	; 0x1b
    4950:	ed 91       	ld	r30, X+
    4952:	fc 91       	ld	r31, X
    4954:	11 97       	sbiw	r26, 0x01	; 1
    4956:	02 84       	ldd	r0, Z+10	; 0x0a
    4958:	f3 85       	ldd	r31, Z+11	; 0x0b
    495a:	e0 2d       	mov	r30, r0
    495c:	cd 01       	movw	r24, r26
    495e:	09 95       	icall
    4960:	61 2c       	mov	r6, r1
    4962:	d1 2c       	mov	r13, r1
    4964:	81 2c       	mov	r8, r1
    4966:	fb 81       	ldd	r31, Y+3	; 0x03
    4968:	ef 2f       	mov	r30, r31
    496a:	f0 e0       	ldi	r31, 0x00	; 0
    496c:	fb 87       	std	Y+11, r31	; 0x0b
    496e:	ea 87       	std	Y+10, r30	; 0x0a
    4970:	2c 2d       	mov	r18, r12
    4972:	30 e0       	ldi	r19, 0x00	; 0
    4974:	3d 87       	std	Y+13, r19	; 0x0d
    4976:	2c 87       	std	Y+12, r18	; 0x0c
    4978:	49 81       	ldd	r20, Y+1	; 0x01
    497a:	5a 81       	ldd	r21, Y+2	; 0x02
    497c:	4b 0d       	add	r20, r11
    497e:	51 1d       	adc	r21, r1
    4980:	b7 fc       	sbrc	r11, 7
    4982:	5a 95       	dec	r21
    4984:	5d 8b       	std	Y+21, r21	; 0x15
    4986:	4c 8b       	std	Y+20, r20	; 0x14
    4988:	b2 01       	movw	r22, r4
    498a:	69 0d       	add	r22, r9
    498c:	71 1d       	adc	r23, r1
    498e:	97 fc       	sbrc	r9, 7
    4990:	7a 95       	dec	r23
    4992:	7f 8b       	std	Y+23, r23	; 0x17
    4994:	6e 8b       	std	Y+22, r22	; 0x16
    4996:	8a 14       	cp	r8, r10
    4998:	08 f0       	brcs	.+2      	; 0x499c <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x314>
    499a:	70 c0       	rjmp	.+224    	; 0x4a7c <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x3f4>
    499c:	28 2d       	mov	r18, r8
    499e:	30 e0       	ldi	r19, 0x00	; 0
    49a0:	4e 81       	ldd	r20, Y+6	; 0x06
    49a2:	5f 81       	ldd	r21, Y+7	; 0x07
    49a4:	42 0f       	add	r20, r18
    49a6:	53 1f       	adc	r21, r19
    49a8:	aa 85       	ldd	r26, Y+10	; 0x0a
    49aa:	bb 85       	ldd	r27, Y+11	; 0x0b
    49ac:	a4 9f       	mul	r26, r20
    49ae:	c0 01       	movw	r24, r0
    49b0:	a5 9f       	mul	r26, r21
    49b2:	90 0d       	add	r25, r0
    49b4:	b4 9f       	mul	r27, r20
    49b6:	90 0d       	add	r25, r0
    49b8:	11 24       	eor	r1, r1
    49ba:	e9 81       	ldd	r30, Y+1	; 0x01
    49bc:	fa 81       	ldd	r31, Y+2	; 0x02
    49be:	e8 0f       	add	r30, r24
    49c0:	f9 1f       	adc	r31, r25
    49c2:	ff 87       	std	Y+15, r31	; 0x0f
    49c4:	ee 87       	std	Y+14, r30	; 0x0e
    49c6:	86 2d       	mov	r24, r6
    49c8:	91 2c       	mov	r9, r1
    49ca:	4c 89       	ldd	r20, Y+20	; 0x14
    49cc:	5d 89       	ldd	r21, Y+21	; 0x15
    49ce:	42 0f       	add	r20, r18
    49d0:	53 1f       	adc	r21, r19
    49d2:	5b 8b       	std	Y+19, r21	; 0x13
    49d4:	4a 8b       	std	Y+18, r20	; 0x12
    49d6:	97 14       	cp	r9, r7
    49d8:	08 f0       	brcs	.+2      	; 0x49dc <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x354>
    49da:	4d c0       	rjmp	.+154    	; 0x4a76 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x3ee>
    49dc:	bb 24       	eor	r11, r11
    49de:	b3 94       	inc	r11
    49e0:	b8 0e       	add	r11, r24
    49e2:	87 70       	andi	r24, 0x07	; 7
    49e4:	41 f4       	brne	.+16     	; 0x49f6 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x36e>
    49e6:	c1 01       	movw	r24, r2
    49e8:	01 96       	adiw	r24, 0x01	; 1
    49ea:	e8 89       	ldd	r30, Y+16	; 0x10
    49ec:	f9 89       	ldd	r31, Y+17	; 0x11
    49ee:	e2 0d       	add	r30, r2
    49f0:	f3 1d       	adc	r31, r3
    49f2:	d4 90       	lpm	r13, Z
    49f4:	1c 01       	movw	r2, r24
    49f6:	d7 fe       	sbrs	r13, 7
    49f8:	3a c0       	rjmp	.+116    	; 0x4a6e <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x3e6>
    49fa:	51 e0       	ldi	r21, 0x01	; 1
    49fc:	c5 12       	cpse	r12, r21
    49fe:	16 c0       	rjmp	.+44     	; 0x4a2c <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x3a4>
    4a00:	6b 81       	ldd	r22, Y+3	; 0x03
    4a02:	61 30       	cpi	r22, 0x01	; 1
    4a04:	99 f4       	brne	.+38     	; 0x4a2c <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x3a4>
    4a06:	aa 8d       	ldd	r26, Y+26	; 0x1a
    4a08:	bb 8d       	ldd	r27, Y+27	; 0x1b
    4a0a:	ed 91       	ld	r30, X+
    4a0c:	fc 91       	ld	r31, X
    4a0e:	11 97       	sbiw	r26, 0x01	; 1
    4a10:	04 84       	ldd	r0, Z+12	; 0x0c
    4a12:	f5 85       	ldd	r31, Z+13	; 0x0d
    4a14:	e0 2d       	mov	r30, r0
    4a16:	28 85       	ldd	r18, Y+8	; 0x08
    4a18:	39 85       	ldd	r19, Y+9	; 0x09
    4a1a:	4a 89       	ldd	r20, Y+18	; 0x12
    4a1c:	5b 89       	ldd	r21, Y+19	; 0x13
    4a1e:	6e 89       	ldd	r22, Y+22	; 0x16
    4a20:	7f 89       	ldd	r23, Y+23	; 0x17
    4a22:	69 0d       	add	r22, r9
    4a24:	71 1d       	adc	r23, r1
    4a26:	cd 01       	movw	r24, r26
    4a28:	09 95       	icall
    4a2a:	21 c0       	rjmp	.+66     	; 0x4a6e <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x3e6>
    4a2c:	8c 81       	ldd	r24, Y+4	; 0x04
    4a2e:	9d 81       	ldd	r25, Y+5	; 0x05
    4a30:	89 0d       	add	r24, r9
    4a32:	91 1d       	adc	r25, r1
    4a34:	ec 85       	ldd	r30, Y+12	; 0x0c
    4a36:	fd 85       	ldd	r31, Y+13	; 0x0d
    4a38:	8e 9f       	mul	r24, r30
    4a3a:	b0 01       	movw	r22, r0
    4a3c:	8f 9f       	mul	r24, r31
    4a3e:	70 0d       	add	r23, r0
    4a40:	9e 9f       	mul	r25, r30
    4a42:	70 0d       	add	r23, r0
    4a44:	11 24       	eor	r1, r1
    4a46:	64 0d       	add	r22, r4
    4a48:	75 1d       	adc	r23, r5
    4a4a:	aa 8d       	ldd	r26, Y+26	; 0x1a
    4a4c:	bb 8d       	ldd	r27, Y+27	; 0x1b
    4a4e:	ed 91       	ld	r30, X+
    4a50:	fc 91       	ld	r31, X
    4a52:	11 97       	sbiw	r26, 0x01	; 1
    4a54:	06 84       	ldd	r0, Z+14	; 0x0e
    4a56:	f7 85       	ldd	r31, Z+15	; 0x0f
    4a58:	e0 2d       	mov	r30, r0
    4a5a:	e8 84       	ldd	r14, Y+8	; 0x08
    4a5c:	f9 84       	ldd	r15, Y+9	; 0x09
    4a5e:	0a 85       	ldd	r16, Y+10	; 0x0a
    4a60:	1b 85       	ldd	r17, Y+11	; 0x0b
    4a62:	2c 85       	ldd	r18, Y+12	; 0x0c
    4a64:	3d 85       	ldd	r19, Y+13	; 0x0d
    4a66:	4e 85       	ldd	r20, Y+14	; 0x0e
    4a68:	5f 85       	ldd	r21, Y+15	; 0x0f
    4a6a:	cd 01       	movw	r24, r26
    4a6c:	09 95       	icall
    4a6e:	dd 0c       	add	r13, r13
    4a70:	93 94       	inc	r9
    4a72:	8b 2d       	mov	r24, r11
    4a74:	b0 cf       	rjmp	.-160    	; 0x49d6 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x34e>
    4a76:	67 0c       	add	r6, r7
    4a78:	83 94       	inc	r8
    4a7a:	8d cf       	rjmp	.-230    	; 0x4996 <_ZN12Adafruit_GFX8drawCharEiihjjhh+0x30e>
    4a7c:	aa 8d       	ldd	r26, Y+26	; 0x1a
    4a7e:	bb 8d       	ldd	r27, Y+27	; 0x1b
    4a80:	ed 91       	ld	r30, X+
    4a82:	fc 91       	ld	r31, X
    4a84:	11 97       	sbiw	r26, 0x01	; 1
    4a86:	06 88       	ldd	r0, Z+22	; 0x16
    4a88:	f7 89       	ldd	r31, Z+23	; 0x17
    4a8a:	e0 2d       	mov	r30, r0
    4a8c:	cd 01       	movw	r24, r26
    4a8e:	6b 96       	adiw	r28, 0x1b	; 27
    4a90:	0f b6       	in	r0, 0x3f	; 63
    4a92:	f8 94       	cli
    4a94:	de bf       	out	0x3e, r29	; 62
    4a96:	0f be       	out	0x3f, r0	; 63
    4a98:	cd bf       	out	0x3d, r28	; 61
    4a9a:	df 91       	pop	r29
    4a9c:	cf 91       	pop	r28
    4a9e:	1f 91       	pop	r17
    4aa0:	0f 91       	pop	r16
    4aa2:	ff 90       	pop	r15
    4aa4:	ef 90       	pop	r14
    4aa6:	df 90       	pop	r13
    4aa8:	cf 90       	pop	r12
    4aaa:	bf 90       	pop	r11
    4aac:	af 90       	pop	r10
    4aae:	9f 90       	pop	r9
    4ab0:	8f 90       	pop	r8
    4ab2:	7f 90       	pop	r7
    4ab4:	6f 90       	pop	r6
    4ab6:	5f 90       	pop	r5
    4ab8:	4f 90       	pop	r4
    4aba:	3f 90       	pop	r3
    4abc:	2f 90       	pop	r2
    4abe:	09 94       	ijmp
    4ac0:	6b 96       	adiw	r28, 0x1b	; 27
    4ac2:	0f b6       	in	r0, 0x3f	; 63
    4ac4:	f8 94       	cli
    4ac6:	de bf       	out	0x3e, r29	; 62
    4ac8:	0f be       	out	0x3f, r0	; 63
    4aca:	cd bf       	out	0x3d, r28	; 61
    4acc:	df 91       	pop	r29
    4ace:	cf 91       	pop	r28
    4ad0:	1f 91       	pop	r17
    4ad2:	0f 91       	pop	r16
    4ad4:	ff 90       	pop	r15
    4ad6:	ef 90       	pop	r14
    4ad8:	df 90       	pop	r13
    4ada:	cf 90       	pop	r12
    4adc:	bf 90       	pop	r11
    4ade:	af 90       	pop	r10
    4ae0:	9f 90       	pop	r9
    4ae2:	8f 90       	pop	r8
    4ae4:	7f 90       	pop	r7
    4ae6:	6f 90       	pop	r6
    4ae8:	5f 90       	pop	r5
    4aea:	4f 90       	pop	r4
    4aec:	3f 90       	pop	r3
    4aee:	2f 90       	pop	r2
    4af0:	08 95       	ret

00004af2 <_ZN12Adafruit_GFX5writeEh>:
/*!
    @brief  Print one byte/character of data, used to support print()
    @param  c  The 8-bit ascii character to write
*/
/**************************************************************************/
size_t Adafruit_GFX::write(uint8_t c) {
    4af2:	8f 92       	push	r8
    4af4:	9f 92       	push	r9
    4af6:	af 92       	push	r10
    4af8:	cf 92       	push	r12
    4afa:	ef 92       	push	r14
    4afc:	ff 92       	push	r15
    4afe:	0f 93       	push	r16
    4b00:	1f 93       	push	r17
    4b02:	cf 93       	push	r28
    4b04:	df 93       	push	r29
    4b06:	ec 01       	movw	r28, r24
    4b08:	26 2f       	mov	r18, r22
  if (!gfxFont) { // 'Classic' built-in font
    4b0a:	89 8d       	ldd	r24, Y+25	; 0x19
    4b0c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    4b0e:	00 97       	sbiw	r24, 0x00	; 0
    4b10:	09 f0       	breq	.+2      	; 0x4b14 <_ZN12Adafruit_GFX5writeEh+0x22>
    4b12:	42 c0       	rjmp	.+132    	; 0x4b98 <_ZN12Adafruit_GFX5writeEh+0xa6>

    if (c == '\n') {              // Newline?
    4b14:	6a 30       	cpi	r22, 0x0A	; 10
    4b16:	59 f4       	brne	.+22     	; 0x4b2e <_ZN12Adafruit_GFX5writeEh+0x3c>
      cursor_x = 0;               // Reset x to zero,
    4b18:	1d 86       	std	Y+13, r1	; 0x0d
    4b1a:	1c 86       	std	Y+12, r1	; 0x0c
      cursor_y += textsize_y * 8; // advance y one line
    4b1c:	2d 89       	ldd	r18, Y+21	; 0x15
    4b1e:	8e 85       	ldd	r24, Y+14	; 0x0e
    4b20:	9f 85       	ldd	r25, Y+15	; 0x0f
    4b22:	38 e0       	ldi	r19, 0x08	; 8
    4b24:	23 9f       	mul	r18, r19
    4b26:	80 0d       	add	r24, r0
    4b28:	91 1d       	adc	r25, r1
    4b2a:	11 24       	eor	r1, r1
    4b2c:	43 c0       	rjmp	.+134    	; 0x4bb4 <_ZN12Adafruit_GFX5writeEh+0xc2>
    } else if (c != '\r') {       // Ignore carriage returns
    4b2e:	6d 30       	cpi	r22, 0x0D	; 13
    4b30:	09 f4       	brne	.+2      	; 0x4b34 <_ZN12Adafruit_GFX5writeEh+0x42>
    4b32:	aa c0       	rjmp	.+340    	; 0x4c88 <_ZN12Adafruit_GFX5writeEh+0x196>
      if (wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
    4b34:	8f 89       	ldd	r24, Y+23	; 0x17
    4b36:	88 23       	and	r24, r24
    4b38:	c9 f0       	breq	.+50     	; 0x4b6c <_ZN12Adafruit_GFX5writeEh+0x7a>
    4b3a:	3c 89       	ldd	r19, Y+20	; 0x14
    4b3c:	8c 85       	ldd	r24, Y+12	; 0x0c
    4b3e:	9d 85       	ldd	r25, Y+13	; 0x0d
    4b40:	46 e0       	ldi	r20, 0x06	; 6
    4b42:	34 9f       	mul	r19, r20
    4b44:	80 0d       	add	r24, r0
    4b46:	91 1d       	adc	r25, r1
    4b48:	11 24       	eor	r1, r1
    4b4a:	48 85       	ldd	r20, Y+8	; 0x08
    4b4c:	59 85       	ldd	r21, Y+9	; 0x09
    4b4e:	48 17       	cp	r20, r24
    4b50:	59 07       	cpc	r21, r25
    4b52:	64 f4       	brge	.+24     	; 0x4b6c <_ZN12Adafruit_GFX5writeEh+0x7a>
        cursor_x = 0;                                       // Reset x to zero,
    4b54:	1d 86       	std	Y+13, r1	; 0x0d
    4b56:	1c 86       	std	Y+12, r1	; 0x0c
        cursor_y += textsize_y * 8; // advance y one line
    4b58:	3d 89       	ldd	r19, Y+21	; 0x15
    4b5a:	8e 85       	ldd	r24, Y+14	; 0x0e
    4b5c:	9f 85       	ldd	r25, Y+15	; 0x0f
    4b5e:	48 e0       	ldi	r20, 0x08	; 8
    4b60:	34 9f       	mul	r19, r20
    4b62:	80 0d       	add	r24, r0
    4b64:	91 1d       	adc	r25, r1
    4b66:	11 24       	eor	r1, r1
    4b68:	9f 87       	std	Y+15, r25	; 0x0f
    4b6a:	8e 87       	std	Y+14, r24	; 0x0e
      }
      drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x,
               textsize_y);
    4b6c:	ea 88       	ldd	r14, Y+18	; 0x12
    4b6e:	fb 88       	ldd	r15, Y+19	; 0x13
    4b70:	08 89       	ldd	r16, Y+16	; 0x10
    4b72:	19 89       	ldd	r17, Y+17	; 0x11
    4b74:	4e 85       	ldd	r20, Y+14	; 0x0e
    4b76:	5f 85       	ldd	r21, Y+15	; 0x0f
    4b78:	6c 85       	ldd	r22, Y+12	; 0x0c
    4b7a:	7d 85       	ldd	r23, Y+13	; 0x0d
    4b7c:	ad 88       	ldd	r10, Y+21	; 0x15
    4b7e:	cc 88       	ldd	r12, Y+20	; 0x14
    4b80:	ce 01       	movw	r24, r28
    4b82:	0e 94 44 23 	call	0x4688	; 0x4688 <_ZN12Adafruit_GFX8drawCharEiihjjhh>
      cursor_x += textsize_x * 6; // Advance x one char
    4b86:	2c 89       	ldd	r18, Y+20	; 0x14
    4b88:	8c 85       	ldd	r24, Y+12	; 0x0c
    4b8a:	9d 85       	ldd	r25, Y+13	; 0x0d
    4b8c:	36 e0       	ldi	r19, 0x06	; 6
    4b8e:	23 9f       	mul	r18, r19
    4b90:	80 0d       	add	r24, r0
    4b92:	91 1d       	adc	r25, r1
    4b94:	11 24       	eor	r1, r1
    4b96:	3e c0       	rjmp	.+124    	; 0x4c14 <_ZN12Adafruit_GFX5writeEh+0x122>
    }

  } else { // Custom font

    if (c == '\n') {
    4b98:	6a 30       	cpi	r22, 0x0A	; 10
    4b9a:	79 f4       	brne	.+30     	; 0x4bba <_ZN12Adafruit_GFX5writeEh+0xc8>
      cursor_x = 0;
    4b9c:	1d 86       	std	Y+13, r1	; 0x0d
    4b9e:	1c 86       	std	Y+12, r1	; 0x0c
      cursor_y +=
          (int16_t)textsize_y * (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
    4ba0:	2d 89       	ldd	r18, Y+21	; 0x15
    4ba2:	fc 01       	movw	r30, r24
    4ba4:	38 96       	adiw	r30, 0x08	; 8
    4ba6:	e4 91       	lpm	r30, Z
    4ba8:	8e 85       	ldd	r24, Y+14	; 0x0e
    4baa:	9f 85       	ldd	r25, Y+15	; 0x0f
    4bac:	2e 9f       	mul	r18, r30
    4bae:	80 0d       	add	r24, r0
    4bb0:	91 1d       	adc	r25, r1
    4bb2:	11 24       	eor	r1, r1
    4bb4:	9f 87       	std	Y+15, r25	; 0x0f
    4bb6:	8e 87       	std	Y+14, r24	; 0x0e
    4bb8:	67 c0       	rjmp	.+206    	; 0x4c88 <_ZN12Adafruit_GFX5writeEh+0x196>
    } else if (c != '\r') {
    4bba:	6d 30       	cpi	r22, 0x0D	; 13
    4bbc:	09 f4       	brne	.+2      	; 0x4bc0 <_ZN12Adafruit_GFX5writeEh+0xce>
    4bbe:	64 c0       	rjmp	.+200    	; 0x4c88 <_ZN12Adafruit_GFX5writeEh+0x196>
      uint8_t first = pgm_read_byte(&gfxFont->first);
    4bc0:	fc 01       	movw	r30, r24
    4bc2:	34 96       	adiw	r30, 0x04	; 4
    4bc4:	34 91       	lpm	r19, Z
      if ((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
    4bc6:	63 17       	cp	r22, r19
    4bc8:	08 f4       	brcc	.+2      	; 0x4bcc <_ZN12Adafruit_GFX5writeEh+0xda>
    4bca:	5e c0       	rjmp	.+188    	; 0x4c88 <_ZN12Adafruit_GFX5writeEh+0x196>
    4bcc:	32 96       	adiw	r30, 0x02	; 2
    4bce:	e4 91       	lpm	r30, Z
    4bd0:	e6 17       	cp	r30, r22
    4bd2:	08 f4       	brcc	.+2      	; 0x4bd6 <_ZN12Adafruit_GFX5writeEh+0xe4>
    4bd4:	59 c0       	rjmp	.+178    	; 0x4c88 <_ZN12Adafruit_GFX5writeEh+0x196>
        GFXglyph *glyph = pgm_read_glyph_ptr(gfxFont, c - first);
    4bd6:	46 2f       	mov	r20, r22
    4bd8:	43 1b       	sub	r20, r19
    4bda:	34 2f       	mov	r19, r20
#define pgm_read_pointer(addr) ((void *)pgm_read_word(addr))
#endif

inline GFXglyph *pgm_read_glyph_ptr(const GFXfont *gfxFont, uint8_t c) {
#ifdef __AVR__
  return &(((GFXglyph *)pgm_read_pointer(&gfxFont->glyph))[c]);
    4bdc:	fc 01       	movw	r30, r24
    4bde:	32 96       	adiw	r30, 0x02	; 2
    4be0:	85 90       	lpm	r8, Z+
    4be2:	94 90       	lpm	r9, Z
    4be4:	47 e0       	ldi	r20, 0x07	; 7
    4be6:	34 9f       	mul	r19, r20
    4be8:	80 0c       	add	r8, r0
    4bea:	91 1c       	adc	r9, r1
    4bec:	11 24       	eor	r1, r1
          (int16_t)textsize_y * (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
    } else if (c != '\r') {
      uint8_t first = pgm_read_byte(&gfxFont->first);
      if ((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
        GFXglyph *glyph = pgm_read_glyph_ptr(gfxFont, c - first);
        uint8_t w = pgm_read_byte(&glyph->width),
    4bee:	f4 01       	movw	r30, r8
    4bf0:	32 96       	adiw	r30, 0x02	; 2
    4bf2:	34 91       	lpm	r19, Z
                h = pgm_read_byte(&glyph->height);
    4bf4:	31 96       	adiw	r30, 0x01	; 1
    4bf6:	e4 91       	lpm	r30, Z
        if ((w > 0) && (h > 0)) { // Is there an associated bitmap?
    4bf8:	33 23       	and	r19, r19
    4bfa:	11 f0       	breq	.+4      	; 0x4c00 <_ZN12Adafruit_GFX5writeEh+0x10e>
    4bfc:	e1 11       	cpse	r30, r1
    4bfe:	0d c0       	rjmp	.+26     	; 0x4c1a <_ZN12Adafruit_GFX5writeEh+0x128>
          }
          drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x,
                   textsize_y);
        }
        cursor_x +=
            (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
    4c00:	f4 01       	movw	r30, r8
    4c02:	34 96       	adiw	r30, 0x04	; 4
    4c04:	e4 91       	lpm	r30, Z
    4c06:	2c 89       	ldd	r18, Y+20	; 0x14
    4c08:	8c 85       	ldd	r24, Y+12	; 0x0c
    4c0a:	9d 85       	ldd	r25, Y+13	; 0x0d
    4c0c:	e2 9f       	mul	r30, r18
    4c0e:	80 0d       	add	r24, r0
    4c10:	91 1d       	adc	r25, r1
    4c12:	11 24       	eor	r1, r1
    4c14:	9d 87       	std	Y+13, r25	; 0x0d
    4c16:	8c 87       	std	Y+12, r24	; 0x0c
      }
    }
  }
  return 1;
    4c18:	37 c0       	rjmp	.+110    	; 0x4c88 <_ZN12Adafruit_GFX5writeEh+0x196>
      if ((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
        GFXglyph *glyph = pgm_read_glyph_ptr(gfxFont, c - first);
        uint8_t w = pgm_read_byte(&glyph->width),
                h = pgm_read_byte(&glyph->height);
        if ((w > 0) && (h > 0)) { // Is there an associated bitmap?
          int16_t xo = (int8_t)pgm_read_byte(&glyph->xOffset); // sic
    4c1a:	f4 01       	movw	r30, r8
    4c1c:	35 96       	adiw	r30, 0x05	; 5
    4c1e:	44 91       	lpm	r20, Z
          if (wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
    4c20:	5f 89       	ldd	r21, Y+23	; 0x17
    4c22:	55 23       	and	r21, r21
    4c24:	19 f1       	breq	.+70     	; 0x4c6c <_ZN12Adafruit_GFX5writeEh+0x17a>
    4c26:	5c 89       	ldd	r21, Y+20	; 0x14
    4c28:	e3 2f       	mov	r30, r19
    4c2a:	f0 e0       	ldi	r31, 0x00	; 0
    4c2c:	e4 0f       	add	r30, r20
    4c2e:	f1 1d       	adc	r31, r1
    4c30:	47 fd       	sbrc	r20, 7
    4c32:	fa 95       	dec	r31
    4c34:	5e 9f       	mul	r21, r30
    4c36:	b0 01       	movw	r22, r0
    4c38:	5f 9f       	mul	r21, r31
    4c3a:	70 0d       	add	r23, r0
    4c3c:	11 24       	eor	r1, r1
    4c3e:	4c 85       	ldd	r20, Y+12	; 0x0c
    4c40:	5d 85       	ldd	r21, Y+13	; 0x0d
    4c42:	46 0f       	add	r20, r22
    4c44:	57 1f       	adc	r21, r23
    4c46:	68 85       	ldd	r22, Y+8	; 0x08
    4c48:	79 85       	ldd	r23, Y+9	; 0x09
    4c4a:	64 17       	cp	r22, r20
    4c4c:	75 07       	cpc	r23, r21
    4c4e:	74 f4       	brge	.+28     	; 0x4c6c <_ZN12Adafruit_GFX5writeEh+0x17a>
            cursor_x = 0;
    4c50:	1d 86       	std	Y+13, r1	; 0x0d
    4c52:	1c 86       	std	Y+12, r1	; 0x0c
            cursor_y += (int16_t)textsize_y *
    4c54:	3d 89       	ldd	r19, Y+21	; 0x15
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
    4c56:	fc 01       	movw	r30, r24
    4c58:	38 96       	adiw	r30, 0x08	; 8
    4c5a:	e4 91       	lpm	r30, Z
    4c5c:	8e 85       	ldd	r24, Y+14	; 0x0e
    4c5e:	9f 85       	ldd	r25, Y+15	; 0x0f
    4c60:	3e 9f       	mul	r19, r30
    4c62:	80 0d       	add	r24, r0
    4c64:	91 1d       	adc	r25, r1
    4c66:	11 24       	eor	r1, r1
    4c68:	9f 87       	std	Y+15, r25	; 0x0f
    4c6a:	8e 87       	std	Y+14, r24	; 0x0e
          }
          drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x,
                   textsize_y);
    4c6c:	ea 88       	ldd	r14, Y+18	; 0x12
    4c6e:	fb 88       	ldd	r15, Y+19	; 0x13
    4c70:	08 89       	ldd	r16, Y+16	; 0x10
    4c72:	19 89       	ldd	r17, Y+17	; 0x11
    4c74:	4e 85       	ldd	r20, Y+14	; 0x0e
    4c76:	5f 85       	ldd	r21, Y+15	; 0x0f
    4c78:	6c 85       	ldd	r22, Y+12	; 0x0c
    4c7a:	7d 85       	ldd	r23, Y+13	; 0x0d
    4c7c:	ad 88       	ldd	r10, Y+21	; 0x15
    4c7e:	cc 88       	ldd	r12, Y+20	; 0x14
    4c80:	ce 01       	movw	r24, r28
    4c82:	0e 94 44 23 	call	0x4688	; 0x4688 <_ZN12Adafruit_GFX8drawCharEiihjjhh>
    4c86:	bc cf       	rjmp	.-136    	; 0x4c00 <_ZN12Adafruit_GFX5writeEh+0x10e>
            (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
      }
    }
  }
  return 1;
}
    4c88:	81 e0       	ldi	r24, 0x01	; 1
    4c8a:	90 e0       	ldi	r25, 0x00	; 0
    4c8c:	df 91       	pop	r29
    4c8e:	cf 91       	pop	r28
    4c90:	1f 91       	pop	r17
    4c92:	0f 91       	pop	r16
    4c94:	ff 90       	pop	r15
    4c96:	ef 90       	pop	r14
    4c98:	cf 90       	pop	r12
    4c9a:	af 90       	pop	r10
    4c9c:	9f 90       	pop	r9
    4c9e:	8f 90       	pop	r8
    4ca0:	08 95       	ret

00004ca2 <_ZN12Adafruit_GFX11setTextSizeEhh>:
    @param  s_x  Desired text width magnification level in X-axis. 1 is default
    @param  s_y  Desired text width magnification level in Y-axis. 1 is default
*/
/**************************************************************************/
void Adafruit_GFX::setTextSize(uint8_t s_x, uint8_t s_y) {
  textsize_x = (s_x > 0) ? s_x : 1;
    4ca2:	61 11       	cpse	r22, r1
    4ca4:	01 c0       	rjmp	.+2      	; 0x4ca8 <_ZN12Adafruit_GFX11setTextSizeEhh+0x6>
    4ca6:	61 e0       	ldi	r22, 0x01	; 1
    4ca8:	fc 01       	movw	r30, r24
    4caa:	64 8b       	std	Z+20, r22	; 0x14
  textsize_y = (s_y > 0) ? s_y : 1;
    4cac:	41 11       	cpse	r20, r1
    4cae:	01 c0       	rjmp	.+2      	; 0x4cb2 <_ZN12Adafruit_GFX11setTextSizeEhh+0x10>
    4cb0:	41 e0       	ldi	r20, 0x01	; 1
    4cb2:	fc 01       	movw	r30, r24
    4cb4:	45 8b       	std	Z+21, r20	; 0x15
    4cb6:	08 95       	ret

00004cb8 <_ZN12Adafruit_GFX11setTextSizeEh>:
    @brief   Set text 'magnification' size. Each increase in s makes 1 pixel
   that much bigger.
    @param  s  Desired text size. 1 is default 6x8, 2 is 12x16, 3 is 18x24, etc
*/
/**************************************************************************/
void Adafruit_GFX::setTextSize(uint8_t s) { setTextSize(s, s); }
    4cb8:	46 2f       	mov	r20, r22
    4cba:	0c 94 51 26 	jmp	0x4ca2	; 0x4ca2 <_ZN12Adafruit_GFX11setTextSizeEhh>

00004cbe <_ZN16Adafruit_SSD13069drawPixelEiij>:
/*!
    @brief  Get base address of display buffer for direct reading or writing.
    @return Pointer to an unsigned 8-bit array, column-major, columns padded
            to full byte boundary if needed.
*/
uint8_t *Adafruit_SSD1306::getBuffer(void) { return buffer; }
    4cbe:	fc 01       	movw	r30, r24
    4cc0:	77 fd       	sbrc	r23, 7
    4cc2:	b9 c0       	rjmp	.+370    	; 0x4e36 <_ZN16Adafruit_SSD13069drawPixelEiij+0x178>
    4cc4:	80 85       	ldd	r24, Z+8	; 0x08
    4cc6:	91 85       	ldd	r25, Z+9	; 0x09
    4cc8:	68 17       	cp	r22, r24
    4cca:	79 07       	cpc	r23, r25
    4ccc:	0c f0       	brlt	.+2      	; 0x4cd0 <_ZN16Adafruit_SSD13069drawPixelEiij+0x12>
    4cce:	b3 c0       	rjmp	.+358    	; 0x4e36 <_ZN16Adafruit_SSD13069drawPixelEiij+0x178>
    4cd0:	57 fd       	sbrc	r21, 7
    4cd2:	b1 c0       	rjmp	.+354    	; 0x4e36 <_ZN16Adafruit_SSD13069drawPixelEiij+0x178>
    4cd4:	82 85       	ldd	r24, Z+10	; 0x0a
    4cd6:	93 85       	ldd	r25, Z+11	; 0x0b
    4cd8:	48 17       	cp	r20, r24
    4cda:	59 07       	cpc	r21, r25
    4cdc:	0c f0       	brlt	.+2      	; 0x4ce0 <_ZN16Adafruit_SSD13069drawPixelEiij+0x22>
    4cde:	08 95       	ret
    4ce0:	86 89       	ldd	r24, Z+22	; 0x16
    4ce2:	82 30       	cpi	r24, 0x02	; 2
    4ce4:	79 f4       	brne	.+30     	; 0x4d04 <_ZN16Adafruit_SSD13069drawPixelEiij+0x46>
    4ce6:	84 81       	ldd	r24, Z+4	; 0x04
    4ce8:	95 81       	ldd	r25, Z+5	; 0x05
    4cea:	dc 01       	movw	r26, r24
    4cec:	a6 1b       	sub	r26, r22
    4cee:	b7 0b       	sbc	r27, r23
    4cf0:	bd 01       	movw	r22, r26
    4cf2:	61 50       	subi	r22, 0x01	; 1
    4cf4:	71 09       	sbc	r23, r1
    4cf6:	86 81       	ldd	r24, Z+6	; 0x06
    4cf8:	97 81       	ldd	r25, Z+7	; 0x07
    4cfa:	dc 01       	movw	r26, r24
    4cfc:	a4 1b       	sub	r26, r20
    4cfe:	b5 0b       	sbc	r27, r21
    4d00:	ad 01       	movw	r20, r26
    4d02:	0e c0       	rjmp	.+28     	; 0x4d20 <_ZN16Adafruit_SSD13069drawPixelEiij+0x62>
    4d04:	83 30       	cpi	r24, 0x03	; 3
    4d06:	09 f0       	breq	.+2      	; 0x4d0a <_ZN16Adafruit_SSD13069drawPixelEiij+0x4c>
    4d08:	84 c0       	rjmp	.+264    	; 0x4e12 <_ZN16Adafruit_SSD13069drawPixelEiij+0x154>
    4d0a:	64 27       	eor	r22, r20
    4d0c:	75 27       	eor	r23, r21
    4d0e:	ca 01       	movw	r24, r20
    4d10:	86 27       	eor	r24, r22
    4d12:	97 27       	eor	r25, r23
    4d14:	68 27       	eor	r22, r24
    4d16:	79 27       	eor	r23, r25
    4d18:	46 81       	ldd	r20, Z+6	; 0x06
    4d1a:	57 81       	ldd	r21, Z+7	; 0x07
    4d1c:	48 1b       	sub	r20, r24
    4d1e:	59 0b       	sbc	r21, r25
    4d20:	41 50       	subi	r20, 0x01	; 1
    4d22:	51 09       	sbc	r21, r1
    4d24:	21 30       	cpi	r18, 0x01	; 1
    4d26:	31 05       	cpc	r19, r1
    4d28:	31 f0       	breq	.+12     	; 0x4d36 <_ZN16Adafruit_SSD13069drawPixelEiij+0x78>
    4d2a:	48 f1       	brcs	.+82     	; 0x4d7e <_ZN16Adafruit_SSD13069drawPixelEiij+0xc0>
    4d2c:	22 30       	cpi	r18, 0x02	; 2
    4d2e:	31 05       	cpc	r19, r1
    4d30:	09 f4       	brne	.+2      	; 0x4d34 <_ZN16Adafruit_SSD13069drawPixelEiij+0x76>
    4d32:	4a c0       	rjmp	.+148    	; 0x4dc8 <_ZN16Adafruit_SSD13069drawPixelEiij+0x10a>
    4d34:	08 95       	ret
    4d36:	ca 01       	movw	r24, r20
    4d38:	57 fd       	sbrc	r21, 7
    4d3a:	07 96       	adiw	r24, 0x07	; 7
    4d3c:	9c 01       	movw	r18, r24
    4d3e:	a3 e0       	ldi	r26, 0x03	; 3
    4d40:	35 95       	asr	r19
    4d42:	27 95       	ror	r18
    4d44:	aa 95       	dec	r26
    4d46:	e1 f7       	brne	.-8      	; 0x4d40 <_ZN16Adafruit_SSD13069drawPixelEiij+0x82>
    4d48:	a4 81       	ldd	r26, Z+4	; 0x04
    4d4a:	b5 81       	ldd	r27, Z+5	; 0x05
    4d4c:	2a 9f       	mul	r18, r26
    4d4e:	c0 01       	movw	r24, r0
    4d50:	2b 9f       	mul	r18, r27
    4d52:	90 0d       	add	r25, r0
    4d54:	3a 9f       	mul	r19, r26
    4d56:	90 0d       	add	r25, r0
    4d58:	11 24       	eor	r1, r1
    4d5a:	68 0f       	add	r22, r24
    4d5c:	79 1f       	adc	r23, r25
    4d5e:	07 8c       	ldd	r0, Z+31	; 0x1f
    4d60:	f0 a1       	ldd	r31, Z+32	; 0x20
    4d62:	e0 2d       	mov	r30, r0
    4d64:	e6 0f       	add	r30, r22
    4d66:	f7 1f       	adc	r31, r23
    4d68:	47 70       	andi	r20, 0x07	; 7
    4d6a:	55 27       	eor	r21, r21
    4d6c:	81 e0       	ldi	r24, 0x01	; 1
    4d6e:	90 e0       	ldi	r25, 0x00	; 0
    4d70:	01 c0       	rjmp	.+2      	; 0x4d74 <_ZN16Adafruit_SSD13069drawPixelEiij+0xb6>
    4d72:	88 0f       	add	r24, r24
    4d74:	4a 95       	dec	r20
    4d76:	ea f7       	brpl	.-6      	; 0x4d72 <_ZN16Adafruit_SSD13069drawPixelEiij+0xb4>
    4d78:	90 81       	ld	r25, Z
    4d7a:	89 2b       	or	r24, r25
    4d7c:	48 c0       	rjmp	.+144    	; 0x4e0e <_ZN16Adafruit_SSD13069drawPixelEiij+0x150>
    4d7e:	ca 01       	movw	r24, r20
    4d80:	57 fd       	sbrc	r21, 7
    4d82:	07 96       	adiw	r24, 0x07	; 7
    4d84:	9c 01       	movw	r18, r24
    4d86:	93 e0       	ldi	r25, 0x03	; 3
    4d88:	35 95       	asr	r19
    4d8a:	27 95       	ror	r18
    4d8c:	9a 95       	dec	r25
    4d8e:	e1 f7       	brne	.-8      	; 0x4d88 <_ZN16Adafruit_SSD13069drawPixelEiij+0xca>
    4d90:	a4 81       	ldd	r26, Z+4	; 0x04
    4d92:	b5 81       	ldd	r27, Z+5	; 0x05
    4d94:	2a 9f       	mul	r18, r26
    4d96:	c0 01       	movw	r24, r0
    4d98:	2b 9f       	mul	r18, r27
    4d9a:	90 0d       	add	r25, r0
    4d9c:	3a 9f       	mul	r19, r26
    4d9e:	90 0d       	add	r25, r0
    4da0:	11 24       	eor	r1, r1
    4da2:	68 0f       	add	r22, r24
    4da4:	79 1f       	adc	r23, r25
    4da6:	07 8c       	ldd	r0, Z+31	; 0x1f
    4da8:	f0 a1       	ldd	r31, Z+32	; 0x20
    4daa:	e0 2d       	mov	r30, r0
    4dac:	e6 0f       	add	r30, r22
    4dae:	f7 1f       	adc	r31, r23
    4db0:	47 70       	andi	r20, 0x07	; 7
    4db2:	55 27       	eor	r21, r21
    4db4:	81 e0       	ldi	r24, 0x01	; 1
    4db6:	90 e0       	ldi	r25, 0x00	; 0
    4db8:	01 c0       	rjmp	.+2      	; 0x4dbc <_ZN16Adafruit_SSD13069drawPixelEiij+0xfe>
    4dba:	88 0f       	add	r24, r24
    4dbc:	4a 95       	dec	r20
    4dbe:	ea f7       	brpl	.-6      	; 0x4dba <_ZN16Adafruit_SSD13069drawPixelEiij+0xfc>
    4dc0:	80 95       	com	r24
    4dc2:	90 81       	ld	r25, Z
    4dc4:	89 23       	and	r24, r25
    4dc6:	23 c0       	rjmp	.+70     	; 0x4e0e <_ZN16Adafruit_SSD13069drawPixelEiij+0x150>
    4dc8:	ca 01       	movw	r24, r20
    4dca:	57 fd       	sbrc	r21, 7
    4dcc:	07 96       	adiw	r24, 0x07	; 7
    4dce:	9c 01       	movw	r18, r24
    4dd0:	83 e0       	ldi	r24, 0x03	; 3
    4dd2:	35 95       	asr	r19
    4dd4:	27 95       	ror	r18
    4dd6:	8a 95       	dec	r24
    4dd8:	e1 f7       	brne	.-8      	; 0x4dd2 <_ZN16Adafruit_SSD13069drawPixelEiij+0x114>
    4dda:	a4 81       	ldd	r26, Z+4	; 0x04
    4ddc:	b5 81       	ldd	r27, Z+5	; 0x05
    4dde:	2a 9f       	mul	r18, r26
    4de0:	c0 01       	movw	r24, r0
    4de2:	2b 9f       	mul	r18, r27
    4de4:	90 0d       	add	r25, r0
    4de6:	3a 9f       	mul	r19, r26
    4de8:	90 0d       	add	r25, r0
    4dea:	11 24       	eor	r1, r1
    4dec:	68 0f       	add	r22, r24
    4dee:	79 1f       	adc	r23, r25
    4df0:	07 8c       	ldd	r0, Z+31	; 0x1f
    4df2:	f0 a1       	ldd	r31, Z+32	; 0x20
    4df4:	e0 2d       	mov	r30, r0
    4df6:	e6 0f       	add	r30, r22
    4df8:	f7 1f       	adc	r31, r23
    4dfa:	47 70       	andi	r20, 0x07	; 7
    4dfc:	55 27       	eor	r21, r21
    4dfe:	81 e0       	ldi	r24, 0x01	; 1
    4e00:	90 e0       	ldi	r25, 0x00	; 0
    4e02:	01 c0       	rjmp	.+2      	; 0x4e06 <_ZN16Adafruit_SSD13069drawPixelEiij+0x148>
    4e04:	88 0f       	add	r24, r24
    4e06:	4a 95       	dec	r20
    4e08:	ea f7       	brpl	.-6      	; 0x4e04 <_ZN16Adafruit_SSD13069drawPixelEiij+0x146>
    4e0a:	90 81       	ld	r25, Z
    4e0c:	89 27       	eor	r24, r25
    4e0e:	80 83       	st	Z, r24
    4e10:	08 95       	ret
    4e12:	81 30       	cpi	r24, 0x01	; 1
    4e14:	09 f0       	breq	.+2      	; 0x4e18 <_ZN16Adafruit_SSD13069drawPixelEiij+0x15a>
    4e16:	86 cf       	rjmp	.-244    	; 0x4d24 <_ZN16Adafruit_SSD13069drawPixelEiij+0x66>
    4e18:	64 27       	eor	r22, r20
    4e1a:	75 27       	eor	r23, r21
    4e1c:	46 27       	eor	r20, r22
    4e1e:	57 27       	eor	r21, r23
    4e20:	64 27       	eor	r22, r20
    4e22:	75 27       	eor	r23, r21
    4e24:	84 81       	ldd	r24, Z+4	; 0x04
    4e26:	95 81       	ldd	r25, Z+5	; 0x05
    4e28:	dc 01       	movw	r26, r24
    4e2a:	a6 1b       	sub	r26, r22
    4e2c:	b7 0b       	sbc	r27, r23
    4e2e:	bd 01       	movw	r22, r26
    4e30:	61 50       	subi	r22, 0x01	; 1
    4e32:	71 09       	sbc	r23, r1
    4e34:	77 cf       	rjmp	.-274    	; 0x4d24 <_ZN16Adafruit_SSD13069drawPixelEiij+0x66>
    4e36:	08 95       	ret

00004e38 <_ZN8SPIClass16beginTransactionE11SPISettings>:
    4e38:	20 91 01 03 	lds	r18, 0x0301	; 0x800301 <_ZN8SPIClass13interruptModeE>
    4e3c:	22 23       	and	r18, r18
    4e3e:	99 f0       	breq	.+38     	; 0x4e66 <_ZN8SPIClass16beginTransactionE11SPISettings+0x2e>
    4e40:	4f b7       	in	r20, 0x3f	; 63
    4e42:	f8 94       	cli
    4e44:	20 91 01 03 	lds	r18, 0x0301	; 0x800301 <_ZN8SPIClass13interruptModeE>
    4e48:	21 30       	cpi	r18, 0x01	; 1
    4e4a:	59 f4       	brne	.+22     	; 0x4e62 <_ZN8SPIClass16beginTransactionE11SPISettings+0x2a>
    4e4c:	2d b3       	in	r18, 0x1d	; 29
    4e4e:	20 93 ff 02 	sts	0x02FF, r18	; 0x8002ff <_ZN8SPIClass13interruptSaveE>
    4e52:	3d b3       	in	r19, 0x1d	; 29
    4e54:	20 91 00 03 	lds	r18, 0x0300	; 0x800300 <_ZN8SPIClass13interruptMaskE>
    4e58:	20 95       	com	r18
    4e5a:	23 23       	and	r18, r19
    4e5c:	2d bb       	out	0x1d, r18	; 29
    4e5e:	4f bf       	out	0x3f, r20	; 63
    4e60:	02 c0       	rjmp	.+4      	; 0x4e66 <_ZN8SPIClass16beginTransactionE11SPISettings+0x2e>
    4e62:	40 93 ff 02 	sts	0x02FF, r20	; 0x8002ff <_ZN8SPIClass13interruptSaveE>
    4e66:	8c bd       	out	0x2c, r24	; 44
    4e68:	9d bd       	out	0x2d, r25	; 45
    4e6a:	08 95       	ret

00004e6c <_ZN8SPIClass8transferEh>:
    4e6c:	8e bd       	out	0x2e, r24	; 46
    4e6e:	00 00       	nop
    4e70:	0d b4       	in	r0, 0x2d	; 45
    4e72:	07 fe       	sbrs	r0, 7
    4e74:	fd cf       	rjmp	.-6      	; 0x4e70 <_ZN8SPIClass8transferEh+0x4>
    4e76:	8e b5       	in	r24, 0x2e	; 46
    4e78:	08 95       	ret

00004e7a <_ZN8SPIClass14endTransactionEv>:
    4e7a:	80 91 01 03 	lds	r24, 0x0301	; 0x800301 <_ZN8SPIClass13interruptModeE>
    4e7e:	88 23       	and	r24, r24
    4e80:	61 f0       	breq	.+24     	; 0x4e9a <_ZN8SPIClass14endTransactionEv+0x20>
    4e82:	9f b7       	in	r25, 0x3f	; 63
    4e84:	f8 94       	cli
    4e86:	20 91 01 03 	lds	r18, 0x0301	; 0x800301 <_ZN8SPIClass13interruptModeE>
    4e8a:	80 91 ff 02 	lds	r24, 0x02FF	; 0x8002ff <_ZN8SPIClass13interruptSaveE>
    4e8e:	21 30       	cpi	r18, 0x01	; 1
    4e90:	19 f4       	brne	.+6      	; 0x4e98 <_ZN8SPIClass14endTransactionEv+0x1e>
    4e92:	8d bb       	out	0x1d, r24	; 29
    4e94:	9f bf       	out	0x3f, r25	; 63
    4e96:	08 95       	ret
    4e98:	8f bf       	out	0x3f, r24	; 63
    4e9a:	08 95       	ret

00004e9c <_ZN16Adafruit_SSD1306C1Ea>:
    4e9c:	1f 93       	push	r17
    4e9e:	cf 93       	push	r28
    4ea0:	df 93       	push	r29
    4ea2:	ec 01       	movw	r28, r24
    4ea4:	16 2f       	mov	r17, r22
    4ea6:	40 e4       	ldi	r20, 0x40	; 64
    4ea8:	50 e0       	ldi	r21, 0x00	; 0
    4eaa:	60 e8       	ldi	r22, 0x80	; 128
    4eac:	70 e0       	ldi	r23, 0x00	; 0
    4eae:	0e 94 b9 1e 	call	0x3d72	; 0x3d72 <_ZN12Adafruit_GFXC1Eii>
    4eb2:	87 e9       	ldi	r24, 0x97	; 151
    4eb4:	91 e0       	ldi	r25, 0x01	; 1
    4eb6:	99 83       	std	Y+1, r25	; 0x01
    4eb8:	88 83       	st	Y, r24
    4eba:	1c 8e       	std	Y+28, r1	; 0x1c
    4ebc:	1b 8e       	std	Y+27, r1	; 0x1b
    4ebe:	83 e0       	ldi	r24, 0x03	; 3
    4ec0:	93 e0       	ldi	r25, 0x03	; 3
    4ec2:	9e 8f       	std	Y+30, r25	; 0x1e
    4ec4:	8d 8f       	std	Y+29, r24	; 0x1d
    4ec6:	18 a2       	std	Y+32, r1	; 0x20
    4ec8:	1f 8e       	std	Y+31, r1	; 0x1f
    4eca:	8f ef       	ldi	r24, 0xFF	; 255
    4ecc:	8c a3       	std	Y+36, r24	; 0x24
    4ece:	8d a3       	std	Y+37, r24	; 0x25
    4ed0:	8e a3       	std	Y+38, r24	; 0x26
    4ed2:	8f a3       	std	Y+39, r24	; 0x27
    4ed4:	18 a7       	std	Y+40, r17	; 0x28
    4ed6:	80 e5       	ldi	r24, 0x50	; 80
    4ed8:	8e af       	std	Y+62, r24	; 0x3e
    4eda:	1f ae       	std	Y+63, r1	; 0x3f
    4edc:	df 91       	pop	r29
    4ede:	cf 91       	pop	r28
    4ee0:	1f 91       	pop	r17
    4ee2:	08 95       	ret

00004ee4 <_ZN16Adafruit_SSD1306D1Ev>:
    4ee4:	27 e9       	ldi	r18, 0x97	; 151
    4ee6:	31 e0       	ldi	r19, 0x01	; 1
    4ee8:	fc 01       	movw	r30, r24
    4eea:	31 83       	std	Z+1, r19	; 0x01
    4eec:	20 83       	st	Z, r18
    4eee:	87 8d       	ldd	r24, Z+31	; 0x1f
    4ef0:	90 a1       	ldd	r25, Z+32	; 0x20
    4ef2:	00 97       	sbiw	r24, 0x00	; 0
    4ef4:	11 f0       	breq	.+4      	; 0x4efa <_ZN16Adafruit_SSD1306D1Ev+0x16>
    4ef6:	0c 94 bc 32 	jmp	0x6578	; 0x6578 <free>
    4efa:	08 95       	ret

00004efc <_ZN16Adafruit_SSD130616ssd1306_command1Eh>:
    4efc:	1f 93       	push	r17
    4efe:	cf 93       	push	r28
    4f00:	df 93       	push	r29
    4f02:	fc 01       	movw	r30, r24
    4f04:	85 8d       	ldd	r24, Z+29	; 0x1d
    4f06:	96 8d       	ldd	r25, Z+30	; 0x1e
    4f08:	00 97       	sbiw	r24, 0x00	; 0
    4f0a:	19 f1       	breq	.+70     	; 0x4f52 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x56>
    4f0c:	16 2f       	mov	r17, r22
    4f0e:	ef 01       	movw	r28, r30
    4f10:	61 a1       	ldd	r22, Z+33	; 0x21
    4f12:	06 2e       	mov	r0, r22
    4f14:	00 0c       	add	r0, r0
    4f16:	77 0b       	sbc	r23, r23
    4f18:	0e 94 7b 2e 	call	0x5cf6	; 0x5cf6 <_ZN7TwoWire17beginTransmissionEi>
    4f1c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4f1e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4f20:	dc 01       	movw	r26, r24
    4f22:	ed 91       	ld	r30, X+
    4f24:	fc 91       	ld	r31, X
    4f26:	01 90       	ld	r0, Z+
    4f28:	f0 81       	ld	r31, Z
    4f2a:	e0 2d       	mov	r30, r0
    4f2c:	60 e0       	ldi	r22, 0x00	; 0
    4f2e:	09 95       	icall
    4f30:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4f32:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4f34:	dc 01       	movw	r26, r24
    4f36:	ed 91       	ld	r30, X+
    4f38:	fc 91       	ld	r31, X
    4f3a:	01 90       	ld	r0, Z+
    4f3c:	f0 81       	ld	r31, Z
    4f3e:	e0 2d       	mov	r30, r0
    4f40:	61 2f       	mov	r22, r17
    4f42:	09 95       	icall
    4f44:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4f46:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4f48:	df 91       	pop	r29
    4f4a:	cf 91       	pop	r28
    4f4c:	1f 91       	pop	r17
    4f4e:	0c 94 90 2e 	jmp	0x5d20	; 0x5d20 <_ZN7TwoWire15endTransmissionEv>
    4f52:	a5 a5       	ldd	r26, Z+45	; 0x2d
    4f54:	b6 a5       	ldd	r27, Z+46	; 0x2e
    4f56:	9c 91       	ld	r25, X
    4f58:	83 a9       	ldd	r24, Z+51	; 0x33
    4f5a:	80 95       	com	r24
    4f5c:	89 23       	and	r24, r25
    4f5e:	8c 93       	st	X, r24
    4f60:	83 8d       	ldd	r24, Z+27	; 0x1b
    4f62:	94 8d       	ldd	r25, Z+28	; 0x1c
    4f64:	89 2b       	or	r24, r25
    4f66:	31 f0       	breq	.+12     	; 0x4f74 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x78>
    4f68:	86 2f       	mov	r24, r22
    4f6a:	df 91       	pop	r29
    4f6c:	cf 91       	pop	r28
    4f6e:	1f 91       	pop	r17
    4f70:	0c 94 36 27 	jmp	0x4e6c	; 0x4e6c <_ZN8SPIClass8transferEh>
    4f74:	28 e0       	ldi	r18, 0x08	; 8
    4f76:	30 e0       	ldi	r19, 0x00	; 0
    4f78:	80 e8       	ldi	r24, 0x80	; 128
    4f7a:	a1 a5       	ldd	r26, Z+41	; 0x29
    4f7c:	b2 a5       	ldd	r27, Z+42	; 0x2a
    4f7e:	91 a9       	ldd	r25, Z+49	; 0x31
    4f80:	46 2f       	mov	r20, r22
    4f82:	48 23       	and	r20, r24
    4f84:	19 f0       	breq	.+6      	; 0x4f8c <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x90>
    4f86:	4c 91       	ld	r20, X
    4f88:	94 2b       	or	r25, r20
    4f8a:	03 c0       	rjmp	.+6      	; 0x4f92 <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x96>
    4f8c:	4c 91       	ld	r20, X
    4f8e:	90 95       	com	r25
    4f90:	94 23       	and	r25, r20
    4f92:	9c 93       	st	X, r25
    4f94:	a3 a5       	ldd	r26, Z+43	; 0x2b
    4f96:	b4 a5       	ldd	r27, Z+44	; 0x2c
    4f98:	4c 91       	ld	r20, X
    4f9a:	92 a9       	ldd	r25, Z+50	; 0x32
    4f9c:	94 2b       	or	r25, r20
    4f9e:	9c 93       	st	X, r25
    4fa0:	a3 a5       	ldd	r26, Z+43	; 0x2b
    4fa2:	b4 a5       	ldd	r27, Z+44	; 0x2c
    4fa4:	4c 91       	ld	r20, X
    4fa6:	92 a9       	ldd	r25, Z+50	; 0x32
    4fa8:	90 95       	com	r25
    4faa:	94 23       	and	r25, r20
    4fac:	9c 93       	st	X, r25
    4fae:	86 95       	lsr	r24
    4fb0:	21 50       	subi	r18, 0x01	; 1
    4fb2:	31 09       	sbc	r19, r1
    4fb4:	11 f7       	brne	.-60     	; 0x4f7a <_ZN16Adafruit_SSD130616ssd1306_command1Eh+0x7e>
    4fb6:	df 91       	pop	r29
    4fb8:	cf 91       	pop	r28
    4fba:	1f 91       	pop	r17
    4fbc:	08 95       	ret

00004fbe <_ZN16Adafruit_SSD130613invertDisplayEb>:
    4fbe:	1f 93       	push	r17
    4fc0:	cf 93       	push	r28
    4fc2:	df 93       	push	r29
    4fc4:	ec 01       	movw	r28, r24
    4fc6:	16 2f       	mov	r17, r22
    4fc8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4fca:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4fcc:	00 97       	sbiw	r24, 0x00	; 0
    4fce:	39 f0       	breq	.+14     	; 0x4fde <_ZN16Adafruit_SSD130613invertDisplayEb+0x20>
    4fd0:	4d a9       	ldd	r20, Y+53	; 0x35
    4fd2:	5e a9       	ldd	r21, Y+54	; 0x36
    4fd4:	6f a9       	ldd	r22, Y+55	; 0x37
    4fd6:	78 ad       	ldd	r23, Y+56	; 0x38
    4fd8:	0e 94 6d 2e 	call	0x5cda	; 0x5cda <_ZN7TwoWire8setClockEm>
    4fdc:	0f c0       	rjmp	.+30     	; 0x4ffc <_ZN16Adafruit_SSD130613invertDisplayEb+0x3e>
    4fde:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4fe0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4fe2:	89 2b       	or	r24, r25
    4fe4:	21 f0       	breq	.+8      	; 0x4fee <_ZN16Adafruit_SSD130613invertDisplayEb+0x30>
    4fe6:	8e ad       	ldd	r24, Y+62	; 0x3e
    4fe8:	9f ad       	ldd	r25, Y+63	; 0x3f
    4fea:	0e 94 1c 27 	call	0x4e38	; 0x4e38 <_ZN8SPIClass16beginTransactionE11SPISettings>
    4fee:	ef a5       	ldd	r30, Y+47	; 0x2f
    4ff0:	f8 a9       	ldd	r31, Y+48	; 0x30
    4ff2:	90 81       	ld	r25, Z
    4ff4:	8c a9       	ldd	r24, Y+52	; 0x34
    4ff6:	80 95       	com	r24
    4ff8:	89 23       	and	r24, r25
    4ffa:	80 83       	st	Z, r24
    4ffc:	11 11       	cpse	r17, r1
    4ffe:	02 c0       	rjmp	.+4      	; 0x5004 <_ZN16Adafruit_SSD130613invertDisplayEb+0x46>
    5000:	66 ea       	ldi	r22, 0xA6	; 166
    5002:	01 c0       	rjmp	.+2      	; 0x5006 <_ZN16Adafruit_SSD130613invertDisplayEb+0x48>
    5004:	67 ea       	ldi	r22, 0xA7	; 167
    5006:	ce 01       	movw	r24, r28
    5008:	0e 94 7e 27 	call	0x4efc	; 0x4efc <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
    500c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    500e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5010:	00 97       	sbiw	r24, 0x00	; 0
    5012:	49 f0       	breq	.+18     	; 0x5026 <_ZN16Adafruit_SSD130613invertDisplayEb+0x68>
    5014:	49 ad       	ldd	r20, Y+57	; 0x39
    5016:	5a ad       	ldd	r21, Y+58	; 0x3a
    5018:	6b ad       	ldd	r22, Y+59	; 0x3b
    501a:	7c ad       	ldd	r23, Y+60	; 0x3c
    501c:	df 91       	pop	r29
    501e:	cf 91       	pop	r28
    5020:	1f 91       	pop	r17
    5022:	0c 94 6d 2e 	jmp	0x5cda	; 0x5cda <_ZN7TwoWire8setClockEm>
    5026:	ef a5       	ldd	r30, Y+47	; 0x2f
    5028:	f8 a9       	ldd	r31, Y+48	; 0x30
    502a:	90 81       	ld	r25, Z
    502c:	8c a9       	ldd	r24, Y+52	; 0x34
    502e:	89 2b       	or	r24, r25
    5030:	80 83       	st	Z, r24
    5032:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5034:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5036:	89 2b       	or	r24, r25
    5038:	29 f0       	breq	.+10     	; 0x5044 <_ZN16Adafruit_SSD130613invertDisplayEb+0x86>
    503a:	df 91       	pop	r29
    503c:	cf 91       	pop	r28
    503e:	1f 91       	pop	r17
    5040:	0c 94 3d 27 	jmp	0x4e7a	; 0x4e7a <_ZN8SPIClass14endTransactionEv>
    5044:	df 91       	pop	r29
    5046:	cf 91       	pop	r28
    5048:	1f 91       	pop	r17
    504a:	08 95       	ret

0000504c <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>:
    504c:	bf 92       	push	r11
    504e:	cf 92       	push	r12
    5050:	df 92       	push	r13
    5052:	ef 92       	push	r14
    5054:	ff 92       	push	r15
    5056:	0f 93       	push	r16
    5058:	1f 93       	push	r17
    505a:	cf 93       	push	r28
    505c:	df 93       	push	r29
    505e:	ec 01       	movw	r28, r24
    5060:	b6 2e       	mov	r11, r22
    5062:	07 2f       	mov	r16, r23
    5064:	14 2f       	mov	r17, r20
    5066:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5068:	9e 8d       	ldd	r25, Y+30	; 0x1e
    506a:	00 97       	sbiw	r24, 0x00	; 0
    506c:	09 f4       	brne	.+2      	; 0x5070 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x24>
    506e:	52 c0       	rjmp	.+164    	; 0x5114 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0xc8>
    5070:	69 a1       	ldd	r22, Y+33	; 0x21
    5072:	06 2e       	mov	r0, r22
    5074:	00 0c       	add	r0, r0
    5076:	77 0b       	sbc	r23, r23
    5078:	0e 94 7b 2e 	call	0x5cf6	; 0x5cf6 <_ZN7TwoWire17beginTransmissionEi>
    507c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    507e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5080:	dc 01       	movw	r26, r24
    5082:	ed 91       	ld	r30, X+
    5084:	fc 91       	ld	r31, X
    5086:	01 90       	ld	r0, Z+
    5088:	f0 81       	ld	r31, Z
    508a:	e0 2d       	mov	r30, r0
    508c:	60 e0       	ldi	r22, 0x00	; 0
    508e:	09 95       	icall
    5090:	cb 2c       	mov	r12, r11
    5092:	d0 2e       	mov	r13, r16
    5094:	ee 24       	eor	r14, r14
    5096:	e3 94       	inc	r14
    5098:	f1 2c       	mov	r15, r1
    509a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    509c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    509e:	11 23       	and	r17, r17
    50a0:	71 f1       	breq	.+92     	; 0x50fe <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0xb2>
    50a2:	b0 e2       	ldi	r27, 0x20	; 32
    50a4:	eb 16       	cp	r14, r27
    50a6:	f1 04       	cpc	r15, r1
    50a8:	b8 f0       	brcs	.+46     	; 0x50d8 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x8c>
    50aa:	0e 94 90 2e 	call	0x5d20	; 0x5d20 <_ZN7TwoWire15endTransmissionEv>
    50ae:	69 a1       	ldd	r22, Y+33	; 0x21
    50b0:	06 2e       	mov	r0, r22
    50b2:	00 0c       	add	r0, r0
    50b4:	77 0b       	sbc	r23, r23
    50b6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    50b8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    50ba:	0e 94 7b 2e 	call	0x5cf6	; 0x5cf6 <_ZN7TwoWire17beginTransmissionEi>
    50be:	8d 8d       	ldd	r24, Y+29	; 0x1d
    50c0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    50c2:	dc 01       	movw	r26, r24
    50c4:	ed 91       	ld	r30, X+
    50c6:	fc 91       	ld	r31, X
    50c8:	01 90       	ld	r0, Z+
    50ca:	f0 81       	ld	r31, Z
    50cc:	e0 2d       	mov	r30, r0
    50ce:	60 e0       	ldi	r22, 0x00	; 0
    50d0:	09 95       	icall
    50d2:	ee 24       	eor	r14, r14
    50d4:	e3 94       	inc	r14
    50d6:	f1 2c       	mov	r15, r1
    50d8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    50da:	9e 8d       	ldd	r25, Y+30	; 0x1e
    50dc:	f6 01       	movw	r30, r12
    50de:	64 91       	lpm	r22, Z
    50e0:	dc 01       	movw	r26, r24
    50e2:	ed 91       	ld	r30, X+
    50e4:	fc 91       	ld	r31, X
    50e6:	01 90       	ld	r0, Z+
    50e8:	f0 81       	ld	r31, Z
    50ea:	e0 2d       	mov	r30, r0
    50ec:	09 95       	icall
    50ee:	bf ef       	ldi	r27, 0xFF	; 255
    50f0:	eb 1a       	sub	r14, r27
    50f2:	fb 0a       	sbc	r15, r27
    50f4:	11 50       	subi	r17, 0x01	; 1
    50f6:	f6 01       	movw	r30, r12
    50f8:	31 96       	adiw	r30, 0x01	; 1
    50fa:	6f 01       	movw	r12, r30
    50fc:	ce cf       	rjmp	.-100    	; 0x509a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x4e>
    50fe:	df 91       	pop	r29
    5100:	cf 91       	pop	r28
    5102:	1f 91       	pop	r17
    5104:	0f 91       	pop	r16
    5106:	ff 90       	pop	r15
    5108:	ef 90       	pop	r14
    510a:	df 90       	pop	r13
    510c:	cf 90       	pop	r12
    510e:	bf 90       	pop	r11
    5110:	0c 94 90 2e 	jmp	0x5d20	; 0x5d20 <_ZN7TwoWire15endTransmissionEv>
    5114:	ed a5       	ldd	r30, Y+45	; 0x2d
    5116:	fe a5       	ldd	r31, Y+46	; 0x2e
    5118:	90 81       	ld	r25, Z
    511a:	8b a9       	ldd	r24, Y+51	; 0x33
    511c:	80 95       	com	r24
    511e:	89 23       	and	r24, r25
    5120:	80 83       	st	Z, r24
    5122:	e6 2e       	mov	r14, r22
    5124:	f7 2e       	mov	r15, r23
    5126:	11 23       	and	r17, r17
    5128:	79 f1       	breq	.+94     	; 0x5188 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x13c>
    512a:	f7 01       	movw	r30, r14
    512c:	84 91       	lpm	r24, Z
    512e:	2b 8d       	ldd	r18, Y+27	; 0x1b
    5130:	3c 8d       	ldd	r19, Y+28	; 0x1c
    5132:	23 2b       	or	r18, r19
    5134:	39 f0       	breq	.+14     	; 0x5144 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0xf8>
    5136:	0e 94 36 27 	call	0x4e6c	; 0x4e6c <_ZN8SPIClass8transferEh>
    513a:	11 50       	subi	r17, 0x01	; 1
    513c:	c7 01       	movw	r24, r14
    513e:	01 96       	adiw	r24, 0x01	; 1
    5140:	7c 01       	movw	r14, r24
    5142:	f1 cf       	rjmp	.-30     	; 0x5126 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0xda>
    5144:	28 e0       	ldi	r18, 0x08	; 8
    5146:	30 e0       	ldi	r19, 0x00	; 0
    5148:	40 e8       	ldi	r20, 0x80	; 128
    514a:	e9 a5       	ldd	r30, Y+41	; 0x29
    514c:	fa a5       	ldd	r31, Y+42	; 0x2a
    514e:	99 a9       	ldd	r25, Y+49	; 0x31
    5150:	58 2f       	mov	r21, r24
    5152:	54 23       	and	r21, r20
    5154:	19 f0       	breq	.+6      	; 0x515c <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x110>
    5156:	50 81       	ld	r21, Z
    5158:	95 2b       	or	r25, r21
    515a:	03 c0       	rjmp	.+6      	; 0x5162 <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0x116>
    515c:	50 81       	ld	r21, Z
    515e:	90 95       	com	r25
    5160:	95 23       	and	r25, r21
    5162:	90 83       	st	Z, r25
    5164:	eb a5       	ldd	r30, Y+43	; 0x2b
    5166:	fc a5       	ldd	r31, Y+44	; 0x2c
    5168:	50 81       	ld	r21, Z
    516a:	9a a9       	ldd	r25, Y+50	; 0x32
    516c:	95 2b       	or	r25, r21
    516e:	90 83       	st	Z, r25
    5170:	eb a5       	ldd	r30, Y+43	; 0x2b
    5172:	fc a5       	ldd	r31, Y+44	; 0x2c
    5174:	50 81       	ld	r21, Z
    5176:	9a a9       	ldd	r25, Y+50	; 0x32
    5178:	90 95       	com	r25
    517a:	95 23       	and	r25, r21
    517c:	90 83       	st	Z, r25
    517e:	46 95       	lsr	r20
    5180:	21 50       	subi	r18, 0x01	; 1
    5182:	31 09       	sbc	r19, r1
    5184:	11 f7       	brne	.-60     	; 0x514a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0xfe>
    5186:	d9 cf       	rjmp	.-78     	; 0x513a <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh+0xee>
    5188:	df 91       	pop	r29
    518a:	cf 91       	pop	r28
    518c:	1f 91       	pop	r17
    518e:	0f 91       	pop	r16
    5190:	ff 90       	pop	r15
    5192:	ef 90       	pop	r14
    5194:	df 90       	pop	r13
    5196:	cf 90       	pop	r12
    5198:	bf 90       	pop	r11
    519a:	08 95       	ret

0000519c <_ZN16Adafruit_SSD130612clearDisplayEv>:
    519c:	fc 01       	movw	r30, r24
    519e:	86 81       	ldd	r24, Z+6	; 0x06
    51a0:	97 81       	ldd	r25, Z+7	; 0x07
    51a2:	9c 01       	movw	r18, r24
    51a4:	29 5f       	subi	r18, 0xF9	; 249
    51a6:	3f 4f       	sbci	r19, 0xFF	; 255
    51a8:	37 ff       	sbrs	r19, 7
    51aa:	02 c0       	rjmp	.+4      	; 0x51b0 <_ZN16Adafruit_SSD130612clearDisplayEv+0x14>
    51ac:	29 5f       	subi	r18, 0xF9	; 249
    51ae:	3f 4f       	sbci	r19, 0xFF	; 255
    51b0:	83 e0       	ldi	r24, 0x03	; 3
    51b2:	35 95       	asr	r19
    51b4:	27 95       	ror	r18
    51b6:	8a 95       	dec	r24
    51b8:	e1 f7       	brne	.-8      	; 0x51b2 <_ZN16Adafruit_SSD130612clearDisplayEv+0x16>
    51ba:	84 81       	ldd	r24, Z+4	; 0x04
    51bc:	95 81       	ldd	r25, Z+5	; 0x05
    51be:	28 9f       	mul	r18, r24
    51c0:	a0 01       	movw	r20, r0
    51c2:	29 9f       	mul	r18, r25
    51c4:	50 0d       	add	r21, r0
    51c6:	38 9f       	mul	r19, r24
    51c8:	50 0d       	add	r21, r0
    51ca:	11 24       	eor	r1, r1
    51cc:	60 e0       	ldi	r22, 0x00	; 0
    51ce:	70 e0       	ldi	r23, 0x00	; 0
    51d0:	87 8d       	ldd	r24, Z+31	; 0x1f
    51d2:	90 a1       	ldd	r25, Z+32	; 0x20
    51d4:	0c 94 53 33 	jmp	0x66a6	; 0x66a6 <memset>

000051d8 <_ZN16Adafruit_SSD13065beginEhhbb>:
    51d8:	8f 92       	push	r8
    51da:	9f 92       	push	r9
    51dc:	af 92       	push	r10
    51de:	bf 92       	push	r11
    51e0:	cf 92       	push	r12
    51e2:	df 92       	push	r13
    51e4:	ef 92       	push	r14
    51e6:	ff 92       	push	r15
    51e8:	0f 93       	push	r16
    51ea:	1f 93       	push	r17
    51ec:	cf 93       	push	r28
    51ee:	df 93       	push	r29
    51f0:	ec 01       	movw	r28, r24
    51f2:	86 2e       	mov	r8, r22
    51f4:	b4 2e       	mov	r11, r20
    51f6:	a2 2e       	mov	r10, r18
    51f8:	90 2e       	mov	r9, r16
    51fa:	8f 8d       	ldd	r24, Y+31	; 0x1f
    51fc:	98 a1       	ldd	r25, Y+32	; 0x20
    51fe:	89 2b       	or	r24, r25
    5200:	e9 f4       	brne	.+58     	; 0x523c <_ZN16Adafruit_SSD13065beginEhhbb+0x64>
    5202:	2e 81       	ldd	r18, Y+6	; 0x06
    5204:	3f 81       	ldd	r19, Y+7	; 0x07
    5206:	c9 01       	movw	r24, r18
    5208:	07 96       	adiw	r24, 0x07	; 7
    520a:	97 fd       	sbrc	r25, 7
    520c:	07 96       	adiw	r24, 0x07	; 7
    520e:	23 e0       	ldi	r18, 0x03	; 3
    5210:	95 95       	asr	r25
    5212:	87 95       	ror	r24
    5214:	2a 95       	dec	r18
    5216:	e1 f7       	brne	.-8      	; 0x5210 <_ZN16Adafruit_SSD13065beginEhhbb+0x38>
    5218:	2c 81       	ldd	r18, Y+4	; 0x04
    521a:	3d 81       	ldd	r19, Y+5	; 0x05
    521c:	ac 01       	movw	r20, r24
    521e:	42 9f       	mul	r20, r18
    5220:	c0 01       	movw	r24, r0
    5222:	43 9f       	mul	r20, r19
    5224:	90 0d       	add	r25, r0
    5226:	52 9f       	mul	r21, r18
    5228:	90 0d       	add	r25, r0
    522a:	11 24       	eor	r1, r1
    522c:	0e 94 24 32 	call	0x6448	; 0x6448 <malloc>
    5230:	98 a3       	std	Y+32, r25	; 0x20
    5232:	8f 8f       	std	Y+31, r24	; 0x1f
    5234:	89 2b       	or	r24, r25
    5236:	11 f4       	brne	.+4      	; 0x523c <_ZN16Adafruit_SSD13065beginEhhbb+0x64>
    5238:	80 e0       	ldi	r24, 0x00	; 0
    523a:	92 c1       	rjmp	.+804    	; 0x5560 <_ZN16Adafruit_SSD13065beginEhhbb+0x388>
    523c:	ce 01       	movw	r24, r28
    523e:	0e 94 ce 28 	call	0x519c	; 0x519c <_ZN16Adafruit_SSD130612clearDisplayEv>
    5242:	8e 81       	ldd	r24, Y+6	; 0x06
    5244:	9f 81       	ldd	r25, Y+7	; 0x07
    5246:	6c 81       	ldd	r22, Y+4	; 0x04
    5248:	7d 81       	ldd	r23, Y+5	; 0x05
    524a:	81 32       	cpi	r24, 0x21	; 33
    524c:	91 05       	cpc	r25, r1
    524e:	e4 f0       	brlt	.+56     	; 0x5288 <_ZN16Adafruit_SSD13065beginEhhbb+0xb0>
    5250:	ac 01       	movw	r20, r24
    5252:	40 54       	subi	r20, 0x40	; 64
    5254:	51 09       	sbc	r21, r1
    5256:	57 ff       	sbrs	r21, 7
    5258:	02 c0       	rjmp	.+4      	; 0x525e <_ZN16Adafruit_SSD13065beginEhhbb+0x86>
    525a:	4f 5f       	subi	r20, 0xFF	; 255
    525c:	5f 4f       	sbci	r21, 0xFF	; 255
    525e:	55 95       	asr	r21
    5260:	47 95       	ror	r20
    5262:	62 55       	subi	r22, 0x52	; 82
    5264:	71 09       	sbc	r23, r1
    5266:	77 ff       	sbrs	r23, 7
    5268:	02 c0       	rjmp	.+4      	; 0x526e <_ZN16Adafruit_SSD13065beginEhhbb+0x96>
    526a:	6f 5f       	subi	r22, 0xFF	; 255
    526c:	7f 4f       	sbci	r23, 0xFF	; 255
    526e:	75 95       	asr	r23
    5270:	67 95       	ror	r22
    5272:	cc 24       	eor	r12, r12
    5274:	c3 94       	inc	r12
    5276:	d1 2c       	mov	r13, r1
    5278:	80 e4       	ldi	r24, 0x40	; 64
    527a:	e8 2e       	mov	r14, r24
    527c:	f1 2c       	mov	r15, r1
    527e:	02 e5       	ldi	r16, 0x52	; 82
    5280:	10 e0       	ldi	r17, 0x00	; 0
    5282:	22 e4       	ldi	r18, 0x42	; 66
    5284:	30 e1       	ldi	r19, 0x10	; 16
    5286:	1b c0       	rjmp	.+54     	; 0x52be <_ZN16Adafruit_SSD13065beginEhhbb+0xe6>
    5288:	ac 01       	movw	r20, r24
    528a:	40 52       	subi	r20, 0x20	; 32
    528c:	51 09       	sbc	r21, r1
    528e:	57 ff       	sbrs	r21, 7
    5290:	02 c0       	rjmp	.+4      	; 0x5296 <_ZN16Adafruit_SSD13065beginEhhbb+0xbe>
    5292:	4f 5f       	subi	r20, 0xFF	; 255
    5294:	5f 4f       	sbci	r21, 0xFF	; 255
    5296:	55 95       	asr	r21
    5298:	47 95       	ror	r20
    529a:	63 57       	subi	r22, 0x73	; 115
    529c:	71 09       	sbc	r23, r1
    529e:	77 ff       	sbrs	r23, 7
    52a0:	02 c0       	rjmp	.+4      	; 0x52a6 <_ZN16Adafruit_SSD13065beginEhhbb+0xce>
    52a2:	6f 5f       	subi	r22, 0xFF	; 255
    52a4:	7f 4f       	sbci	r23, 0xFF	; 255
    52a6:	75 95       	asr	r23
    52a8:	67 95       	ror	r22
    52aa:	cc 24       	eor	r12, r12
    52ac:	c3 94       	inc	r12
    52ae:	d1 2c       	mov	r13, r1
    52b0:	a0 e2       	ldi	r26, 0x20	; 32
    52b2:	ea 2e       	mov	r14, r26
    52b4:	f1 2c       	mov	r15, r1
    52b6:	03 e7       	ldi	r16, 0x73	; 115
    52b8:	10 e0       	ldi	r17, 0x00	; 0
    52ba:	22 e6       	ldi	r18, 0x62	; 98
    52bc:	3e e0       	ldi	r19, 0x0E	; 14
    52be:	ce 01       	movw	r24, r28
    52c0:	0e 94 a6 22 	call	0x454c	; 0x454c <_ZN12Adafruit_GFX10drawBitmapEiiPKhiij>
    52c4:	8a a2       	std	Y+34, r8	; 0x22
    52c6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    52c8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    52ca:	00 97       	sbiw	r24, 0x00	; 0
    52cc:	99 f0       	breq	.+38     	; 0x52f4 <_ZN16Adafruit_SSD13065beginEhhbb+0x11c>
    52ce:	b1 10       	cpse	r11, r1
    52d0:	07 c0       	rjmp	.+14     	; 0x52e0 <_ZN16Adafruit_SSD13065beginEhhbb+0x108>
    52d2:	2e 81       	ldd	r18, Y+6	; 0x06
    52d4:	3f 81       	ldd	r19, Y+7	; 0x07
    52d6:	20 32       	cpi	r18, 0x20	; 32
    52d8:	31 05       	cpc	r19, r1
    52da:	21 f4       	brne	.+8      	; 0x52e4 <_ZN16Adafruit_SSD13065beginEhhbb+0x10c>
    52dc:	2c e3       	ldi	r18, 0x3C	; 60
    52de:	03 c0       	rjmp	.+6      	; 0x52e6 <_ZN16Adafruit_SSD13065beginEhhbb+0x10e>
    52e0:	2b 2d       	mov	r18, r11
    52e2:	01 c0       	rjmp	.+2      	; 0x52e6 <_ZN16Adafruit_SSD13065beginEhhbb+0x10e>
    52e4:	2d e3       	ldi	r18, 0x3D	; 61
    52e6:	29 a3       	std	Y+33, r18	; 0x21
    52e8:	99 20       	and	r9, r9
    52ea:	09 f4       	brne	.+2      	; 0x52ee <_ZN16Adafruit_SSD13065beginEhhbb+0x116>
    52ec:	36 c1       	rjmp	.+620    	; 0x555a <_ZN16Adafruit_SSD13065beginEhhbb+0x382>
    52ee:	0e 94 5b 2e 	call	0x5cb6	; 0x5cb6 <_ZN7TwoWire5beginEv>
    52f2:	79 c0       	rjmp	.+242    	; 0x53e6 <_ZN16Adafruit_SSD13065beginEhhbb+0x20e>
    52f4:	61 e0       	ldi	r22, 0x01	; 1
    52f6:	8e a1       	ldd	r24, Y+38	; 0x26
    52f8:	0e 94 4c 1b 	call	0x3698	; 0x3698 <pinMode>
    52fc:	61 e0       	ldi	r22, 0x01	; 1
    52fe:	8f a1       	ldd	r24, Y+39	; 0x27
    5300:	0e 94 4c 1b 	call	0x3698	; 0x3698 <pinMode>
    5304:	8e a1       	ldd	r24, Y+38	; 0x26
    5306:	08 2e       	mov	r0, r24
    5308:	00 0c       	add	r0, r0
    530a:	99 0b       	sbc	r25, r25
    530c:	fc 01       	movw	r30, r24
    530e:	e7 5f       	subi	r30, 0xF7	; 247
    5310:	f6 4f       	sbci	r31, 0xF6	; 246
    5312:	e4 91       	lpm	r30, Z
    5314:	f0 e0       	ldi	r31, 0x00	; 0
    5316:	ee 0f       	add	r30, r30
    5318:	ff 1f       	adc	r31, r31
    531a:	e9 5d       	subi	r30, 0xD9	; 217
    531c:	f6 4f       	sbci	r31, 0xF6	; 246
    531e:	25 91       	lpm	r18, Z+
    5320:	34 91       	lpm	r19, Z
    5322:	3e a7       	std	Y+46, r19	; 0x2e
    5324:	2d a7       	std	Y+45, r18	; 0x2d
    5326:	fc 01       	movw	r30, r24
    5328:	eb 50       	subi	r30, 0x0B	; 11
    532a:	f7 4f       	sbci	r31, 0xF7	; 247
    532c:	e4 91       	lpm	r30, Z
    532e:	eb ab       	std	Y+51, r30	; 0x33
    5330:	8f a1       	ldd	r24, Y+39	; 0x27
    5332:	08 2e       	mov	r0, r24
    5334:	00 0c       	add	r0, r0
    5336:	99 0b       	sbc	r25, r25
    5338:	fc 01       	movw	r30, r24
    533a:	e7 5f       	subi	r30, 0xF7	; 247
    533c:	f6 4f       	sbci	r31, 0xF6	; 246
    533e:	e4 91       	lpm	r30, Z
    5340:	f0 e0       	ldi	r31, 0x00	; 0
    5342:	ee 0f       	add	r30, r30
    5344:	ff 1f       	adc	r31, r31
    5346:	e9 5d       	subi	r30, 0xD9	; 217
    5348:	f6 4f       	sbci	r31, 0xF6	; 246
    534a:	a5 91       	lpm	r26, Z+
    534c:	b4 91       	lpm	r27, Z
    534e:	b8 ab       	std	Y+48, r27	; 0x30
    5350:	af a7       	std	Y+47, r26	; 0x2f
    5352:	fc 01       	movw	r30, r24
    5354:	eb 50       	subi	r30, 0x0B	; 11
    5356:	f7 4f       	sbci	r31, 0xF7	; 247
    5358:	e4 91       	lpm	r30, Z
    535a:	ec ab       	std	Y+52, r30	; 0x34
    535c:	8c 91       	ld	r24, X
    535e:	e8 2b       	or	r30, r24
    5360:	ec 93       	st	X, r30
    5362:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5364:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5366:	89 2b       	or	r24, r25
    5368:	31 f0       	breq	.+12     	; 0x5376 <_ZN16Adafruit_SSD13065beginEhhbb+0x19e>
    536a:	99 20       	and	r9, r9
    536c:	09 f4       	brne	.+2      	; 0x5370 <_ZN16Adafruit_SSD13065beginEhhbb+0x198>
    536e:	3b c0       	rjmp	.+118    	; 0x53e6 <_ZN16Adafruit_SSD13065beginEhhbb+0x20e>
    5370:	0e 94 57 2d 	call	0x5aae	; 0x5aae <_ZN8SPIClass5beginEv>
    5374:	38 c0       	rjmp	.+112    	; 0x53e6 <_ZN16Adafruit_SSD13065beginEhhbb+0x20e>
    5376:	61 e0       	ldi	r22, 0x01	; 1
    5378:	8c a1       	ldd	r24, Y+36	; 0x24
    537a:	0e 94 4c 1b 	call	0x3698	; 0x3698 <pinMode>
    537e:	61 e0       	ldi	r22, 0x01	; 1
    5380:	8d a1       	ldd	r24, Y+37	; 0x25
    5382:	0e 94 4c 1b 	call	0x3698	; 0x3698 <pinMode>
    5386:	8c a1       	ldd	r24, Y+36	; 0x24
    5388:	08 2e       	mov	r0, r24
    538a:	00 0c       	add	r0, r0
    538c:	99 0b       	sbc	r25, r25
    538e:	fc 01       	movw	r30, r24
    5390:	e7 5f       	subi	r30, 0xF7	; 247
    5392:	f6 4f       	sbci	r31, 0xF6	; 246
    5394:	e4 91       	lpm	r30, Z
    5396:	f0 e0       	ldi	r31, 0x00	; 0
    5398:	ee 0f       	add	r30, r30
    539a:	ff 1f       	adc	r31, r31
    539c:	e9 5d       	subi	r30, 0xD9	; 217
    539e:	f6 4f       	sbci	r31, 0xF6	; 246
    53a0:	25 91       	lpm	r18, Z+
    53a2:	34 91       	lpm	r19, Z
    53a4:	3a a7       	std	Y+42, r19	; 0x2a
    53a6:	29 a7       	std	Y+41, r18	; 0x29
    53a8:	fc 01       	movw	r30, r24
    53aa:	eb 50       	subi	r30, 0x0B	; 11
    53ac:	f7 4f       	sbci	r31, 0xF7	; 247
    53ae:	e4 91       	lpm	r30, Z
    53b0:	e9 ab       	std	Y+49, r30	; 0x31
    53b2:	8d a1       	ldd	r24, Y+37	; 0x25
    53b4:	08 2e       	mov	r0, r24
    53b6:	00 0c       	add	r0, r0
    53b8:	99 0b       	sbc	r25, r25
    53ba:	fc 01       	movw	r30, r24
    53bc:	e7 5f       	subi	r30, 0xF7	; 247
    53be:	f6 4f       	sbci	r31, 0xF6	; 246
    53c0:	e4 91       	lpm	r30, Z
    53c2:	f0 e0       	ldi	r31, 0x00	; 0
    53c4:	ee 0f       	add	r30, r30
    53c6:	ff 1f       	adc	r31, r31
    53c8:	e9 5d       	subi	r30, 0xD9	; 217
    53ca:	f6 4f       	sbci	r31, 0xF6	; 246
    53cc:	a5 91       	lpm	r26, Z+
    53ce:	b4 91       	lpm	r27, Z
    53d0:	bc a7       	std	Y+44, r27	; 0x2c
    53d2:	ab a7       	std	Y+43, r26	; 0x2b
    53d4:	fc 01       	movw	r30, r24
    53d6:	eb 50       	subi	r30, 0x0B	; 11
    53d8:	f7 4f       	sbci	r31, 0xF7	; 247
    53da:	e4 91       	lpm	r30, Z
    53dc:	ea ab       	std	Y+50, r30	; 0x32
    53de:	8c 91       	ld	r24, X
    53e0:	e0 95       	com	r30
    53e2:	e8 23       	and	r30, r24
    53e4:	ec 93       	st	X, r30
    53e6:	aa 20       	and	r10, r10
    53e8:	f1 f0       	breq	.+60     	; 0x5426 <_ZN16Adafruit_SSD13065beginEhhbb+0x24e>
    53ea:	88 a5       	ldd	r24, Y+40	; 0x28
    53ec:	87 fd       	sbrc	r24, 7
    53ee:	1b c0       	rjmp	.+54     	; 0x5426 <_ZN16Adafruit_SSD13065beginEhhbb+0x24e>
    53f0:	61 e0       	ldi	r22, 0x01	; 1
    53f2:	0e 94 4c 1b 	call	0x3698	; 0x3698 <pinMode>
    53f6:	61 e0       	ldi	r22, 0x01	; 1
    53f8:	88 a5       	ldd	r24, Y+40	; 0x28
    53fa:	0e 94 88 1b 	call	0x3710	; 0x3710 <digitalWrite>
    53fe:	61 e0       	ldi	r22, 0x01	; 1
    5400:	70 e0       	ldi	r23, 0x00	; 0
    5402:	80 e0       	ldi	r24, 0x00	; 0
    5404:	90 e0       	ldi	r25, 0x00	; 0
    5406:	0e 94 84 1a 	call	0x3508	; 0x3508 <delay>
    540a:	60 e0       	ldi	r22, 0x00	; 0
    540c:	88 a5       	ldd	r24, Y+40	; 0x28
    540e:	0e 94 88 1b 	call	0x3710	; 0x3710 <digitalWrite>
    5412:	6a e0       	ldi	r22, 0x0A	; 10
    5414:	70 e0       	ldi	r23, 0x00	; 0
    5416:	80 e0       	ldi	r24, 0x00	; 0
    5418:	90 e0       	ldi	r25, 0x00	; 0
    541a:	0e 94 84 1a 	call	0x3508	; 0x3508 <delay>
    541e:	61 e0       	ldi	r22, 0x01	; 1
    5420:	88 a5       	ldd	r24, Y+40	; 0x28
    5422:	0e 94 88 1b 	call	0x3710	; 0x3710 <digitalWrite>
    5426:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5428:	9e 8d       	ldd	r25, Y+30	; 0x1e
    542a:	00 97       	sbiw	r24, 0x00	; 0
    542c:	39 f0       	breq	.+14     	; 0x543c <_ZN16Adafruit_SSD13065beginEhhbb+0x264>
    542e:	4d a9       	ldd	r20, Y+53	; 0x35
    5430:	5e a9       	ldd	r21, Y+54	; 0x36
    5432:	6f a9       	ldd	r22, Y+55	; 0x37
    5434:	78 ad       	ldd	r23, Y+56	; 0x38
    5436:	0e 94 6d 2e 	call	0x5cda	; 0x5cda <_ZN7TwoWire8setClockEm>
    543a:	0f c0       	rjmp	.+30     	; 0x545a <_ZN16Adafruit_SSD13065beginEhhbb+0x282>
    543c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    543e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5440:	89 2b       	or	r24, r25
    5442:	21 f0       	breq	.+8      	; 0x544c <_ZN16Adafruit_SSD13065beginEhhbb+0x274>
    5444:	8e ad       	ldd	r24, Y+62	; 0x3e
    5446:	9f ad       	ldd	r25, Y+63	; 0x3f
    5448:	0e 94 1c 27 	call	0x4e38	; 0x4e38 <_ZN8SPIClass16beginTransactionE11SPISettings>
    544c:	ef a5       	ldd	r30, Y+47	; 0x2f
    544e:	f8 a9       	ldd	r31, Y+48	; 0x30
    5450:	90 81       	ld	r25, Z
    5452:	8c a9       	ldd	r24, Y+52	; 0x34
    5454:	80 95       	com	r24
    5456:	89 23       	and	r24, r25
    5458:	80 83       	st	Z, r24
    545a:	44 e0       	ldi	r20, 0x04	; 4
    545c:	6e e5       	ldi	r22, 0x5E	; 94
    545e:	7e e0       	ldi	r23, 0x0E	; 14
    5460:	ce 01       	movw	r24, r28
    5462:	0e 94 26 28 	call	0x504c	; 0x504c <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    5466:	6e 81       	ldd	r22, Y+6	; 0x06
    5468:	61 50       	subi	r22, 0x01	; 1
    546a:	ce 01       	movw	r24, r28
    546c:	0e 94 7e 27 	call	0x4efc	; 0x4efc <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
    5470:	44 e0       	ldi	r20, 0x04	; 4
    5472:	6a e5       	ldi	r22, 0x5A	; 90
    5474:	7e e0       	ldi	r23, 0x0E	; 14
    5476:	ce 01       	movw	r24, r28
    5478:	0e 94 26 28 	call	0x504c	; 0x504c <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    547c:	8a a1       	ldd	r24, Y+34	; 0x22
    547e:	81 30       	cpi	r24, 0x01	; 1
    5480:	11 f4       	brne	.+4      	; 0x5486 <_ZN16Adafruit_SSD13065beginEhhbb+0x2ae>
    5482:	60 e1       	ldi	r22, 0x10	; 16
    5484:	01 c0       	rjmp	.+2      	; 0x5488 <_ZN16Adafruit_SSD13065beginEhhbb+0x2b0>
    5486:	64 e1       	ldi	r22, 0x14	; 20
    5488:	ce 01       	movw	r24, r28
    548a:	0e 94 7e 27 	call	0x4efc	; 0x4efc <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
    548e:	44 e0       	ldi	r20, 0x04	; 4
    5490:	66 e5       	ldi	r22, 0x56	; 86
    5492:	7e e0       	ldi	r23, 0x0E	; 14
    5494:	ce 01       	movw	r24, r28
    5496:	0e 94 26 28 	call	0x504c	; 0x504c <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    549a:	8f e8       	ldi	r24, 0x8F	; 143
    549c:	8d af       	std	Y+61, r24	; 0x3d
    549e:	8c 81       	ldd	r24, Y+4	; 0x04
    54a0:	9d 81       	ldd	r25, Y+5	; 0x05
    54a2:	80 38       	cpi	r24, 0x80	; 128
    54a4:	91 05       	cpc	r25, r1
    54a6:	71 f4       	brne	.+28     	; 0x54c4 <_ZN16Adafruit_SSD13065beginEhhbb+0x2ec>
    54a8:	8e 81       	ldd	r24, Y+6	; 0x06
    54aa:	9f 81       	ldd	r25, Y+7	; 0x07
    54ac:	80 34       	cpi	r24, 0x40	; 64
    54ae:	91 05       	cpc	r25, r1
    54b0:	b9 f4       	brne	.+46     	; 0x54e0 <_ZN16Adafruit_SSD13065beginEhhbb+0x308>
    54b2:	8a a1       	ldd	r24, Y+34	; 0x22
    54b4:	81 30       	cpi	r24, 0x01	; 1
    54b6:	11 f4       	brne	.+4      	; 0x54bc <_ZN16Adafruit_SSD13065beginEhhbb+0x2e4>
    54b8:	8f e9       	ldi	r24, 0x9F	; 159
    54ba:	01 c0       	rjmp	.+2      	; 0x54be <_ZN16Adafruit_SSD13065beginEhhbb+0x2e6>
    54bc:	8f ec       	ldi	r24, 0xCF	; 207
    54be:	8d af       	std	Y+61, r24	; 0x3d
    54c0:	12 e1       	ldi	r17, 0x12	; 18
    54c2:	0f c0       	rjmp	.+30     	; 0x54e2 <_ZN16Adafruit_SSD13065beginEhhbb+0x30a>
    54c4:	80 36       	cpi	r24, 0x60	; 96
    54c6:	91 05       	cpc	r25, r1
    54c8:	59 f4       	brne	.+22     	; 0x54e0 <_ZN16Adafruit_SSD13065beginEhhbb+0x308>
    54ca:	8e 81       	ldd	r24, Y+6	; 0x06
    54cc:	9f 81       	ldd	r25, Y+7	; 0x07
    54ce:	40 97       	sbiw	r24, 0x10	; 16
    54d0:	39 f4       	brne	.+14     	; 0x54e0 <_ZN16Adafruit_SSD13065beginEhhbb+0x308>
    54d2:	8a a1       	ldd	r24, Y+34	; 0x22
    54d4:	81 30       	cpi	r24, 0x01	; 1
    54d6:	11 f4       	brne	.+4      	; 0x54dc <_ZN16Adafruit_SSD13065beginEhhbb+0x304>
    54d8:	80 e1       	ldi	r24, 0x10	; 16
    54da:	01 c0       	rjmp	.+2      	; 0x54de <_ZN16Adafruit_SSD13065beginEhhbb+0x306>
    54dc:	8f ea       	ldi	r24, 0xAF	; 175
    54de:	8d af       	std	Y+61, r24	; 0x3d
    54e0:	12 e0       	ldi	r17, 0x02	; 2
    54e2:	6a ed       	ldi	r22, 0xDA	; 218
    54e4:	ce 01       	movw	r24, r28
    54e6:	0e 94 7e 27 	call	0x4efc	; 0x4efc <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
    54ea:	61 2f       	mov	r22, r17
    54ec:	ce 01       	movw	r24, r28
    54ee:	0e 94 7e 27 	call	0x4efc	; 0x4efc <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
    54f2:	61 e8       	ldi	r22, 0x81	; 129
    54f4:	ce 01       	movw	r24, r28
    54f6:	0e 94 7e 27 	call	0x4efc	; 0x4efc <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
    54fa:	6d ad       	ldd	r22, Y+61	; 0x3d
    54fc:	ce 01       	movw	r24, r28
    54fe:	0e 94 7e 27 	call	0x4efc	; 0x4efc <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
    5502:	69 ed       	ldi	r22, 0xD9	; 217
    5504:	ce 01       	movw	r24, r28
    5506:	0e 94 7e 27 	call	0x4efc	; 0x4efc <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
    550a:	8a a1       	ldd	r24, Y+34	; 0x22
    550c:	81 30       	cpi	r24, 0x01	; 1
    550e:	11 f4       	brne	.+4      	; 0x5514 <_ZN16Adafruit_SSD13065beginEhhbb+0x33c>
    5510:	62 e2       	ldi	r22, 0x22	; 34
    5512:	01 c0       	rjmp	.+2      	; 0x5516 <_ZN16Adafruit_SSD13065beginEhhbb+0x33e>
    5514:	61 ef       	ldi	r22, 0xF1	; 241
    5516:	ce 01       	movw	r24, r28
    5518:	0e 94 7e 27 	call	0x4efc	; 0x4efc <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
    551c:	46 e0       	ldi	r20, 0x06	; 6
    551e:	60 e5       	ldi	r22, 0x50	; 80
    5520:	7e e0       	ldi	r23, 0x0E	; 14
    5522:	ce 01       	movw	r24, r28
    5524:	0e 94 26 28 	call	0x504c	; 0x504c <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
    5528:	8d 8d       	ldd	r24, Y+29	; 0x1d
    552a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    552c:	00 97       	sbiw	r24, 0x00	; 0
    552e:	39 f0       	breq	.+14     	; 0x553e <_ZN16Adafruit_SSD13065beginEhhbb+0x366>
    5530:	49 ad       	ldd	r20, Y+57	; 0x39
    5532:	5a ad       	ldd	r21, Y+58	; 0x3a
    5534:	6b ad       	ldd	r22, Y+59	; 0x3b
    5536:	7c ad       	ldd	r23, Y+60	; 0x3c
    5538:	0e 94 6d 2e 	call	0x5cda	; 0x5cda <_ZN7TwoWire8setClockEm>
    553c:	0c c0       	rjmp	.+24     	; 0x5556 <_ZN16Adafruit_SSD13065beginEhhbb+0x37e>
    553e:	ef a5       	ldd	r30, Y+47	; 0x2f
    5540:	f8 a9       	ldd	r31, Y+48	; 0x30
    5542:	90 81       	ld	r25, Z
    5544:	8c a9       	ldd	r24, Y+52	; 0x34
    5546:	89 2b       	or	r24, r25
    5548:	80 83       	st	Z, r24
    554a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    554c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    554e:	89 2b       	or	r24, r25
    5550:	11 f0       	breq	.+4      	; 0x5556 <_ZN16Adafruit_SSD13065beginEhhbb+0x37e>
    5552:	0e 94 3d 27 	call	0x4e7a	; 0x4e7a <_ZN8SPIClass14endTransactionEv>
    5556:	81 e0       	ldi	r24, 0x01	; 1
    5558:	03 c0       	rjmp	.+6      	; 0x5560 <_ZN16Adafruit_SSD13065beginEhhbb+0x388>
    555a:	a1 10       	cpse	r10, r1
    555c:	46 cf       	rjmp	.-372    	; 0x53ea <_ZN16Adafruit_SSD13065beginEhhbb+0x212>
    555e:	67 cf       	rjmp	.-306    	; 0x542e <_ZN16Adafruit_SSD13065beginEhhbb+0x256>
    5560:	df 91       	pop	r29
    5562:	cf 91       	pop	r28
    5564:	1f 91       	pop	r17
    5566:	0f 91       	pop	r16
    5568:	ff 90       	pop	r15
    556a:	ef 90       	pop	r14
    556c:	df 90       	pop	r13
    556e:	cf 90       	pop	r12
    5570:	bf 90       	pop	r11
    5572:	af 90       	pop	r10
    5574:	9f 90       	pop	r9
    5576:	8f 90       	pop	r8
    5578:	08 95       	ret

0000557a <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij>:
    557a:	0f 93       	push	r16
    557c:	1f 93       	push	r17
    557e:	cf 93       	push	r28
    5580:	df 93       	push	r29
    5582:	dc 01       	movw	r26, r24
    5584:	57 fd       	sbrc	r21, 7
    5586:	64 c0       	rjmp	.+200    	; 0x5650 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xd6>
    5588:	16 96       	adiw	r26, 0x06	; 6
    558a:	8d 91       	ld	r24, X+
    558c:	9c 91       	ld	r25, X
    558e:	17 97       	sbiw	r26, 0x07	; 7
    5590:	48 17       	cp	r20, r24
    5592:	59 07       	cpc	r21, r25
    5594:	0c f0       	brlt	.+2      	; 0x5598 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0x1e>
    5596:	5c c0       	rjmp	.+184    	; 0x5650 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xd6>
    5598:	77 ff       	sbrs	r23, 7
    559a:	04 c0       	rjmp	.+8      	; 0x55a4 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0x2a>
    559c:	26 0f       	add	r18, r22
    559e:	37 1f       	adc	r19, r23
    55a0:	60 e0       	ldi	r22, 0x00	; 0
    55a2:	70 e0       	ldi	r23, 0x00	; 0
    55a4:	14 96       	adiw	r26, 0x04	; 4
    55a6:	cd 91       	ld	r28, X+
    55a8:	dc 91       	ld	r29, X
    55aa:	15 97       	sbiw	r26, 0x05	; 5
    55ac:	cb 01       	movw	r24, r22
    55ae:	82 0f       	add	r24, r18
    55b0:	93 1f       	adc	r25, r19
    55b2:	c8 17       	cp	r28, r24
    55b4:	d9 07       	cpc	r29, r25
    55b6:	1c f4       	brge	.+6      	; 0x55be <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0x44>
    55b8:	9e 01       	movw	r18, r28
    55ba:	26 1b       	sub	r18, r22
    55bc:	37 0b       	sbc	r19, r23
    55be:	12 16       	cp	r1, r18
    55c0:	13 06       	cpc	r1, r19
    55c2:	0c f0       	brlt	.+2      	; 0x55c6 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0x4c>
    55c4:	45 c0       	rjmp	.+138    	; 0x5650 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xd6>
    55c6:	fa 01       	movw	r30, r20
    55c8:	57 fd       	sbrc	r21, 7
    55ca:	37 96       	adiw	r30, 0x07	; 7
    55cc:	cf 01       	movw	r24, r30
    55ce:	e3 e0       	ldi	r30, 0x03	; 3
    55d0:	95 95       	asr	r25
    55d2:	87 95       	ror	r24
    55d4:	ea 95       	dec	r30
    55d6:	e1 f7       	brne	.-8      	; 0x55d0 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0x56>
    55d8:	8c 9f       	mul	r24, r28
    55da:	f0 01       	movw	r30, r0
    55dc:	8d 9f       	mul	r24, r29
    55de:	f0 0d       	add	r31, r0
    55e0:	9c 9f       	mul	r25, r28
    55e2:	f0 0d       	add	r31, r0
    55e4:	11 24       	eor	r1, r1
    55e6:	6e 0f       	add	r22, r30
    55e8:	7f 1f       	adc	r23, r31
    55ea:	5f 96       	adiw	r26, 0x1f	; 31
    55ec:	ed 91       	ld	r30, X+
    55ee:	fc 91       	ld	r31, X
    55f0:	90 97       	sbiw	r26, 0x20	; 32
    55f2:	e6 0f       	add	r30, r22
    55f4:	f7 1f       	adc	r31, r23
    55f6:	47 70       	andi	r20, 0x07	; 7
    55f8:	55 27       	eor	r21, r21
    55fa:	81 e0       	ldi	r24, 0x01	; 1
    55fc:	90 e0       	ldi	r25, 0x00	; 0
    55fe:	01 c0       	rjmp	.+2      	; 0x5602 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0x88>
    5600:	88 0f       	add	r24, r24
    5602:	4a 95       	dec	r20
    5604:	ea f7       	brpl	.-6      	; 0x5600 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0x86>
    5606:	48 2f       	mov	r20, r24
    5608:	01 30       	cpi	r16, 0x01	; 1
    560a:	11 05       	cpc	r17, r1
    560c:	39 f0       	breq	.+14     	; 0x561c <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xa2>
    560e:	78 f0       	brcs	.+30     	; 0x562e <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xb4>
    5610:	02 30       	cpi	r16, 0x02	; 2
    5612:	11 05       	cpc	r17, r1
    5614:	e9 f4       	brne	.+58     	; 0x5650 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xd6>
    5616:	2e 0f       	add	r18, r30
    5618:	3f 1f       	adc	r19, r31
    561a:	13 c0       	rjmp	.+38     	; 0x5642 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xc8>
    561c:	2e 0f       	add	r18, r30
    561e:	3f 1f       	adc	r19, r31
    5620:	e2 17       	cp	r30, r18
    5622:	f3 07       	cpc	r31, r19
    5624:	a9 f0       	breq	.+42     	; 0x5650 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xd6>
    5626:	80 81       	ld	r24, Z
    5628:	84 2b       	or	r24, r20
    562a:	81 93       	st	Z+, r24
    562c:	f9 cf       	rjmp	.-14     	; 0x5620 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xa6>
    562e:	80 95       	com	r24
    5630:	2e 0f       	add	r18, r30
    5632:	3f 1f       	adc	r19, r31
    5634:	e2 17       	cp	r30, r18
    5636:	f3 07       	cpc	r31, r19
    5638:	59 f0       	breq	.+22     	; 0x5650 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xd6>
    563a:	90 81       	ld	r25, Z
    563c:	98 23       	and	r25, r24
    563e:	91 93       	st	Z+, r25
    5640:	f9 cf       	rjmp	.-14     	; 0x5634 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xba>
    5642:	e2 17       	cp	r30, r18
    5644:	f3 07       	cpc	r31, r19
    5646:	21 f0       	breq	.+8      	; 0x5650 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xd6>
    5648:	80 81       	ld	r24, Z
    564a:	84 27       	eor	r24, r20
    564c:	81 93       	st	Z+, r24
    564e:	f9 cf       	rjmp	.-14     	; 0x5642 <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij+0xc8>
    5650:	df 91       	pop	r29
    5652:	cf 91       	pop	r28
    5654:	1f 91       	pop	r17
    5656:	0f 91       	pop	r16
    5658:	08 95       	ret

0000565a <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij>:
    565a:	ef 92       	push	r14
    565c:	ff 92       	push	r15
    565e:	0f 93       	push	r16
    5660:	1f 93       	push	r17
    5662:	cf 93       	push	r28
    5664:	df 93       	push	r29
    5666:	ec 01       	movw	r28, r24
    5668:	77 fd       	sbrc	r23, 7
    566a:	a5 c0       	rjmp	.+330    	; 0x57b6 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x15c>
    566c:	ec 80       	ldd	r14, Y+4	; 0x04
    566e:	fd 80       	ldd	r15, Y+5	; 0x05
    5670:	6e 15       	cp	r22, r14
    5672:	7f 05       	cpc	r23, r15
    5674:	0c f0       	brlt	.+2      	; 0x5678 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x1e>
    5676:	9f c0       	rjmp	.+318    	; 0x57b6 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x15c>
    5678:	57 ff       	sbrs	r21, 7
    567a:	04 c0       	rjmp	.+8      	; 0x5684 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x2a>
    567c:	24 0f       	add	r18, r20
    567e:	35 1f       	adc	r19, r21
    5680:	40 e0       	ldi	r20, 0x00	; 0
    5682:	50 e0       	ldi	r21, 0x00	; 0
    5684:	8e 81       	ldd	r24, Y+6	; 0x06
    5686:	9f 81       	ldd	r25, Y+7	; 0x07
    5688:	fa 01       	movw	r30, r20
    568a:	e2 0f       	add	r30, r18
    568c:	f3 1f       	adc	r31, r19
    568e:	8e 17       	cp	r24, r30
    5690:	9f 07       	cpc	r25, r31
    5692:	1c f4       	brge	.+6      	; 0x569a <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x40>
    5694:	9c 01       	movw	r18, r24
    5696:	24 1b       	sub	r18, r20
    5698:	35 0b       	sbc	r19, r21
    569a:	12 16       	cp	r1, r18
    569c:	13 06       	cpc	r1, r19
    569e:	0c f0       	brlt	.+2      	; 0x56a2 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x48>
    56a0:	8a c0       	rjmp	.+276    	; 0x57b6 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x15c>
    56a2:	92 2f       	mov	r25, r18
    56a4:	84 2f       	mov	r24, r20
    56a6:	86 95       	lsr	r24
    56a8:	86 95       	lsr	r24
    56aa:	86 95       	lsr	r24
    56ac:	8e 9d       	mul	r24, r14
    56ae:	d0 01       	movw	r26, r0
    56b0:	8f 9d       	mul	r24, r15
    56b2:	b0 0d       	add	r27, r0
    56b4:	11 24       	eor	r1, r1
    56b6:	6a 0f       	add	r22, r26
    56b8:	7b 1f       	adc	r23, r27
    56ba:	af 8d       	ldd	r26, Y+31	; 0x1f
    56bc:	b8 a1       	ldd	r27, Y+32	; 0x20
    56be:	a6 0f       	add	r26, r22
    56c0:	b7 1f       	adc	r27, r23
    56c2:	47 70       	andi	r20, 0x07	; 7
    56c4:	b1 f1       	breq	.+108    	; 0x5732 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xd8>
    56c6:	88 e0       	ldi	r24, 0x08	; 8
    56c8:	84 1b       	sub	r24, r20
    56ca:	48 2f       	mov	r20, r24
    56cc:	68 2f       	mov	r22, r24
    56ce:	70 e0       	ldi	r23, 0x00	; 0
    56d0:	fb 01       	movw	r30, r22
    56d2:	e8 5b       	subi	r30, 0xB8	; 184
    56d4:	f1 4f       	sbci	r31, 0xF1	; 241
    56d6:	e4 91       	lpm	r30, Z
    56d8:	28 17       	cp	r18, r24
    56da:	98 f4       	brcc	.+38     	; 0x5702 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xa8>
    56dc:	62 1b       	sub	r22, r18
    56de:	71 09       	sbc	r23, r1
    56e0:	2f ef       	ldi	r18, 0xFF	; 255
    56e2:	30 e0       	ldi	r19, 0x00	; 0
    56e4:	02 c0       	rjmp	.+4      	; 0x56ea <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x90>
    56e6:	35 95       	asr	r19
    56e8:	27 95       	ror	r18
    56ea:	6a 95       	dec	r22
    56ec:	e2 f7       	brpl	.-8      	; 0x56e6 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x8c>
    56ee:	e2 23       	and	r30, r18
    56f0:	01 30       	cpi	r16, 0x01	; 1
    56f2:	11 05       	cpc	r17, r1
    56f4:	49 f0       	breq	.+18     	; 0x5708 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xae>
    56f6:	78 f0       	brcs	.+30     	; 0x5716 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xbc>
    56f8:	02 30       	cpi	r16, 0x02	; 2
    56fa:	11 05       	cpc	r17, r1
    56fc:	09 f0       	breq	.+2      	; 0x5700 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xa6>
    56fe:	5b c0       	rjmp	.+182    	; 0x57b6 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x15c>
    5700:	0e c0       	rjmp	.+28     	; 0x571e <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xc4>
    5702:	01 30       	cpi	r16, 0x01	; 1
    5704:	11 05       	cpc	r17, r1
    5706:	19 f4       	brne	.+6      	; 0x570e <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xb4>
    5708:	8c 91       	ld	r24, X
    570a:	e8 2b       	or	r30, r24
    570c:	0a c0       	rjmp	.+20     	; 0x5722 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xc8>
    570e:	01 30       	cpi	r16, 0x01	; 1
    5710:	11 05       	cpc	r17, r1
    5712:	08 f0       	brcs	.+2      	; 0x5716 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xbc>
    5714:	49 c0       	rjmp	.+146    	; 0x57a8 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x14e>
    5716:	e0 95       	com	r30
    5718:	8c 91       	ld	r24, X
    571a:	e8 23       	and	r30, r24
    571c:	02 c0       	rjmp	.+4      	; 0x5722 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xc8>
    571e:	8c 91       	ld	r24, X
    5720:	e8 27       	eor	r30, r24
    5722:	ec 93       	st	X, r30
    5724:	94 17       	cp	r25, r20
    5726:	08 f4       	brcc	.+2      	; 0x572a <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xd0>
    5728:	46 c0       	rjmp	.+140    	; 0x57b6 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x15c>
    572a:	2c 81       	ldd	r18, Y+4	; 0x04
    572c:	3d 81       	ldd	r19, Y+5	; 0x05
    572e:	a2 0f       	add	r26, r18
    5730:	b3 1f       	adc	r27, r19
    5732:	e9 2f       	mov	r30, r25
    5734:	e4 1b       	sub	r30, r20
    5736:	e8 30       	cpi	r30, 0x08	; 8
    5738:	f8 f0       	brcs	.+62     	; 0x5778 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x11e>
    573a:	02 30       	cpi	r16, 0x02	; 2
    573c:	11 05       	cpc	r17, r1
    573e:	61 f4       	brne	.+24     	; 0x5758 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xfe>
    5740:	8e 2f       	mov	r24, r30
    5742:	9c 91       	ld	r25, X
    5744:	90 95       	com	r25
    5746:	9c 93       	st	X, r25
    5748:	2c 81       	ldd	r18, Y+4	; 0x04
    574a:	3d 81       	ldd	r19, Y+5	; 0x05
    574c:	a2 0f       	add	r26, r18
    574e:	b3 1f       	adc	r27, r19
    5750:	88 50       	subi	r24, 0x08	; 8
    5752:	88 30       	cpi	r24, 0x08	; 8
    5754:	b0 f7       	brcc	.-20     	; 0x5742 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xe8>
    5756:	0f c0       	rjmp	.+30     	; 0x5776 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x11c>
    5758:	81 e0       	ldi	r24, 0x01	; 1
    575a:	01 15       	cp	r16, r1
    575c:	11 05       	cpc	r17, r1
    575e:	09 f4       	brne	.+2      	; 0x5762 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x108>
    5760:	80 e0       	ldi	r24, 0x00	; 0
    5762:	81 95       	neg	r24
    5764:	9e 2f       	mov	r25, r30
    5766:	8c 93       	st	X, r24
    5768:	2c 81       	ldd	r18, Y+4	; 0x04
    576a:	3d 81       	ldd	r19, Y+5	; 0x05
    576c:	a2 0f       	add	r26, r18
    576e:	b3 1f       	adc	r27, r19
    5770:	98 50       	subi	r25, 0x08	; 8
    5772:	98 30       	cpi	r25, 0x08	; 8
    5774:	c0 f7       	brcc	.-16     	; 0x5766 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x10c>
    5776:	e7 70       	andi	r30, 0x07	; 7
    5778:	ee 23       	and	r30, r30
    577a:	e9 f0       	breq	.+58     	; 0x57b6 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x15c>
    577c:	f0 e0       	ldi	r31, 0x00	; 0
    577e:	e0 5c       	subi	r30, 0xC0	; 192
    5780:	f1 4f       	sbci	r31, 0xF1	; 241
    5782:	e4 91       	lpm	r30, Z
    5784:	01 30       	cpi	r16, 0x01	; 1
    5786:	11 05       	cpc	r17, r1
    5788:	39 f0       	breq	.+14     	; 0x5798 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x13e>
    578a:	48 f0       	brcs	.+18     	; 0x579e <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x144>
    578c:	02 30       	cpi	r16, 0x02	; 2
    578e:	11 05       	cpc	r17, r1
    5790:	91 f4       	brne	.+36     	; 0x57b6 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x15c>
    5792:	8c 91       	ld	r24, X
    5794:	e8 27       	eor	r30, r24
    5796:	06 c0       	rjmp	.+12     	; 0x57a4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x14a>
    5798:	8c 91       	ld	r24, X
    579a:	e8 2b       	or	r30, r24
    579c:	03 c0       	rjmp	.+6      	; 0x57a4 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x14a>
    579e:	e0 95       	com	r30
    57a0:	8c 91       	ld	r24, X
    57a2:	e8 23       	and	r30, r24
    57a4:	ec 93       	st	X, r30
    57a6:	07 c0       	rjmp	.+14     	; 0x57b6 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x15c>
    57a8:	02 30       	cpi	r16, 0x02	; 2
    57aa:	11 05       	cpc	r17, r1
    57ac:	09 f4       	brne	.+2      	; 0x57b0 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0x156>
    57ae:	b7 cf       	rjmp	.-146    	; 0x571e <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xc4>
    57b0:	ae 0d       	add	r26, r14
    57b2:	bf 1d       	adc	r27, r15
    57b4:	be cf       	rjmp	.-132    	; 0x5732 <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij+0xd8>
    57b6:	df 91       	pop	r29
    57b8:	cf 91       	pop	r28
    57ba:	1f 91       	pop	r17
    57bc:	0f 91       	pop	r16
    57be:	ff 90       	pop	r15
    57c0:	ef 90       	pop	r14
    57c2:	08 95       	ret

000057c4 <_ZN16Adafruit_SSD130613drawFastHLineEiiij>:
    57c4:	0f 93       	push	r16
    57c6:	1f 93       	push	r17
    57c8:	dc 01       	movw	r26, r24
    57ca:	56 96       	adiw	r26, 0x16	; 22
    57cc:	ec 91       	ld	r30, X
    57ce:	56 97       	sbiw	r26, 0x16	; 22
    57d0:	e2 30       	cpi	r30, 0x02	; 2
    57d2:	61 f0       	breq	.+24     	; 0x57ec <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x28>
    57d4:	e3 30       	cpi	r30, 0x03	; 3
    57d6:	09 f1       	breq	.+66     	; 0x581a <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x56>
    57d8:	e1 30       	cpi	r30, 0x01	; 1
    57da:	81 f5       	brne	.+96     	; 0x583c <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x78>
    57dc:	14 96       	adiw	r26, 0x04	; 4
    57de:	ed 91       	ld	r30, X+
    57e0:	fc 91       	ld	r31, X
    57e2:	15 97       	sbiw	r26, 0x05	; 5
    57e4:	e4 1b       	sub	r30, r20
    57e6:	f5 0b       	sbc	r31, r21
    57e8:	31 97       	sbiw	r30, 0x01	; 1
    57ea:	23 c0       	rjmp	.+70     	; 0x5832 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x6e>
    57ec:	dc 01       	movw	r26, r24
    57ee:	14 96       	adiw	r26, 0x04	; 4
    57f0:	ed 91       	ld	r30, X+
    57f2:	fc 91       	ld	r31, X
    57f4:	15 97       	sbiw	r26, 0x05	; 5
    57f6:	df 01       	movw	r26, r30
    57f8:	a6 1b       	sub	r26, r22
    57fa:	b7 0b       	sbc	r27, r23
    57fc:	bd 01       	movw	r22, r26
    57fe:	dc 01       	movw	r26, r24
    5800:	16 96       	adiw	r26, 0x06	; 6
    5802:	ed 91       	ld	r30, X+
    5804:	fc 91       	ld	r31, X
    5806:	17 97       	sbiw	r26, 0x07	; 7
    5808:	df 01       	movw	r26, r30
    580a:	a4 1b       	sub	r26, r20
    580c:	b5 0b       	sbc	r27, r21
    580e:	ad 01       	movw	r20, r26
    5810:	41 50       	subi	r20, 0x01	; 1
    5812:	51 09       	sbc	r21, r1
    5814:	62 1b       	sub	r22, r18
    5816:	73 0b       	sbc	r23, r19
    5818:	11 c0       	rjmp	.+34     	; 0x583c <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x78>
    581a:	fa 01       	movw	r30, r20
    581c:	dc 01       	movw	r26, r24
    581e:	16 96       	adiw	r26, 0x06	; 6
    5820:	4d 91       	ld	r20, X+
    5822:	5c 91       	ld	r21, X
    5824:	17 97       	sbiw	r26, 0x07	; 7
    5826:	da 01       	movw	r26, r20
    5828:	a6 1b       	sub	r26, r22
    582a:	b7 0b       	sbc	r27, r23
    582c:	bd 01       	movw	r22, r26
    582e:	62 1b       	sub	r22, r18
    5830:	73 0b       	sbc	r23, r19
    5832:	ab 01       	movw	r20, r22
    5834:	bf 01       	movw	r22, r30
    5836:	0e 94 2d 2b 	call	0x565a	; 0x565a <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij>
    583a:	02 c0       	rjmp	.+4      	; 0x5840 <_ZN16Adafruit_SSD130613drawFastHLineEiiij+0x7c>
    583c:	0e 94 bd 2a 	call	0x557a	; 0x557a <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij>
    5840:	1f 91       	pop	r17
    5842:	0f 91       	pop	r16
    5844:	08 95       	ret

00005846 <_ZN16Adafruit_SSD130613drawFastVLineEiiij>:
    5846:	0f 93       	push	r16
    5848:	1f 93       	push	r17
    584a:	dc 01       	movw	r26, r24
    584c:	56 96       	adiw	r26, 0x16	; 22
    584e:	ec 91       	ld	r30, X
    5850:	56 97       	sbiw	r26, 0x16	; 22
    5852:	e2 30       	cpi	r30, 0x02	; 2
    5854:	69 f0       	breq	.+26     	; 0x5870 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x2a>
    5856:	e3 30       	cpi	r30, 0x03	; 3
    5858:	11 f1       	breq	.+68     	; 0x589e <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x58>
    585a:	e1 30       	cpi	r30, 0x01	; 1
    585c:	89 f5       	brne	.+98     	; 0x58c0 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x7a>
    585e:	14 96       	adiw	r26, 0x04	; 4
    5860:	ed 91       	ld	r30, X+
    5862:	fc 91       	ld	r31, X
    5864:	15 97       	sbiw	r26, 0x05	; 5
    5866:	e4 1b       	sub	r30, r20
    5868:	f5 0b       	sbc	r31, r21
    586a:	e2 1b       	sub	r30, r18
    586c:	f3 0b       	sbc	r31, r19
    586e:	23 c0       	rjmp	.+70     	; 0x58b6 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x70>
    5870:	dc 01       	movw	r26, r24
    5872:	14 96       	adiw	r26, 0x04	; 4
    5874:	ed 91       	ld	r30, X+
    5876:	fc 91       	ld	r31, X
    5878:	15 97       	sbiw	r26, 0x05	; 5
    587a:	df 01       	movw	r26, r30
    587c:	a6 1b       	sub	r26, r22
    587e:	b7 0b       	sbc	r27, r23
    5880:	bd 01       	movw	r22, r26
    5882:	61 50       	subi	r22, 0x01	; 1
    5884:	71 09       	sbc	r23, r1
    5886:	dc 01       	movw	r26, r24
    5888:	16 96       	adiw	r26, 0x06	; 6
    588a:	ed 91       	ld	r30, X+
    588c:	fc 91       	ld	r31, X
    588e:	17 97       	sbiw	r26, 0x07	; 7
    5890:	df 01       	movw	r26, r30
    5892:	a4 1b       	sub	r26, r20
    5894:	b5 0b       	sbc	r27, r21
    5896:	ad 01       	movw	r20, r26
    5898:	42 1b       	sub	r20, r18
    589a:	53 0b       	sbc	r21, r19
    589c:	11 c0       	rjmp	.+34     	; 0x58c0 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x7a>
    589e:	fa 01       	movw	r30, r20
    58a0:	dc 01       	movw	r26, r24
    58a2:	16 96       	adiw	r26, 0x06	; 6
    58a4:	4d 91       	ld	r20, X+
    58a6:	5c 91       	ld	r21, X
    58a8:	17 97       	sbiw	r26, 0x07	; 7
    58aa:	da 01       	movw	r26, r20
    58ac:	a6 1b       	sub	r26, r22
    58ae:	b7 0b       	sbc	r27, r23
    58b0:	bd 01       	movw	r22, r26
    58b2:	61 50       	subi	r22, 0x01	; 1
    58b4:	71 09       	sbc	r23, r1
    58b6:	ab 01       	movw	r20, r22
    58b8:	bf 01       	movw	r22, r30
    58ba:	0e 94 bd 2a 	call	0x557a	; 0x557a <_ZN16Adafruit_SSD130621drawFastHLineInternalEiiij>
    58be:	02 c0       	rjmp	.+4      	; 0x58c4 <_ZN16Adafruit_SSD130613drawFastVLineEiiij+0x7e>
    58c0:	0e 94 2d 2b 	call	0x565a	; 0x565a <_ZN16Adafruit_SSD130621drawFastVLineInternalEiiij>
    58c4:	1f 91       	pop	r17
    58c6:	0f 91       	pop	r16
    58c8:	08 95       	ret

000058ca <_ZN16Adafruit_SSD13067displayEv>:
    @return None (void).
    @note   Drawing operations are not visible until this function is
            called. Call after each graphics command, or after a whole set
            of graphics commands, as best needed by one's own application.
*/
void Adafruit_SSD1306::display(void) {
    58ca:	cf 92       	push	r12
    58cc:	df 92       	push	r13
    58ce:	ef 92       	push	r14
    58d0:	ff 92       	push	r15
    58d2:	0f 93       	push	r16
    58d4:	1f 93       	push	r17
    58d6:	cf 93       	push	r28
    58d8:	df 93       	push	r29
    58da:	ec 01       	movw	r28, r24
  TRANSACTION_START
    58dc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    58de:	9e 8d       	ldd	r25, Y+30	; 0x1e
    58e0:	00 97       	sbiw	r24, 0x00	; 0
    58e2:	39 f0       	breq	.+14     	; 0x58f2 <_ZN16Adafruit_SSD13067displayEv+0x28>
    58e4:	4d a9       	ldd	r20, Y+53	; 0x35
    58e6:	5e a9       	ldd	r21, Y+54	; 0x36
    58e8:	6f a9       	ldd	r22, Y+55	; 0x37
    58ea:	78 ad       	ldd	r23, Y+56	; 0x38
    58ec:	0e 94 6d 2e 	call	0x5cda	; 0x5cda <_ZN7TwoWire8setClockEm>
    58f0:	0f c0       	rjmp	.+30     	; 0x5910 <_ZN16Adafruit_SSD13067displayEv+0x46>
    58f2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    58f4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    58f6:	89 2b       	or	r24, r25
    58f8:	21 f0       	breq	.+8      	; 0x5902 <_ZN16Adafruit_SSD13067displayEv+0x38>
    58fa:	8e ad       	ldd	r24, Y+62	; 0x3e
    58fc:	9f ad       	ldd	r25, Y+63	; 0x3f
    58fe:	0e 94 1c 27 	call	0x4e38	; 0x4e38 <_ZN8SPIClass16beginTransactionE11SPISettings>
    5902:	ef a5       	ldd	r30, Y+47	; 0x2f
    5904:	f8 a9       	ldd	r31, Y+48	; 0x30
    5906:	90 81       	ld	r25, Z
    5908:	8c a9       	ldd	r24, Y+52	; 0x34
    590a:	80 95       	com	r24
    590c:	89 23       	and	r24, r25
    590e:	80 83       	st	Z, r24
  static const uint8_t PROGMEM dlist1[] = {
      SSD1306_PAGEADDR,
      0,                      // Page start address
      0xFF,                   // Page end (not really, but works here)
      SSD1306_COLUMNADDR, 0}; // Column start address
  ssd1306_commandList(dlist1, sizeof(dlist1));
    5910:	45 e0       	ldi	r20, 0x05	; 5
    5912:	6b e3       	ldi	r22, 0x3B	; 59
    5914:	7e e0       	ldi	r23, 0x0E	; 14
    5916:	ce 01       	movw	r24, r28
    5918:	0e 94 26 28 	call	0x504c	; 0x504c <_ZN16Adafruit_SSD130619ssd1306_commandListEPKhh>
  ssd1306_command1(WIDTH - 1); // Column end address
    591c:	6c 81       	ldd	r22, Y+4	; 0x04
    591e:	61 50       	subi	r22, 0x01	; 1
    5920:	ce 01       	movw	r24, r28
    5922:	0e 94 7e 27 	call	0x4efc	; 0x4efc <_ZN16Adafruit_SSD130616ssd1306_command1Eh>
  // a screen write and one immediately after should cover it.  But if
  // not, if this becomes a problem, yields() might be added in the
  // 32-byte transfer condition below.
  yield();
#endif
  uint16_t count = WIDTH * ((HEIGHT + 7) / 8);
    5926:	2e 81       	ldd	r18, Y+6	; 0x06
    5928:	3f 81       	ldd	r19, Y+7	; 0x07
    592a:	c9 01       	movw	r24, r18
    592c:	07 96       	adiw	r24, 0x07	; 7
    592e:	97 fd       	sbrc	r25, 7
    5930:	07 96       	adiw	r24, 0x07	; 7
    5932:	23 e0       	ldi	r18, 0x03	; 3
    5934:	95 95       	asr	r25
    5936:	87 95       	ror	r24
    5938:	2a 95       	dec	r18
    593a:	e1 f7       	brne	.-8      	; 0x5934 <_ZN16Adafruit_SSD13067displayEv+0x6a>
    593c:	2c 81       	ldd	r18, Y+4	; 0x04
    593e:	3d 81       	ldd	r19, Y+5	; 0x05
    5940:	82 9f       	mul	r24, r18
    5942:	70 01       	movw	r14, r0
    5944:	83 9f       	mul	r24, r19
    5946:	f0 0c       	add	r15, r0
    5948:	92 9f       	mul	r25, r18
    594a:	f0 0c       	add	r15, r0
    594c:	11 24       	eor	r1, r1
  uint8_t *ptr = buffer;
    594e:	0f 8d       	ldd	r16, Y+31	; 0x1f
    5950:	18 a1       	ldd	r17, Y+32	; 0x20
  if (wire) { // I2C
    5952:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5954:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5956:	e0 0e       	add	r14, r16
    5958:	f1 1e       	adc	r15, r17
    595a:	00 97       	sbiw	r24, 0x00	; 0
    595c:	09 f4       	brne	.+2      	; 0x5960 <_ZN16Adafruit_SSD13067displayEv+0x96>
    595e:	43 c0       	rjmp	.+134    	; 0x59e6 <_ZN16Adafruit_SSD13067displayEv+0x11c>
    wire->beginTransmission(i2caddr);
    5960:	69 a1       	ldd	r22, Y+33	; 0x21
    5962:	06 2e       	mov	r0, r22
    5964:	00 0c       	add	r0, r0
    5966:	77 0b       	sbc	r23, r23
    5968:	0e 94 7b 2e 	call	0x5cf6	; 0x5cf6 <_ZN7TwoWire17beginTransmissionEi>
    WIRE_WRITE((uint8_t)0x40);
    596c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    596e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5970:	dc 01       	movw	r26, r24
    5972:	ed 91       	ld	r30, X+
    5974:	fc 91       	ld	r31, X
    5976:	01 90       	ld	r0, Z+
    5978:	f0 81       	ld	r31, Z
    597a:	e0 2d       	mov	r30, r0
    597c:	60 e4       	ldi	r22, 0x40	; 64
    597e:	09 95       	icall
    5980:	68 01       	movw	r12, r16
    uint16_t bytesOut = 1;
    5982:	01 e0       	ldi	r16, 0x01	; 1
    5984:	10 e0       	ldi	r17, 0x00	; 0
    5986:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5988:	9e 8d       	ldd	r25, Y+30	; 0x1e
    while (count--) {
    598a:	ec 14       	cp	r14, r12
    598c:	fd 04       	cpc	r15, r13
    598e:	41 f1       	breq	.+80     	; 0x59e0 <_ZN16Adafruit_SSD13067displayEv+0x116>
      if (bytesOut >= WIRE_MAX) {
    5990:	00 32       	cpi	r16, 0x20	; 32
    5992:	11 05       	cpc	r17, r1
    5994:	b0 f0       	brcs	.+44     	; 0x59c2 <_ZN16Adafruit_SSD13067displayEv+0xf8>
        wire->endTransmission();
    5996:	0e 94 90 2e 	call	0x5d20	; 0x5d20 <_ZN7TwoWire15endTransmissionEv>
        wire->beginTransmission(i2caddr);
    599a:	69 a1       	ldd	r22, Y+33	; 0x21
    599c:	06 2e       	mov	r0, r22
    599e:	00 0c       	add	r0, r0
    59a0:	77 0b       	sbc	r23, r23
    59a2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    59a4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    59a6:	0e 94 7b 2e 	call	0x5cf6	; 0x5cf6 <_ZN7TwoWire17beginTransmissionEi>
        WIRE_WRITE((uint8_t)0x40);
    59aa:	8d 8d       	ldd	r24, Y+29	; 0x1d
    59ac:	9e 8d       	ldd	r25, Y+30	; 0x1e
    59ae:	dc 01       	movw	r26, r24
    59b0:	ed 91       	ld	r30, X+
    59b2:	fc 91       	ld	r31, X
    59b4:	01 90       	ld	r0, Z+
    59b6:	f0 81       	ld	r31, Z
    59b8:	e0 2d       	mov	r30, r0
    59ba:	60 e4       	ldi	r22, 0x40	; 64
    59bc:	09 95       	icall
        bytesOut = 1;
    59be:	01 e0       	ldi	r16, 0x01	; 1
    59c0:	10 e0       	ldi	r17, 0x00	; 0
      }
      WIRE_WRITE(*ptr++);
    59c2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    59c4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    59c6:	f6 01       	movw	r30, r12
    59c8:	61 91       	ld	r22, Z+
    59ca:	6f 01       	movw	r12, r30
    59cc:	dc 01       	movw	r26, r24
    59ce:	ed 91       	ld	r30, X+
    59d0:	fc 91       	ld	r31, X
    59d2:	01 90       	ld	r0, Z+
    59d4:	f0 81       	ld	r31, Z
    59d6:	e0 2d       	mov	r30, r0
    59d8:	09 95       	icall
      bytesOut++;
    59da:	0f 5f       	subi	r16, 0xFF	; 255
    59dc:	1f 4f       	sbci	r17, 0xFF	; 255
  uint8_t *ptr = buffer;
  if (wire) { // I2C
    wire->beginTransmission(i2caddr);
    WIRE_WRITE((uint8_t)0x40);
    uint16_t bytesOut = 1;
    while (count--) {
    59de:	d3 cf       	rjmp	.-90     	; 0x5986 <_ZN16Adafruit_SSD13067displayEv+0xbc>
        bytesOut = 1;
      }
      WIRE_WRITE(*ptr++);
      bytesOut++;
    }
    wire->endTransmission();
    59e0:	0e 94 90 2e 	call	0x5d20	; 0x5d20 <_ZN7TwoWire15endTransmissionEv>
    59e4:	35 c0       	rjmp	.+106    	; 0x5a50 <_ZN16Adafruit_SSD13067displayEv+0x186>
  } else { // SPI
    SSD1306_MODE_DATA
    59e6:	ed a5       	ldd	r30, Y+45	; 0x2d
    59e8:	fe a5       	ldd	r31, Y+46	; 0x2e
    59ea:	90 81       	ld	r25, Z
    59ec:	8b a9       	ldd	r24, Y+51	; 0x33
    59ee:	89 2b       	or	r24, r25
    59f0:	80 83       	st	Z, r24
    while (count--)
    59f2:	0e 15       	cp	r16, r14
    59f4:	1f 05       	cpc	r17, r15
    59f6:	61 f1       	breq	.+88     	; 0x5a50 <_ZN16Adafruit_SSD13067displayEv+0x186>
      SPIwrite(*ptr++);
    59f8:	f8 01       	movw	r30, r16
    59fa:	81 91       	ld	r24, Z+
    59fc:	8f 01       	movw	r16, r30
    @return void
    @note   See HAVE_PORTREG which defines if the method uses a port or bit-bang
   method
*/
inline void Adafruit_SSD1306::SPIwrite(uint8_t d) {
  if (spi) {
    59fe:	2b 8d       	ldd	r18, Y+27	; 0x1b
    5a00:	3c 8d       	ldd	r19, Y+28	; 0x1c
    5a02:	23 2b       	or	r18, r19
    5a04:	19 f0       	breq	.+6      	; 0x5a0c <_ZN16Adafruit_SSD13067displayEv+0x142>
    (void)spi->transfer(d);
    5a06:	0e 94 36 27 	call	0x4e6c	; 0x4e6c <_ZN8SPIClass8transferEh>
    5a0a:	f3 cf       	rjmp	.-26     	; 0x59f2 <_ZN16Adafruit_SSD13067displayEv+0x128>
    @return void
    @note   See HAVE_PORTREG which defines if the method uses a port or bit-bang
   method
*/
inline void Adafruit_SSD1306::SPIwrite(uint8_t d) {
  if (spi) {
    5a0c:	28 e0       	ldi	r18, 0x08	; 8
    5a0e:	30 e0       	ldi	r19, 0x00	; 0
    5a10:	40 e8       	ldi	r20, 0x80	; 128
    5a12:	e9 a5       	ldd	r30, Y+41	; 0x29
    5a14:	fa a5       	ldd	r31, Y+42	; 0x2a
    5a16:	99 a9       	ldd	r25, Y+49	; 0x31
    (void)spi->transfer(d);
  } else {
    for (uint8_t bit = 0x80; bit; bit >>= 1) {
#ifdef HAVE_PORTREG
      if (d & bit)
    5a18:	58 2f       	mov	r21, r24
    5a1a:	54 23       	and	r21, r20
    5a1c:	19 f0       	breq	.+6      	; 0x5a24 <_ZN16Adafruit_SSD13067displayEv+0x15a>
        *mosiPort |= mosiPinMask;
    5a1e:	50 81       	ld	r21, Z
    5a20:	95 2b       	or	r25, r21
    5a22:	03 c0       	rjmp	.+6      	; 0x5a2a <_ZN16Adafruit_SSD13067displayEv+0x160>
      else
        *mosiPort &= ~mosiPinMask;
    5a24:	50 81       	ld	r21, Z
    5a26:	90 95       	com	r25
    5a28:	95 23       	and	r25, r21
    5a2a:	90 83       	st	Z, r25
      *clkPort |= clkPinMask;  // Clock high
    5a2c:	eb a5       	ldd	r30, Y+43	; 0x2b
    5a2e:	fc a5       	ldd	r31, Y+44	; 0x2c
    5a30:	50 81       	ld	r21, Z
    5a32:	9a a9       	ldd	r25, Y+50	; 0x32
    5a34:	95 2b       	or	r25, r21
    5a36:	90 83       	st	Z, r25
      *clkPort &= ~clkPinMask; // Clock low
    5a38:	eb a5       	ldd	r30, Y+43	; 0x2b
    5a3a:	fc a5       	ldd	r31, Y+44	; 0x2c
    5a3c:	50 81       	ld	r21, Z
    5a3e:	9a a9       	ldd	r25, Y+50	; 0x32
    5a40:	90 95       	com	r25
    5a42:	95 23       	and	r25, r21
    5a44:	90 83       	st	Z, r25
*/
inline void Adafruit_SSD1306::SPIwrite(uint8_t d) {
  if (spi) {
    (void)spi->transfer(d);
  } else {
    for (uint8_t bit = 0x80; bit; bit >>= 1) {
    5a46:	46 95       	lsr	r20
    5a48:	21 50       	subi	r18, 0x01	; 1
    5a4a:	31 09       	sbc	r19, r1
    5a4c:	11 f7       	brne	.-60     	; 0x5a12 <_ZN16Adafruit_SSD13067displayEv+0x148>
    5a4e:	d1 cf       	rjmp	.-94     	; 0x59f2 <_ZN16Adafruit_SSD13067displayEv+0x128>
  } else { // SPI
    SSD1306_MODE_DATA
    while (count--)
      SPIwrite(*ptr++);
  }
  TRANSACTION_END
    5a50:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5a52:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5a54:	00 97       	sbiw	r24, 0x00	; 0
    5a56:	71 f0       	breq	.+28     	; 0x5a74 <_ZN16Adafruit_SSD13067displayEv+0x1aa>
    5a58:	49 ad       	ldd	r20, Y+57	; 0x39
    5a5a:	5a ad       	ldd	r21, Y+58	; 0x3a
    5a5c:	6b ad       	ldd	r22, Y+59	; 0x3b
    5a5e:	7c ad       	ldd	r23, Y+60	; 0x3c
#if defined(ESP8266)
  yield();
#endif
}
    5a60:	df 91       	pop	r29
    5a62:	cf 91       	pop	r28
    5a64:	1f 91       	pop	r17
    5a66:	0f 91       	pop	r16
    5a68:	ff 90       	pop	r15
    5a6a:	ef 90       	pop	r14
    5a6c:	df 90       	pop	r13
    5a6e:	cf 90       	pop	r12
  } else { // SPI
    SSD1306_MODE_DATA
    while (count--)
      SPIwrite(*ptr++);
  }
  TRANSACTION_END
    5a70:	0c 94 6d 2e 	jmp	0x5cda	; 0x5cda <_ZN7TwoWire8setClockEm>
    5a74:	ef a5       	ldd	r30, Y+47	; 0x2f
    5a76:	f8 a9       	ldd	r31, Y+48	; 0x30
    5a78:	90 81       	ld	r25, Z
    5a7a:	8c a9       	ldd	r24, Y+52	; 0x34
    5a7c:	89 2b       	or	r24, r25
    5a7e:	80 83       	st	Z, r24
    5a80:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5a82:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5a84:	89 2b       	or	r24, r25
    5a86:	51 f0       	breq	.+20     	; 0x5a9c <_ZN16Adafruit_SSD13067displayEv+0x1d2>
#if defined(ESP8266)
  yield();
#endif
}
    5a88:	df 91       	pop	r29
    5a8a:	cf 91       	pop	r28
    5a8c:	1f 91       	pop	r17
    5a8e:	0f 91       	pop	r16
    5a90:	ff 90       	pop	r15
    5a92:	ef 90       	pop	r14
    5a94:	df 90       	pop	r13
    5a96:	cf 90       	pop	r12
  } else { // SPI
    SSD1306_MODE_DATA
    while (count--)
      SPIwrite(*ptr++);
  }
  TRANSACTION_END
    5a98:	0c 94 3d 27 	jmp	0x4e7a	; 0x4e7a <_ZN8SPIClass14endTransactionEv>
#if defined(ESP8266)
  yield();
#endif
}
    5a9c:	df 91       	pop	r29
    5a9e:	cf 91       	pop	r28
    5aa0:	1f 91       	pop	r17
    5aa2:	0f 91       	pop	r16
    5aa4:	ff 90       	pop	r15
    5aa6:	ef 90       	pop	r14
    5aa8:	df 90       	pop	r13
    5aaa:	cf 90       	pop	r12
    5aac:	08 95       	ret

00005aae <_ZN8SPIClass5beginEv>:
#ifdef SPI_TRANSACTION_MISMATCH_LED
uint8_t SPIClass::inTransactionFlag = 0;
#endif

void SPIClass::begin()
{
    5aae:	cf 93       	push	r28
  uint8_t sreg = SREG;
    5ab0:	cf b7       	in	r28, 0x3f	; 63
  noInterrupts(); // Protect from a scheduler and prevent transactionBegin
    5ab2:	f8 94       	cli
  if (!initialized) {
    5ab4:	80 91 02 03 	lds	r24, 0x0302	; 0x800302 <_ZN8SPIClass11initializedE>
    5ab8:	81 11       	cpse	r24, r1
    5aba:	27 c0       	rjmp	.+78     	; 0x5b0a <_ZN8SPIClass5beginEv+0x5c>
    // Set SS to high so a connected chip will be "deselected" by default
    uint8_t port = digitalPinToPort(SS);
    5abc:	e3 e1       	ldi	r30, 0x13	; 19
    5abe:	f9 e0       	ldi	r31, 0x09	; 9
    5ac0:	84 91       	lpm	r24, Z
    uint8_t bit = digitalPinToBitMask(SS);
    5ac2:	ef ef       	ldi	r30, 0xFF	; 255
    5ac4:	f8 e0       	ldi	r31, 0x08	; 8
    5ac6:	94 91       	lpm	r25, Z
    volatile uint8_t *reg = portModeRegister(port);
    5ac8:	e8 2f       	mov	r30, r24
    5aca:	f0 e0       	ldi	r31, 0x00	; 0
    5acc:	ee 0f       	add	r30, r30
    5ace:	ff 1f       	adc	r31, r31
    5ad0:	ef 5c       	subi	r30, 0xCF	; 207
    5ad2:	f6 4f       	sbci	r31, 0xF6	; 246
    5ad4:	a5 91       	lpm	r26, Z+
    5ad6:	b4 91       	lpm	r27, Z

    // if the SS pin is not already configured as an output
    // then set it high (to enable the internal pull-up resistor)
    if(!(*reg & bit)){
    5ad8:	ec 91       	ld	r30, X
    5ada:	e9 23       	and	r30, r25
    5adc:	21 f4       	brne	.+8      	; 0x5ae6 <_ZN8SPIClass5beginEv+0x38>
      digitalWrite(SS, HIGH);
    5ade:	61 e0       	ldi	r22, 0x01	; 1
    5ae0:	8a e0       	ldi	r24, 0x0A	; 10
    5ae2:	0e 94 88 1b 	call	0x3710	; 0x3710 <digitalWrite>
    }

    // When the SS pin is set as OUTPUT, it can be used as
    // a general purpose output port (it doesn't influence
    // SPI operations).
    pinMode(SS, OUTPUT);
    5ae6:	61 e0       	ldi	r22, 0x01	; 1
    5ae8:	8a e0       	ldi	r24, 0x0A	; 10
    5aea:	0e 94 4c 1b 	call	0x3698	; 0x3698 <pinMode>

    // Warning: if the SS pin ever becomes a LOW INPUT then SPI
    // automatically switches to Slave, so the data direction of
    // the SS pin MUST be kept as OUTPUT.
    SPCR |= _BV(MSTR);
    5aee:	8c b5       	in	r24, 0x2c	; 44
    5af0:	80 61       	ori	r24, 0x10	; 16
    5af2:	8c bd       	out	0x2c, r24	; 44
    SPCR |= _BV(SPE);
    5af4:	8c b5       	in	r24, 0x2c	; 44
    5af6:	80 64       	ori	r24, 0x40	; 64
    5af8:	8c bd       	out	0x2c, r24	; 44
    // MISO pin automatically overrides to INPUT.
    // By doing this AFTER enabling SPI, we avoid accidentally
    // clocking in a single bit since the lines go directly
    // from "input" to SPI control.
    // http://code.google.com/p/arduino/issues/detail?id=888
    pinMode(SCK, OUTPUT);
    5afa:	61 e0       	ldi	r22, 0x01	; 1
    5afc:	8d e0       	ldi	r24, 0x0D	; 13
    5afe:	0e 94 4c 1b 	call	0x3698	; 0x3698 <pinMode>
    pinMode(MOSI, OUTPUT);
    5b02:	61 e0       	ldi	r22, 0x01	; 1
    5b04:	8b e0       	ldi	r24, 0x0B	; 11
    5b06:	0e 94 4c 1b 	call	0x3698	; 0x3698 <pinMode>
  }
  initialized++; // reference count
    5b0a:	80 91 02 03 	lds	r24, 0x0302	; 0x800302 <_ZN8SPIClass11initializedE>
    5b0e:	8f 5f       	subi	r24, 0xFF	; 255
    5b10:	80 93 02 03 	sts	0x0302, r24	; 0x800302 <_ZN8SPIClass11initializedE>
  SREG = sreg;
    5b14:	cf bf       	out	0x3f, r28	; 63
}
    5b16:	cf 91       	pop	r28
    5b18:	08 95       	ret

00005b1a <_ZN7TwoWire9availableEv>:
}

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
    5b1a:	80 91 37 03 	lds	r24, 0x0337	; 0x800337 <_ZN7TwoWire14rxBufferLengthE>
    5b1e:	90 e0       	ldi	r25, 0x00	; 0
    5b20:	20 91 38 03 	lds	r18, 0x0338	; 0x800338 <_ZN7TwoWire13rxBufferIndexE>
    5b24:	82 1b       	sub	r24, r18
    5b26:	91 09       	sbc	r25, r1
    5b28:	08 95       	ret

00005b2a <_ZN7TwoWire4readEv>:
    5b2a:	90 91 38 03 	lds	r25, 0x0338	; 0x800338 <_ZN7TwoWire13rxBufferIndexE>
    5b2e:	80 91 37 03 	lds	r24, 0x0337	; 0x800337 <_ZN7TwoWire14rxBufferLengthE>
    5b32:	98 17       	cp	r25, r24
    5b34:	50 f4       	brcc	.+20     	; 0x5b4a <_ZN7TwoWire4readEv+0x20>
    5b36:	e9 2f       	mov	r30, r25
    5b38:	f0 e0       	ldi	r31, 0x00	; 0
    5b3a:	e7 5c       	subi	r30, 0xC7	; 199
    5b3c:	fc 4f       	sbci	r31, 0xFC	; 252
    5b3e:	20 81       	ld	r18, Z
    5b40:	30 e0       	ldi	r19, 0x00	; 0
    5b42:	9f 5f       	subi	r25, 0xFF	; 255
    5b44:	90 93 38 03 	sts	0x0338, r25	; 0x800338 <_ZN7TwoWire13rxBufferIndexE>
    5b48:	02 c0       	rjmp	.+4      	; 0x5b4e <_ZN7TwoWire4readEv+0x24>
    5b4a:	2f ef       	ldi	r18, 0xFF	; 255
    5b4c:	3f ef       	ldi	r19, 0xFF	; 255
    5b4e:	c9 01       	movw	r24, r18
    5b50:	08 95       	ret

00005b52 <_ZN7TwoWire4peekEv>:
    5b52:	e0 91 38 03 	lds	r30, 0x0338	; 0x800338 <_ZN7TwoWire13rxBufferIndexE>
    5b56:	80 91 37 03 	lds	r24, 0x0337	; 0x800337 <_ZN7TwoWire14rxBufferLengthE>
    5b5a:	e8 17       	cp	r30, r24
    5b5c:	30 f4       	brcc	.+12     	; 0x5b6a <_ZN7TwoWire4peekEv+0x18>
    5b5e:	f0 e0       	ldi	r31, 0x00	; 0
    5b60:	e7 5c       	subi	r30, 0xC7	; 199
    5b62:	fc 4f       	sbci	r31, 0xFC	; 252
    5b64:	80 81       	ld	r24, Z
    5b66:	90 e0       	ldi	r25, 0x00	; 0
    5b68:	08 95       	ret
    5b6a:	8f ef       	ldi	r24, 0xFF	; 255
    5b6c:	9f ef       	ldi	r25, 0xFF	; 255
    5b6e:	08 95       	ret

00005b70 <_ZN7TwoWire5flushEv>:
    5b70:	08 95       	ret

00005b72 <_ZN7TwoWire16onReceiveServiceEPhi>:
    5b72:	cf 93       	push	r28
    5b74:	df 93       	push	r29
    5b76:	ec 01       	movw	r28, r24
    5b78:	e0 91 0f 03 	lds	r30, 0x030F	; 0x80030f <_ZN7TwoWire14user_onReceiveE>
    5b7c:	f0 91 10 03 	lds	r31, 0x0310	; 0x800310 <_ZN7TwoWire14user_onReceiveE+0x1>
    5b80:	30 97       	sbiw	r30, 0x00	; 0
    5b82:	f1 f0       	breq	.+60     	; 0x5bc0 <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    5b84:	90 91 38 03 	lds	r25, 0x0338	; 0x800338 <_ZN7TwoWire13rxBufferIndexE>
    5b88:	80 91 37 03 	lds	r24, 0x0337	; 0x800337 <_ZN7TwoWire14rxBufferLengthE>
    5b8c:	98 17       	cp	r25, r24
    5b8e:	c0 f0       	brcs	.+48     	; 0x5bc0 <_ZN7TwoWire16onReceiveServiceEPhi+0x4e>
    5b90:	90 e0       	ldi	r25, 0x00	; 0
    5b92:	29 2f       	mov	r18, r25
    5b94:	30 e0       	ldi	r19, 0x00	; 0
    5b96:	26 17       	cp	r18, r22
    5b98:	37 07       	cpc	r19, r23
    5b9a:	54 f4       	brge	.+20     	; 0x5bb0 <_ZN7TwoWire16onReceiveServiceEPhi+0x3e>
    5b9c:	de 01       	movw	r26, r28
    5b9e:	a2 0f       	add	r26, r18
    5ba0:	b3 1f       	adc	r27, r19
    5ba2:	4c 91       	ld	r20, X
    5ba4:	d9 01       	movw	r26, r18
    5ba6:	a7 5c       	subi	r26, 0xC7	; 199
    5ba8:	bc 4f       	sbci	r27, 0xFC	; 252
    5baa:	4c 93       	st	X, r20
    5bac:	9f 5f       	subi	r25, 0xFF	; 255
    5bae:	f1 cf       	rjmp	.-30     	; 0x5b92 <_ZN7TwoWire16onReceiveServiceEPhi+0x20>
    5bb0:	10 92 38 03 	sts	0x0338, r1	; 0x800338 <_ZN7TwoWire13rxBufferIndexE>
    5bb4:	60 93 37 03 	sts	0x0337, r22	; 0x800337 <_ZN7TwoWire14rxBufferLengthE>
    5bb8:	cb 01       	movw	r24, r22
    5bba:	df 91       	pop	r29
    5bbc:	cf 91       	pop	r28
    5bbe:	09 94       	ijmp
    5bc0:	df 91       	pop	r29
    5bc2:	cf 91       	pop	r28
    5bc4:	08 95       	ret

00005bc6 <_ZN7TwoWire16onRequestServiceEv>:
    5bc6:	e0 91 11 03 	lds	r30, 0x0311	; 0x800311 <_ZN7TwoWire14user_onRequestE>
    5bca:	f0 91 12 03 	lds	r31, 0x0312	; 0x800312 <_ZN7TwoWire14user_onRequestE+0x1>
    5bce:	30 97       	sbiw	r30, 0x00	; 0
    5bd0:	29 f0       	breq	.+10     	; 0x5bdc <_ZN7TwoWire16onRequestServiceEv+0x16>
    5bd2:	10 92 15 03 	sts	0x0315, r1	; 0x800315 <_ZN7TwoWire13txBufferIndexE>
    5bd6:	10 92 14 03 	sts	0x0314, r1	; 0x800314 <_ZN7TwoWire14txBufferLengthE>
    5bda:	09 94       	ijmp
    5bdc:	08 95       	ret

00005bde <_ZN7TwoWire5writeEPKhj>:
    5bde:	cf 92       	push	r12
    5be0:	df 92       	push	r13
    5be2:	ef 92       	push	r14
    5be4:	ff 92       	push	r15
    5be6:	0f 93       	push	r16
    5be8:	1f 93       	push	r17
    5bea:	cf 93       	push	r28
    5bec:	df 93       	push	r29
    5bee:	7c 01       	movw	r14, r24
    5bf0:	cb 01       	movw	r24, r22
    5bf2:	8a 01       	movw	r16, r20
    5bf4:	20 91 13 03 	lds	r18, 0x0313	; 0x800313 <_ZN7TwoWire12transmittingE>
    5bf8:	22 23       	and	r18, r18
    5bfa:	89 f0       	breq	.+34     	; 0x5c1e <_ZN7TwoWire5writeEPKhj+0x40>
    5bfc:	eb 01       	movw	r28, r22
    5bfe:	6b 01       	movw	r12, r22
    5c00:	c4 0e       	add	r12, r20
    5c02:	d5 1e       	adc	r13, r21
    5c04:	cc 15       	cp	r28, r12
    5c06:	dd 05       	cpc	r29, r13
    5c08:	69 f0       	breq	.+26     	; 0x5c24 <_ZN7TwoWire5writeEPKhj+0x46>
    5c0a:	69 91       	ld	r22, Y+
    5c0c:	d7 01       	movw	r26, r14
    5c0e:	ed 91       	ld	r30, X+
    5c10:	fc 91       	ld	r31, X
    5c12:	01 90       	ld	r0, Z+
    5c14:	f0 81       	ld	r31, Z
    5c16:	e0 2d       	mov	r30, r0
    5c18:	c7 01       	movw	r24, r14
    5c1a:	09 95       	icall
    5c1c:	f3 cf       	rjmp	.-26     	; 0x5c04 <_ZN7TwoWire5writeEPKhj+0x26>
    5c1e:	64 2f       	mov	r22, r20
    5c20:	0e 94 d9 2e 	call	0x5db2	; 0x5db2 <twi_transmit>
    5c24:	c8 01       	movw	r24, r16
    5c26:	df 91       	pop	r29
    5c28:	cf 91       	pop	r28
    5c2a:	1f 91       	pop	r17
    5c2c:	0f 91       	pop	r16
    5c2e:	ff 90       	pop	r15
    5c30:	ef 90       	pop	r14
    5c32:	df 90       	pop	r13
    5c34:	cf 90       	pop	r12
    5c36:	08 95       	ret

00005c38 <_ZN7TwoWire5writeEh>:
    5c38:	cf 93       	push	r28
    5c3a:	df 93       	push	r29
    5c3c:	1f 92       	push	r1
    5c3e:	cd b7       	in	r28, 0x3d	; 61
    5c40:	de b7       	in	r29, 0x3e	; 62
    5c42:	69 83       	std	Y+1, r22	; 0x01
    5c44:	20 91 13 03 	lds	r18, 0x0313	; 0x800313 <_ZN7TwoWire12transmittingE>
    5c48:	22 23       	and	r18, r18
    5c4a:	d1 f0       	breq	.+52     	; 0x5c80 <_ZN7TwoWire5writeEh+0x48>
    5c4c:	20 91 14 03 	lds	r18, 0x0314	; 0x800314 <_ZN7TwoWire14txBufferLengthE>
    5c50:	20 32       	cpi	r18, 0x20	; 32
    5c52:	40 f0       	brcs	.+16     	; 0x5c64 <_ZN7TwoWire5writeEh+0x2c>
    5c54:	21 e0       	ldi	r18, 0x01	; 1
    5c56:	30 e0       	ldi	r19, 0x00	; 0
    5c58:	fc 01       	movw	r30, r24
    5c5a:	33 83       	std	Z+3, r19	; 0x03
    5c5c:	22 83       	std	Z+2, r18	; 0x02
    5c5e:	80 e0       	ldi	r24, 0x00	; 0
    5c60:	90 e0       	ldi	r25, 0x00	; 0
    5c62:	15 c0       	rjmp	.+42     	; 0x5c8e <_ZN7TwoWire5writeEh+0x56>
    5c64:	80 91 15 03 	lds	r24, 0x0315	; 0x800315 <_ZN7TwoWire13txBufferIndexE>
    5c68:	e8 2f       	mov	r30, r24
    5c6a:	f0 e0       	ldi	r31, 0x00	; 0
    5c6c:	ea 5e       	subi	r30, 0xEA	; 234
    5c6e:	fc 4f       	sbci	r31, 0xFC	; 252
    5c70:	99 81       	ldd	r25, Y+1	; 0x01
    5c72:	90 83       	st	Z, r25
    5c74:	8f 5f       	subi	r24, 0xFF	; 255
    5c76:	80 93 15 03 	sts	0x0315, r24	; 0x800315 <_ZN7TwoWire13txBufferIndexE>
    5c7a:	80 93 14 03 	sts	0x0314, r24	; 0x800314 <_ZN7TwoWire14txBufferLengthE>
    5c7e:	05 c0       	rjmp	.+10     	; 0x5c8a <_ZN7TwoWire5writeEh+0x52>
    5c80:	61 e0       	ldi	r22, 0x01	; 1
    5c82:	ce 01       	movw	r24, r28
    5c84:	01 96       	adiw	r24, 0x01	; 1
    5c86:	0e 94 d9 2e 	call	0x5db2	; 0x5db2 <twi_transmit>
    5c8a:	81 e0       	ldi	r24, 0x01	; 1
    5c8c:	90 e0       	ldi	r25, 0x00	; 0
    5c8e:	0f 90       	pop	r0
    5c90:	df 91       	pop	r29
    5c92:	cf 91       	pop	r28
    5c94:	08 95       	ret

00005c96 <_ZN7TwoWireC1Ev>:
    5c96:	fc 01       	movw	r30, r24
    5c98:	13 82       	std	Z+3, r1	; 0x03
    5c9a:	12 82       	std	Z+2, r1	; 0x02
    5c9c:	88 ee       	ldi	r24, 0xE8	; 232
    5c9e:	93 e0       	ldi	r25, 0x03	; 3
    5ca0:	a0 e0       	ldi	r26, 0x00	; 0
    5ca2:	b0 e0       	ldi	r27, 0x00	; 0
    5ca4:	84 83       	std	Z+4, r24	; 0x04
    5ca6:	95 83       	std	Z+5, r25	; 0x05
    5ca8:	a6 83       	std	Z+6, r26	; 0x06
    5caa:	b7 83       	std	Z+7, r27	; 0x07
    5cac:	83 ec       	ldi	r24, 0xC3	; 195
    5cae:	91 e0       	ldi	r25, 0x01	; 1
    5cb0:	91 83       	std	Z+1, r25	; 0x01
    5cb2:	80 83       	st	Z, r24
    5cb4:	08 95       	ret

00005cb6 <_ZN7TwoWire5beginEv>:
    5cb6:	10 92 38 03 	sts	0x0338, r1	; 0x800338 <_ZN7TwoWire13rxBufferIndexE>
    5cba:	10 92 37 03 	sts	0x0337, r1	; 0x800337 <_ZN7TwoWire14rxBufferLengthE>
    5cbe:	10 92 15 03 	sts	0x0315, r1	; 0x800315 <_ZN7TwoWire13txBufferIndexE>
    5cc2:	10 92 14 03 	sts	0x0314, r1	; 0x800314 <_ZN7TwoWire14txBufferLengthE>
    5cc6:	0e 94 9a 2e 	call	0x5d34	; 0x5d34 <twi_init>
    5cca:	83 ee       	ldi	r24, 0xE3	; 227
    5ccc:	9d e2       	ldi	r25, 0x2D	; 45
    5cce:	0e 94 06 2f 	call	0x5e0c	; 0x5e0c <twi_attachSlaveTxEvent>
    5cd2:	89 eb       	ldi	r24, 0xB9	; 185
    5cd4:	9d e2       	ldi	r25, 0x2D	; 45
    5cd6:	0c 94 01 2f 	jmp	0x5e02	; 0x5e02 <twi_attachSlaveRxEvent>

00005cda <_ZN7TwoWire8setClockEm>:
    5cda:	cb 01       	movw	r24, r22
    5cdc:	ba 01       	movw	r22, r20
    5cde:	0c 94 c5 2e 	jmp	0x5d8a	; 0x5d8a <twi_setFrequency>

00005ce2 <_ZN7TwoWire17beginTransmissionEh>:
    5ce2:	81 e0       	ldi	r24, 0x01	; 1
    5ce4:	80 93 13 03 	sts	0x0313, r24	; 0x800313 <_ZN7TwoWire12transmittingE>
    5ce8:	60 93 36 03 	sts	0x0336, r22	; 0x800336 <_ZN7TwoWire9txAddressE>
    5cec:	10 92 15 03 	sts	0x0315, r1	; 0x800315 <_ZN7TwoWire13txBufferIndexE>
    5cf0:	10 92 14 03 	sts	0x0314, r1	; 0x800314 <_ZN7TwoWire14txBufferLengthE>
    5cf4:	08 95       	ret

00005cf6 <_ZN7TwoWire17beginTransmissionEi>:
    5cf6:	0c 94 71 2e 	jmp	0x5ce2	; 0x5ce2 <_ZN7TwoWire17beginTransmissionEh>

00005cfa <_ZN7TwoWire15endTransmissionEh>:
    5cfa:	0f 93       	push	r16
    5cfc:	06 2f       	mov	r16, r22
    5cfe:	21 e0       	ldi	r18, 0x01	; 1
    5d00:	40 91 14 03 	lds	r20, 0x0314	; 0x800314 <_ZN7TwoWire14txBufferLengthE>
    5d04:	66 e1       	ldi	r22, 0x16	; 22
    5d06:	73 e0       	ldi	r23, 0x03	; 3
    5d08:	80 91 36 03 	lds	r24, 0x0336	; 0x800336 <_ZN7TwoWire9txAddressE>
    5d0c:	0e 94 27 2f 	call	0x5e4e	; 0x5e4e <twi_writeTo>
    5d10:	10 92 15 03 	sts	0x0315, r1	; 0x800315 <_ZN7TwoWire13txBufferIndexE>
    5d14:	10 92 14 03 	sts	0x0314, r1	; 0x800314 <_ZN7TwoWire14txBufferLengthE>
    5d18:	10 92 13 03 	sts	0x0313, r1	; 0x800313 <_ZN7TwoWire12transmittingE>
    5d1c:	0f 91       	pop	r16
    5d1e:	08 95       	ret

00005d20 <_ZN7TwoWire15endTransmissionEv>:
    5d20:	61 e0       	ldi	r22, 0x01	; 1
    5d22:	0c 94 7d 2e 	jmp	0x5cfa	; 0x5cfa <_ZN7TwoWire15endTransmissionEh>

00005d26 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    5d26:	83 e0       	ldi	r24, 0x03	; 3
    5d28:	93 e0       	ldi	r25, 0x03	; 3
    5d2a:	0c 94 4b 2e 	jmp	0x5c96	; 0x5c96 <_ZN7TwoWireC1Ev>

00005d2e <__cxa_pure_virtual>:
    5d2e:	0e 94 45 33 	call	0x668a	; 0x668a <abort>

00005d32 <yield>:
 * libraries or sketches that supports cooperative threads.
 *
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
    5d32:	08 95       	ret

00005d34 <twi_init>:
  bool flag = twi_timed_out_flag;
  if (clear_flag){
    twi_timed_out_flag = false;
  }
  return(flag);
}
    5d34:	10 92 cc 03 	sts	0x03CC, r1	; 0x8003cc <twi_state>
    5d38:	81 e0       	ldi	r24, 0x01	; 1
    5d3a:	80 93 ca 03 	sts	0x03CA, r24	; 0x8003ca <twi_sendStop>
    5d3e:	10 92 c9 03 	sts	0x03C9, r1	; 0x8003c9 <twi_inRepStart>
    5d42:	61 e0       	ldi	r22, 0x01	; 1
    5d44:	82 e1       	ldi	r24, 0x12	; 18
    5d46:	0e 94 88 1b 	call	0x3710	; 0x3710 <digitalWrite>
    5d4a:	61 e0       	ldi	r22, 0x01	; 1
    5d4c:	83 e1       	ldi	r24, 0x13	; 19
    5d4e:	0e 94 88 1b 	call	0x3710	; 0x3710 <digitalWrite>
    5d52:	e9 eb       	ldi	r30, 0xB9	; 185
    5d54:	f0 e0       	ldi	r31, 0x00	; 0
    5d56:	80 81       	ld	r24, Z
    5d58:	8e 7f       	andi	r24, 0xFE	; 254
    5d5a:	80 83       	st	Z, r24
    5d5c:	80 81       	ld	r24, Z
    5d5e:	8d 7f       	andi	r24, 0xFD	; 253
    5d60:	80 83       	st	Z, r24
    5d62:	88 e4       	ldi	r24, 0x48	; 72
    5d64:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
    5d68:	85 e4       	ldi	r24, 0x45	; 69
    5d6a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    5d6e:	08 95       	ret

00005d70 <twi_disable>:
    5d70:	ec eb       	ldi	r30, 0xBC	; 188
    5d72:	f0 e0       	ldi	r31, 0x00	; 0
    5d74:	80 81       	ld	r24, Z
    5d76:	8a 7b       	andi	r24, 0xBA	; 186
    5d78:	80 83       	st	Z, r24
    5d7a:	60 e0       	ldi	r22, 0x00	; 0
    5d7c:	82 e1       	ldi	r24, 0x12	; 18
    5d7e:	0e 94 88 1b 	call	0x3710	; 0x3710 <digitalWrite>
    5d82:	60 e0       	ldi	r22, 0x00	; 0
    5d84:	83 e1       	ldi	r24, 0x13	; 19
    5d86:	0c 94 88 1b 	jmp	0x3710	; 0x3710 <digitalWrite>

00005d8a <twi_setFrequency>:
    5d8a:	9b 01       	movw	r18, r22
    5d8c:	ac 01       	movw	r20, r24
    5d8e:	60 e0       	ldi	r22, 0x00	; 0
    5d90:	74 e2       	ldi	r23, 0x24	; 36
    5d92:	84 ef       	ldi	r24, 0xF4	; 244
    5d94:	90 e0       	ldi	r25, 0x00	; 0
    5d96:	0e 94 a0 31 	call	0x6340	; 0x6340 <__udivmodsi4>
    5d9a:	da 01       	movw	r26, r20
    5d9c:	c9 01       	movw	r24, r18
    5d9e:	40 97       	sbiw	r24, 0x10	; 16
    5da0:	a1 09       	sbc	r26, r1
    5da2:	b1 09       	sbc	r27, r1
    5da4:	b6 95       	lsr	r27
    5da6:	a7 95       	ror	r26
    5da8:	97 95       	ror	r25
    5daa:	87 95       	ror	r24
    5dac:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
    5db0:	08 95       	ret

00005db2 <twi_transmit>:
    5db2:	40 91 7b 03 	lds	r20, 0x037B	; 0x80037b <twi_txBufferLength>
    5db6:	26 2f       	mov	r18, r22
    5db8:	30 e0       	ldi	r19, 0x00	; 0
    5dba:	24 0f       	add	r18, r20
    5dbc:	31 1d       	adc	r19, r1
    5dbe:	21 32       	cpi	r18, 0x21	; 33
    5dc0:	31 05       	cpc	r19, r1
    5dc2:	dc f4       	brge	.+54     	; 0x5dfa <twi_transmit+0x48>
    5dc4:	20 91 cc 03 	lds	r18, 0x03CC	; 0x8003cc <twi_state>
    5dc8:	24 30       	cpi	r18, 0x04	; 4
    5dca:	c9 f4       	brne	.+50     	; 0x5dfe <twi_transmit+0x4c>
    5dcc:	fc 01       	movw	r30, r24
    5dce:	80 e0       	ldi	r24, 0x00	; 0
    5dd0:	90 e0       	ldi	r25, 0x00	; 0
    5dd2:	86 17       	cp	r24, r22
    5dd4:	58 f4       	brcc	.+22     	; 0x5dec <twi_transmit+0x3a>
    5dd6:	30 91 7b 03 	lds	r19, 0x037B	; 0x80037b <twi_txBufferLength>
    5dda:	21 91       	ld	r18, Z+
    5ddc:	dc 01       	movw	r26, r24
    5dde:	a3 58       	subi	r26, 0x83	; 131
    5de0:	bc 4f       	sbci	r27, 0xFC	; 252
    5de2:	a3 0f       	add	r26, r19
    5de4:	b1 1d       	adc	r27, r1
    5de6:	2c 93       	st	X, r18
    5de8:	01 96       	adiw	r24, 0x01	; 1
    5dea:	f3 cf       	rjmp	.-26     	; 0x5dd2 <twi_transmit+0x20>
    5dec:	80 91 7b 03 	lds	r24, 0x037B	; 0x80037b <twi_txBufferLength>
    5df0:	68 0f       	add	r22, r24
    5df2:	60 93 7b 03 	sts	0x037B, r22	; 0x80037b <twi_txBufferLength>
    5df6:	80 e0       	ldi	r24, 0x00	; 0
    5df8:	08 95       	ret
    5dfa:	81 e0       	ldi	r24, 0x01	; 1
    5dfc:	08 95       	ret
    5dfe:	82 e0       	ldi	r24, 0x02	; 2
    5e00:	08 95       	ret

00005e02 <twi_attachSlaveRxEvent>:
    5e02:	90 93 c0 03 	sts	0x03C0, r25	; 0x8003c0 <twi_onSlaveReceive+0x1>
    5e06:	80 93 bf 03 	sts	0x03BF, r24	; 0x8003bf <twi_onSlaveReceive>
    5e0a:	08 95       	ret

00005e0c <twi_attachSlaveTxEvent>:
    5e0c:	90 93 c2 03 	sts	0x03C2, r25	; 0x8003c2 <twi_onSlaveTransmit+0x1>
    5e10:	80 93 c1 03 	sts	0x03C1, r24	; 0x8003c1 <twi_onSlaveTransmit>
    5e14:	08 95       	ret

00005e16 <twi_releaseBus>:
    5e16:	85 ec       	ldi	r24, 0xC5	; 197
    5e18:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    5e1c:	10 92 cc 03 	sts	0x03CC, r1	; 0x8003cc <twi_state>
    5e20:	08 95       	ret

00005e22 <twi_handleTimeout>:
    5e22:	cf 93       	push	r28
    5e24:	df 93       	push	r29
    5e26:	91 e0       	ldi	r25, 0x01	; 1
    5e28:	90 93 c4 03 	sts	0x03C4, r25	; 0x8003c4 <twi_timed_out_flag>
    5e2c:	88 23       	and	r24, r24
    5e2e:	61 f0       	breq	.+24     	; 0x5e48 <twi_handleTimeout+0x26>
    5e30:	c0 91 b8 00 	lds	r28, 0x00B8	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
    5e34:	d0 91 ba 00 	lds	r29, 0x00BA	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7f80ba>
    5e38:	0e 94 b8 2e 	call	0x5d70	; 0x5d70 <twi_disable>
    5e3c:	0e 94 9a 2e 	call	0x5d34	; 0x5d34 <twi_init>
    5e40:	d0 93 ba 00 	sts	0x00BA, r29	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7f80ba>
    5e44:	c0 93 b8 00 	sts	0x00B8, r28	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
    5e48:	df 91       	pop	r29
    5e4a:	cf 91       	pop	r28
    5e4c:	08 95       	ret

00005e4e <twi_writeTo>:
    5e4e:	4f 92       	push	r4
    5e50:	5f 92       	push	r5
    5e52:	6f 92       	push	r6
    5e54:	7f 92       	push	r7
    5e56:	8f 92       	push	r8
    5e58:	9f 92       	push	r9
    5e5a:	af 92       	push	r10
    5e5c:	bf 92       	push	r11
    5e5e:	cf 92       	push	r12
    5e60:	df 92       	push	r13
    5e62:	ef 92       	push	r14
    5e64:	ff 92       	push	r15
    5e66:	0f 93       	push	r16
    5e68:	1f 93       	push	r17
    5e6a:	cf 93       	push	r28
    5e6c:	df 93       	push	r29
    5e6e:	41 32       	cpi	r20, 0x21	; 33
    5e70:	08 f0       	brcs	.+2      	; 0x5e74 <twi_writeTo+0x26>
    5e72:	c6 c0       	rjmp	.+396    	; 0x6000 <twi_writeTo+0x1b2>
    5e74:	12 2f       	mov	r17, r18
    5e76:	f4 2e       	mov	r15, r20
    5e78:	d7 2e       	mov	r13, r23
    5e7a:	e6 2e       	mov	r14, r22
    5e7c:	d8 2f       	mov	r29, r24
    5e7e:	0e 94 5f 1a 	call	0x34be	; 0x34be <micros>
    5e82:	4b 01       	movw	r8, r22
    5e84:	5c 01       	movw	r10, r24
    5e86:	c0 91 cc 03 	lds	r28, 0x03CC	; 0x8003cc <twi_state>
    5e8a:	cc 23       	and	r28, r28
    5e8c:	11 f1       	breq	.+68     	; 0x5ed2 <twi_writeTo+0x84>
    5e8e:	80 91 c5 03 	lds	r24, 0x03C5	; 0x8003c5 <twi_timeout_us>
    5e92:	90 91 c6 03 	lds	r25, 0x03C6	; 0x8003c6 <twi_timeout_us+0x1>
    5e96:	a0 91 c7 03 	lds	r26, 0x03C7	; 0x8003c7 <twi_timeout_us+0x2>
    5e9a:	b0 91 c8 03 	lds	r27, 0x03C8	; 0x8003c8 <twi_timeout_us+0x3>
    5e9e:	89 2b       	or	r24, r25
    5ea0:	8a 2b       	or	r24, r26
    5ea2:	8b 2b       	or	r24, r27
    5ea4:	81 f3       	breq	.-32     	; 0x5e86 <twi_writeTo+0x38>
    5ea6:	0e 94 5f 1a 	call	0x34be	; 0x34be <micros>
    5eaa:	40 90 c5 03 	lds	r4, 0x03C5	; 0x8003c5 <twi_timeout_us>
    5eae:	50 90 c6 03 	lds	r5, 0x03C6	; 0x8003c6 <twi_timeout_us+0x1>
    5eb2:	60 90 c7 03 	lds	r6, 0x03C7	; 0x8003c7 <twi_timeout_us+0x2>
    5eb6:	70 90 c8 03 	lds	r7, 0x03C8	; 0x8003c8 <twi_timeout_us+0x3>
    5eba:	dc 01       	movw	r26, r24
    5ebc:	cb 01       	movw	r24, r22
    5ebe:	88 19       	sub	r24, r8
    5ec0:	99 09       	sbc	r25, r9
    5ec2:	aa 09       	sbc	r26, r10
    5ec4:	bb 09       	sbc	r27, r11
    5ec6:	48 16       	cp	r4, r24
    5ec8:	59 06       	cpc	r5, r25
    5eca:	6a 06       	cpc	r6, r26
    5ecc:	7b 06       	cpc	r7, r27
    5ece:	d8 f6       	brcc	.-74     	; 0x5e86 <twi_writeTo+0x38>
    5ed0:	83 c0       	rjmp	.+262    	; 0x5fd8 <twi_writeTo+0x18a>
    5ed2:	82 e0       	ldi	r24, 0x02	; 2
    5ed4:	80 93 cc 03 	sts	0x03CC, r24	; 0x8003cc <twi_state>
    5ed8:	00 93 ca 03 	sts	0x03CA, r16	; 0x8003ca <twi_sendStop>
    5edc:	8f ef       	ldi	r24, 0xFF	; 255
    5ede:	80 93 59 03 	sts	0x0359, r24	; 0x800359 <twi_error>
    5ee2:	10 92 9e 03 	sts	0x039E, r1	; 0x80039e <twi_masterBufferIndex>
    5ee6:	f0 92 9d 03 	sts	0x039D, r15	; 0x80039d <twi_masterBufferLength>
    5eea:	9e 2d       	mov	r25, r14
    5eec:	af e9       	ldi	r26, 0x9F	; 159
    5eee:	b3 e0       	ldi	r27, 0x03	; 3
    5ef0:	ee 2d       	mov	r30, r14
    5ef2:	fd 2d       	mov	r31, r13
    5ef4:	8e 2f       	mov	r24, r30
    5ef6:	89 1b       	sub	r24, r25
    5ef8:	8f 15       	cp	r24, r15
    5efa:	18 f4       	brcc	.+6      	; 0x5f02 <twi_writeTo+0xb4>
    5efc:	81 91       	ld	r24, Z+
    5efe:	8d 93       	st	X+, r24
    5f00:	f9 cf       	rjmp	.-14     	; 0x5ef4 <twi_writeTo+0xa6>
    5f02:	10 92 cb 03 	sts	0x03CB, r1	; 0x8003cb <twi_slarw>
    5f06:	90 91 cb 03 	lds	r25, 0x03CB	; 0x8003cb <twi_slarw>
    5f0a:	dd 0f       	add	r29, r29
    5f0c:	d9 2b       	or	r29, r25
    5f0e:	d0 93 cb 03 	sts	0x03CB, r29	; 0x8003cb <twi_slarw>
    5f12:	80 91 c9 03 	lds	r24, 0x03C9	; 0x8003c9 <twi_inRepStart>
    5f16:	81 30       	cpi	r24, 0x01	; 1
    5f18:	89 f5       	brne	.+98     	; 0x5f7c <twi_writeTo+0x12e>
    5f1a:	10 92 c9 03 	sts	0x03C9, r1	; 0x8003c9 <twi_inRepStart>
    5f1e:	0e 94 5f 1a 	call	0x34be	; 0x34be <micros>
    5f22:	6b 01       	movw	r12, r22
    5f24:	7c 01       	movw	r14, r24
    5f26:	80 91 cb 03 	lds	r24, 0x03CB	; 0x8003cb <twi_slarw>
    5f2a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    5f2e:	80 91 c5 03 	lds	r24, 0x03C5	; 0x8003c5 <twi_timeout_us>
    5f32:	90 91 c6 03 	lds	r25, 0x03C6	; 0x8003c6 <twi_timeout_us+0x1>
    5f36:	a0 91 c7 03 	lds	r26, 0x03C7	; 0x8003c7 <twi_timeout_us+0x2>
    5f3a:	b0 91 c8 03 	lds	r27, 0x03C8	; 0x8003c8 <twi_timeout_us+0x3>
    5f3e:	89 2b       	or	r24, r25
    5f40:	8a 2b       	or	r24, r26
    5f42:	8b 2b       	or	r24, r27
    5f44:	a9 f0       	breq	.+42     	; 0x5f70 <twi_writeTo+0x122>
    5f46:	0e 94 5f 1a 	call	0x34be	; 0x34be <micros>
    5f4a:	80 90 c5 03 	lds	r8, 0x03C5	; 0x8003c5 <twi_timeout_us>
    5f4e:	90 90 c6 03 	lds	r9, 0x03C6	; 0x8003c6 <twi_timeout_us+0x1>
    5f52:	a0 90 c7 03 	lds	r10, 0x03C7	; 0x8003c7 <twi_timeout_us+0x2>
    5f56:	b0 90 c8 03 	lds	r11, 0x03C8	; 0x8003c8 <twi_timeout_us+0x3>
    5f5a:	dc 01       	movw	r26, r24
    5f5c:	cb 01       	movw	r24, r22
    5f5e:	8c 19       	sub	r24, r12
    5f60:	9d 09       	sbc	r25, r13
    5f62:	ae 09       	sbc	r26, r14
    5f64:	bf 09       	sbc	r27, r15
    5f66:	88 16       	cp	r8, r24
    5f68:	99 06       	cpc	r9, r25
    5f6a:	aa 06       	cpc	r10, r26
    5f6c:	bb 06       	cpc	r11, r27
    5f6e:	a0 f1       	brcs	.+104    	; 0x5fd8 <twi_writeTo+0x18a>
    5f70:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    5f74:	83 fd       	sbrc	r24, 3
    5f76:	d7 cf       	rjmp	.-82     	; 0x5f26 <twi_writeTo+0xd8>
    5f78:	85 ec       	ldi	r24, 0xC5	; 197
    5f7a:	01 c0       	rjmp	.+2      	; 0x5f7e <twi_writeTo+0x130>
    5f7c:	85 ee       	ldi	r24, 0xE5	; 229
    5f7e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    5f82:	0e 94 5f 1a 	call	0x34be	; 0x34be <micros>
    5f86:	6b 01       	movw	r12, r22
    5f88:	7c 01       	movw	r14, r24
    5f8a:	11 23       	and	r17, r17
    5f8c:	59 f1       	breq	.+86     	; 0x5fe4 <twi_writeTo+0x196>
    5f8e:	80 91 cc 03 	lds	r24, 0x03CC	; 0x8003cc <twi_state>
    5f92:	82 30       	cpi	r24, 0x02	; 2
    5f94:	39 f5       	brne	.+78     	; 0x5fe4 <twi_writeTo+0x196>
    5f96:	80 91 c5 03 	lds	r24, 0x03C5	; 0x8003c5 <twi_timeout_us>
    5f9a:	90 91 c6 03 	lds	r25, 0x03C6	; 0x8003c6 <twi_timeout_us+0x1>
    5f9e:	a0 91 c7 03 	lds	r26, 0x03C7	; 0x8003c7 <twi_timeout_us+0x2>
    5fa2:	b0 91 c8 03 	lds	r27, 0x03C8	; 0x8003c8 <twi_timeout_us+0x3>
    5fa6:	89 2b       	or	r24, r25
    5fa8:	8a 2b       	or	r24, r26
    5faa:	8b 2b       	or	r24, r27
    5fac:	71 f3       	breq	.-36     	; 0x5f8a <twi_writeTo+0x13c>
    5fae:	0e 94 5f 1a 	call	0x34be	; 0x34be <micros>
    5fb2:	80 90 c5 03 	lds	r8, 0x03C5	; 0x8003c5 <twi_timeout_us>
    5fb6:	90 90 c6 03 	lds	r9, 0x03C6	; 0x8003c6 <twi_timeout_us+0x1>
    5fba:	a0 90 c7 03 	lds	r10, 0x03C7	; 0x8003c7 <twi_timeout_us+0x2>
    5fbe:	b0 90 c8 03 	lds	r11, 0x03C8	; 0x8003c8 <twi_timeout_us+0x3>
    5fc2:	dc 01       	movw	r26, r24
    5fc4:	cb 01       	movw	r24, r22
    5fc6:	8c 19       	sub	r24, r12
    5fc8:	9d 09       	sbc	r25, r13
    5fca:	ae 09       	sbc	r26, r14
    5fcc:	bf 09       	sbc	r27, r15
    5fce:	88 16       	cp	r8, r24
    5fd0:	99 06       	cpc	r9, r25
    5fd2:	aa 06       	cpc	r10, r26
    5fd4:	bb 06       	cpc	r11, r27
    5fd6:	c8 f6       	brcc	.-78     	; 0x5f8a <twi_writeTo+0x13c>
    5fd8:	80 91 c3 03 	lds	r24, 0x03C3	; 0x8003c3 <twi_do_reset_on_timeout>
    5fdc:	0e 94 11 2f 	call	0x5e22	; 0x5e22 <twi_handleTimeout>
    5fe0:	c5 e0       	ldi	r28, 0x05	; 5
    5fe2:	13 c0       	rjmp	.+38     	; 0x600a <twi_writeTo+0x1bc>
    5fe4:	80 91 59 03 	lds	r24, 0x0359	; 0x800359 <twi_error>
    5fe8:	8f 3f       	cpi	r24, 0xFF	; 255
    5fea:	79 f0       	breq	.+30     	; 0x600a <twi_writeTo+0x1bc>
    5fec:	80 91 59 03 	lds	r24, 0x0359	; 0x800359 <twi_error>
    5ff0:	80 32       	cpi	r24, 0x20	; 32
    5ff2:	41 f0       	breq	.+16     	; 0x6004 <twi_writeTo+0x1b6>
    5ff4:	80 91 59 03 	lds	r24, 0x0359	; 0x800359 <twi_error>
    5ff8:	80 33       	cpi	r24, 0x30	; 48
    5ffa:	31 f0       	breq	.+12     	; 0x6008 <twi_writeTo+0x1ba>
    5ffc:	c4 e0       	ldi	r28, 0x04	; 4
    5ffe:	05 c0       	rjmp	.+10     	; 0x600a <twi_writeTo+0x1bc>
    6000:	c1 e0       	ldi	r28, 0x01	; 1
    6002:	03 c0       	rjmp	.+6      	; 0x600a <twi_writeTo+0x1bc>
    6004:	c2 e0       	ldi	r28, 0x02	; 2
    6006:	01 c0       	rjmp	.+2      	; 0x600a <twi_writeTo+0x1bc>
    6008:	c3 e0       	ldi	r28, 0x03	; 3
    600a:	8c 2f       	mov	r24, r28
    600c:	df 91       	pop	r29
    600e:	cf 91       	pop	r28
    6010:	1f 91       	pop	r17
    6012:	0f 91       	pop	r16
    6014:	ff 90       	pop	r15
    6016:	ef 90       	pop	r14
    6018:	df 90       	pop	r13
    601a:	cf 90       	pop	r12
    601c:	bf 90       	pop	r11
    601e:	af 90       	pop	r10
    6020:	9f 90       	pop	r9
    6022:	8f 90       	pop	r8
    6024:	7f 90       	pop	r7
    6026:	6f 90       	pop	r6
    6028:	5f 90       	pop	r5
    602a:	4f 90       	pop	r4
    602c:	08 95       	ret

0000602e <twi_stop>:
    602e:	85 ed       	ldi	r24, 0xD5	; 213
    6030:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    6034:	80 91 c5 03 	lds	r24, 0x03C5	; 0x8003c5 <twi_timeout_us>
    6038:	90 91 c6 03 	lds	r25, 0x03C6	; 0x8003c6 <twi_timeout_us+0x1>
    603c:	a0 91 c7 03 	lds	r26, 0x03C7	; 0x8003c7 <twi_timeout_us+0x2>
    6040:	b0 91 c8 03 	lds	r27, 0x03C8	; 0x8003c8 <twi_timeout_us+0x3>
    6044:	07 96       	adiw	r24, 0x07	; 7
    6046:	a1 1d       	adc	r26, r1
    6048:	b1 1d       	adc	r27, r1
    604a:	23 e0       	ldi	r18, 0x03	; 3
    604c:	b6 95       	lsr	r27
    604e:	a7 95       	ror	r26
    6050:	97 95       	ror	r25
    6052:	87 95       	ror	r24
    6054:	2a 95       	dec	r18
    6056:	d1 f7       	brne	.-12     	; 0x604c <twi_stop+0x1e>
    6058:	20 91 bc 00 	lds	r18, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    605c:	24 ff       	sbrs	r18, 4
    605e:	1c c0       	rjmp	.+56     	; 0x6098 <twi_stop+0x6a>
    6060:	40 91 c5 03 	lds	r20, 0x03C5	; 0x8003c5 <twi_timeout_us>
    6064:	50 91 c6 03 	lds	r21, 0x03C6	; 0x8003c6 <twi_timeout_us+0x1>
    6068:	60 91 c7 03 	lds	r22, 0x03C7	; 0x8003c7 <twi_timeout_us+0x2>
    606c:	70 91 c8 03 	lds	r23, 0x03C8	; 0x8003c8 <twi_timeout_us+0x3>
    6070:	45 2b       	or	r20, r21
    6072:	46 2b       	or	r20, r22
    6074:	47 2b       	or	r20, r23
    6076:	81 f3       	breq	.-32     	; 0x6058 <twi_stop+0x2a>
    6078:	00 97       	sbiw	r24, 0x00	; 0
    607a:	a1 05       	cpc	r26, r1
    607c:	b1 05       	cpc	r27, r1
    607e:	41 f0       	breq	.+16     	; 0x6090 <twi_stop+0x62>
    6080:	2a e2       	ldi	r18, 0x2A	; 42
    6082:	2a 95       	dec	r18
    6084:	f1 f7       	brne	.-4      	; 0x6082 <twi_stop+0x54>
    6086:	00 c0       	rjmp	.+0      	; 0x6088 <twi_stop+0x5a>
    6088:	01 97       	sbiw	r24, 0x01	; 1
    608a:	a1 09       	sbc	r26, r1
    608c:	b1 09       	sbc	r27, r1
    608e:	e4 cf       	rjmp	.-56     	; 0x6058 <twi_stop+0x2a>
    6090:	80 91 c3 03 	lds	r24, 0x03C3	; 0x8003c3 <twi_do_reset_on_timeout>
    6094:	0c 94 11 2f 	jmp	0x5e22	; 0x5e22 <twi_handleTimeout>
    6098:	10 92 cc 03 	sts	0x03CC, r1	; 0x8003cc <twi_state>
    609c:	08 95       	ret

0000609e <__vector_24>:

ISR(TWI_vect)
{
    609e:	1f 92       	push	r1
    60a0:	0f 92       	push	r0
    60a2:	0f b6       	in	r0, 0x3f	; 63
    60a4:	0f 92       	push	r0
    60a6:	11 24       	eor	r1, r1
    60a8:	2f 93       	push	r18
    60aa:	3f 93       	push	r19
    60ac:	4f 93       	push	r20
    60ae:	5f 93       	push	r21
    60b0:	6f 93       	push	r22
    60b2:	7f 93       	push	r23
    60b4:	8f 93       	push	r24
    60b6:	9f 93       	push	r25
    60b8:	af 93       	push	r26
    60ba:	bf 93       	push	r27
    60bc:	ef 93       	push	r30
    60be:	ff 93       	push	r31
  switch(TW_STATUS){
    60c0:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
    60c4:	88 7f       	andi	r24, 0xF8	; 248
    60c6:	80 36       	cpi	r24, 0x60	; 96
    60c8:	09 f4       	brne	.+2      	; 0x60cc <__vector_24+0x2e>
    60ca:	9e c0       	rjmp	.+316    	; 0x6208 <__vector_24+0x16a>
    60cc:	78 f5       	brcc	.+94     	; 0x612c <__vector_24+0x8e>
    60ce:	88 32       	cpi	r24, 0x28	; 40
    60d0:	09 f4       	brne	.+2      	; 0x60d4 <__vector_24+0x36>
    60d2:	5d c0       	rjmp	.+186    	; 0x618e <__vector_24+0xf0>
    60d4:	90 f4       	brcc	.+36     	; 0x60fa <__vector_24+0x5c>
    60d6:	80 31       	cpi	r24, 0x10	; 16
    60d8:	09 f4       	brne	.+2      	; 0x60dc <__vector_24+0x3e>
    60da:	56 c0       	rjmp	.+172    	; 0x6188 <__vector_24+0xea>
    60dc:	38 f4       	brcc	.+14     	; 0x60ec <__vector_24+0x4e>
    60de:	88 23       	and	r24, r24
    60e0:	09 f4       	brne	.+2      	; 0x60e4 <__vector_24+0x46>
    60e2:	f5 c0       	rjmp	.+490    	; 0x62ce <__vector_24+0x230>
    60e4:	88 30       	cpi	r24, 0x08	; 8
    60e6:	09 f4       	brne	.+2      	; 0x60ea <__vector_24+0x4c>
    60e8:	4f c0       	rjmp	.+158    	; 0x6188 <__vector_24+0xea>
    60ea:	f5 c0       	rjmp	.+490    	; 0x62d6 <__vector_24+0x238>
    60ec:	88 31       	cpi	r24, 0x18	; 24
    60ee:	09 f4       	brne	.+2      	; 0x60f2 <__vector_24+0x54>
    60f0:	4e c0       	rjmp	.+156    	; 0x618e <__vector_24+0xf0>
    60f2:	80 32       	cpi	r24, 0x20	; 32
    60f4:	09 f4       	brne	.+2      	; 0x60f8 <__vector_24+0x5a>
    60f6:	5f c0       	rjmp	.+190    	; 0x61b6 <__vector_24+0x118>
    60f8:	ee c0       	rjmp	.+476    	; 0x62d6 <__vector_24+0x238>
    60fa:	80 34       	cpi	r24, 0x40	; 64
    60fc:	09 f4       	brne	.+2      	; 0x6100 <__vector_24+0x62>
    60fe:	6a c0       	rjmp	.+212    	; 0x61d4 <__vector_24+0x136>
    6100:	58 f4       	brcc	.+22     	; 0x6118 <__vector_24+0x7a>
    6102:	80 33       	cpi	r24, 0x30	; 48
    6104:	09 f4       	brne	.+2      	; 0x6108 <__vector_24+0x6a>
    6106:	57 c0       	rjmp	.+174    	; 0x61b6 <__vector_24+0x118>
    6108:	88 33       	cpi	r24, 0x38	; 56
    610a:	09 f0       	breq	.+2      	; 0x610e <__vector_24+0x70>
    610c:	e4 c0       	rjmp	.+456    	; 0x62d6 <__vector_24+0x238>
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    610e:	80 93 59 03 	sts	0x0359, r24	; 0x800359 <twi_error>
      twi_releaseBus();
    6112:	0e 94 0b 2f 	call	0x5e16	; 0x5e16 <twi_releaseBus>
      break;
    6116:	df c0       	rjmp	.+446    	; 0x62d6 <__vector_24+0x238>
  return(flag);
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    6118:	80 35       	cpi	r24, 0x50	; 80
    611a:	09 f4       	brne	.+2      	; 0x611e <__vector_24+0x80>
    611c:	4f c0       	rjmp	.+158    	; 0x61bc <__vector_24+0x11e>
    611e:	88 35       	cpi	r24, 0x58	; 88
    6120:	09 f4       	brne	.+2      	; 0x6124 <__vector_24+0x86>
    6122:	5d c0       	rjmp	.+186    	; 0x61de <__vector_24+0x140>
    6124:	88 34       	cpi	r24, 0x48	; 72
    6126:	09 f0       	breq	.+2      	; 0x612a <__vector_24+0x8c>
    6128:	d6 c0       	rjmp	.+428    	; 0x62d6 <__vector_24+0x238>
    612a:	d3 c0       	rjmp	.+422    	; 0x62d2 <__vector_24+0x234>
    612c:	88 39       	cpi	r24, 0x98	; 152
    612e:	09 f4       	brne	.+2      	; 0x6132 <__vector_24+0x94>
    6130:	c4 c0       	rjmp	.+392    	; 0x62ba <__vector_24+0x21c>
    6132:	a8 f4       	brcc	.+42     	; 0x615e <__vector_24+0xc0>
    6134:	88 37       	cpi	r24, 0x78	; 120
    6136:	09 f4       	brne	.+2      	; 0x613a <__vector_24+0x9c>
    6138:	67 c0       	rjmp	.+206    	; 0x6208 <__vector_24+0x16a>
    613a:	38 f4       	brcc	.+14     	; 0x614a <__vector_24+0xac>
    613c:	88 36       	cpi	r24, 0x68	; 104
    613e:	09 f4       	brne	.+2      	; 0x6142 <__vector_24+0xa4>
    6140:	63 c0       	rjmp	.+198    	; 0x6208 <__vector_24+0x16a>
    6142:	80 37       	cpi	r24, 0x70	; 112
    6144:	09 f4       	brne	.+2      	; 0x6148 <__vector_24+0xaa>
    6146:	60 c0       	rjmp	.+192    	; 0x6208 <__vector_24+0x16a>
    6148:	c6 c0       	rjmp	.+396    	; 0x62d6 <__vector_24+0x238>
    614a:	88 38       	cpi	r24, 0x88	; 136
    614c:	09 f4       	brne	.+2      	; 0x6150 <__vector_24+0xb2>
    614e:	b5 c0       	rjmp	.+362    	; 0x62ba <__vector_24+0x21c>
    6150:	80 39       	cpi	r24, 0x90	; 144
    6152:	09 f4       	brne	.+2      	; 0x6156 <__vector_24+0xb8>
    6154:	5f c0       	rjmp	.+190    	; 0x6214 <__vector_24+0x176>
    6156:	80 38       	cpi	r24, 0x80	; 128
    6158:	09 f0       	breq	.+2      	; 0x615c <__vector_24+0xbe>
    615a:	bd c0       	rjmp	.+378    	; 0x62d6 <__vector_24+0x238>
    615c:	5b c0       	rjmp	.+182    	; 0x6214 <__vector_24+0x176>
    615e:	80 3b       	cpi	r24, 0xB0	; 176
    6160:	09 f4       	brne	.+2      	; 0x6164 <__vector_24+0xc6>
    6162:	83 c0       	rjmp	.+262    	; 0x626a <__vector_24+0x1cc>
    6164:	38 f4       	brcc	.+14     	; 0x6174 <__vector_24+0xd6>
    6166:	80 3a       	cpi	r24, 0xA0	; 160
    6168:	09 f4       	brne	.+2      	; 0x616c <__vector_24+0xce>
    616a:	66 c0       	rjmp	.+204    	; 0x6238 <__vector_24+0x19a>
    616c:	88 3a       	cpi	r24, 0xA8	; 168
    616e:	09 f4       	brne	.+2      	; 0x6172 <__vector_24+0xd4>
    6170:	7c c0       	rjmp	.+248    	; 0x626a <__vector_24+0x1cc>
    6172:	b1 c0       	rjmp	.+354    	; 0x62d6 <__vector_24+0x238>
    6174:	80 3c       	cpi	r24, 0xC0	; 192
    6176:	09 f4       	brne	.+2      	; 0x617a <__vector_24+0xdc>
    6178:	a4 c0       	rjmp	.+328    	; 0x62c2 <__vector_24+0x224>
    617a:	88 3c       	cpi	r24, 0xC8	; 200
    617c:	09 f4       	brne	.+2      	; 0x6180 <__vector_24+0xe2>
    617e:	a1 c0       	rjmp	.+322    	; 0x62c2 <__vector_24+0x224>
    6180:	88 3b       	cpi	r24, 0xB8	; 184
    6182:	09 f4       	brne	.+2      	; 0x6186 <__vector_24+0xe8>
    6184:	87 c0       	rjmp	.+270    	; 0x6294 <__vector_24+0x1f6>
    6186:	a7 c0       	rjmp	.+334    	; 0x62d6 <__vector_24+0x238>
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    6188:	80 91 cb 03 	lds	r24, 0x03CB	; 0x8003cb <twi_slarw>
    618c:	10 c0       	rjmp	.+32     	; 0x61ae <__vector_24+0x110>

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    618e:	90 91 9e 03 	lds	r25, 0x039E	; 0x80039e <twi_masterBufferIndex>
    6192:	80 91 9d 03 	lds	r24, 0x039D	; 0x80039d <twi_masterBufferLength>
    6196:	98 17       	cp	r25, r24
    6198:	70 f5       	brcc	.+92     	; 0x61f6 <__vector_24+0x158>
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    619a:	e0 91 9e 03 	lds	r30, 0x039E	; 0x80039e <twi_masterBufferIndex>
    619e:	81 e0       	ldi	r24, 0x01	; 1
    61a0:	8e 0f       	add	r24, r30
    61a2:	80 93 9e 03 	sts	0x039E, r24	; 0x80039e <twi_masterBufferIndex>
    61a6:	f0 e0       	ldi	r31, 0x00	; 0
    61a8:	e1 56       	subi	r30, 0x61	; 97
    61aa:	fc 4f       	sbci	r31, 0xFC	; 252
    61ac:	80 81       	ld	r24, Z
    61ae:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    61b2:	85 ec       	ldi	r24, 0xC5	; 197
    61b4:	83 c0       	rjmp	.+262    	; 0x62bc <__vector_24+0x21e>
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    61b6:	80 93 59 03 	sts	0x0359, r24	; 0x800359 <twi_error>
    61ba:	8b c0       	rjmp	.+278    	; 0x62d2 <__vector_24+0x234>
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    61bc:	e0 91 9e 03 	lds	r30, 0x039E	; 0x80039e <twi_masterBufferIndex>
    61c0:	81 e0       	ldi	r24, 0x01	; 1
    61c2:	8e 0f       	add	r24, r30
    61c4:	80 93 9e 03 	sts	0x039E, r24	; 0x80039e <twi_masterBufferIndex>
    61c8:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    61cc:	f0 e0       	ldi	r31, 0x00	; 0
    61ce:	e1 56       	subi	r30, 0x61	; 97
    61d0:	fc 4f       	sbci	r31, 0xFC	; 252
    61d2:	80 83       	st	Z, r24
      __attribute__ ((fallthrough));
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    61d4:	90 91 9e 03 	lds	r25, 0x039E	; 0x80039e <twi_masterBufferIndex>
    61d8:	80 91 9d 03 	lds	r24, 0x039D	; 0x80039d <twi_masterBufferLength>
    61dc:	6b c0       	rjmp	.+214    	; 0x62b4 <__vector_24+0x216>
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    61de:	e0 91 9e 03 	lds	r30, 0x039E	; 0x80039e <twi_masterBufferIndex>
    61e2:	81 e0       	ldi	r24, 0x01	; 1
    61e4:	8e 0f       	add	r24, r30
    61e6:	80 93 9e 03 	sts	0x039E, r24	; 0x80039e <twi_masterBufferIndex>
    61ea:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    61ee:	f0 e0       	ldi	r31, 0x00	; 0
    61f0:	e1 56       	subi	r30, 0x61	; 97
    61f2:	fc 4f       	sbci	r31, 0xFC	; 252
    61f4:	80 83       	st	Z, r24
      if (twi_sendStop){
    61f6:	80 91 ca 03 	lds	r24, 0x03CA	; 0x8003ca <twi_sendStop>
    61fa:	81 11       	cpse	r24, r1
    61fc:	6a c0       	rjmp	.+212    	; 0x62d2 <__vector_24+0x234>
        twi_stop();
      } else {
        twi_inRepStart = true;	// we're gonna send the START
    61fe:	81 e0       	ldi	r24, 0x01	; 1
    6200:	80 93 c9 03 	sts	0x03C9, r24	; 0x8003c9 <twi_inRepStart>
        // don't enable the interrupt. We'll generate the start, but we
        // avoid handling the interrupt until we're in the next transaction,
        // at the point where we would normally issue the start.
        TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    6204:	84 ea       	ldi	r24, 0xA4	; 164
    6206:	5e c0       	rjmp	.+188    	; 0x62c4 <__vector_24+0x226>
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    6208:	83 e0       	ldi	r24, 0x03	; 3
    620a:	80 93 cc 03 	sts	0x03CC, r24	; 0x8003cc <twi_state>
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    620e:	10 92 5a 03 	sts	0x035A, r1	; 0x80035a <twi_rxBufferIndex>
    6212:	cf cf       	rjmp	.-98     	; 0x61b2 <__vector_24+0x114>
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    6214:	80 91 5a 03 	lds	r24, 0x035A	; 0x80035a <twi_rxBufferIndex>
    6218:	80 32       	cpi	r24, 0x20	; 32
    621a:	08 f0       	brcs	.+2      	; 0x621e <__vector_24+0x180>
    621c:	4e c0       	rjmp	.+156    	; 0x62ba <__vector_24+0x21c>
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    621e:	e0 91 5a 03 	lds	r30, 0x035A	; 0x80035a <twi_rxBufferIndex>
    6222:	81 e0       	ldi	r24, 0x01	; 1
    6224:	8e 0f       	add	r24, r30
    6226:	80 93 5a 03 	sts	0x035A, r24	; 0x80035a <twi_rxBufferIndex>
    622a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
    622e:	f0 e0       	ldi	r31, 0x00	; 0
    6230:	e5 5a       	subi	r30, 0xA5	; 165
    6232:	fc 4f       	sbci	r31, 0xFC	; 252
    6234:	80 83       	st	Z, r24
    6236:	bd cf       	rjmp	.-134    	; 0x61b2 <__vector_24+0x114>
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    6238:	0e 94 0b 2f 	call	0x5e16	; 0x5e16 <twi_releaseBus>
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    623c:	80 91 5a 03 	lds	r24, 0x035A	; 0x80035a <twi_rxBufferIndex>
    6240:	80 32       	cpi	r24, 0x20	; 32
    6242:	30 f4       	brcc	.+12     	; 0x6250 <__vector_24+0x1b2>
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    6244:	e0 91 5a 03 	lds	r30, 0x035A	; 0x80035a <twi_rxBufferIndex>
    6248:	f0 e0       	ldi	r31, 0x00	; 0
    624a:	e5 5a       	subi	r30, 0xA5	; 165
    624c:	fc 4f       	sbci	r31, 0xFC	; 252
    624e:	10 82       	st	Z, r1
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    6250:	60 91 5a 03 	lds	r22, 0x035A	; 0x80035a <twi_rxBufferIndex>
    6254:	70 e0       	ldi	r23, 0x00	; 0
    6256:	e0 91 bf 03 	lds	r30, 0x03BF	; 0x8003bf <twi_onSlaveReceive>
    625a:	f0 91 c0 03 	lds	r31, 0x03C0	; 0x8003c0 <twi_onSlaveReceive+0x1>
    625e:	8b e5       	ldi	r24, 0x5B	; 91
    6260:	93 e0       	ldi	r25, 0x03	; 3
    6262:	09 95       	icall
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    6264:	10 92 5a 03 	sts	0x035A, r1	; 0x80035a <twi_rxBufferIndex>
      break;
    6268:	36 c0       	rjmp	.+108    	; 0x62d6 <__vector_24+0x238>
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    626a:	84 e0       	ldi	r24, 0x04	; 4
    626c:	80 93 cc 03 	sts	0x03CC, r24	; 0x8003cc <twi_state>
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    6270:	10 92 7c 03 	sts	0x037C, r1	; 0x80037c <twi_txBufferIndex>
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    6274:	10 92 7b 03 	sts	0x037B, r1	; 0x80037b <twi_txBufferLength>
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    6278:	e0 91 c1 03 	lds	r30, 0x03C1	; 0x8003c1 <twi_onSlaveTransmit>
    627c:	f0 91 c2 03 	lds	r31, 0x03C2	; 0x8003c2 <twi_onSlaveTransmit+0x1>
    6280:	09 95       	icall
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    6282:	80 91 7b 03 	lds	r24, 0x037B	; 0x80037b <twi_txBufferLength>
    6286:	81 11       	cpse	r24, r1
    6288:	05 c0       	rjmp	.+10     	; 0x6294 <__vector_24+0x1f6>
        twi_txBufferLength = 1;
    628a:	81 e0       	ldi	r24, 0x01	; 1
    628c:	80 93 7b 03 	sts	0x037B, r24	; 0x80037b <twi_txBufferLength>
        twi_txBuffer[0] = 0x00;
    6290:	10 92 7d 03 	sts	0x037D, r1	; 0x80037d <twi_txBuffer>
      }
      __attribute__ ((fallthrough));		  
      // transmit first byte from buffer, fall
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    6294:	e0 91 7c 03 	lds	r30, 0x037C	; 0x80037c <twi_txBufferIndex>
    6298:	81 e0       	ldi	r24, 0x01	; 1
    629a:	8e 0f       	add	r24, r30
    629c:	80 93 7c 03 	sts	0x037C, r24	; 0x80037c <twi_txBufferIndex>
    62a0:	f0 e0       	ldi	r31, 0x00	; 0
    62a2:	e3 58       	subi	r30, 0x83	; 131
    62a4:	fc 4f       	sbci	r31, 0xFC	; 252
    62a6:	80 81       	ld	r24, Z
    62a8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    62ac:	90 91 7c 03 	lds	r25, 0x037C	; 0x80037c <twi_txBufferIndex>
    62b0:	80 91 7b 03 	lds	r24, 0x037B	; 0x80037b <twi_txBufferLength>
    62b4:	98 17       	cp	r25, r24
    62b6:	08 f4       	brcc	.+2      	; 0x62ba <__vector_24+0x21c>
    62b8:	7c cf       	rjmp	.-264    	; 0x61b2 <__vector_24+0x114>
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    62ba:	85 e8       	ldi	r24, 0x85	; 133
    62bc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    62c0:	0a c0       	rjmp	.+20     	; 0x62d6 <__vector_24+0x238>
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    62c2:	85 ec       	ldi	r24, 0xC5	; 197
    62c4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    62c8:	10 92 cc 03 	sts	0x03CC, r1	; 0x8003cc <twi_state>
      break;
    62cc:	04 c0       	rjmp	.+8      	; 0x62d6 <__vector_24+0x238>

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    62ce:	10 92 59 03 	sts	0x0359, r1	; 0x800359 <twi_error>
      twi_stop();
    62d2:	0e 94 17 30 	call	0x602e	; 0x602e <twi_stop>
      break;
  }
}
    62d6:	ff 91       	pop	r31
    62d8:	ef 91       	pop	r30
    62da:	bf 91       	pop	r27
    62dc:	af 91       	pop	r26
    62de:	9f 91       	pop	r25
    62e0:	8f 91       	pop	r24
    62e2:	7f 91       	pop	r23
    62e4:	6f 91       	pop	r22
    62e6:	5f 91       	pop	r21
    62e8:	4f 91       	pop	r20
    62ea:	3f 91       	pop	r19
    62ec:	2f 91       	pop	r18
    62ee:	0f 90       	pop	r0
    62f0:	0f be       	out	0x3f, r0	; 63
    62f2:	0f 90       	pop	r0
    62f4:	1f 90       	pop	r1
    62f6:	18 95       	reti

000062f8 <__mulsi3>:
    62f8:	db 01       	movw	r26, r22
    62fa:	8f 93       	push	r24
    62fc:	9f 93       	push	r25
    62fe:	0e 94 ff 31 	call	0x63fe	; 0x63fe <__muluhisi3>
    6302:	bf 91       	pop	r27
    6304:	af 91       	pop	r26
    6306:	a2 9f       	mul	r26, r18
    6308:	80 0d       	add	r24, r0
    630a:	91 1d       	adc	r25, r1
    630c:	a3 9f       	mul	r26, r19
    630e:	90 0d       	add	r25, r0
    6310:	b2 9f       	mul	r27, r18
    6312:	90 0d       	add	r25, r0
    6314:	11 24       	eor	r1, r1
    6316:	08 95       	ret

00006318 <__divmodhi4>:
    6318:	97 fb       	bst	r25, 7
    631a:	07 2e       	mov	r0, r23
    631c:	16 f4       	brtc	.+4      	; 0x6322 <__divmodhi4+0xa>
    631e:	00 94       	com	r0
    6320:	07 d0       	rcall	.+14     	; 0x6330 <__divmodhi4_neg1>
    6322:	77 fd       	sbrc	r23, 7
    6324:	09 d0       	rcall	.+18     	; 0x6338 <__divmodhi4_neg2>
    6326:	0e 94 0a 32 	call	0x6414	; 0x6414 <__udivmodhi4>
    632a:	07 fc       	sbrc	r0, 7
    632c:	05 d0       	rcall	.+10     	; 0x6338 <__divmodhi4_neg2>
    632e:	3e f4       	brtc	.+14     	; 0x633e <__divmodhi4_exit>

00006330 <__divmodhi4_neg1>:
    6330:	90 95       	com	r25
    6332:	81 95       	neg	r24
    6334:	9f 4f       	sbci	r25, 0xFF	; 255
    6336:	08 95       	ret

00006338 <__divmodhi4_neg2>:
    6338:	70 95       	com	r23
    633a:	61 95       	neg	r22
    633c:	7f 4f       	sbci	r23, 0xFF	; 255

0000633e <__divmodhi4_exit>:
    633e:	08 95       	ret

00006340 <__udivmodsi4>:
    6340:	a1 e2       	ldi	r26, 0x21	; 33
    6342:	1a 2e       	mov	r1, r26
    6344:	aa 1b       	sub	r26, r26
    6346:	bb 1b       	sub	r27, r27
    6348:	fd 01       	movw	r30, r26
    634a:	0d c0       	rjmp	.+26     	; 0x6366 <__udivmodsi4_ep>

0000634c <__udivmodsi4_loop>:
    634c:	aa 1f       	adc	r26, r26
    634e:	bb 1f       	adc	r27, r27
    6350:	ee 1f       	adc	r30, r30
    6352:	ff 1f       	adc	r31, r31
    6354:	a2 17       	cp	r26, r18
    6356:	b3 07       	cpc	r27, r19
    6358:	e4 07       	cpc	r30, r20
    635a:	f5 07       	cpc	r31, r21
    635c:	20 f0       	brcs	.+8      	; 0x6366 <__udivmodsi4_ep>
    635e:	a2 1b       	sub	r26, r18
    6360:	b3 0b       	sbc	r27, r19
    6362:	e4 0b       	sbc	r30, r20
    6364:	f5 0b       	sbc	r31, r21

00006366 <__udivmodsi4_ep>:
    6366:	66 1f       	adc	r22, r22
    6368:	77 1f       	adc	r23, r23
    636a:	88 1f       	adc	r24, r24
    636c:	99 1f       	adc	r25, r25
    636e:	1a 94       	dec	r1
    6370:	69 f7       	brne	.-38     	; 0x634c <__udivmodsi4_loop>
    6372:	60 95       	com	r22
    6374:	70 95       	com	r23
    6376:	80 95       	com	r24
    6378:	90 95       	com	r25
    637a:	9b 01       	movw	r18, r22
    637c:	ac 01       	movw	r20, r24
    637e:	bd 01       	movw	r22, r26
    6380:	cf 01       	movw	r24, r30
    6382:	08 95       	ret

00006384 <__divmodsi4>:
    6384:	05 2e       	mov	r0, r21
    6386:	97 fb       	bst	r25, 7
    6388:	1e f4       	brtc	.+6      	; 0x6390 <__divmodsi4+0xc>
    638a:	00 94       	com	r0
    638c:	0e 94 d9 31 	call	0x63b2	; 0x63b2 <__negsi2>
    6390:	57 fd       	sbrc	r21, 7
    6392:	07 d0       	rcall	.+14     	; 0x63a2 <__divmodsi4_neg2>
    6394:	0e 94 a0 31 	call	0x6340	; 0x6340 <__udivmodsi4>
    6398:	07 fc       	sbrc	r0, 7
    639a:	03 d0       	rcall	.+6      	; 0x63a2 <__divmodsi4_neg2>
    639c:	4e f4       	brtc	.+18     	; 0x63b0 <__divmodsi4_exit>
    639e:	0c 94 d9 31 	jmp	0x63b2	; 0x63b2 <__negsi2>

000063a2 <__divmodsi4_neg2>:
    63a2:	50 95       	com	r21
    63a4:	40 95       	com	r20
    63a6:	30 95       	com	r19
    63a8:	21 95       	neg	r18
    63aa:	3f 4f       	sbci	r19, 0xFF	; 255
    63ac:	4f 4f       	sbci	r20, 0xFF	; 255
    63ae:	5f 4f       	sbci	r21, 0xFF	; 255

000063b0 <__divmodsi4_exit>:
    63b0:	08 95       	ret

000063b2 <__negsi2>:
    63b2:	90 95       	com	r25
    63b4:	80 95       	com	r24
    63b6:	70 95       	com	r23
    63b8:	61 95       	neg	r22
    63ba:	7f 4f       	sbci	r23, 0xFF	; 255
    63bc:	8f 4f       	sbci	r24, 0xFF	; 255
    63be:	9f 4f       	sbci	r25, 0xFF	; 255
    63c0:	08 95       	ret

000063c2 <__mulhisi3>:
    63c2:	0e 94 e9 31 	call	0x63d2	; 0x63d2 <__umulhisi3>
    63c6:	33 23       	and	r19, r19
    63c8:	12 f4       	brpl	.+4      	; 0x63ce <__mulhisi3+0xc>
    63ca:	8a 1b       	sub	r24, r26
    63cc:	9b 0b       	sbc	r25, r27
    63ce:	0c 94 fa 31 	jmp	0x63f4	; 0x63f4 <__usmulhisi3_tail>

000063d2 <__umulhisi3>:
    63d2:	a2 9f       	mul	r26, r18
    63d4:	b0 01       	movw	r22, r0
    63d6:	b3 9f       	mul	r27, r19
    63d8:	c0 01       	movw	r24, r0
    63da:	a3 9f       	mul	r26, r19
    63dc:	70 0d       	add	r23, r0
    63de:	81 1d       	adc	r24, r1
    63e0:	11 24       	eor	r1, r1
    63e2:	91 1d       	adc	r25, r1
    63e4:	b2 9f       	mul	r27, r18
    63e6:	70 0d       	add	r23, r0
    63e8:	81 1d       	adc	r24, r1
    63ea:	11 24       	eor	r1, r1
    63ec:	91 1d       	adc	r25, r1
    63ee:	08 95       	ret

000063f0 <__usmulhisi3>:
    63f0:	0e 94 e9 31 	call	0x63d2	; 0x63d2 <__umulhisi3>

000063f4 <__usmulhisi3_tail>:
    63f4:	b7 ff       	sbrs	r27, 7
    63f6:	08 95       	ret
    63f8:	82 1b       	sub	r24, r18
    63fa:	93 0b       	sbc	r25, r19
    63fc:	08 95       	ret

000063fe <__muluhisi3>:
    63fe:	0e 94 e9 31 	call	0x63d2	; 0x63d2 <__umulhisi3>
    6402:	a5 9f       	mul	r26, r21
    6404:	90 0d       	add	r25, r0
    6406:	b4 9f       	mul	r27, r20
    6408:	90 0d       	add	r25, r0
    640a:	a4 9f       	mul	r26, r20
    640c:	80 0d       	add	r24, r0
    640e:	91 1d       	adc	r25, r1
    6410:	11 24       	eor	r1, r1
    6412:	08 95       	ret

00006414 <__udivmodhi4>:
    6414:	aa 1b       	sub	r26, r26
    6416:	bb 1b       	sub	r27, r27
    6418:	51 e1       	ldi	r21, 0x11	; 17
    641a:	07 c0       	rjmp	.+14     	; 0x642a <__udivmodhi4_ep>

0000641c <__udivmodhi4_loop>:
    641c:	aa 1f       	adc	r26, r26
    641e:	bb 1f       	adc	r27, r27
    6420:	a6 17       	cp	r26, r22
    6422:	b7 07       	cpc	r27, r23
    6424:	10 f0       	brcs	.+4      	; 0x642a <__udivmodhi4_ep>
    6426:	a6 1b       	sub	r26, r22
    6428:	b7 0b       	sbc	r27, r23

0000642a <__udivmodhi4_ep>:
    642a:	88 1f       	adc	r24, r24
    642c:	99 1f       	adc	r25, r25
    642e:	5a 95       	dec	r21
    6430:	a9 f7       	brne	.-22     	; 0x641c <__udivmodhi4_loop>
    6432:	80 95       	com	r24
    6434:	90 95       	com	r25
    6436:	bc 01       	movw	r22, r24
    6438:	cd 01       	movw	r24, r26
    643a:	08 95       	ret

0000643c <__tablejump2__>:
    643c:	ee 0f       	add	r30, r30
    643e:	ff 1f       	adc	r31, r31
    6440:	05 90       	lpm	r0, Z+
    6442:	f4 91       	lpm	r31, Z
    6444:	e0 2d       	mov	r30, r0
    6446:	09 94       	ijmp

00006448 <malloc>:
    6448:	0f 93       	push	r16
    644a:	1f 93       	push	r17
    644c:	cf 93       	push	r28
    644e:	df 93       	push	r29
    6450:	82 30       	cpi	r24, 0x02	; 2
    6452:	91 05       	cpc	r25, r1
    6454:	10 f4       	brcc	.+4      	; 0x645a <malloc+0x12>
    6456:	82 e0       	ldi	r24, 0x02	; 2
    6458:	90 e0       	ldi	r25, 0x00	; 0
    645a:	e0 91 cf 03 	lds	r30, 0x03CF	; 0x8003cf <__flp>
    645e:	f0 91 d0 03 	lds	r31, 0x03D0	; 0x8003d0 <__flp+0x1>
    6462:	20 e0       	ldi	r18, 0x00	; 0
    6464:	30 e0       	ldi	r19, 0x00	; 0
    6466:	a0 e0       	ldi	r26, 0x00	; 0
    6468:	b0 e0       	ldi	r27, 0x00	; 0
    646a:	30 97       	sbiw	r30, 0x00	; 0
    646c:	19 f1       	breq	.+70     	; 0x64b4 <malloc+0x6c>
    646e:	40 81       	ld	r20, Z
    6470:	51 81       	ldd	r21, Z+1	; 0x01
    6472:	02 81       	ldd	r16, Z+2	; 0x02
    6474:	13 81       	ldd	r17, Z+3	; 0x03
    6476:	48 17       	cp	r20, r24
    6478:	59 07       	cpc	r21, r25
    647a:	c8 f0       	brcs	.+50     	; 0x64ae <malloc+0x66>
    647c:	84 17       	cp	r24, r20
    647e:	95 07       	cpc	r25, r21
    6480:	69 f4       	brne	.+26     	; 0x649c <malloc+0x54>
    6482:	10 97       	sbiw	r26, 0x00	; 0
    6484:	31 f0       	breq	.+12     	; 0x6492 <malloc+0x4a>
    6486:	12 96       	adiw	r26, 0x02	; 2
    6488:	0c 93       	st	X, r16
    648a:	12 97       	sbiw	r26, 0x02	; 2
    648c:	13 96       	adiw	r26, 0x03	; 3
    648e:	1c 93       	st	X, r17
    6490:	27 c0       	rjmp	.+78     	; 0x64e0 <malloc+0x98>
    6492:	00 93 cf 03 	sts	0x03CF, r16	; 0x8003cf <__flp>
    6496:	10 93 d0 03 	sts	0x03D0, r17	; 0x8003d0 <__flp+0x1>
    649a:	22 c0       	rjmp	.+68     	; 0x64e0 <malloc+0x98>
    649c:	21 15       	cp	r18, r1
    649e:	31 05       	cpc	r19, r1
    64a0:	19 f0       	breq	.+6      	; 0x64a8 <malloc+0x60>
    64a2:	42 17       	cp	r20, r18
    64a4:	53 07       	cpc	r21, r19
    64a6:	18 f4       	brcc	.+6      	; 0x64ae <malloc+0x66>
    64a8:	9a 01       	movw	r18, r20
    64aa:	bd 01       	movw	r22, r26
    64ac:	ef 01       	movw	r28, r30
    64ae:	df 01       	movw	r26, r30
    64b0:	f8 01       	movw	r30, r16
    64b2:	db cf       	rjmp	.-74     	; 0x646a <malloc+0x22>
    64b4:	21 15       	cp	r18, r1
    64b6:	31 05       	cpc	r19, r1
    64b8:	f9 f0       	breq	.+62     	; 0x64f8 <malloc+0xb0>
    64ba:	28 1b       	sub	r18, r24
    64bc:	39 0b       	sbc	r19, r25
    64be:	24 30       	cpi	r18, 0x04	; 4
    64c0:	31 05       	cpc	r19, r1
    64c2:	80 f4       	brcc	.+32     	; 0x64e4 <malloc+0x9c>
    64c4:	8a 81       	ldd	r24, Y+2	; 0x02
    64c6:	9b 81       	ldd	r25, Y+3	; 0x03
    64c8:	61 15       	cp	r22, r1
    64ca:	71 05       	cpc	r23, r1
    64cc:	21 f0       	breq	.+8      	; 0x64d6 <malloc+0x8e>
    64ce:	fb 01       	movw	r30, r22
    64d0:	93 83       	std	Z+3, r25	; 0x03
    64d2:	82 83       	std	Z+2, r24	; 0x02
    64d4:	04 c0       	rjmp	.+8      	; 0x64de <malloc+0x96>
    64d6:	90 93 d0 03 	sts	0x03D0, r25	; 0x8003d0 <__flp+0x1>
    64da:	80 93 cf 03 	sts	0x03CF, r24	; 0x8003cf <__flp>
    64de:	fe 01       	movw	r30, r28
    64e0:	32 96       	adiw	r30, 0x02	; 2
    64e2:	44 c0       	rjmp	.+136    	; 0x656c <malloc+0x124>
    64e4:	fe 01       	movw	r30, r28
    64e6:	e2 0f       	add	r30, r18
    64e8:	f3 1f       	adc	r31, r19
    64ea:	81 93       	st	Z+, r24
    64ec:	91 93       	st	Z+, r25
    64ee:	22 50       	subi	r18, 0x02	; 2
    64f0:	31 09       	sbc	r19, r1
    64f2:	39 83       	std	Y+1, r19	; 0x01
    64f4:	28 83       	st	Y, r18
    64f6:	3a c0       	rjmp	.+116    	; 0x656c <malloc+0x124>
    64f8:	20 91 cd 03 	lds	r18, 0x03CD	; 0x8003cd <__brkval>
    64fc:	30 91 ce 03 	lds	r19, 0x03CE	; 0x8003ce <__brkval+0x1>
    6500:	23 2b       	or	r18, r19
    6502:	41 f4       	brne	.+16     	; 0x6514 <malloc+0xcc>
    6504:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <__malloc_heap_start>
    6508:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__malloc_heap_start+0x1>
    650c:	30 93 ce 03 	sts	0x03CE, r19	; 0x8003ce <__brkval+0x1>
    6510:	20 93 cd 03 	sts	0x03CD, r18	; 0x8003cd <__brkval>
    6514:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    6518:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    651c:	21 15       	cp	r18, r1
    651e:	31 05       	cpc	r19, r1
    6520:	41 f4       	brne	.+16     	; 0x6532 <malloc+0xea>
    6522:	2d b7       	in	r18, 0x3d	; 61
    6524:	3e b7       	in	r19, 0x3e	; 62
    6526:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <__malloc_margin>
    652a:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <__malloc_margin+0x1>
    652e:	24 1b       	sub	r18, r20
    6530:	35 0b       	sbc	r19, r21
    6532:	e0 91 cd 03 	lds	r30, 0x03CD	; 0x8003cd <__brkval>
    6536:	f0 91 ce 03 	lds	r31, 0x03CE	; 0x8003ce <__brkval+0x1>
    653a:	e2 17       	cp	r30, r18
    653c:	f3 07       	cpc	r31, r19
    653e:	a0 f4       	brcc	.+40     	; 0x6568 <malloc+0x120>
    6540:	2e 1b       	sub	r18, r30
    6542:	3f 0b       	sbc	r19, r31
    6544:	28 17       	cp	r18, r24
    6546:	39 07       	cpc	r19, r25
    6548:	78 f0       	brcs	.+30     	; 0x6568 <malloc+0x120>
    654a:	ac 01       	movw	r20, r24
    654c:	4e 5f       	subi	r20, 0xFE	; 254
    654e:	5f 4f       	sbci	r21, 0xFF	; 255
    6550:	24 17       	cp	r18, r20
    6552:	35 07       	cpc	r19, r21
    6554:	48 f0       	brcs	.+18     	; 0x6568 <malloc+0x120>
    6556:	4e 0f       	add	r20, r30
    6558:	5f 1f       	adc	r21, r31
    655a:	50 93 ce 03 	sts	0x03CE, r21	; 0x8003ce <__brkval+0x1>
    655e:	40 93 cd 03 	sts	0x03CD, r20	; 0x8003cd <__brkval>
    6562:	81 93       	st	Z+, r24
    6564:	91 93       	st	Z+, r25
    6566:	02 c0       	rjmp	.+4      	; 0x656c <malloc+0x124>
    6568:	e0 e0       	ldi	r30, 0x00	; 0
    656a:	f0 e0       	ldi	r31, 0x00	; 0
    656c:	cf 01       	movw	r24, r30
    656e:	df 91       	pop	r29
    6570:	cf 91       	pop	r28
    6572:	1f 91       	pop	r17
    6574:	0f 91       	pop	r16
    6576:	08 95       	ret

00006578 <free>:
    6578:	cf 93       	push	r28
    657a:	df 93       	push	r29
    657c:	00 97       	sbiw	r24, 0x00	; 0
    657e:	09 f4       	brne	.+2      	; 0x6582 <free+0xa>
    6580:	81 c0       	rjmp	.+258    	; 0x6684 <free+0x10c>
    6582:	fc 01       	movw	r30, r24
    6584:	32 97       	sbiw	r30, 0x02	; 2
    6586:	13 82       	std	Z+3, r1	; 0x03
    6588:	12 82       	std	Z+2, r1	; 0x02
    658a:	a0 91 cf 03 	lds	r26, 0x03CF	; 0x8003cf <__flp>
    658e:	b0 91 d0 03 	lds	r27, 0x03D0	; 0x8003d0 <__flp+0x1>
    6592:	10 97       	sbiw	r26, 0x00	; 0
    6594:	81 f4       	brne	.+32     	; 0x65b6 <free+0x3e>
    6596:	20 81       	ld	r18, Z
    6598:	31 81       	ldd	r19, Z+1	; 0x01
    659a:	82 0f       	add	r24, r18
    659c:	93 1f       	adc	r25, r19
    659e:	20 91 cd 03 	lds	r18, 0x03CD	; 0x8003cd <__brkval>
    65a2:	30 91 ce 03 	lds	r19, 0x03CE	; 0x8003ce <__brkval+0x1>
    65a6:	28 17       	cp	r18, r24
    65a8:	39 07       	cpc	r19, r25
    65aa:	51 f5       	brne	.+84     	; 0x6600 <free+0x88>
    65ac:	f0 93 ce 03 	sts	0x03CE, r31	; 0x8003ce <__brkval+0x1>
    65b0:	e0 93 cd 03 	sts	0x03CD, r30	; 0x8003cd <__brkval>
    65b4:	67 c0       	rjmp	.+206    	; 0x6684 <free+0x10c>
    65b6:	ed 01       	movw	r28, r26
    65b8:	20 e0       	ldi	r18, 0x00	; 0
    65ba:	30 e0       	ldi	r19, 0x00	; 0
    65bc:	ce 17       	cp	r28, r30
    65be:	df 07       	cpc	r29, r31
    65c0:	40 f4       	brcc	.+16     	; 0x65d2 <free+0x5a>
    65c2:	4a 81       	ldd	r20, Y+2	; 0x02
    65c4:	5b 81       	ldd	r21, Y+3	; 0x03
    65c6:	9e 01       	movw	r18, r28
    65c8:	41 15       	cp	r20, r1
    65ca:	51 05       	cpc	r21, r1
    65cc:	f1 f0       	breq	.+60     	; 0x660a <free+0x92>
    65ce:	ea 01       	movw	r28, r20
    65d0:	f5 cf       	rjmp	.-22     	; 0x65bc <free+0x44>
    65d2:	d3 83       	std	Z+3, r29	; 0x03
    65d4:	c2 83       	std	Z+2, r28	; 0x02
    65d6:	40 81       	ld	r20, Z
    65d8:	51 81       	ldd	r21, Z+1	; 0x01
    65da:	84 0f       	add	r24, r20
    65dc:	95 1f       	adc	r25, r21
    65de:	c8 17       	cp	r28, r24
    65e0:	d9 07       	cpc	r29, r25
    65e2:	59 f4       	brne	.+22     	; 0x65fa <free+0x82>
    65e4:	88 81       	ld	r24, Y
    65e6:	99 81       	ldd	r25, Y+1	; 0x01
    65e8:	84 0f       	add	r24, r20
    65ea:	95 1f       	adc	r25, r21
    65ec:	02 96       	adiw	r24, 0x02	; 2
    65ee:	91 83       	std	Z+1, r25	; 0x01
    65f0:	80 83       	st	Z, r24
    65f2:	8a 81       	ldd	r24, Y+2	; 0x02
    65f4:	9b 81       	ldd	r25, Y+3	; 0x03
    65f6:	93 83       	std	Z+3, r25	; 0x03
    65f8:	82 83       	std	Z+2, r24	; 0x02
    65fa:	21 15       	cp	r18, r1
    65fc:	31 05       	cpc	r19, r1
    65fe:	29 f4       	brne	.+10     	; 0x660a <free+0x92>
    6600:	f0 93 d0 03 	sts	0x03D0, r31	; 0x8003d0 <__flp+0x1>
    6604:	e0 93 cf 03 	sts	0x03CF, r30	; 0x8003cf <__flp>
    6608:	3d c0       	rjmp	.+122    	; 0x6684 <free+0x10c>
    660a:	e9 01       	movw	r28, r18
    660c:	fb 83       	std	Y+3, r31	; 0x03
    660e:	ea 83       	std	Y+2, r30	; 0x02
    6610:	49 91       	ld	r20, Y+
    6612:	59 91       	ld	r21, Y+
    6614:	c4 0f       	add	r28, r20
    6616:	d5 1f       	adc	r29, r21
    6618:	ec 17       	cp	r30, r28
    661a:	fd 07       	cpc	r31, r29
    661c:	61 f4       	brne	.+24     	; 0x6636 <free+0xbe>
    661e:	80 81       	ld	r24, Z
    6620:	91 81       	ldd	r25, Z+1	; 0x01
    6622:	84 0f       	add	r24, r20
    6624:	95 1f       	adc	r25, r21
    6626:	02 96       	adiw	r24, 0x02	; 2
    6628:	e9 01       	movw	r28, r18
    662a:	99 83       	std	Y+1, r25	; 0x01
    662c:	88 83       	st	Y, r24
    662e:	82 81       	ldd	r24, Z+2	; 0x02
    6630:	93 81       	ldd	r25, Z+3	; 0x03
    6632:	9b 83       	std	Y+3, r25	; 0x03
    6634:	8a 83       	std	Y+2, r24	; 0x02
    6636:	e0 e0       	ldi	r30, 0x00	; 0
    6638:	f0 e0       	ldi	r31, 0x00	; 0
    663a:	12 96       	adiw	r26, 0x02	; 2
    663c:	8d 91       	ld	r24, X+
    663e:	9c 91       	ld	r25, X
    6640:	13 97       	sbiw	r26, 0x03	; 3
    6642:	00 97       	sbiw	r24, 0x00	; 0
    6644:	19 f0       	breq	.+6      	; 0x664c <free+0xd4>
    6646:	fd 01       	movw	r30, r26
    6648:	dc 01       	movw	r26, r24
    664a:	f7 cf       	rjmp	.-18     	; 0x663a <free+0xc2>
    664c:	8d 91       	ld	r24, X+
    664e:	9c 91       	ld	r25, X
    6650:	11 97       	sbiw	r26, 0x01	; 1
    6652:	9d 01       	movw	r18, r26
    6654:	2e 5f       	subi	r18, 0xFE	; 254
    6656:	3f 4f       	sbci	r19, 0xFF	; 255
    6658:	82 0f       	add	r24, r18
    665a:	93 1f       	adc	r25, r19
    665c:	20 91 cd 03 	lds	r18, 0x03CD	; 0x8003cd <__brkval>
    6660:	30 91 ce 03 	lds	r19, 0x03CE	; 0x8003ce <__brkval+0x1>
    6664:	28 17       	cp	r18, r24
    6666:	39 07       	cpc	r19, r25
    6668:	69 f4       	brne	.+26     	; 0x6684 <free+0x10c>
    666a:	30 97       	sbiw	r30, 0x00	; 0
    666c:	29 f4       	brne	.+10     	; 0x6678 <free+0x100>
    666e:	10 92 d0 03 	sts	0x03D0, r1	; 0x8003d0 <__flp+0x1>
    6672:	10 92 cf 03 	sts	0x03CF, r1	; 0x8003cf <__flp>
    6676:	02 c0       	rjmp	.+4      	; 0x667c <free+0x104>
    6678:	13 82       	std	Z+3, r1	; 0x03
    667a:	12 82       	std	Z+2, r1	; 0x02
    667c:	b0 93 ce 03 	sts	0x03CE, r27	; 0x8003ce <__brkval+0x1>
    6680:	a0 93 cd 03 	sts	0x03CD, r26	; 0x8003cd <__brkval>
    6684:	df 91       	pop	r29
    6686:	cf 91       	pop	r28
    6688:	08 95       	ret

0000668a <abort>:
    668a:	81 e0       	ldi	r24, 0x01	; 1
    668c:	90 e0       	ldi	r25, 0x00	; 0
    668e:	f8 94       	cli
    6690:	0c 94 70 33 	jmp	0x66e0	; 0x66e0 <__do_global_dtors>

00006694 <memcpy_P>:
    6694:	fb 01       	movw	r30, r22
    6696:	dc 01       	movw	r26, r24
    6698:	02 c0       	rjmp	.+4      	; 0x669e <memcpy_P+0xa>
    669a:	05 90       	lpm	r0, Z+
    669c:	0d 92       	st	X+, r0
    669e:	41 50       	subi	r20, 0x01	; 1
    66a0:	50 40       	sbci	r21, 0x00	; 0
    66a2:	d8 f7       	brcc	.-10     	; 0x669a <memcpy_P+0x6>
    66a4:	08 95       	ret

000066a6 <memset>:
    66a6:	dc 01       	movw	r26, r24
    66a8:	01 c0       	rjmp	.+2      	; 0x66ac <memset+0x6>
    66aa:	6d 93       	st	X+, r22
    66ac:	41 50       	subi	r20, 0x01	; 1
    66ae:	50 40       	sbci	r21, 0x00	; 0
    66b0:	e0 f7       	brcc	.-8      	; 0x66aa <memset+0x4>
    66b2:	08 95       	ret

000066b4 <eeprom_read_byte>:
    66b4:	f9 99       	sbic	0x1f, 1	; 31
    66b6:	fe cf       	rjmp	.-4      	; 0x66b4 <eeprom_read_byte>
    66b8:	92 bd       	out	0x22, r25	; 34
    66ba:	81 bd       	out	0x21, r24	; 33
    66bc:	f8 9a       	sbi	0x1f, 0	; 31
    66be:	99 27       	eor	r25, r25
    66c0:	80 b5       	in	r24, 0x20	; 32
    66c2:	08 95       	ret

000066c4 <eeprom_write_byte>:
    66c4:	26 2f       	mov	r18, r22

000066c6 <eeprom_write_r18>:
    66c6:	f9 99       	sbic	0x1f, 1	; 31
    66c8:	fe cf       	rjmp	.-4      	; 0x66c6 <eeprom_write_r18>
    66ca:	1f ba       	out	0x1f, r1	; 31
    66cc:	92 bd       	out	0x22, r25	; 34
    66ce:	81 bd       	out	0x21, r24	; 33
    66d0:	20 bd       	out	0x20, r18	; 32
    66d2:	0f b6       	in	r0, 0x3f	; 63
    66d4:	f8 94       	cli
    66d6:	fa 9a       	sbi	0x1f, 2	; 31
    66d8:	f9 9a       	sbi	0x1f, 1	; 31
    66da:	0f be       	out	0x3f, r0	; 63
    66dc:	01 96       	adiw	r24, 0x01	; 1
    66de:	08 95       	ret

000066e0 <__do_global_dtors>:
    66e0:	19 e0       	ldi	r17, 0x09	; 9
    66e2:	c6 e8       	ldi	r28, 0x86	; 134
    66e4:	d9 e0       	ldi	r29, 0x09	; 9
    66e6:	04 c0       	rjmp	.+8      	; 0x66f0 <__do_global_dtors+0x10>
    66e8:	fe 01       	movw	r30, r28
    66ea:	0e 94 1e 32 	call	0x643c	; 0x643c <__tablejump2__>
    66ee:	21 96       	adiw	r28, 0x01	; 1
    66f0:	c7 38       	cpi	r28, 0x87	; 135
    66f2:	d1 07       	cpc	r29, r17
    66f4:	c9 f7       	brne	.-14     	; 0x66e8 <__do_global_dtors+0x8>
    66f6:	f8 94       	cli

000066f8 <__stop_program>:
    66f8:	ff cf       	rjmp	.-2      	; 0x66f8 <__stop_program>
